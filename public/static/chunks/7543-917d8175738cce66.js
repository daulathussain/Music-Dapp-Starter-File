(self.webpackChunk_N_E = self.webpackChunk_N_E || []).push([
    [7543], {
        505: function(t, r, a) {
            "use strict";
            a.d(r, {
                UQ: function() {
                    return Q
                },
                VY: function() {
                    return e_
                },
                h4: function() {
                    return eb
                },
                ck: function() {
                    return ev
                },
                fC: function() {
                    return eg
                },
                xz: function() {
                    return ew
                }
            });
            var s = a(84477),
                l = a(97352),
                c = a(87992),
                d = a(49474),
                u = a(92634),
                m = a(28085),
                p = a(43979),
                h = a(54065),
                f = a(13964),
                y = a(53511),
                b = a(17413);
            let C = "Collapsible",
                [E, j] = (0, c.b)(C),
                [I, O] = E(C),
                P = (0, l.forwardRef)((t, r) => {
                    let {
                        __scopeCollapsible: a,
                        open: c,
                        defaultOpen: d,
                        disabled: u,
                        onOpenChange: m,
                        ...f
                    } = t, [y = !1, C] = (0, p.T)({
                        prop: c,
                        defaultProp: d,
                        onChange: m
                    });
                    return (0, l.createElement)(I, {
                        scope: a,
                        disabled: u,
                        contentId: (0, b.M)(),
                        open: y,
                        onOpenToggle: (0, l.useCallback)(() => C(t => !t), [C])
                    }, (0, l.createElement)(h.WV.div, (0, s.Z)({
                        "data-state": $409067139f391064$var$getState(y),
                        "data-disabled": u ? "" : void 0
                    }, f, {
                        ref: r
                    })))
                }),
                R = (0, l.forwardRef)((t, r) => {
                    let {
                        __scopeCollapsible: a,
                        ...c
                    } = t, d = O("CollapsibleTrigger", a);
                    return (0, l.createElement)(h.WV.button, (0, s.Z)({
                        type: "button",
                        "aria-controls": d.contentId,
                        "aria-expanded": d.open || !1,
                        "data-state": $409067139f391064$var$getState(d.open),
                        "data-disabled": d.disabled ? "" : void 0,
                        disabled: d.disabled
                    }, c, {
                        ref: r,
                        onClick: (0, m.M)(t.onClick, d.onOpenToggle)
                    }))
                }),
                F = "CollapsibleContent",
                W = (0, l.forwardRef)((t, r) => {
                    let {
                        forceMount: a,
                        ...c
                    } = t, d = O(F, t.__scopeCollapsible);
                    return (0, l.createElement)(y.z, {
                        present: a || d.open
                    }, ({
                        present: t
                    }) => (0, l.createElement)(M, (0, s.Z)({}, c, {
                        ref: r,
                        present: t
                    })))
                }),
                M = (0, l.forwardRef)((t, r) => {
                    let {
                        __scopeCollapsible: a,
                        present: c,
                        children: d,
                        ...m
                    } = t, p = O(F, a), [y, b] = (0, l.useState)(c), C = (0, l.useRef)(null), E = (0, u.e)(r, C), j = (0, l.useRef)(0), I = j.current, P = (0, l.useRef)(0), R = P.current, W = p.open || y, M = (0, l.useRef)(W), D = (0, l.useRef)();
                    return (0, l.useEffect)(() => {
                        let t = requestAnimationFrame(() => M.current = !1);
                        return () => cancelAnimationFrame(t)
                    }, []), (0, f.b)(() => {
                        let t = C.current;
                        if (t) {
                            D.current = D.current || {
                                transitionDuration: t.style.transitionDuration,
                                animationName: t.style.animationName
                            }, t.style.transitionDuration = "0s", t.style.animationName = "none";
                            let r = t.getBoundingClientRect();
                            j.current = r.height, P.current = r.width, M.current || (t.style.transitionDuration = D.current.transitionDuration, t.style.animationName = D.current.animationName), b(c)
                        }
                    }, [p.open, c]), (0, l.createElement)(h.WV.div, (0, s.Z)({
                        "data-state": $409067139f391064$var$getState(p.open),
                        "data-disabled": p.disabled ? "" : void 0,
                        id: p.contentId,
                        hidden: !W
                    }, m, {
                        ref: E,
                        style: {
                            "--radix-collapsible-content-height": I ? `${I}px` : void 0,
                            "--radix-collapsible-content-width": R ? `${R}px` : void 0,
                            ...t.style
                        }
                    }), W && d)
                });

            function $409067139f391064$var$getState(t) {
                return t ? "open" : "closed"
            }
            var D = a(70776);
            let L = "Accordion",
                U = ["Home", "End", "ArrowDown", "ArrowUp", "ArrowLeft", "ArrowRight"],
                [B, $, K] = (0, d.B)(L),
                [G, J] = (0, c.b)(L, [K, j]),
                Y = j(),
                Q = l.forwardRef((t, r) => {
                    let {
                        type: a,
                        ...c
                    } = t;
                    return l.createElement(B.Provider, {
                        scope: t.__scopeAccordion
                    }, "multiple" === a ? l.createElement(ei, (0, s.Z)({}, c, {
                        ref: r
                    })) : l.createElement(ea, (0, s.Z)({}, c, {
                        ref: r
                    })))
                });
            Q.propTypes = {
                type(t) {
                    let r = t.value || t.defaultValue;
                    return t.type && !["single", "multiple"].includes(t.type) ? Error("Invalid prop `type` supplied to `Accordion`. Expected one of `single | multiple`.") : "multiple" === t.type && "string" == typeof r ? Error("Invalid prop `type` supplied to `Accordion`. Expected `single` when `defaultValue` or `value` is type `string`.") : "single" === t.type && Array.isArray(r) ? Error("Invalid prop `type` supplied to `Accordion`. Expected `multiple` when `defaultValue` or `value` is type `string[]`.") : null
                }
            };
            let [ee, et] = G(L), [en, er] = G(L, {
                collapsible: !1
            }), ea = l.forwardRef((t, r) => {
                let {
                    value: a,
                    defaultValue: c,
                    onValueChange: d = () => {},
                    collapsible: u = !1,
                    ...m
                } = t, [h, f] = (0, p.T)({
                    prop: a,
                    defaultProp: c,
                    onChange: d
                });
                return l.createElement(ee, {
                    scope: t.__scopeAccordion,
                    value: h ? [h] : [],
                    onItemOpen: f,
                    onItemClose: l.useCallback(() => u && f(""), [u, f])
                }, l.createElement(en, {
                    scope: t.__scopeAccordion,
                    collapsible: u
                }, l.createElement(el, (0, s.Z)({}, m, {
                    ref: r
                }))))
            }), ei = l.forwardRef((t, r) => {
                let {
                    value: a,
                    defaultValue: c,
                    onValueChange: d = () => {},
                    ...u
                } = t, [m = [], h] = (0, p.T)({
                    prop: a,
                    defaultProp: c,
                    onChange: d
                }), f = l.useCallback(t => h((r = []) => [...r, t]), [h]), y = l.useCallback(t => h((r = []) => r.filter(r => r !== t)), [h]);
                return l.createElement(ee, {
                    scope: t.__scopeAccordion,
                    value: m,
                    onItemOpen: f,
                    onItemClose: y
                }, l.createElement(en, {
                    scope: t.__scopeAccordion,
                    collapsible: !0
                }, l.createElement(el, (0, s.Z)({}, u, {
                    ref: r
                }))))
            }), [eo, es] = G(L), el = l.forwardRef((t, r) => {
                let {
                    __scopeAccordion: a,
                    disabled: c,
                    dir: d,
                    orientation: p = "vertical",
                    ...f
                } = t, y = l.useRef(null), b = (0, u.e)(y, r), C = $(a), E = (0, D.gm)(d), j = "ltr" === E, I = (0, m.M)(t.onKeyDown, t => {
                    var r;
                    if (!U.includes(t.key)) return;
                    let a = t.target,
                        s = C().filter(t => {
                            var r;
                            return !(null !== (r = t.ref.current) && void 0 !== r && r.disabled)
                        }),
                        l = s.findIndex(t => t.ref.current === a),
                        c = s.length;
                    if (-1 === l) return;
                    t.preventDefault();
                    let d = l,
                        u = c - 1,
                        moveNext = () => {
                            (d = l + 1) > u && (d = 0)
                        },
                        movePrev = () => {
                            (d = l - 1) < 0 && (d = u)
                        };
                    switch (t.key) {
                        case "Home":
                            d = 0;
                            break;
                        case "End":
                            d = u;
                            break;
                        case "ArrowRight":
                            "horizontal" === p && (j ? moveNext() : movePrev());
                            break;
                        case "ArrowDown":
                            "vertical" === p && moveNext();
                            break;
                        case "ArrowLeft":
                            "horizontal" === p && (j ? movePrev() : moveNext());
                            break;
                        case "ArrowUp":
                            "vertical" === p && movePrev()
                    }
                    let m = d % c;
                    null === (r = s[m].ref.current) || void 0 === r || r.focus()
                });
                return l.createElement(eo, {
                    scope: a,
                    disabled: c,
                    direction: d,
                    orientation: p
                }, l.createElement(B.Slot, {
                    scope: a
                }, l.createElement(h.WV.div, (0, s.Z)({}, f, {
                    "data-orientation": p,
                    ref: b,
                    onKeyDown: c ? void 0 : I
                }))))
            }), ec = "AccordionItem", [ed, eu] = G(ec), em = l.forwardRef((t, r) => {
                let {
                    __scopeAccordion: a,
                    value: c,
                    ...d
                } = t, u = es(ec, a), m = et(ec, a), p = Y(a), h = (0, b.M)(), f = c && m.value.includes(c) || !1, y = u.disabled || t.disabled;
                return l.createElement(ed, {
                    scope: a,
                    open: f,
                    disabled: y,
                    triggerId: h
                }, l.createElement(P, (0, s.Z)({
                    "data-orientation": u.orientation,
                    "data-state": f ? "open" : "closed"
                }, p, d, {
                    ref: r,
                    disabled: y,
                    open: f,
                    onOpenChange: t => {
                        t ? m.onItemOpen(c) : m.onItemClose(c)
                    }
                })))
            }), ep = l.forwardRef((t, r) => {
                let {
                    __scopeAccordion: a,
                    ...c
                } = t, d = es(L, a), u = eu("AccordionHeader", a);
                return l.createElement(h.WV.h3, (0, s.Z)({
                    "data-orientation": d.orientation,
                    "data-state": u.open ? "open" : "closed",
                    "data-disabled": u.disabled ? "" : void 0
                }, c, {
                    ref: r
                }))
            }), eh = "AccordionTrigger", ef = l.forwardRef((t, r) => {
                let {
                    __scopeAccordion: a,
                    ...c
                } = t, d = es(L, a), u = eu(eh, a), m = er(eh, a), p = Y(a);
                return l.createElement(B.ItemSlot, {
                    scope: a
                }, l.createElement(R, (0, s.Z)({
                    "aria-disabled": u.open && !m.collapsible || void 0,
                    "data-orientation": d.orientation,
                    id: u.triggerId
                }, p, c, {
                    ref: r
                })))
            }), ey = l.forwardRef((t, r) => {
                let {
                    __scopeAccordion: a,
                    ...c
                } = t, d = es(L, a), u = eu("AccordionContent", a), m = Y(a);
                return l.createElement(W, (0, s.Z)({
                    role: "region",
                    "aria-labelledby": u.triggerId,
                    "data-orientation": d.orientation
                }, m, c, {
                    ref: r,
                    style: {
                        "--radix-accordion-content-height": "var(--radix-collapsible-content-height)",
                        "--radix-accordion-content-width": "var(--radix-collapsible-content-width)",
                        ...t.style
                    }
                }))
            }), eg = Q, ev = em, eb = ep, ew = ef, e_ = ey
        },
        27875: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "fal",
                iconName: "pencil",
                icon: [512, 512, [9999, 61504, "pencil-alt"], "f303", "M395.8 39.6c9.4-9.4 24.6-9.4 33.9 0l42.6 42.6c9.4 9.4 9.4 24.6 0 33.9L417.6 171 341 94.4l54.8-54.8zM318.4 117L395 193.6l-219 219V400c0-8.8-7.2-16-16-16H128V352c0-8.8-7.2-16-16-16H99.4l219-219zM66.9 379.5c1.2-4 2.7-7.9 4.7-11.5H96v32c0 8.8 7.2 16 16 16h32v24.4c-3.7 1.9-7.5 3.5-11.6 4.7L39.6 472.4l27.3-92.8zM452.4 17c-21.9-21.9-57.3-21.9-79.2 0L60.4 329.7c-11.4 11.4-19.7 25.4-24.2 40.8L.7 491.5c-1.7 5.6-.1 11.7 4 15.8s10.2 5.7 15.8 4l121-35.6c15.4-4.5 29.4-12.9 40.8-24.2L495 138.8c21.9-21.9 21.9-57.3 0-79.2L452.4 17zM331.3 202.7c6.2-6.2 6.2-16.4 0-22.6s-16.4-6.2-22.6 0l-128 128c-6.2 6.2-6.2 16.4 0 22.6s16.4 6.2 22.6 0l128-128z"]
            }, r.Tz = r.DF
        },
        7816: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "far",
                iconName: "arrow-left",
                icon: [448, 512, [8592], "f060", "M447.1 256c0 13.25-10.76 24.01-24.01 24.01H83.9l132.7 126.6c9.625 9.156 9.969 24.41 .8125 33.94c-9.156 9.594-24.34 9.938-33.94 .8125l-176-168C2.695 268.9 .0078 262.6 .0078 256S2.695 243.2 7.445 238.6l176-168C193 61.51 208.2 61.85 217.4 71.45c9.156 9.5 8.812 24.75-.8125 33.94l-132.7 126.6h340.1C437.2 232 447.1 242.8 447.1 256z"]
            }, r.ac = r.DF
        },
        53718: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "far",
                iconName: "arrow-right",
                icon: [448, 512, [8594], "f061", "M264.6 70.63l176 168c4.75 4.531 7.438 10.81 7.438 17.38s-2.688 12.84-7.438 17.38l-176 168c-9.594 9.125-24.78 8.781-33.94-.8125c-9.156-9.5-8.812-24.75 .8125-33.94l132.7-126.6H24.01c-13.25 0-24.01-10.76-24.01-24.01s10.76-23.99 24.01-23.99h340.1l-132.7-126.6C221.8 96.23 221.5 80.98 230.6 71.45C239.8 61.85 254.1 61.51 264.6 70.63z"]
            }, r.eF = r.DF
        },
        14016: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "far",
                iconName: "arrow-up-from-bracket",
                icon: [448, 512, [], "e09a", "M424 320c13.25 0 24 10.75 24 24V416c0 53.02-42.98 96-96 96H96c-53.02 0-96-42.98-96-96v-72C0 330.7 10.74 320 24 320c13.25 0 24 10.75 24 24V416c0 26.4 21.6 48 48 48h256c26.4 0 48-21.6 48-48v-72C400 330.7 410.7 320 424 320zM207.6 6.539l-136 127.1C61.88 143.6 61.44 158.8 70.53 168.4c9.062 9.656 24.25 10.12 33.91 1.031L200 79.56v248.4C200 341.3 210.8 352 224 352s24-10.75 24-23.1V79.56l95.56 89.92c9.656 9.094 24.84 8.625 33.91-1.031C381.8 163.8 384 157.9 384 152c0-6.375-2.531-12.75-7.562-17.47l-136-127.1C231.2-2.18 216.8-2.18 207.6 6.539z"]
            }, r.A$ = r.DF
        },
        66229: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "far",
                iconName: "circle",
                icon: [512, 512, [128308, 128309, 128992, 128993, 128994, 128995, 128996, 9679, 9898, 9899, 11044, 61708, 61915], "f111", "M512 256C512 397.4 397.4 512 256 512C114.6 512 0 397.4 0 256C0 114.6 114.6 0 256 0C397.4 0 512 114.6 512 256zM256 48C141.1 48 48 141.1 48 256C48 370.9 141.1 464 256 464C370.9 464 464 370.9 464 256C464 141.1 370.9 48 256 48z"]
            }, r.di = r.DF
        },
        77760: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "far",
                iconName: "circle-arrow-up",
                icon: [512, 512, ["arrow-circle-up"], "f0aa", "M273.6 119.7C269 114.8 262.7 112 256 112S242.1 114.8 238.4 119.7l-104 112c-9 9.719-8.438 24.91 1.25 33.94c9.719 9 24.88 8.469 33.94-1.25L232 197.1V368c0 13.25 10.75 24 24 24s24-10.75 24-24V197.1l62.41 67.21c9.062 9.719 24.22 10.25 33.94 1.25c9.688-9.031 10.25-24.22 1.25-33.94L273.6 119.7zM256 0C114.6 0 0 114.6 0 256s114.6 256 256 256s256-114.6 256-256S397.4 0 256 0zM256 464c-114.7 0-208-93.31-208-208S141.3 48 256 48s208 93.31 208 208S370.7 464 256 464z"]
            }, r.$w = r.DF
        },
        74371: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "far",
                iconName: "comment",
                icon: [512, 512, [128489, 61669], "f075", "M256 32C114.6 32 .0272 125.1 .0272 240c0 47.63 19.91 91.25 52.91 126.2c-14.88 39.5-45.87 72.88-46.37 73.25c-6.625 7-8.375 17.25-4.625 26C5.818 474.2 14.38 480 24 480c61.5 0 109.1-25.75 139.1-46.25C191.1 442.8 223.3 448 256 448c141.4 0 255.1-93.13 255.1-208S397.4 32 256 32zM256.1 400c-26.75 0-53.12-4.125-78.38-12.12l-22.75-7.125l-19.5 13.75c-14.25 10.12-33.88 21.38-57.5 29c7.375-12.12 14.37-25.75 19.88-40.25l10.62-28l-20.62-21.87C69.82 314.1 48.07 282.2 48.07 240c0-88.25 93.25-160 208-160s208 71.75 208 160S370.8 400 256.1 400z"]
            }, r.Mz = r.DF
        },
        73304: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "far",
                iconName: "ellipsis",
                icon: [448, 512, ["ellipsis-h"], "f141", "M336 256C336 229.5 357.5 208 384 208C410.5 208 432 229.5 432 256C432 282.5 410.5 304 384 304C357.5 304 336 282.5 336 256zM176 256C176 229.5 197.5 208 224 208C250.5 208 272 229.5 272 256C272 282.5 250.5 304 224 304C197.5 304 176 282.5 176 256zM112 256C112 282.5 90.51 304 64 304C37.49 304 16 282.5 16 256C16 229.5 37.49 208 64 208C90.51 208 112 229.5 112 256z"]
            }, r.S6 = r.DF
        },
        2438: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "far",
                iconName: "gift",
                icon: [512, 512, [127873], "f06b", "M256 85.46L280.1 44.45C296.3 16.91 325.9 0 357.8 0H360C408.6 0 448 39.4 448 88C448 102.4 444.5 115.1 438.4 128H464C490.5 128 512 149.5 512 176V240C512 260.9 498.6 278.7 480 285.3V448C480 483.3 451.3 512 416 512H96C60.65 512 32 483.3 32 448V285.3C13.36 278.7 0 260.9 0 240V176C0 149.5 21.49 128 48 128H73.6C67.46 115.1 64 102.4 64 88C64 39.4 103.4 0 152 0H154.2C186.1 0 215.7 16.91 231.9 44.45L256 85.46zM288 176V240H464V176H288zM224 176H48V240H224V176zM224 288H80V448C80 456.8 87.16 464 96 464H224V288zM288 464H416C424.8 464 432 456.8 432 448V288H288V464zM360 128C382.1 128 400 110.1 400 88C400 65.91 382.1 48 360 48H357.8C342.9 48 329.1 55.91 321.5 68.78L286.7 128H360zM225.3 128L190.5 68.78C182.9 55.91 169.1 48 154.2 48H152C129.9 48 112 65.91 112 88C112 110.1 129.9 128 152 128H225.3z"]
            }, r.Cl = r.DF
        },
        15876: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "far",
                iconName: "heart",
                icon: [512, 512, [128153, 128154, 128155, 128156, 128420, 129293, 129294, 129505, 9829, 10084, 61578], "f004", "M244 84L255.1 96L267.1 84.02C300.6 51.37 347 36.51 392.6 44.1C461.5 55.58 512 115.2 512 185.1V190.9C512 232.4 494.8 272.1 464.4 300.4L283.7 469.1C276.2 476.1 266.3 480 256 480C245.7 480 235.8 476.1 228.3 469.1L47.59 300.4C17.23 272.1 0 232.4 0 190.9V185.1C0 115.2 50.52 55.58 119.4 44.1C164.1 36.51 211.4 51.37 244 84C243.1 84 244 84.01 244 84L244 84zM255.1 163.9L210.1 117.1C188.4 96.28 157.6 86.4 127.3 91.44C81.55 99.07 48 138.7 48 185.1V190.9C48 219.1 59.71 246.1 80.34 265.3L256 429.3L431.7 265.3C452.3 246.1 464 219.1 464 190.9V185.1C464 138.7 430.4 99.07 384.7 91.44C354.4 86.4 323.6 96.28 301.9 117.1L255.1 163.9z"]
            }, r.m6 = r.DF
        },
        59630: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "far",
                iconName: "list-music",
                icon: [512, 512, [], "f8c9", "M24 95.97h240c13.25 0 24-10.75 24-24s-10.75-24-24-24h-240c-13.25 0-24 10.75-24 24S10.75 95.97 24 95.97zM498.8 6.162c-8.25-6.125-18.69-7.699-28.44-4.699l-112 35.38C345.1 41.09 336 53.34 336 67.34v299.1c-18.12-9.125-40.13-14.5-64-14.5c-61.88 0-112 35.88-112 80C160 476.1 210.1 512 272 512s112-35.88 112-80V195.4l105.6-33.38C503 157.7 512 145.5 512 131.5V31.96C512 21.71 507.1 12.16 498.8 6.162zM272 463.1c-39.75 0-64-20.75-64-31.1c0-11.25 24.25-32 64-32s64 20.75 64 32C336 443.2 311.8 463.1 272 463.1zM464 119.7L384 144.1V79.09l80-25.25V119.7zM24 223.1h240c13.25 0 24-10.75 24-24s-10.75-24-24-24h-240c-13.25 0-24 10.74-24 24S10.75 223.1 24 223.1zM136 303.1h-112c-13.25 0-24 10.75-24 24s10.75 24 24 24h112c13.25 0 24-10.75 24-24S149.3 303.1 136 303.1z"]
            }, r.zR = r.DF
        },
        49868: function(t, r) {
            "use strict";
            Object.defineProperty(r, "__esModule", {
                value: !0
            });
            var a = "magnifying-glass",
                s = [128269, "search"],
                l = "f002",
                c = "M504.1 471l-134-134C399.1 301.5 415.1 256.8 415.1 208c0-114.9-93.13-208-208-208S-.0002 93.13-.0002 208S93.12 416 207.1 416c48.79 0 93.55-16.91 129-45.04l134 134C475.7 509.7 481.9 512 488 512s12.28-2.344 16.97-7.031C514.3 495.6 514.3 480.4 504.1 471zM48 208c0-88.22 71.78-160 160-160s160 71.78 160 160s-71.78 160-160 160S48 296.2 48 208z";
            r.definition = {
                prefix: "far",
                iconName: a,
                icon: [512, 512, s, l, c]
            }, r.faMagnifyingGlass = r.definition, r.prefix = "far", r.iconName = a, r.width = 512, r.height = 512, r.ligatures = s, r.unicode = l, r.svgPathData = c, r.aliases = s
        },
        51274: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "far",
                iconName: "music",
                icon: [512, 512, [127925], "f001", "M480 0c-3.25 0-6.5 .4896-9.625 1.49l-304 96.01C153.1 101.8 144 114 144 128v235.1c-15-7.375-31.38-11.12-48-11.12C42.1 352 0 387.8 0 432S42.1 512 95.1 512c49.38 0 89.5-31.12 94.88-71.13c.75-2.75 1.123-5.95 1.123-8.825L192 256l272-85.88v129c-15-7.375-31.38-11.12-48.01-11.12c-53 0-95.1 35.75-95.1 79.1s42.1 79.1 95.1 79.1c49.38 0 89.51-31.25 95.01-71.13c.625-2.75 .875-5.5 1-8.25V31.99C512 14.36 497.8 0 480 0zM96 464c-28.25 0-48-16.88-48-32s19.75-32 48-32s48 16.88 48 32S124.2 464 96 464zM464 368c0 15.12-19.75 32-48 32s-48-16.88-48-32s19.75-32 48-32S464 352.9 464 368zM464 119.8L192 205.6V139.8l272-85.88V119.8z"]
            }, r.Xi = r.DF
        },
        35998: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "far",
                iconName: "square-star",
                icon: [448, 512, [], "e27f", "M224 121C230.1 121 235.7 124.5 238.3 129.9L269.6 193.2L339.5 203.4C345.5 204.3 350.5 208.5 352.4 214.3C354.3 220.1 352.7 226.4 348.3 230.7L297.8 279.1L309.7 349.6C310.7 355.6 308.3 361.6 303.4 365.2C298.4 368.8 291.9 369.3 286.5 366.4L224 333.6L161.5 366.4C156.1 369.3 149.6 368.8 144.6 365.2C139.7 361.6 137.3 355.6 138.3 349.6L150.2 279.1L99.66 230.7C95.3 226.4 93.73 220.1 95.61 214.3C97.49 208.5 102.5 204.3 108.5 203.4L178.4 193.2L209.7 129.9C212.3 124.5 217.9 121 224 121V121zM0 96C0 60.65 28.65 32 64 32H384C419.3 32 448 60.65 448 96V416C448 451.3 419.3 480 384 480H64C28.65 480 0 451.3 0 416V96zM48 96V416C48 424.8 55.16 432 64 432H384C392.8 432 400 424.8 400 416V96C400 87.16 392.8 80 384 80H64C55.16 80 48 87.16 48 96z"]
            }, r.mt = r.DF
        },
        94400: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "far",
                iconName: "star",
                icon: [576, 512, [11088, 61446], "f005", "M287.9 0C297.1 0 305.5 5.25 309.5 13.52L378.1 154.8L531.4 177.5C540.4 178.8 547.8 185.1 550.7 193.7C553.5 202.4 551.2 211.9 544.8 218.2L433.6 328.4L459.9 483.9C461.4 492.9 457.7 502.1 450.2 507.4C442.8 512.7 432.1 513.4 424.9 509.1L287.9 435.9L150.1 509.1C142.9 513.4 133.1 512.7 125.6 507.4C118.2 502.1 114.5 492.9 115.1 483.9L142.2 328.4L31.11 218.2C24.65 211.9 22.36 202.4 25.2 193.7C28.03 185.1 35.5 178.8 44.49 177.5L197.7 154.8L266.3 13.52C270.4 5.249 278.7 0 287.9 0L287.9 0zM287.9 78.95L235.4 187.2C231.9 194.3 225.1 199.3 217.3 200.5L98.98 217.9L184.9 303C190.4 308.5 192.9 316.4 191.6 324.1L171.4 443.7L276.6 387.5C283.7 383.7 292.2 383.7 299.2 387.5L404.4 443.7L384.2 324.1C382.9 316.4 385.5 308.5 391 303L476.9 217.9L358.6 200.5C350.7 199.3 343.9 194.3 340.5 187.2L287.9 78.95z"]
            }, r.T = r.DF
        },
        31460: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "far",
                iconName: "user-slash",
                icon: [640, 512, [], "f506", "M630.8 469.1l-277.1-217.9c54.69-14.56 95.18-63.95 95.18-123.2C447.1 57.31 390.7 0 319.1 0C250.2 0 193.7 55.93 192.3 125.4l-153.4-120.3C34.41 1.672 29.19 0 24.03 0C16.91 0 9.845 3.156 5.127 9.187C-3.061 19.62-1.248 34.72 9.189 42.89L601.2 506.9c10.5 8.203 25.56 6.328 33.69-4.078C643.1 492.4 641.2 477.3 630.8 469.1zM290.1 202.1L255.6 175C245.9 161.8 240 145.6 240 128c0-44.11 35.89-80 80-80s80 35.89 80 80c0 44.11-35.89 80-80 80C309.4 208 299.4 205.8 290.1 202.1zM144.1 464C152.9 400.9 206.8 352 272 352h53.75L264.9 304.3C170.1 307.1 96 385.2 96 480c0 17.67 14.33 32 32 32h384c4.938 0 9.477-1.324 13.65-3.322L468.6 464H144.1z"]
            }, r.wO = r.DF
        },
        2877: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "fas",
                iconName: "album",
                icon: [448, 512, [128189], "f89f", "M0 96C0 60.7 28.7 32 64 32H384c35.3 0 64 28.7 64 64V416c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V96zM384 256c0-88.4-71.6-160-160-160S64 167.6 64 256s71.6 160 160 160s160-71.6 160-160zM224 288c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z"]
            }, r.l_ = r.DF
        },
        28391: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "fas",
                iconName: "arrow-down-to-bracket",
                icon: [448, 512, [], "e094", "M374.6 214.6l-128 128c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L192 242.7V32c0-17.7 14.3-32 32-32s32 14.3 32 32V242.7l73.4-73.4c12.5-12.5 32.8-12.5 45.3 0s12.5 32.8 0 45.3zM64 352v64c0 17.7 14.3 32 32 32H352c17.7 0 32-14.3 32-32V352c0-17.7 14.3-32 32-32s32 14.3 32 32v64c0 53-43 96-96 96H96c-53 0-96-43-96-96V352c0-17.7 14.3-32 32-32s32 14.3 32 32z"]
            }, r.fu = r.DF
        },
        87355: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "fas",
                iconName: "bell",
                icon: [448, 512, [128276, 61602], "f0f3", "M224 0c-17.7 0-32 14.3-32 32V51.2C119 66 64 130.6 64 208v18.8c0 47-17.3 92.4-48.5 127.6l-7.4 8.3c-8.4 9.4-10.4 22.9-5.3 34.4S19.4 416 32 416H416c12.6 0 24-7.4 29.2-18.9s3.1-25-5.3-34.4l-7.4-8.3C401.3 319.2 384 273.9 384 226.8V208c0-77.4-55-142-128-156.8V32c0-17.7-14.3-32-32-32zm45.3 493.3c12-12 18.7-28.3 18.7-45.3H224 160c0 17 6.7 33.3 18.7 45.3s28.3 18.7 45.3 18.7s33.3-6.7 45.3-18.7z"]
            }, r.qm = r.DF
        },
        11795: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "fas",
                iconName: "circle-arrow-up",
                icon: [512, 512, ["arrow-circle-up"], "f0aa", "M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM385 215c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-71-71V392c0 13.3-10.7 24-24 24s-24-10.7-24-24V177.9l-71 71c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9L239 103c9.4-9.4 24.6-9.4 33.9 0L385 215z"]
            }, r.$w = r.DF
        },
        45879: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "fas",
                iconName: "circle-dot",
                icon: [512, 512, [128280, "dot-circle"], "f192", "M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zm0-160c-53 0-96-43-96-96s43-96 96-96s96 43 96 96s-43 96-96 96z"]
            }, r.W3 = r.DF
        },
        32885: function(t, r) {
            "use strict";
            Object.defineProperty(r, "__esModule", {
                value: !0
            });
            var a = "circle-pause",
                s = [62092, "pause-circle"],
                l = "f28b",
                c = "M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM224 192V320c0 17.7-14.3 32-32 32s-32-14.3-32-32V192c0-17.7 14.3-32 32-32s32 14.3 32 32zm128 0V320c0 17.7-14.3 32-32 32s-32-14.3-32-32V192c0-17.7 14.3-32 32-32s32 14.3 32 32z";
            r.definition = {
                prefix: "fas",
                iconName: a,
                icon: [512, 512, s, l, c]
            }, r.faCirclePause = r.definition, r.prefix = "fas", r.iconName = a, r.width = 512, r.height = 512, r.ligatures = s, r.unicode = l, r.svgPathData = c, r.aliases = s
        },
        96418: function(t, r) {
            "use strict";
            Object.defineProperty(r, "__esModule", {
                value: !0
            });
            var a = "circle-play",
                s = [61469, "play-circle"],
                l = "f144",
                c = "M512 256c0 141.4-114.6 256-256 256S0 397.4 0 256S114.6 0 256 0S512 114.6 512 256zM188.3 147.1c-7.6 4.2-12.3 12.3-12.3 20.9V344c0 8.7 4.7 16.7 12.3 20.9s16.8 4.1 24.3-.5l144-88c7.1-4.4 11.5-12.1 11.5-20.5s-4.4-16.1-11.5-20.5l-144-88c-7.4-4.5-16.7-4.7-24.3-.5z";
            r.definition = {
                prefix: "fas",
                iconName: a,
                icon: [512, 512, s, l, c]
            }, r.faCirclePlay = r.definition, r.prefix = "fas", r.iconName = a, r.width = 512, r.height = 512, r.ligatures = s, r.unicode = l, r.svgPathData = c, r.aliases = s
        },
        21783: function(t, r) {
            "use strict";
            Object.defineProperty(r, "__esModule", {
                value: !0
            });
            var a = "circle-user",
                s = [62142, "user-circle"],
                l = "f2bd",
                c = "M399 384.2C376.9 345.8 335.4 320 288 320H224c-47.4 0-88.9 25.8-111 64.2c35.2 39.2 86.2 63.8 143 63.8s107.8-24.7 143-63.8zM512 256c0 141.4-114.6 256-256 256S0 397.4 0 256S114.6 0 256 0S512 114.6 512 256zM256 272c39.8 0 72-32.2 72-72s-32.2-72-72-72s-72 32.2-72 72s32.2 72 72 72z";
            r.definition = {
                prefix: "fas",
                iconName: a,
                icon: [512, 512, s, l, c]
            }, r.faCircleUser = r.definition, r.prefix = "fas", r.iconName = a, r.width = 512, r.height = 512, r.ligatures = s, r.unicode = l, r.svgPathData = c, r.aliases = s
        },
        36732: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "fas",
                iconName: "heart",
                icon: [512, 512, [128153, 128154, 128155, 128156, 128420, 129293, 129294, 129505, 9829, 10084, 61578], "f004", "M47.6 300.4L228.3 469.1c7.5 7 17.4 10.9 27.7 10.9s20.2-3.9 27.7-10.9L464.4 300.4c30.4-28.3 47.6-68 47.6-109.5v-5.8c0-69.9-50.5-129.5-119.4-141C347 36.5 300.6 51.4 268 84L256 96 244 84c-32.6-32.6-79-47.5-124.6-39.9C50.5 55.6 0 115.2 0 185.1v5.8c0 41.5 17.2 81.2 47.6 109.5z"]
            }, r.m6 = r.DF
        },
        43319: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "fas",
                iconName: "music",
                icon: [512, 512, [127925], "f001", "M499.1 6.3c8.1 6 12.9 15.6 12.9 25.7v72V368c0 44.2-43 80-96 80s-96-35.8-96-80s43-80 96-80c11.2 0 22 1.6 32 4.6V147L192 223.8V432c0 44.2-43 80-96 80s-96-35.8-96-80s43-80 96-80c11.2 0 22 1.6 32 4.6V200 128c0-14.1 9.3-26.6 22.8-30.7l320-96c9.7-2.9 20.2-1.1 28.3 5z"]
            }, r.Xi = r.DF
        },
        22528: function(t, r, a) {
            "use strict";
            var s = a(32885);
            r.DF = {
                prefix: s.prefix,
                iconName: s.iconName,
                icon: [s.width, s.height, s.aliases, s.unicode, s.svgPathData]
            }, r.ul = r.DF, s.prefix, s.iconName, s.width, s.height, s.aliases, s.unicode, s.svgPathData, s.aliases
        },
        94982: function(t, r, a) {
            "use strict";
            var s = a(96418);
            r.DF = {
                prefix: s.prefix,
                iconName: s.iconName,
                icon: [s.width, s.height, s.aliases, s.unicode, s.svgPathData]
            }, r.aQ = r.DF, s.prefix, s.iconName, s.width, s.height, s.aliases, s.unicode, s.svgPathData, s.aliases
        },
        80366: function(t, r) {
            "use strict";
            Object.defineProperty(r, "__esModule", {
                value: !0
            });
            var a = "rectangle",
                s = [9644, "rectangle-landscape"],
                l = "f2fa",
                c = "M0 128C0 92.7 28.7 64 64 64H448c35.3 0 64 28.7 64 64V384c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V128z";
            r.definition = {
                prefix: "fas",
                iconName: a,
                icon: [512, 512, s, l, c]
            }, r.faRectangle = r.definition, r.prefix = "fas", r.iconName = a, r.width = 512, r.height = 512, r.ligatures = s, r.unicode = l, r.svgPathData = c, r.aliases = s
        },
        22555: function(t, r, a) {
            "use strict";
            var s = a(80366);
            r.DF = {
                prefix: s.prefix,
                iconName: s.iconName,
                icon: [s.width, s.height, s.aliases, s.unicode, s.svgPathData]
            }, r.wP = r.DF, s.prefix, s.iconName, s.width, s.height, s.aliases, s.unicode, s.svgPathData, s.aliases
        },
        46801: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "fas",
                iconName: "rectangle-vertical",
                icon: [384, 512, ["rectangle-portrait"], "f2fb", "M320 0c35.3 0 64 28.7 64 64l0 384c0 35.3-28.7 64-64 64L64 512c-35.3 0-64-28.7-64-64L0 64C0 28.7 28.7 0 64 0L320 0z"]
            }, r.j8 = r.DF
        },
        64832: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "fas",
                iconName: "sparkles",
                icon: [512, 512, [10024], "f890", "M327.5 85.2c-4.5 1.7-7.5 6-7.5 10.8s3 9.1 7.5 10.8L384 128l21.2 56.5c1.7 4.5 6 7.5 10.8 7.5s9.1-3 10.8-7.5L448 128l56.5-21.2c4.5-1.7 7.5-6 7.5-10.8s-3-9.1-7.5-10.8L448 64 426.8 7.5C425.1 3 420.8 0 416 0s-9.1 3-10.8 7.5L384 64 327.5 85.2zM205.1 73.3c-2.6-5.7-8.3-9.3-14.5-9.3s-11.9 3.6-14.5 9.3L123.3 187.3 9.3 240C3.6 242.6 0 248.3 0 254.6s3.6 11.9 9.3 14.5l114.1 52.7L176 435.8c2.6 5.7 8.3 9.3 14.5 9.3s11.9-3.6 14.5-9.3l52.7-114.1 114.1-52.7c5.7-2.6 9.3-8.3 9.3-14.5s-3.6-11.9-9.3-14.5L257.8 187.4 205.1 73.3zM384 384l-56.5 21.2c-4.5 1.7-7.5 6-7.5 10.8s3 9.1 7.5 10.8L384 448l21.2 56.5c1.7 4.5 6 7.5 10.8 7.5s9.1-3 10.8-7.5L448 448l56.5-21.2c4.5-1.7 7.5-6 7.5-10.8s-3-9.1-7.5-10.8L448 384l-21.2-56.5c-1.7-4.5-6-7.5-10.8-7.5s-9.1 3-10.8 7.5L384 384z"]
            }, r.Jy = r.DF
        },
        62591: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "fas",
                iconName: "square",
                icon: [448, 512, [9632, 9723, 9724, 61590], "f0c8", "M0 96C0 60.7 28.7 32 64 32H384c35.3 0 64 28.7 64 64V416c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V96z"]
            }, r.pL = r.DF
        },
        70646: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "fas",
                iconName: "star",
                icon: [576, 512, [11088, 61446], "f005", "M316.9 18C311.6 7 300.4 0 288.1 0s-23.4 7-28.8 18L195 150.3 51.4 171.5c-12 1.8-22 10.2-25.7 21.7s-.7 24.2 7.9 32.7L137.8 329 113.2 474.7c-2 12 3 24.2 12.9 31.3s23 8 33.8 2.3l128.3-68.5 128.3 68.5c10.8 5.7 23.9 4.9 33.8-2.3s14.9-19.3 12.9-31.3L438.5 329 542.7 225.9c8.6-8.5 11.7-21.2 7.9-32.7s-13.7-19.9-25.7-21.7L381.2 150.3 316.9 18z"]
            }, r.T = r.DF
        },
        51247: function(t, r, a) {
            "use strict";
            var s = a(61918);
            r.DF = {
                prefix: s.prefix,
                iconName: s.iconName,
                icon: [s.width, s.height, s.aliases, s.unicode, s.svgPathData]
            }, r.NB = r.DF, s.prefix, s.iconName, s.width, s.height, s.aliases, s.unicode, s.svgPathData, s.aliases
        },
        54614: function(t, r, a) {
            "use strict";
            var s = a(21783);
            r.DF = {
                prefix: s.prefix,
                iconName: s.iconName,
                icon: [s.width, s.height, s.aliases, s.unicode, s.svgPathData]
            }, r.m0 = r.DF, s.prefix, s.iconName, s.width, s.height, s.aliases, s.unicode, s.svgPathData, s.aliases
        },
        97980: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "fas",
                iconName: "wallet",
                icon: [512, 512, [], "f555", "M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V192c0-35.3-28.7-64-64-64H80c-8.8 0-16-7.2-16-16s7.2-16 16-16H448c17.7 0 32-14.3 32-32s-14.3-32-32-32H64zM416 336c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z"]
            }, r.X5 = r.DF
        },
        98562: function(t, r, a) {
            "use strict";
            var s = a(34095);
            r.DF = {
                prefix: s.prefix,
                iconName: s.iconName,
                icon: [s.width, s.height, s.aliases, s.unicode, s.svgPathData]
            }, r.e7 = r.DF, s.prefix, s.iconName, s.width, s.height, s.aliases, s.unicode, s.svgPathData, s.aliases
        },
        61918: function(t, r) {
            "use strict";
            Object.defineProperty(r, "__esModule", {
                value: !0
            });
            var a = "xmark",
                s = [128473, 10005, 10006, 10060, 215, "close", "multiply", "remove", "times"],
                l = "f00d",
                c = "M310.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L160 210.7 54.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L114.7 256 9.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L160 301.3 265.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L205.3 256 310.6 150.6z";
            r.definition = {
                prefix: "fas",
                iconName: a,
                icon: [320, 512, s, l, c]
            }, r.faXmark = r.definition, r.prefix = "fas", r.iconName = a, r.width = 320, r.height = 512, r.ligatures = s, r.unicode = l, r.svgPathData = c, r.aliases = s
        },
        54049: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "fass",
                iconName: "circle-plus",
                icon: [512, 512, ["plus-circle"], "f055", "M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM232 368V344 280H168 144V232h24 64V168 144h48v24 64h64 24v48H344 280v64 24H232z"]
            }, r.EQ = r.DF
        },
        92127: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "far",
                iconName: "arrows-retweet",
                icon: [640, 512, ["retweet-alt"], "f361", "M145 71c-9.4-9.4-24.6-9.4-33.9 0L23 159c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l47-47V328c0 48.6 39.4 88 88 88H328c13.3 0 24-10.7 24-24s-10.7-24-24-24H192c-22.1 0-40-17.9-40-40V145.9l47 47c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9L145 71zM312 96c-13.3 0-24 10.7-24 24s10.7 24 24 24H448c22.1 0 40 17.9 40 40V366.1l-47-47c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9l88 88c9.4 9.4 24.6 9.4 33.9 0l88-88c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0l-47 47V184c0-48.6-39.4-88-88-88H312z"]
            }, r.u = r.DF
        },
        42178: function(t, r) {
            "use strict";
            r.DF = {
                prefix: "far",
                iconName: "pen-to-square",
                icon: [512, 512, ["edit"], "f044", "M441 58.9L453.1 71c9.4 9.4 9.4 24.6 0 33.9L424 134.1 377.9 88 407 58.9c9.4-9.4 24.6-9.4 33.9 0zM209.8 256.2L344 121.9 390.1 168 255.8 302.2c-2.9 2.9-6.5 5-10.4 6.1l-58.5 16.7 16.7-58.5c1.1-3.9 3.2-7.5 6.1-10.4zM373.1 25L175.8 222.2c-8.7 8.7-15 19.4-18.3 31.1l-28.6 100c-2.4 8.4-.1 17.4 6.1 23.6s15.2 8.5 23.6 6.1l100-28.6c11.8-3.4 22.5-9.7 31.1-18.3L487 138.9c28.1-28.1 28.1-73.7 0-101.8L474.9 25C446.8-3.1 401.2-3.1 373.1 25zM88 64C39.4 64 0 103.4 0 152V424c0 48.6 39.4 88 88 88H360c48.6 0 88-39.4 88-88V312c0-13.3-10.7-24-24-24s-24 10.7-24 24V424c0 22.1-17.9 40-40 40H88c-22.1 0-40-17.9-40-40V152c0-22.1 17.9-40 40-40H200c13.3 0 24-10.7 24-24s-10.7-24-24-24H88z"]
            }, r.Y = r.DF
        },
        74346: function(t, r, a) {
            "use strict";
            var s, l, c, d, u, m = a(9389);

            function _typeof(t) {
                return (_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                    return typeof t
                } : function(t) {
                    return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t
                })(t)
            }

            function _defineProperties(t, r) {
                for (var a = 0; a < r.length; a++) {
                    var s = r[a];
                    s.enumerable = s.enumerable || !1, s.configurable = !0, "value" in s && (s.writable = !0), Object.defineProperty(t, function(t) {
                        var r = function(t, r) {
                            if ("object" !== _typeof(t) || null === t) return t;
                            var a = t[Symbol.toPrimitive];
                            if (void 0 !== a) {
                                var s = a.call(t, r || "default");
                                if ("object" !== _typeof(s)) return s;
                                throw TypeError("@@toPrimitive must return a primitive value.")
                            }
                            return ("string" === r ? String : Number)(t)
                        }(t, "string");
                        return "symbol" === _typeof(r) ? r : String(r)
                    }(s.key), s)
                }
            }
            var p = a(66521).codes,
                h = p.ERR_AMBIGUOUS_ARGUMENT,
                f = p.ERR_INVALID_ARG_TYPE,
                y = p.ERR_INVALID_ARG_VALUE,
                b = p.ERR_INVALID_RETURN_VALUE,
                C = p.ERR_MISSING_ARGS,
                E = a(6781),
                j = a(32285).inspect,
                I = a(32285).types,
                O = I.isPromise,
                P = I.isRegExp,
                R = a(73422)(),
                F = a(98242)(),
                W = a(32645)("RegExp.prototype.test");

            function lazyLoadComparison() {
                var t = a(7449);
                d = t.isDeepEqual, u = t.isDeepStrictEqual
            }
            var M = !1,
                D = t.exports = ok,
                L = {};

            function innerFail(t) {
                if (t.message instanceof Error) throw t.message;
                throw new E(t)
            }

            function innerOk(t, r, a, s) {
                if (!a) {
                    var l = !1;
                    if (0 === r) l = !0, s = "No value argument passed to `assert.ok()`";
                    else if (s instanceof Error) throw s;
                    var c = new E({
                        actual: a,
                        expected: !0,
                        message: s,
                        operator: "==",
                        stackStartFn: t
                    });
                    throw c.generatedMessage = l, c
                }
            }

            function ok() {
                for (var t = arguments.length, r = Array(t), a = 0; a < t; a++) r[a] = arguments[a];
                innerOk.apply(void 0, [ok, r.length].concat(r))
            }
            D.fail = function fail(t, r, a, s, l) {
                var c, d = arguments.length;
                if (0 === d ? c = "Failed" : 1 === d ? (a = t, t = void 0) : (!1 === M && (M = !0, (m.emitWarning ? m.emitWarning : console.warn.bind(console))("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.", "DeprecationWarning", "DEP0094")), 2 === d && (s = "!=")), a instanceof Error) throw a;
                var u = {
                    actual: t,
                    expected: r,
                    operator: void 0 === s ? "fail" : s,
                    stackStartFn: l || fail
                };
                void 0 !== a && (u.message = a);
                var p = new E(u);
                throw c && (p.message = c, p.generatedMessage = !0), p
            }, D.AssertionError = E, D.ok = ok, D.equal = function equal(t, r, a) {
                if (arguments.length < 2) throw new C("actual", "expected");
                t != r && innerFail({
                    actual: t,
                    expected: r,
                    message: a,
                    operator: "==",
                    stackStartFn: equal
                })
            }, D.notEqual = function notEqual(t, r, a) {
                if (arguments.length < 2) throw new C("actual", "expected");
                t == r && innerFail({
                    actual: t,
                    expected: r,
                    message: a,
                    operator: "!=",
                    stackStartFn: notEqual
                })
            }, D.deepEqual = function deepEqual(t, r, a) {
                if (arguments.length < 2) throw new C("actual", "expected");
                void 0 === d && lazyLoadComparison(), d(t, r) || innerFail({
                    actual: t,
                    expected: r,
                    message: a,
                    operator: "deepEqual",
                    stackStartFn: deepEqual
                })
            }, D.notDeepEqual = function notDeepEqual(t, r, a) {
                if (arguments.length < 2) throw new C("actual", "expected");
                void 0 === d && lazyLoadComparison(), d(t, r) && innerFail({
                    actual: t,
                    expected: r,
                    message: a,
                    operator: "notDeepEqual",
                    stackStartFn: notDeepEqual
                })
            }, D.deepStrictEqual = function deepStrictEqual(t, r, a) {
                if (arguments.length < 2) throw new C("actual", "expected");
                void 0 === d && lazyLoadComparison(), u(t, r) || innerFail({
                    actual: t,
                    expected: r,
                    message: a,
                    operator: "deepStrictEqual",
                    stackStartFn: deepStrictEqual
                })
            }, D.notDeepStrictEqual = function notDeepStrictEqual(t, r, a) {
                if (arguments.length < 2) throw new C("actual", "expected");
                void 0 === d && lazyLoadComparison(), u(t, r) && innerFail({
                    actual: t,
                    expected: r,
                    message: a,
                    operator: "notDeepStrictEqual",
                    stackStartFn: notDeepStrictEqual
                })
            }, D.strictEqual = function strictEqual(t, r, a) {
                if (arguments.length < 2) throw new C("actual", "expected");
                F(t, r) || innerFail({
                    actual: t,
                    expected: r,
                    message: a,
                    operator: "strictEqual",
                    stackStartFn: strictEqual
                })
            }, D.notStrictEqual = function notStrictEqual(t, r, a) {
                if (arguments.length < 2) throw new C("actual", "expected");
                F(t, r) && innerFail({
                    actual: t,
                    expected: r,
                    message: a,
                    operator: "notStrictEqual",
                    stackStartFn: notStrictEqual
                })
            };
            var U = (s = function Comparison(t, r, a) {
                var s = this;
                (function(t, r) {
                    if (!(t instanceof r)) throw TypeError("Cannot call a class as a function")
                })(this, Comparison), r.forEach(function(r) {
                    r in t && (void 0 !== a && "string" == typeof a[r] && P(t[r]) && W(t[r], a[r]) ? s[r] = a[r] : s[r] = t[r])
                })
            }, l && _defineProperties(s.prototype, l), c && _defineProperties(s, c), Object.defineProperty(s, "prototype", {
                writable: !1
            }), s);

            function expectedException(t, r, a, s) {
                if ("function" != typeof r) {
                    if (P(r)) return W(r, t);
                    if (2 == arguments.length) throw new f("expected", ["Function", "RegExp"], r);
                    if ("object" !== _typeof(t) || null === t) {
                        var l = new E({
                            actual: t,
                            expected: r,
                            message: a,
                            operator: "deepStrictEqual",
                            stackStartFn: s
                        });
                        throw l.operator = s.name, l
                    }
                    var c = Object.keys(r);
                    if (r instanceof Error) c.push("name", "message");
                    else if (0 === c.length) throw new y("error", r, "may not be an empty object");
                    return void 0 === d && lazyLoadComparison(), c.forEach(function(l) {
                        "string" == typeof t[l] && P(r[l]) && W(r[l], t[l]) || function(t, r, a, s, l, c) {
                            if (!(a in t) || !u(t[a], r[a])) {
                                if (!s) {
                                    var d = new U(t, l),
                                        m = new U(r, l, t),
                                        p = new E({
                                            actual: d,
                                            expected: m,
                                            operator: "deepStrictEqual",
                                            stackStartFn: c
                                        });
                                    throw p.actual = t, p.expected = r, p.operator = c.name, p
                                }
                                innerFail({
                                    actual: t,
                                    expected: r,
                                    message: s,
                                    operator: c.name,
                                    stackStartFn: c
                                })
                            }
                        }(t, r, l, a, c, s)
                    }), !0
                }
                return void 0 !== r.prototype && t instanceof r || !Error.isPrototypeOf(r) && !0 === r.call({}, t)
            }

            function getActual(t) {
                if ("function" != typeof t) throw new f("fn", "Function", t);
                try {
                    t()
                } catch (t) {
                    return t
                }
                return L
            }

            function checkIsPromise(t) {
                return O(t) || null !== t && "object" === _typeof(t) && "function" == typeof t.then && "function" == typeof t.catch
            }

            function waitForActual(t) {
                return Promise.resolve().then(function() {
                    var r;
                    if ("function" == typeof t) {
                        if (!checkIsPromise(r = t())) throw new b("instance of Promise", "promiseFn", r)
                    } else if (checkIsPromise(t)) r = t;
                    else throw new f("promiseFn", ["Function", "Promise"], t);
                    return Promise.resolve().then(function() {
                        return r
                    }).then(function() {
                        return L
                    }).catch(function(t) {
                        return t
                    })
                })
            }

            function expectsError(t, r, a, s) {
                if ("string" == typeof a) {
                    if (4 == arguments.length) throw new f("error", ["Object", "Error", "Function", "RegExp"], a);
                    if ("object" === _typeof(r) && null !== r) {
                        if (r.message === a) throw new h("error/message", 'The error message "'.concat(r.message, '" is identical to the message.'))
                    } else if (r === a) throw new h("error/message", 'The error "'.concat(r, '" is identical to the message.'));
                    s = a, a = void 0
                } else if (null != a && "object" !== _typeof(a) && "function" != typeof a) throw new f("error", ["Object", "Error", "Function", "RegExp"], a);
                if (r === L) {
                    var l = "";
                    a && a.name && (l += " (".concat(a.name, ")")), l += s ? ": ".concat(s) : ".";
                    var c = "rejects" === t.name ? "rejection" : "exception";
                    innerFail({
                        actual: void 0,
                        expected: a,
                        operator: t.name,
                        message: "Missing expected ".concat(c).concat(l),
                        stackStartFn: t
                    })
                }
                if (a && !expectedException(r, a, s, t)) throw r
            }

            function expectsNoError(t, r, a, s) {
                if (r !== L) {
                    if ("string" == typeof a && (s = a, a = void 0), !a || expectedException(r, a)) {
                        var l = s ? ": ".concat(s) : ".",
                            c = "doesNotReject" === t.name ? "rejection" : "exception";
                        innerFail({
                            actual: r,
                            expected: a,
                            operator: t.name,
                            message: "Got unwanted ".concat(c).concat(l, "\n") + 'Actual message: "'.concat(r && r.message, '"'),
                            stackStartFn: t
                        })
                    }
                    throw r
                }
            }

            function internalMatch(t, r, a, s, l) {
                if (!P(r)) throw new f("regexp", "RegExp", r);
                var c = "match" === l;
                if ("string" != typeof t || W(r, t) !== c) {
                    if (a instanceof Error) throw a;
                    var d = !a;
                    a = a || ("string" != typeof t ? 'The "string" argument must be of type string. Received type ' + "".concat(_typeof(t), " (").concat(j(t), ")") : (c ? "The input did not match the regular expression " : "The input was expected to not match the regular expression ") + "".concat(j(r), ". Input:\n\n").concat(j(t), "\n"));
                    var u = new E({
                        actual: t,
                        expected: r,
                        message: a,
                        operator: l,
                        stackStartFn: s
                    });
                    throw u.generatedMessage = d, u
                }
            }
            D.throws = function throws(t) {
                for (var r = arguments.length, a = Array(r > 1 ? r - 1 : 0), s = 1; s < r; s++) a[s - 1] = arguments[s];
                expectsError.apply(void 0, [throws, getActual(t)].concat(a))
            }, D.rejects = function rejects(t) {
                for (var r = arguments.length, a = Array(r > 1 ? r - 1 : 0), s = 1; s < r; s++) a[s - 1] = arguments[s];
                return waitForActual(t).then(function(t) {
                    return expectsError.apply(void 0, [rejects, t].concat(a))
                })
            }, D.doesNotThrow = function doesNotThrow(t) {
                for (var r = arguments.length, a = Array(r > 1 ? r - 1 : 0), s = 1; s < r; s++) a[s - 1] = arguments[s];
                expectsNoError.apply(void 0, [doesNotThrow, getActual(t)].concat(a))
            }, D.doesNotReject = function doesNotReject(t) {
                for (var r = arguments.length, a = Array(r > 1 ? r - 1 : 0), s = 1; s < r; s++) a[s - 1] = arguments[s];
                return waitForActual(t).then(function(t) {
                    return expectsNoError.apply(void 0, [doesNotReject, t].concat(a))
                })
            }, D.ifError = function ifError(t) {
                if (null != t) {
                    var r = "ifError got unwanted exception: ";
                    "object" === _typeof(t) && "string" == typeof t.message ? 0 === t.message.length && t.constructor ? r += t.constructor.name : r += t.message : r += j(t);
                    var a = new E({
                            actual: t,
                            expected: null,
                            operator: "ifError",
                            message: r,
                            stackStartFn: ifError
                        }),
                        s = t.stack;
                    if ("string" == typeof s) {
                        var l = s.split("\n");
                        l.shift();
                        for (var c = a.stack.split("\n"), d = 0; d < l.length; d++) {
                            var u = c.indexOf(l[d]);
                            if (-1 !== u) {
                                c = c.slice(0, u);
                                break
                            }
                        }
                        a.stack = "".concat(c.join("\n"), "\n").concat(l.join("\n"))
                    }
                    throw a
                }
            }, D.match = function match(t, r, a) {
                internalMatch(t, r, a, match, "match")
            }, D.doesNotMatch = function doesNotMatch(t, r, a) {
                internalMatch(t, r, a, doesNotMatch, "doesNotMatch")
            }, D.strict = R(function strict() {
                for (var t = arguments.length, r = Array(t), a = 0; a < t; a++) r[a] = arguments[a];
                innerOk.apply(void 0, [strict, r.length].concat(r))
            }, D, {
                equal: D.strictEqual,
                deepEqual: D.deepStrictEqual,
                notEqual: D.notStrictEqual,
                notDeepEqual: D.notDeepStrictEqual
            }), D.strict.strict = D.strict
        },
        6781: function(t, r, a) {
            "use strict";
            var s = a(9389);

            function ownKeys(t, r) {
                var a = Object.keys(t);
                if (Object.getOwnPropertySymbols) {
                    var s = Object.getOwnPropertySymbols(t);
                    r && (s = s.filter(function(r) {
                        return Object.getOwnPropertyDescriptor(t, r).enumerable
                    })), a.push.apply(a, s)
                }
                return a
            }

            function _objectSpread(t) {
                for (var r = 1; r < arguments.length; r++) {
                    var a = null != arguments[r] ? arguments[r] : {};
                    r % 2 ? ownKeys(Object(a), !0).forEach(function(r) {
                        var s, l;
                        s = r, l = a[r], (s = _toPropertyKey(s)) in t ? Object.defineProperty(t, s, {
                            value: l,
                            enumerable: !0,
                            configurable: !0,
                            writable: !0
                        }) : t[s] = l
                    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(a)) : ownKeys(Object(a)).forEach(function(r) {
                        Object.defineProperty(t, r, Object.getOwnPropertyDescriptor(a, r))
                    })
                }
                return t
            }

            function _defineProperties(t, r) {
                for (var a = 0; a < r.length; a++) {
                    var s = r[a];
                    s.enumerable = s.enumerable || !1, s.configurable = !0, "value" in s && (s.writable = !0), Object.defineProperty(t, _toPropertyKey(s.key), s)
                }
            }

            function _toPropertyKey(t) {
                var r = function(t, r) {
                    if ("object" !== _typeof(t) || null === t) return t;
                    var a = t[Symbol.toPrimitive];
                    if (void 0 !== a) {
                        var s = a.call(t, r || "default");
                        if ("object" !== _typeof(s)) return s;
                        throw TypeError("@@toPrimitive must return a primitive value.")
                    }
                    return ("string" === r ? String : Number)(t)
                }(t, "string");
                return "symbol" === _typeof(r) ? r : String(r)
            }

            function _possibleConstructorReturn(t, r) {
                if (r && ("object" === _typeof(r) || "function" == typeof r)) return r;
                if (void 0 !== r) throw TypeError("Derived constructors may only return object or undefined");
                return _assertThisInitialized(t)
            }

            function _assertThisInitialized(t) {
                if (void 0 === t) throw ReferenceError("this hasn't been initialised - super() hasn't been called");
                return t
            }

            function _wrapNativeSuper(t) {
                var r = "function" == typeof Map ? new Map : void 0;
                return (_wrapNativeSuper = function(t) {
                    if (null === t || -1 === Function.toString.call(t).indexOf("[native code]")) return t;
                    if ("function" != typeof t) throw TypeError("Super expression must either be null or a function");
                    if (void 0 !== r) {
                        if (r.has(t)) return r.get(t);
                        r.set(t, Wrapper)
                    }

                    function Wrapper() {
                        return _construct(t, arguments, _getPrototypeOf(this).constructor)
                    }
                    return Wrapper.prototype = Object.create(t.prototype, {
                        constructor: {
                            value: Wrapper,
                            enumerable: !1,
                            writable: !0,
                            configurable: !0
                        }
                    }), _setPrototypeOf(Wrapper, t)
                })(t)
            }

            function _construct(t, r, a) {
                return (_construct = _isNativeReflectConstruct() ? Reflect.construct.bind() : function(t, r, a) {
                    var s = [null];
                    s.push.apply(s, r);
                    var l = new(Function.bind.apply(t, s));
                    return a && _setPrototypeOf(l, a.prototype), l
                }).apply(null, arguments)
            }

            function _isNativeReflectConstruct() {
                if ("undefined" == typeof Reflect || !Reflect.construct || Reflect.construct.sham) return !1;
                if ("function" == typeof Proxy) return !0;
                try {
                    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {})), !0
                } catch (t) {
                    return !1
                }
            }

            function _setPrototypeOf(t, r) {
                return (_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, r) {
                    return t.__proto__ = r, t
                })(t, r)
            }

            function _getPrototypeOf(t) {
                return (_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                    return t.__proto__ || Object.getPrototypeOf(t)
                })(t)
            }

            function _typeof(t) {
                return (_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                    return typeof t
                } : function(t) {
                    return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t
                })(t)
            }
            var l = a(32285).inspect,
                c = a(66521).codes.ERR_INVALID_ARG_TYPE;

            function endsWith(t, r, a) {
                return (void 0 === a || a > t.length) && (a = t.length), t.substring(a - r.length, a) === r
            }
            var d = "",
                u = "",
                m = "",
                p = "",
                h = {
                    deepStrictEqual: "Expected values to be strictly deep-equal:",
                    strictEqual: "Expected values to be strictly equal:",
                    strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
                    deepEqual: "Expected values to be loosely deep-equal:",
                    equal: "Expected values to be loosely equal:",
                    notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
                    notStrictEqual: 'Expected "actual" to be strictly unequal to:',
                    notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
                    notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
                    notEqual: 'Expected "actual" to be loosely unequal to:',
                    notIdentical: "Values identical but not reference-equal:"
                };

            function copyError(t) {
                var r = Object.keys(t),
                    a = Object.create(Object.getPrototypeOf(t));
                return r.forEach(function(r) {
                    a[r] = t[r]
                }), Object.defineProperty(a, "message", {
                    value: t.message
                }), a
            }

            function inspectValue(t) {
                return l(t, {
                    compact: !1,
                    customInspect: !1,
                    depth: 1e3,
                    maxArrayLength: 1 / 0,
                    showHidden: !1,
                    breakLength: 1 / 0,
                    showProxy: !1,
                    sorted: !0,
                    getters: !0
                })
            }
            var f = function(t, r) {
                ! function(t, r) {
                    if ("function" != typeof r && null !== r) throw TypeError("Super expression must either be null or a function");
                    t.prototype = Object.create(r && r.prototype, {
                        constructor: {
                            value: t,
                            writable: !0,
                            configurable: !0
                        }
                    }), Object.defineProperty(t, "prototype", {
                        writable: !1
                    }), r && _setPrototypeOf(t, r)
                }(AssertionError, t);
                var a, f, y, b = (a = _isNativeReflectConstruct(), function() {
                    var t, r = _getPrototypeOf(AssertionError);
                    if (a) {
                        var s = _getPrototypeOf(this).constructor;
                        t = Reflect.construct(r, arguments, s)
                    } else t = r.apply(this, arguments);
                    return _possibleConstructorReturn(this, t)
                });

                function AssertionError(t) {
                    if (! function(t, r) {
                            if (!(t instanceof r)) throw TypeError("Cannot call a class as a function")
                        }(this, AssertionError), "object" !== _typeof(t) || null === t) throw new c("options", "Object", t);
                    var r, a = t.message,
                        l = t.operator,
                        f = t.stackStartFn,
                        y = t.actual,
                        C = t.expected,
                        E = Error.stackTraceLimit;
                    if (Error.stackTraceLimit = 0, null != a) r = b.call(this, String(a));
                    else if (s.stderr && s.stderr.isTTY && (s.stderr && s.stderr.getColorDepth && 1 !== s.stderr.getColorDepth() ? (d = "\x1b[34m", u = "\x1b[32m", p = "\x1b[39m", m = "\x1b[31m") : (d = "", u = "", p = "", m = "")), "object" === _typeof(y) && null !== y && "object" === _typeof(C) && null !== C && "stack" in y && y instanceof Error && "stack" in C && C instanceof Error && (y = copyError(y), C = copyError(C)), "deepStrictEqual" === l || "strictEqual" === l) r = b.call(this, function(t, r, a) {
                        var l = "",
                            c = "",
                            f = 0,
                            y = "",
                            b = !1,
                            C = inspectValue(t),
                            E = C.split("\n"),
                            j = inspectValue(r).split("\n"),
                            I = 0,
                            O = "";
                        if ("strictEqual" === a && "object" === _typeof(t) && "object" === _typeof(r) && null !== t && null !== r && (a = "strictEqualObject"), 1 === E.length && 1 === j.length && E[0] !== j[0]) {
                            var P = E[0].length + j[0].length;
                            if (P <= 10) {
                                if (("object" !== _typeof(t) || null === t) && ("object" !== _typeof(r) || null === r) && (0 !== t || 0 !== r)) return "".concat(h[a], "\n\n") + "".concat(E[0], " !== ").concat(j[0], "\n")
                            } else if ("strictEqualObject" !== a && P < (s.stderr && s.stderr.isTTY ? s.stderr.columns : 80)) {
                                for (; E[0][I] === j[0][I];) I++;
                                I > 2 && (O = "\n  ".concat(function(t, r) {
                                    if (r = Math.floor(r), 0 == t.length || 0 == r) return "";
                                    var a = t.length * r;
                                    for (r = Math.floor(Math.log(r) / Math.log(2)); r;) t += t, r--;
                                    return t + t.substring(0, a - t.length)
                                }(" ", I), "^"), I = 0)
                            }
                        }
                        for (var R = E[E.length - 1], F = j[j.length - 1]; R === F && (I++ < 2 ? y = "\n  ".concat(R).concat(y) : l = R, E.pop(), j.pop(), 0 !== E.length && 0 !== j.length);) R = E[E.length - 1], F = j[j.length - 1];
                        var W = Math.max(E.length, j.length);
                        if (0 === W) {
                            var M = C.split("\n");
                            if (M.length > 30)
                                for (M[26] = "".concat(d, "...").concat(p); M.length > 27;) M.pop();
                            return "".concat(h.notIdentical, "\n\n").concat(M.join("\n"), "\n")
                        }
                        I > 3 && (y = "\n".concat(d, "...").concat(p).concat(y), b = !0), "" !== l && (y = "\n  ".concat(l).concat(y), l = "");
                        var D = 0,
                            L = h[a] + "\n".concat(u, "+ actual").concat(p, " ").concat(m, "- expected").concat(p),
                            U = " ".concat(d, "...").concat(p, " Lines skipped");
                        for (I = 0; I < W; I++) {
                            var B = I - f;
                            if (E.length < I + 1) B > 1 && I > 2 && (B > 4 ? (c += "\n".concat(d, "...").concat(p), b = !0) : B > 3 && (c += "\n  ".concat(j[I - 2]), D++), c += "\n  ".concat(j[I - 1]), D++), f = I, l += "\n".concat(m, "-").concat(p, " ").concat(j[I]), D++;
                            else if (j.length < I + 1) B > 1 && I > 2 && (B > 4 ? (c += "\n".concat(d, "...").concat(p), b = !0) : B > 3 && (c += "\n  ".concat(E[I - 2]), D++), c += "\n  ".concat(E[I - 1]), D++), f = I, c += "\n".concat(u, "+").concat(p, " ").concat(E[I]), D++;
                            else {
                                var $ = j[I],
                                    K = E[I],
                                    G = K !== $ && (!endsWith(K, ",") || K.slice(0, -1) !== $);
                                G && endsWith($, ",") && $.slice(0, -1) === K && (G = !1, K += ","), G ? (B > 1 && I > 2 && (B > 4 ? (c += "\n".concat(d, "...").concat(p), b = !0) : B > 3 && (c += "\n  ".concat(E[I - 2]), D++), c += "\n  ".concat(E[I - 1]), D++), f = I, c += "\n".concat(u, "+").concat(p, " ").concat(K), l += "\n".concat(m, "-").concat(p, " ").concat($), D += 2) : (c += l, l = "", (1 === B || 0 === I) && (c += "\n  ".concat(K), D++))
                            }
                            if (D > 20 && I < W - 2) return "".concat(L).concat(U, "\n").concat(c, "\n").concat(d, "...").concat(p).concat(l, "\n") + "".concat(d, "...").concat(p)
                        }
                        return "".concat(L).concat(b ? U : "", "\n").concat(c).concat(l).concat(y).concat(O)
                    }(y, C, l));
                    else if ("notDeepStrictEqual" === l || "notStrictEqual" === l) {
                        var j = h[l],
                            I = inspectValue(y).split("\n");
                        if ("notStrictEqual" === l && "object" === _typeof(y) && null !== y && (j = h.notStrictEqualObject), I.length > 30)
                            for (I[26] = "".concat(d, "...").concat(p); I.length > 27;) I.pop();
                        r = 1 === I.length ? b.call(this, "".concat(j, " ").concat(I[0])) : b.call(this, "".concat(j, "\n\n").concat(I.join("\n"), "\n"))
                    } else {
                        var O = inspectValue(y),
                            P = "",
                            R = h[l];
                        "notDeepEqual" === l || "notEqual" === l ? (O = "".concat(h[l], "\n\n").concat(O)).length > 1024 && (O = "".concat(O.slice(0, 1021), "...")) : (P = "".concat(inspectValue(C)), O.length > 512 && (O = "".concat(O.slice(0, 509), "...")), P.length > 512 && (P = "".concat(P.slice(0, 509), "...")), "deepEqual" === l || "equal" === l ? O = "".concat(R, "\n\n").concat(O, "\n\nshould equal\n\n") : P = " ".concat(l, " ").concat(P)), r = b.call(this, "".concat(O).concat(P))
                    }
                    return Error.stackTraceLimit = E, r.generatedMessage = !a, Object.defineProperty(_assertThisInitialized(r), "name", {
                        value: "AssertionError [ERR_ASSERTION]",
                        enumerable: !1,
                        writable: !0,
                        configurable: !0
                    }), r.code = "ERR_ASSERTION", r.actual = y, r.expected = C, r.operator = l, Error.captureStackTrace && Error.captureStackTrace(_assertThisInitialized(r), f), r.stack, r.name = "AssertionError", _possibleConstructorReturn(r)
                }
                return f = [{
                    key: "toString",
                    value: function() {
                        return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message)
                    }
                }, {
                    key: r,
                    value: function(t, r) {
                        return l(this, _objectSpread(_objectSpread({}, r), {}, {
                            customInspect: !1,
                            depth: 0
                        }))
                    }
                }], _defineProperties(AssertionError.prototype, f), y && _defineProperties(AssertionError, y), Object.defineProperty(AssertionError, "prototype", {
                    writable: !1
                }), AssertionError
            }(_wrapNativeSuper(Error), l.custom);
            t.exports = f
        },
        66521: function(t, r, a) {
            "use strict";

            function _typeof(t) {
                return (_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                    return typeof t
                } : function(t) {
                    return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t
                })(t)
            }

            function _defineProperties(t, r) {
                for (var a = 0; a < r.length; a++) {
                    var s = r[a];
                    s.enumerable = s.enumerable || !1, s.configurable = !0, "value" in s && (s.writable = !0), Object.defineProperty(t, function(t) {
                        var r = function(t, r) {
                            if ("object" !== _typeof(t) || null === t) return t;
                            var a = t[Symbol.toPrimitive];
                            if (void 0 !== a) {
                                var s = a.call(t, r || "default");
                                if ("object" !== _typeof(s)) return s;
                                throw TypeError("@@toPrimitive must return a primitive value.")
                            }
                            return ("string" === r ? String : Number)(t)
                        }(t, "string");
                        return "symbol" === _typeof(r) ? r : String(r)
                    }(s.key), s)
                }
            }

            function _setPrototypeOf(t, r) {
                return (_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, r) {
                    return t.__proto__ = r, t
                })(t, r)
            }

            function _getPrototypeOf(t) {
                return (_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
                    return t.__proto__ || Object.getPrototypeOf(t)
                })(t)
            }
            var s, l, c = {};

            function createErrorType(t, r, a) {
                a || (a = Error);
                var s = function(a) {
                    ! function(t, r) {
                        if ("function" != typeof r && null !== r) throw TypeError("Super expression must either be null or a function");
                        t.prototype = Object.create(r && r.prototype, {
                            constructor: {
                                value: t,
                                writable: !0,
                                configurable: !0
                            }
                        }), Object.defineProperty(t, "prototype", {
                            writable: !1
                        }), r && _setPrototypeOf(t, r)
                    }(NodeError, a);
                    var s, l, c, d = (s = function() {
                        if ("undefined" == typeof Reflect || !Reflect.construct || Reflect.construct.sham) return !1;
                        if ("function" == typeof Proxy) return !0;
                        try {
                            return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {})), !0
                        } catch (t) {
                            return !1
                        }
                    }(), function() {
                        var t, r = _getPrototypeOf(NodeError);
                        if (s) {
                            var a = _getPrototypeOf(this).constructor;
                            t = Reflect.construct(r, arguments, a)
                        } else t = r.apply(this, arguments);
                        return function(t, r) {
                            if (r && ("object" === _typeof(r) || "function" == typeof r)) return r;
                            if (void 0 !== r) throw TypeError("Derived constructors may only return object or undefined");
                            return function(t) {
                                if (void 0 === t) throw ReferenceError("this hasn't been initialised - super() hasn't been called");
                                return t
                            }(t)
                        }(this, t)
                    });

                    function NodeError(a, s, l) {
                        var c;
                        return ! function(t, r) {
                            if (!(t instanceof r)) throw TypeError("Cannot call a class as a function")
                        }(this, NodeError), (c = d.call(this, "string" == typeof r ? r : r(a, s, l))).code = t, c
                    }
                    return l && _defineProperties(NodeError.prototype, l), c && _defineProperties(NodeError, c), Object.defineProperty(NodeError, "prototype", {
                        writable: !1
                    }), NodeError
                }(a);
                c[t] = s
            }

            function oneOf(t, r) {
                if (!Array.isArray(t)) return "of ".concat(r, " ").concat(String(t));
                var a = t.length;
                return (t = t.map(function(t) {
                    return String(t)
                }), a > 2) ? "one of ".concat(r, " ").concat(t.slice(0, a - 1).join(", "), ", or ") + t[a - 1] : 2 === a ? "one of ".concat(r, " ").concat(t[0], " or ").concat(t[1]) : "of ".concat(r, " ").concat(t[0])
            }
            createErrorType("ERR_AMBIGUOUS_ARGUMENT", 'The "%s" argument is ambiguous. %s', TypeError), createErrorType("ERR_INVALID_ARG_TYPE", function(t, r, l) {
                if ((void 0 === s && (s = a(74346)), s("string" == typeof t, "'name' must be a string"), "string" == typeof r && (c = "not ", r.substr(!d || d < 0 ? 0 : +d, c.length) === c)) ? (h = "must not be", r = r.replace(/^not /, "")) : h = "must be", u = " argument", (void 0 === m || m > t.length) && (m = t.length), t.substring(m - u.length, m) === u) f = "The ".concat(t, " ").concat(h, " ").concat(oneOf(r, "type"));
                else {
                    var c, d, u, m, p, h, f, y = ("number" != typeof p && (p = 0), p + 1 > t.length || -1 === t.indexOf(".", p)) ? "argument" : "property";
                    f = 'The "'.concat(t, '" ').concat(y, " ").concat(h, " ").concat(oneOf(r, "type"))
                }
                return f + ". Received type ".concat(_typeof(l))
            }, TypeError), createErrorType("ERR_INVALID_ARG_VALUE", function(t, r) {
                var s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "is invalid";
                void 0 === l && (l = a(32285));
                var c = l.inspect(r);
                return c.length > 128 && (c = "".concat(c.slice(0, 128), "...")), "The argument '".concat(t, "' ").concat(s, ". Received ").concat(c)
            }, TypeError, RangeError), createErrorType("ERR_INVALID_RETURN_VALUE", function(t, r, a) {
                var s;
                return s = a && a.constructor && a.constructor.name ? "instance of ".concat(a.constructor.name) : "type ".concat(_typeof(a)), "Expected ".concat(t, ' to be returned from the "').concat(r, '"') + " function but got ".concat(s, ".")
            }, TypeError), createErrorType("ERR_MISSING_ARGS", function() {
                for (var t = arguments.length, r = Array(t), l = 0; l < t; l++) r[l] = arguments[l];
                void 0 === s && (s = a(74346)), s(r.length > 0, "At least one arg needs to be specified");
                var c = "The ",
                    d = r.length;
                switch (r = r.map(function(t) {
                    return '"'.concat(t, '"')
                }), d) {
                    case 1:
                        c += "".concat(r[0], " argument");
                        break;
                    case 2:
                        c += "".concat(r[0], " and ").concat(r[1], " arguments");
                        break;
                    default:
                        c += r.slice(0, d - 1).join(", ") + ", and ".concat(r[d - 1], " arguments")
                }
                return "".concat(c, " must be specified")
            }, TypeError), t.exports.codes = c
        },
        7449: function(t, r, a) {
            "use strict";

            function _slicedToArray(t, r) {
                return function(t) {
                    if (Array.isArray(t)) return t
                }(t) || function(t, r) {
                    var a = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                    if (null != a) {
                        var s, l, c, d, u = [],
                            m = !0,
                            p = !1;
                        try {
                            if (c = (a = a.call(t)).next, 0 === r) {
                                if (Object(a) !== a) return;
                                m = !1
                            } else
                                for (; !(m = (s = c.call(a)).done) && (u.push(s.value), u.length !== r); m = !0);
                        } catch (t) {
                            p = !0, l = t
                        } finally {
                            try {
                                if (!m && null != a.return && (d = a.return(), Object(d) !== d)) return
                            } finally {
                                if (p) throw l
                            }
                        }
                        return u
                    }
                }(t, r) || function(t, r) {
                    if (t) {
                        if ("string" == typeof t) return _arrayLikeToArray(t, r);
                        var a = Object.prototype.toString.call(t).slice(8, -1);
                        if ("Object" === a && t.constructor && (a = t.constructor.name), "Map" === a || "Set" === a) return Array.from(t);
                        if ("Arguments" === a || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)) return _arrayLikeToArray(t, r)
                    }
                }(t, r) || function() {
                    throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
                }()
            }

            function _arrayLikeToArray(t, r) {
                (null == r || r > t.length) && (r = t.length);
                for (var a = 0, s = Array(r); a < r; a++) s[a] = t[a];
                return s
            }

            function _typeof(t) {
                return (_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                    return typeof t
                } : function(t) {
                    return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t
                })(t)
            }
            var s = void 0 !== /a/g.flags,
                arrayFromSet = function(t) {
                    var r = [];
                    return t.forEach(function(t) {
                        return r.push(t)
                    }), r
                },
                arrayFromMap = function(t) {
                    var r = [];
                    return t.forEach(function(t, a) {
                        return r.push([a, t])
                    }), r
                },
                l = Object.is ? Object.is : a(93903),
                c = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function() {
                    return []
                },
                d = Number.isNaN ? Number.isNaN : a(8755);

            function uncurryThis(t) {
                return t.call.bind(t)
            }
            var u = uncurryThis(Object.prototype.hasOwnProperty),
                m = uncurryThis(Object.prototype.propertyIsEnumerable),
                p = uncurryThis(Object.prototype.toString),
                h = a(32285).types,
                f = h.isAnyArrayBuffer,
                y = h.isArrayBufferView,
                b = h.isDate,
                C = h.isMap,
                E = h.isRegExp,
                j = h.isSet,
                I = h.isNativeError,
                O = h.isBoxedPrimitive,
                P = h.isNumberObject,
                R = h.isStringObject,
                F = h.isBooleanObject,
                W = h.isBigIntObject,
                M = h.isSymbolObject,
                D = h.isFloat32Array,
                L = h.isFloat64Array;

            function isNonIndex(t) {
                if (0 === t.length || t.length > 10) return !0;
                for (var r = 0; r < t.length; r++) {
                    var a = t.charCodeAt(r);
                    if (a < 48 || a > 57) return !0
                }
                return 10 === t.length && t >= 4294967296
            }

            function getOwnNonIndexProperties(t) {
                return Object.keys(t).filter(isNonIndex).concat(c(t).filter(Object.prototype.propertyIsEnumerable.bind(t)))
            }
            /*!
             * The buffer module from node.js, for the browser.
             *
             * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
             * @license  MIT
             */
            function compare(t, r) {
                if (t === r) return 0;
                for (var a = t.length, s = r.length, l = 0, c = Math.min(a, s); l < c; ++l)
                    if (t[l] !== r[l]) {
                        a = t[l], s = r[l];
                        break
                    }
                return a < s ? -1 : s < a ? 1 : 0
            }
            var U = void 0;

            function innerDeepEqual(t, r, a, c) {
                if (t === r) return 0 !== t || !a || l(t, r);
                if (a) {
                    if ("object" !== _typeof(t)) return "number" == typeof t && d(t) && d(r);
                    if ("object" !== _typeof(r) || null === t || null === r || Object.getPrototypeOf(t) !== Object.getPrototypeOf(r)) return !1
                } else {
                    if (null === t || "object" !== _typeof(t)) return (null === r || "object" !== _typeof(r)) && t == r;
                    if (null === r || "object" !== _typeof(r)) return !1
                }
                var u = p(t);
                if (u !== p(r)) return !1;
                if (Array.isArray(t)) {
                    if (t.length !== r.length) return !1;
                    var m = getOwnNonIndexProperties(t, U),
                        h = getOwnNonIndexProperties(r, U);
                    return m.length === h.length && keyCheck(t, r, a, c, 1, m)
                }
                if ("[object Object]" === u && (!C(t) && C(r) || !j(t) && j(r))) return !1;
                if (b(t)) {
                    if (!b(r) || Date.prototype.getTime.call(t) !== Date.prototype.getTime.call(r)) return !1
                } else if (E(t)) {
                    if (!E(r) || (s ? t.source !== r.source || t.flags !== r.flags : RegExp.prototype.toString.call(t) !== RegExp.prototype.toString.call(r))) return !1
                } else if (I(t) || t instanceof Error) {
                    if (t.message !== r.message || t.name !== r.name) return !1
                } else if (y(t)) {
                    if (!a && (D(t) || L(t))) {
                        if (! function(t, r) {
                                if (t.byteLength !== r.byteLength) return !1;
                                for (var a = 0; a < t.byteLength; a++)
                                    if (t[a] !== r[a]) return !1;
                                return !0
                            }(t, r)) return !1
                    } else if (t.byteLength !== r.byteLength || 0 !== compare(new Uint8Array(t.buffer, t.byteOffset, t.byteLength), new Uint8Array(r.buffer, r.byteOffset, r.byteLength))) return !1;
                    var B = getOwnNonIndexProperties(t, U),
                        $ = getOwnNonIndexProperties(r, U);
                    return B.length === $.length && keyCheck(t, r, a, c, 0, B)
                } else if (j(t)) return !!j(r) && t.size === r.size && keyCheck(t, r, a, c, 2);
                else if (C(t)) return !!C(r) && t.size === r.size && keyCheck(t, r, a, c, 3);
                else if (f(t)) {
                    if (t.byteLength !== r.byteLength || 0 !== compare(new Uint8Array(t), new Uint8Array(r))) return !1
                } else if (O(t) && (P(t) ? !(P(r) && l(Number.prototype.valueOf.call(t), Number.prototype.valueOf.call(r))) : R(t) ? !R(r) || String.prototype.valueOf.call(t) !== String.prototype.valueOf.call(r) : F(t) ? !F(r) || Boolean.prototype.valueOf.call(t) !== Boolean.prototype.valueOf.call(r) : W(t) ? !W(r) || BigInt.prototype.valueOf.call(t) !== BigInt.prototype.valueOf.call(r) : !M(r) || Symbol.prototype.valueOf.call(t) !== Symbol.prototype.valueOf.call(r))) return !1;
                return keyCheck(t, r, a, c, 0)
            }

            function getEnumerables(t, r) {
                return r.filter(function(r) {
                    return m(t, r)
                })
            }

            function keyCheck(t, r, a, s, l, d) {
                if (5 == arguments.length) {
                    d = Object.keys(t);
                    var p = Object.keys(r);
                    if (d.length !== p.length) return !1
                }
                for (var h = 0; h < d.length; h++)
                    if (!u(r, d[h])) return !1;
                if (a && 5 == arguments.length) {
                    var f = c(t);
                    if (0 !== f.length) {
                        var y = 0;
                        for (h = 0; h < f.length; h++) {
                            var b = f[h];
                            if (m(t, b)) {
                                if (!m(r, b)) return !1;
                                d.push(b), y++
                            } else if (m(r, b)) return !1
                        }
                        var C = c(r);
                        if (f.length !== C.length && getEnumerables(r, C).length !== y) return !1
                    } else {
                        var E = c(r);
                        if (0 !== E.length && 0 !== getEnumerables(r, E).length) return !1
                    }
                }
                if (0 === d.length && (0 === l || 1 === l && 0 === t.length || 0 === t.size)) return !0;
                if (void 0 === s) s = {
                    val1: new Map,
                    val2: new Map,
                    position: 0
                };
                else {
                    var j = s.val1.get(t);
                    if (void 0 !== j) {
                        var I = s.val2.get(r);
                        if (void 0 !== I) return j === I
                    }
                    s.position++
                }
                s.val1.set(t, s.position), s.val2.set(r, s.position);
                var O = function(t, r, a, s, l, c) {
                    var d = 0;
                    if (2 === c) {
                        if (! function(t, r, a, s) {
                                for (var l = null, c = arrayFromSet(t), d = 0; d < c.length; d++) {
                                    var u = c[d];
                                    if ("object" === _typeof(u) && null !== u) null === l && (l = new Set), l.add(u);
                                    else if (!r.has(u)) {
                                        if (a || ! function(t, r, a) {
                                                var s = findLooseMatchingPrimitives(a);
                                                return null != s ? s : r.has(s) && !t.has(s)
                                            }(t, r, u)) return !1;
                                        null === l && (l = new Set), l.add(u)
                                    }
                                }
                                if (null !== l) {
                                    for (var m = arrayFromSet(r), p = 0; p < m.length; p++) {
                                        var h = m[p];
                                        if ("object" === _typeof(h) && null !== h) {
                                            if (!setHasEqualElement(l, h, a, s)) return !1
                                        } else if (!a && !t.has(h) && !setHasEqualElement(l, h, a, s)) return !1
                                    }
                                    return 0 === l.size
                                }
                                return !0
                            }(t, r, a, l)) return !1
                    } else if (3 === c) {
                        if (! function(t, r, a, s) {
                                for (var l = null, c = arrayFromMap(t), d = 0; d < c.length; d++) {
                                    var u = _slicedToArray(c[d], 2),
                                        m = u[0],
                                        p = u[1];
                                    if ("object" === _typeof(m) && null !== m) null === l && (l = new Set), l.add(m);
                                    else {
                                        var h = r.get(m);
                                        if (void 0 === h && !r.has(m) || !innerDeepEqual(p, h, a, s)) {
                                            if (a || ! function(t, r, a, s, l) {
                                                    var c = findLooseMatchingPrimitives(a);
                                                    if (null != c) return c;
                                                    var d = r.get(c);
                                                    return !!((void 0 !== d || r.has(c)) && innerDeepEqual(s, d, !1, l)) && !t.has(c) && innerDeepEqual(s, d, !1, l)
                                                }(t, r, m, p, s)) return !1;
                                            null === l && (l = new Set), l.add(m)
                                        }
                                    }
                                }
                                if (null !== l) {
                                    for (var f = arrayFromMap(r), y = 0; y < f.length; y++) {
                                        var b = _slicedToArray(f[y], 2),
                                            C = b[0],
                                            E = b[1];
                                        if ("object" === _typeof(C) && null !== C) {
                                            if (!mapHasEqualEntry(l, t, C, E, a, s)) return !1
                                        } else if (!a && (!t.has(C) || !innerDeepEqual(t.get(C), E, !1, s)) && !mapHasEqualEntry(l, t, C, E, !1, s)) return !1
                                    }
                                    return 0 === l.size
                                }
                                return !0
                            }(t, r, a, l)) return !1
                    } else if (1 === c)
                        for (; d < t.length; d++)
                            if (u(t, d)) {
                                if (!u(r, d) || !innerDeepEqual(t[d], r[d], a, l)) return !1
                            } else {
                                if (u(r, d)) return !1;
                                for (var m = Object.keys(t); d < m.length; d++) {
                                    var p = m[d];
                                    if (!u(r, p) || !innerDeepEqual(t[p], r[p], a, l)) return !1
                                }
                                if (m.length !== Object.keys(r).length) return !1;
                                return !0
                            }
                    for (d = 0; d < s.length; d++) {
                        var h = s[d];
                        if (!innerDeepEqual(t[h], r[h], a, l)) return !1
                    }
                    return !0
                }(t, r, a, d, s, l);
                return s.val1.delete(t), s.val2.delete(r), O
            }

            function setHasEqualElement(t, r, a, s) {
                for (var l = arrayFromSet(t), c = 0; c < l.length; c++) {
                    var d = l[c];
                    if (innerDeepEqual(r, d, a, s)) return t.delete(d), !0
                }
                return !1
            }

            function findLooseMatchingPrimitives(t) {
                switch (_typeof(t)) {
                    case "undefined":
                        return null;
                    case "object":
                        return;
                    case "symbol":
                        return !1;
                    case "string":
                        t = +t;
                    case "number":
                        if (d(t)) return !1
                }
                return !0
            }

            function mapHasEqualEntry(t, r, a, s, l, c) {
                for (var d = arrayFromSet(t), u = 0; u < d.length; u++) {
                    var m = d[u];
                    if (innerDeepEqual(a, m, l, c) && innerDeepEqual(s, r.get(m), l, c)) return t.delete(m), !0
                }
                return !1
            }
            t.exports = {
                isDeepEqual: function(t, r) {
                    return innerDeepEqual(t, r, !1)
                },
                isDeepStrictEqual: function(t, r) {
                    return innerDeepEqual(t, r, !0)
                }
            }
        },
        32645: function(t, r, a) {
            "use strict";
            var s = a(31609),
                l = a(39401),
                c = l(s("String.prototype.indexOf"));
            t.exports = function(t, r) {
                var a = s(t, !!r);
                return "function" == typeof a && c(t, ".prototype.") > -1 ? l(a) : a
            }
        },
        39401: function(t, r, a) {
            "use strict";
            var s = a(87823),
                l = a(31609),
                c = l("%Function.prototype.apply%"),
                d = l("%Function.prototype.call%"),
                u = l("%Reflect.apply%", !0) || s.call(d, c),
                m = l("%Object.getOwnPropertyDescriptor%", !0),
                p = l("%Object.defineProperty%", !0),
                h = l("%Math.max%");
            if (p) try {
                p({}, "a", {
                    value: 1
                })
            } catch (t) {
                p = null
            }
            t.exports = function(t) {
                var r = u(s, d, arguments);
                return m && p && m(r, "length").configurable && p(r, "length", {
                    value: 1 + h(0, t.length - (arguments.length - 1))
                }), r
            };
            var applyBind = function() {
                return u(s, c, arguments)
            };
            p ? p(t.exports, "apply", {
                value: applyBind
            }) : t.exports.apply = applyBind
        },
        61880: function(t, r, a) {
            "use strict";
            var s = a(18728),
                l = {},
                c = {};
            s.forEach(function(t) {
                l[t.name.toLowerCase()] = t.code, c[t.code.toLowerCase()] = t.name
            }), r.ri = function() {
                return c
            }, r.Yu = function() {
                return s
            }
        },
        16424: function(t, r, a) {
            "use strict";
            a.r(r), a.d(r, {
                default: function() {
                    return isAfter
                }
            });
            var s = a(68711),
                l = a(37901);

            function isAfter(t, r) {
                (0, l.Z)(2, arguments);
                var a = (0, s.default)(t),
                    c = (0, s.default)(r);
                return a.getTime() > c.getTime()
            }
        },
        34862: function(t, r, a) {
            "use strict";
            var s = a(37315)(),
                l = a(31609),
                c = s && l("%Object.defineProperty%", !0),
                d = l("%SyntaxError%"),
                u = l("%TypeError%"),
                m = a(53920);
            t.exports = function(t, r, a) {
                if (!t || "object" != typeof t && "function" != typeof t) throw new u("`obj` must be an object or a function`");
                if ("string" != typeof r && "symbol" != typeof r) throw new u("`property` must be a string or a symbol`");
                if (arguments.length > 3 && "boolean" != typeof arguments[3] && null !== arguments[3]) throw new u("`nonEnumerable`, if provided, must be a boolean or null");
                if (arguments.length > 4 && "boolean" != typeof arguments[4] && null !== arguments[4]) throw new u("`nonWritable`, if provided, must be a boolean or null");
                if (arguments.length > 5 && "boolean" != typeof arguments[5] && null !== arguments[5]) throw new u("`nonConfigurable`, if provided, must be a boolean or null");
                if (arguments.length > 6 && "boolean" != typeof arguments[6]) throw new u("`loose`, if provided, must be a boolean");
                var s = arguments.length > 3 ? arguments[3] : null,
                    l = arguments.length > 4 ? arguments[4] : null,
                    p = arguments.length > 5 ? arguments[5] : null,
                    h = arguments.length > 6 && arguments[6],
                    f = !!m && m(t, r);
                if (c) c(t, r, {
                    configurable: null === p && f ? f.configurable : !p,
                    enumerable: null === s && f ? f.enumerable : !s,
                    value: a,
                    writable: null === l && f ? f.writable : !l
                });
                else if (!h && (s || l || p)) throw new d("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
                else t[r] = a
            }
        },
        87342: function(t, r, a) {
            "use strict";
            var s = a(61854),
                l = "function" == typeof Symbol && "symbol" == typeof Symbol("foo"),
                c = Object.prototype.toString,
                d = Array.prototype.concat,
                u = a(34862),
                m = a(37315)(),
                defineProperty = function(t, r, a, s) {
                    if (r in t) {
                        if (!0 === s) {
                            if (t[r] === a) return
                        } else if (!("function" == typeof s && "[object Function]" === c.call(s)) || !s()) return
                    }
                    m ? u(t, r, a, !0) : u(t, r, a)
                },
                defineProperties = function(t, r) {
                    var a = arguments.length > 2 ? arguments[2] : {},
                        c = s(r);
                    l && (c = d.call(c, Object.getOwnPropertySymbols(r)));
                    for (var u = 0; u < c.length; u += 1) defineProperty(t, c[u], r[c[u]], a[c[u]])
                };
            defineProperties.supportsDescriptors = !!m, t.exports = defineProperties
        },
        96711: function(t) {
            "use strict";
            var r = {
                single_source_shortest_paths: function(t, a, s) {
                    var l, c, d, u, m, p, h, f = {},
                        y = {};
                    y[a] = 0;
                    var b = r.PriorityQueue.make();
                    for (b.push(a, 0); !b.empty();)
                        for (d in c = (l = b.pop()).value, u = l.cost, m = t[c] || {}) m.hasOwnProperty(d) && (p = u + m[d], h = y[d], (void 0 === y[d] || h > p) && (y[d] = p, b.push(d, p), f[d] = c));
                    if (void 0 !== s && void 0 === y[s]) throw Error(["Could not find a path from ", a, " to ", s, "."].join(""));
                    return f
                },
                extract_shortest_path_from_predecessor_list: function(t, r) {
                    for (var a = [], s = r; s;) a.push(s), t[s], s = t[s];
                    return a.reverse(), a
                },
                find_path: function(t, a, s) {
                    var l = r.single_source_shortest_paths(t, a, s);
                    return r.extract_shortest_path_from_predecessor_list(l, s)
                },
                PriorityQueue: {
                    make: function(t) {
                        var a, s = r.PriorityQueue,
                            l = {};
                        for (a in t = t || {}, s) s.hasOwnProperty(a) && (l[a] = s[a]);
                        return l.queue = [], l.sorter = t.sorter || s.default_sorter, l
                    },
                    default_sorter: function(t, r) {
                        return t.cost - r.cost
                    },
                    push: function(t, r) {
                        this.queue.push({
                            value: t,
                            cost: r
                        }), this.queue.sort(this.sorter)
                    },
                    pop: function() {
                        return this.queue.shift()
                    },
                    empty: function() {
                        return 0 === this.queue.length
                    }
                }
            };
            t.exports = r
        },
        30668: function(t) {
            "use strict";
            t.exports = function(t) {
                for (var r = [], a = t.length, s = 0; s < a; s++) {
                    var l = t.charCodeAt(s);
                    if (l >= 55296 && l <= 56319 && a > s + 1) {
                        var c = t.charCodeAt(s + 1);
                        c >= 56320 && c <= 57343 && (l = (l - 55296) * 1024 + c - 56320 + 65536, s += 1)
                    }
                    if (l < 128) {
                        r.push(l);
                        continue
                    }
                    if (l < 2048) {
                        r.push(l >> 6 | 192), r.push(63 & l | 128);
                        continue
                    }
                    if (l < 55296 || l >= 57344 && l < 65536) {
                        r.push(l >> 12 | 224), r.push(l >> 6 & 63 | 128), r.push(63 & l | 128);
                        continue
                    }
                    if (l >= 65536 && l <= 1114111) {
                        r.push(l >> 18 | 240), r.push(l >> 12 & 63 | 128), r.push(l >> 6 & 63 | 128), r.push(63 & l | 128);
                        continue
                    }
                    r.push(239, 191, 189)
                }
                return new Uint8Array(r).buffer
            }
        },
        23517: function(t) {
            "use strict";
            var r = Object.prototype.hasOwnProperty,
                a = "~";

            function Events() {}

            function EE(t, r, a) {
                this.fn = t, this.context = r, this.once = a || !1
            }

            function addListener(t, r, s, l, c) {
                if ("function" != typeof s) throw TypeError("The listener must be a function");
                var d = new EE(s, l || t, c),
                    u = a ? a + r : r;
                return t._events[u] ? t._events[u].fn ? t._events[u] = [t._events[u], d] : t._events[u].push(d) : (t._events[u] = d, t._eventsCount++), t
            }

            function clearEvent(t, r) {
                0 == --t._eventsCount ? t._events = new Events : delete t._events[r]
            }

            function EventEmitter() {
                this._events = new Events, this._eventsCount = 0
            }
            Object.create && (Events.prototype = Object.create(null), new Events().__proto__ || (a = !1)), EventEmitter.prototype.eventNames = function() {
                var t, s, l = [];
                if (0 === this._eventsCount) return l;
                for (s in t = this._events) r.call(t, s) && l.push(a ? s.slice(1) : s);
                return Object.getOwnPropertySymbols ? l.concat(Object.getOwnPropertySymbols(t)) : l
            }, EventEmitter.prototype.listeners = function(t) {
                var r = a ? a + t : t,
                    s = this._events[r];
                if (!s) return [];
                if (s.fn) return [s.fn];
                for (var l = 0, c = s.length, d = Array(c); l < c; l++) d[l] = s[l].fn;
                return d
            }, EventEmitter.prototype.listenerCount = function(t) {
                var r = a ? a + t : t,
                    s = this._events[r];
                return s ? s.fn ? 1 : s.length : 0
            }, EventEmitter.prototype.emit = function(t, r, s, l, c, d) {
                var u = a ? a + t : t;
                if (!this._events[u]) return !1;
                var m, p, h = this._events[u],
                    f = arguments.length;
                if (h.fn) {
                    switch (h.once && this.removeListener(t, h.fn, void 0, !0), f) {
                        case 1:
                            return h.fn.call(h.context), !0;
                        case 2:
                            return h.fn.call(h.context, r), !0;
                        case 3:
                            return h.fn.call(h.context, r, s), !0;
                        case 4:
                            return h.fn.call(h.context, r, s, l), !0;
                        case 5:
                            return h.fn.call(h.context, r, s, l, c), !0;
                        case 6:
                            return h.fn.call(h.context, r, s, l, c, d), !0
                    }
                    for (p = 1, m = Array(f - 1); p < f; p++) m[p - 1] = arguments[p];
                    h.fn.apply(h.context, m)
                } else {
                    var y, b = h.length;
                    for (p = 0; p < b; p++) switch (h[p].once && this.removeListener(t, h[p].fn, void 0, !0), f) {
                        case 1:
                            h[p].fn.call(h[p].context);
                            break;
                        case 2:
                            h[p].fn.call(h[p].context, r);
                            break;
                        case 3:
                            h[p].fn.call(h[p].context, r, s);
                            break;
                        case 4:
                            h[p].fn.call(h[p].context, r, s, l);
                            break;
                        default:
                            if (!m)
                                for (y = 1, m = Array(f - 1); y < f; y++) m[y - 1] = arguments[y];
                            h[p].fn.apply(h[p].context, m)
                    }
                }
                return !0
            }, EventEmitter.prototype.on = function(t, r, a) {
                return addListener(this, t, r, a, !1)
            }, EventEmitter.prototype.once = function(t, r, a) {
                return addListener(this, t, r, a, !0)
            }, EventEmitter.prototype.removeListener = function(t, r, s, l) {
                var c = a ? a + t : t;
                if (!this._events[c]) return this;
                if (!r) return clearEvent(this, c), this;
                var d = this._events[c];
                if (d.fn) d.fn !== r || l && !d.once || s && d.context !== s || clearEvent(this, c);
                else {
                    for (var u = 0, m = [], p = d.length; u < p; u++)(d[u].fn !== r || l && !d[u].once || s && d[u].context !== s) && m.push(d[u]);
                    m.length ? this._events[c] = 1 === m.length ? m[0] : m : clearEvent(this, c)
                }
                return this
            }, EventEmitter.prototype.removeAllListeners = function(t) {
                var r;
                return t ? (r = a ? a + t : t, this._events[r] && clearEvent(this, r)) : (this._events = new Events, this._eventsCount = 0), this
            }, EventEmitter.prototype.off = EventEmitter.prototype.removeListener, EventEmitter.prototype.addListener = EventEmitter.prototype.on, EventEmitter.prefixed = a, EventEmitter.EventEmitter = EventEmitter, t.exports = EventEmitter
        },
        63557: function(t, r, a) {
            "use strict";
            var s = a(70915),
                l = Object.prototype.toString,
                c = Object.prototype.hasOwnProperty,
                forEachArray = function(t, r, a) {
                    for (var s = 0, l = t.length; s < l; s++) c.call(t, s) && (null == a ? r(t[s], s, t) : r.call(a, t[s], s, t))
                },
                forEachString = function(t, r, a) {
                    for (var s = 0, l = t.length; s < l; s++) null == a ? r(t.charAt(s), s, t) : r.call(a, t.charAt(s), s, t)
                },
                forEachObject = function(t, r, a) {
                    for (var s in t) c.call(t, s) && (null == a ? r(t[s], s, t) : r.call(a, t[s], s, t))
                };
            t.exports = function(t, r, a) {
                var c;
                if (!s(r)) throw TypeError("iterator must be a function");
                arguments.length >= 3 && (c = a), "[object Array]" === l.call(t) ? forEachArray(t, r, c) : "string" == typeof t ? forEachString(t, r, c) : forEachObject(t, r, c)
            }
        },
        23049: function(t) {
            "use strict";
            var r = Object.prototype.toString,
                a = Math.max,
                concatty = function(t, r) {
                    for (var a = [], s = 0; s < t.length; s += 1) a[s] = t[s];
                    for (var l = 0; l < r.length; l += 1) a[l + t.length] = r[l];
                    return a
                },
                slicy = function(t, r) {
                    for (var a = [], s = r || 0, l = 0; s < t.length; s += 1, l += 1) a[l] = t[s];
                    return a
                },
                joiny = function(t, r) {
                    for (var a = "", s = 0; s < t.length; s += 1) a += t[s], s + 1 < t.length && (a += r);
                    return a
                };
            t.exports = function(t) {
                var s, l = this;
                if ("function" != typeof l || "[object Function]" !== r.apply(l)) throw TypeError("Function.prototype.bind called on incompatible " + l);
                for (var c = slicy(arguments, 1), d = a(0, l.length - c.length), u = [], m = 0; m < d; m++) u[m] = "$" + m;
                if (s = Function("binder", "return function (" + joiny(u, ",") + "){ return binder.apply(this,arguments); }")(function() {
                        if (this instanceof s) {
                            var r = l.apply(this, concatty(c, arguments));
                            return Object(r) === r ? r : this
                        }
                        return l.apply(t, concatty(c, arguments))
                    }), l.prototype) {
                    var Empty = function() {};
                    Empty.prototype = l.prototype, s.prototype = new Empty, Empty.prototype = null
                }
                return s
            }
        },
        87823: function(t, r, a) {
            "use strict";
            var s = a(23049);
            t.exports = Function.prototype.bind || s
        },
        31609: function(t, r, a) {
            "use strict";
            var s, l = SyntaxError,
                c = Function,
                d = TypeError,
                getEvalledConstructor = function(t) {
                    try {
                        return c('"use strict"; return (' + t + ").constructor;")()
                    } catch (t) {}
                },
                u = Object.getOwnPropertyDescriptor;
            if (u) try {
                u({}, "")
            } catch (t) {
                u = null
            }
            var throwTypeError = function() {
                    throw new d
                },
                m = u ? function() {
                    try {
                        return arguments.callee, throwTypeError
                    } catch (t) {
                        try {
                            return u(arguments, "callee").get
                        } catch (t) {
                            return throwTypeError
                        }
                    }
                }() : throwTypeError,
                p = a(17807)(),
                h = a(47650)(),
                f = Object.getPrototypeOf || (h ? function(t) {
                    return t.__proto__
                } : null),
                y = {},
                b = "undefined" != typeof Uint8Array && f ? f(Uint8Array) : s,
                C = {
                    "%AggregateError%": "undefined" == typeof AggregateError ? s : AggregateError,
                    "%Array%": Array,
                    "%ArrayBuffer%": "undefined" == typeof ArrayBuffer ? s : ArrayBuffer,
                    "%ArrayIteratorPrototype%": p && f ? f([][Symbol.iterator]()) : s,
                    "%AsyncFromSyncIteratorPrototype%": s,
                    "%AsyncFunction%": y,
                    "%AsyncGenerator%": y,
                    "%AsyncGeneratorFunction%": y,
                    "%AsyncIteratorPrototype%": y,
                    "%Atomics%": "undefined" == typeof Atomics ? s : Atomics,
                    "%BigInt%": "undefined" == typeof BigInt ? s : BigInt,
                    "%BigInt64Array%": "undefined" == typeof BigInt64Array ? s : BigInt64Array,
                    "%BigUint64Array%": "undefined" == typeof BigUint64Array ? s : BigUint64Array,
                    "%Boolean%": Boolean,
                    "%DataView%": "undefined" == typeof DataView ? s : DataView,
                    "%Date%": Date,
                    "%decodeURI%": decodeURI,
                    "%decodeURIComponent%": decodeURIComponent,
                    "%encodeURI%": encodeURI,
                    "%encodeURIComponent%": encodeURIComponent,
                    "%Error%": Error,
                    "%eval%": eval,
                    "%EvalError%": EvalError,
                    "%Float32Array%": "undefined" == typeof Float32Array ? s : Float32Array,
                    "%Float64Array%": "undefined" == typeof Float64Array ? s : Float64Array,
                    "%FinalizationRegistry%": "undefined" == typeof FinalizationRegistry ? s : FinalizationRegistry,
                    "%Function%": c,
                    "%GeneratorFunction%": y,
                    "%Int8Array%": "undefined" == typeof Int8Array ? s : Int8Array,
                    "%Int16Array%": "undefined" == typeof Int16Array ? s : Int16Array,
                    "%Int32Array%": "undefined" == typeof Int32Array ? s : Int32Array,
                    "%isFinite%": isFinite,
                    "%isNaN%": isNaN,
                    "%IteratorPrototype%": p && f ? f(f([][Symbol.iterator]())) : s,
                    "%JSON%": "object" == typeof JSON ? JSON : s,
                    "%Map%": "undefined" == typeof Map ? s : Map,
                    "%MapIteratorPrototype%": "undefined" != typeof Map && p && f ? f(new Map()[Symbol.iterator]()) : s,
                    "%Math%": Math,
                    "%Number%": Number,
                    "%Object%": Object,
                    "%parseFloat%": parseFloat,
                    "%parseInt%": parseInt,
                    "%Promise%": "undefined" == typeof Promise ? s : Promise,
                    "%Proxy%": "undefined" == typeof Proxy ? s : Proxy,
                    "%RangeError%": RangeError,
                    "%ReferenceError%": ReferenceError,
                    "%Reflect%": "undefined" == typeof Reflect ? s : Reflect,
                    "%RegExp%": RegExp,
                    "%Set%": "undefined" == typeof Set ? s : Set,
                    "%SetIteratorPrototype%": "undefined" != typeof Set && p && f ? f(new Set()[Symbol.iterator]()) : s,
                    "%SharedArrayBuffer%": "undefined" == typeof SharedArrayBuffer ? s : SharedArrayBuffer,
                    "%String%": String,
                    "%StringIteratorPrototype%": p && f ? f("" [Symbol.iterator]()) : s,
                    "%Symbol%": p ? Symbol : s,
                    "%SyntaxError%": l,
                    "%ThrowTypeError%": m,
                    "%TypedArray%": b,
                    "%TypeError%": d,
                    "%Uint8Array%": "undefined" == typeof Uint8Array ? s : Uint8Array,
                    "%Uint8ClampedArray%": "undefined" == typeof Uint8ClampedArray ? s : Uint8ClampedArray,
                    "%Uint16Array%": "undefined" == typeof Uint16Array ? s : Uint16Array,
                    "%Uint32Array%": "undefined" == typeof Uint32Array ? s : Uint32Array,
                    "%URIError%": URIError,
                    "%WeakMap%": "undefined" == typeof WeakMap ? s : WeakMap,
                    "%WeakRef%": "undefined" == typeof WeakRef ? s : WeakRef,
                    "%WeakSet%": "undefined" == typeof WeakSet ? s : WeakSet
                };
            if (f) try {
                null.error
            } catch (t) {
                var E = f(f(t));
                C["%Error.prototype%"] = E
            }
            var doEval = function doEval(t) {
                    var r;
                    if ("%AsyncFunction%" === t) r = getEvalledConstructor("async function () {}");
                    else if ("%GeneratorFunction%" === t) r = getEvalledConstructor("function* () {}");
                    else if ("%AsyncGeneratorFunction%" === t) r = getEvalledConstructor("async function* () {}");
                    else if ("%AsyncGenerator%" === t) {
                        var a = doEval("%AsyncGeneratorFunction%");
                        a && (r = a.prototype)
                    } else if ("%AsyncIteratorPrototype%" === t) {
                        var s = doEval("%AsyncGenerator%");
                        s && f && (r = f(s.prototype))
                    }
                    return C[t] = r, r
                },
                j = {
                    "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
                    "%ArrayPrototype%": ["Array", "prototype"],
                    "%ArrayProto_entries%": ["Array", "prototype", "entries"],
                    "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
                    "%ArrayProto_keys%": ["Array", "prototype", "keys"],
                    "%ArrayProto_values%": ["Array", "prototype", "values"],
                    "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
                    "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
                    "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
                    "%BooleanPrototype%": ["Boolean", "prototype"],
                    "%DataViewPrototype%": ["DataView", "prototype"],
                    "%DatePrototype%": ["Date", "prototype"],
                    "%ErrorPrototype%": ["Error", "prototype"],
                    "%EvalErrorPrototype%": ["EvalError", "prototype"],
                    "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
                    "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
                    "%FunctionPrototype%": ["Function", "prototype"],
                    "%Generator%": ["GeneratorFunction", "prototype"],
                    "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
                    "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
                    "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
                    "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
                    "%JSONParse%": ["JSON", "parse"],
                    "%JSONStringify%": ["JSON", "stringify"],
                    "%MapPrototype%": ["Map", "prototype"],
                    "%NumberPrototype%": ["Number", "prototype"],
                    "%ObjectPrototype%": ["Object", "prototype"],
                    "%ObjProto_toString%": ["Object", "prototype", "toString"],
                    "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
                    "%PromisePrototype%": ["Promise", "prototype"],
                    "%PromiseProto_then%": ["Promise", "prototype", "then"],
                    "%Promise_all%": ["Promise", "all"],
                    "%Promise_reject%": ["Promise", "reject"],
                    "%Promise_resolve%": ["Promise", "resolve"],
                    "%RangeErrorPrototype%": ["RangeError", "prototype"],
                    "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
                    "%RegExpPrototype%": ["RegExp", "prototype"],
                    "%SetPrototype%": ["Set", "prototype"],
                    "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
                    "%StringPrototype%": ["String", "prototype"],
                    "%SymbolPrototype%": ["Symbol", "prototype"],
                    "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
                    "%TypedArrayPrototype%": ["TypedArray", "prototype"],
                    "%TypeErrorPrototype%": ["TypeError", "prototype"],
                    "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
                    "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
                    "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
                    "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
                    "%URIErrorPrototype%": ["URIError", "prototype"],
                    "%WeakMapPrototype%": ["WeakMap", "prototype"],
                    "%WeakSetPrototype%": ["WeakSet", "prototype"]
                },
                I = a(87823),
                O = a(44770),
                P = I.call(Function.call, Array.prototype.concat),
                R = I.call(Function.apply, Array.prototype.splice),
                F = I.call(Function.call, String.prototype.replace),
                W = I.call(Function.call, String.prototype.slice),
                M = I.call(Function.call, RegExp.prototype.exec),
                D = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,
                L = /\\(\\)?/g,
                stringToPath = function(t) {
                    var r = W(t, 0, 1),
                        a = W(t, -1);
                    if ("%" === r && "%" !== a) throw new l("invalid intrinsic syntax, expected closing `%`");
                    if ("%" === a && "%" !== r) throw new l("invalid intrinsic syntax, expected opening `%`");
                    var s = [];
                    return F(t, D, function(t, r, a, l) {
                        s[s.length] = a ? F(l, L, "$1") : r || t
                    }), s
                },
                getBaseIntrinsic = function(t, r) {
                    var a, s = t;
                    if (O(j, s) && (s = "%" + (a = j[s])[0] + "%"), O(C, s)) {
                        var c = C[s];
                        if (c === y && (c = doEval(s)), void 0 === c && !r) throw new d("intrinsic " + t + " exists, but is not available. Please file an issue!");
                        return {
                            alias: a,
                            name: s,
                            value: c
                        }
                    }
                    throw new l("intrinsic " + t + " does not exist!")
                };
            t.exports = function(t, r) {
                if ("string" != typeof t || 0 === t.length) throw new d("intrinsic name must be a non-empty string");
                if (arguments.length > 1 && "boolean" != typeof r) throw new d('"allowMissing" argument must be a boolean');
                if (null === M(/^%?[^%]*%?$/, t)) throw new l("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
                var a = stringToPath(t),
                    s = a.length > 0 ? a[0] : "",
                    c = getBaseIntrinsic("%" + s + "%", r),
                    m = c.name,
                    p = c.value,
                    h = !1,
                    f = c.alias;
                f && (s = f[0], R(a, P([0, 1], f)));
                for (var y = 1, b = !0; y < a.length; y += 1) {
                    var E = a[y],
                        j = W(E, 0, 1),
                        I = W(E, -1);
                    if (('"' === j || "'" === j || "`" === j || '"' === I || "'" === I || "`" === I) && j !== I) throw new l("property names with quotes must have matching quotes");
                    if ("constructor" !== E && b || (h = !0), s += "." + E, O(C, m = "%" + s + "%")) p = C[m];
                    else if (null != p) {
                        if (!(E in p)) {
                            if (!r) throw new d("base intrinsic for " + t + " exists, but the property is not available.");
                            return
                        }
                        if (u && y + 1 >= a.length) {
                            var F = u(p, E);
                            p = (b = !!F) && "get" in F && !("originalValue" in F.get) ? F.get : p[E]
                        } else b = O(p, E), p = p[E];
                        b && !h && (C[m] = p)
                    }
                }
                return p
            }
        },
        53920: function(t, r, a) {
            "use strict";
            var s = a(31609)("%Object.getOwnPropertyDescriptor%", !0);
            if (s) try {
                s([], "length")
            } catch (t) {
                s = null
            }
            t.exports = s
        },
        37315: function(t, r, a) {
            "use strict";
            var s = a(31609)("%Object.defineProperty%", !0),
                hasPropertyDescriptors = function() {
                    if (s) try {
                        return s({}, "a", {
                            value: 1
                        }), !0
                    } catch (t) {}
                    return !1
                };
            hasPropertyDescriptors.hasArrayLengthDefineBug = function() {
                if (!hasPropertyDescriptors()) return null;
                try {
                    return 1 !== s([], "length", {
                        value: 1
                    }).length
                } catch (t) {
                    return !0
                }
            }, t.exports = hasPropertyDescriptors
        },
        47650: function(t) {
            "use strict";
            var r = {
                    foo: {}
                },
                a = Object;
            t.exports = function() {
                return ({
                    __proto__: r
                }).foo === r.foo && !(({
                    __proto__: null
                }) instanceof a)
            }
        },
        17807: function(t, r, a) {
            "use strict";
            var s = "undefined" != typeof Symbol && Symbol,
                l = a(30992);
            t.exports = function() {
                return "function" == typeof s && "function" == typeof Symbol && "symbol" == typeof s("foo") && "symbol" == typeof Symbol("bar") && l()
            }
        },
        30992: function(t) {
            "use strict";
            t.exports = function() {
                if ("function" != typeof Symbol || "function" != typeof Object.getOwnPropertySymbols) return !1;
                if ("symbol" == typeof Symbol.iterator) return !0;
                var t = {},
                    r = Symbol("test"),
                    a = Object(r);
                if ("string" == typeof r || "[object Symbol]" !== Object.prototype.toString.call(r) || "[object Symbol]" !== Object.prototype.toString.call(a)) return !1;
                for (r in t[r] = 42, t) return !1;
                if ("function" == typeof Object.keys && 0 !== Object.keys(t).length || "function" == typeof Object.getOwnPropertyNames && 0 !== Object.getOwnPropertyNames(t).length) return !1;
                var s = Object.getOwnPropertySymbols(t);
                if (1 !== s.length || s[0] !== r || !Object.prototype.propertyIsEnumerable.call(t, r)) return !1;
                if ("function" == typeof Object.getOwnPropertyDescriptor) {
                    var l = Object.getOwnPropertyDescriptor(t, r);
                    if (42 !== l.value || !0 !== l.enumerable) return !1
                }
                return !0
            }
        },
        41609: function(t, r, a) {
            "use strict";
            var s = a(30992);
            t.exports = function() {
                return s() && !!Symbol.toStringTag
            }
        },
        44770: function(t, r, a) {
            "use strict";
            var s = a(87823);
            t.exports = s.call(Function.call, Object.prototype.hasOwnProperty)
        },
        43324: function(t, r, a) {
            "use strict";
            a.d(r, {
                hi: function() {
                    return toJpeg
                }
            });
            let s = (() => {
                let t = 0,
                    random = () => `0000${(1679616*Math.random()<<0).toString(36)}`.slice(-4);
                return () => (t += 1, `u${random()}${t}`)
            })();

            function toArray(t) {
                let r = [];
                for (let a = 0, s = t.length; a < s; a++) r.push(t[a]);
                return r
            }

            function px(t, r) {
                let a = t.ownerDocument.defaultView || window,
                    s = a.getComputedStyle(t).getPropertyValue(r);
                return s ? parseFloat(s.replace("px", "")) : 0
            }

            function util_getImageSize(t, r = {}) {
                let a = r.width || function(t) {
                        let r = px(t, "border-left-width"),
                            a = px(t, "border-right-width");
                        return t.clientWidth + r + a
                    }(t),
                    s = r.height || function(t) {
                        let r = px(t, "border-top-width"),
                            a = px(t, "border-bottom-width");
                        return t.clientHeight + r + a
                    }(t);
                return {
                    width: a,
                    height: s
                }
            }

            function createImage(t) {
                return new Promise((r, a) => {
                    let s = new Image;
                    s.decode = () => r(s), s.onload = () => r(s), s.onerror = a, s.crossOrigin = "anonymous", s.decoding = "async", s.src = t
                })
            }
            async function svgToDataURL(t) {
                return Promise.resolve().then(() => new XMLSerializer().serializeToString(t)).then(encodeURIComponent).then(t => `data:image/svg+xml;charset=utf-8,${t}`)
            }
            async function nodeToDataURL(t, r, a) {
                let s = "http://www.w3.org/2000/svg",
                    l = document.createElementNS(s, "svg"),
                    c = document.createElementNS(s, "foreignObject");
                return l.setAttribute("width", `${r}`), l.setAttribute("height", `${a}`), l.setAttribute("viewBox", `0 0 ${r} ${a}`), c.setAttribute("width", "100%"), c.setAttribute("height", "100%"), c.setAttribute("x", "0"), c.setAttribute("y", "0"), c.setAttribute("externalResourcesRequired", "true"), l.appendChild(c), c.appendChild(t), svgToDataURL(l)
            }
            let isInstanceOfElement = (t, r) => {
                if (t instanceof r) return !0;
                let a = Object.getPrototypeOf(t);
                return null !== a && (a.constructor.name === r.name || isInstanceOfElement(a, r))
            };

            function clonePseudoElement(t, r, a) {
                let l = window.getComputedStyle(t, a),
                    c = l.getPropertyValue("content");
                if ("" === c || "none" === c) return;
                let d = s();
                try {
                    r.className = `${r.className} ${d}`
                } catch (t) {
                    return
                }
                let u = document.createElement("style");
                u.appendChild(function(t, r, a) {
                    let s = `.${t}:${r}`,
                        l = a.cssText ? function(t) {
                            let r = t.getPropertyValue("content");
                            return `${t.cssText} content: '${r.replace(/'|"/g,"")}';`
                        }(a) : toArray(a).map(t => {
                            let r = a.getPropertyValue(t),
                                s = a.getPropertyPriority(t);
                            return `${t}: ${r}${s?" !important":""};`
                        }).join(" ");
                    return document.createTextNode(`${s}{${l}}`)
                }(d, a, l)), r.appendChild(u)
            }
            let l = "application/font-woff",
                c = "image/jpeg",
                d = {
                    woff: l,
                    woff2: l,
                    ttf: "application/font-truetype",
                    eot: "application/vnd.ms-fontobject",
                    png: "image/png",
                    jpg: c,
                    jpeg: c,
                    gif: "image/gif",
                    tiff: "image/tiff",
                    svg: "image/svg+xml",
                    webp: "image/webp"
                };

            function getMimeType(t) {
                let r = (function(t) {
                    let r = /\.([^./]*?)$/g.exec(t);
                    return r ? r[1] : ""
                })(t).toLowerCase();
                return d[r] || ""
            }

            function isDataUrl(t) {
                return -1 !== t.search(/^(data:)/)
            }

            function makeDataUrl(t, r) {
                return `data:${r};base64,${t}`
            }
            async function fetchAsDataURL(t, r, a) {
                let s = await fetch(t, r);
                if (404 === s.status) throw Error(`Resource "${s.url}" not found`);
                let l = await s.blob();
                return new Promise((t, r) => {
                    let c = new FileReader;
                    c.onerror = r, c.onloadend = () => {
                        try {
                            t(a({
                                res: s,
                                result: c.result
                            }))
                        } catch (t) {
                            r(t)
                        }
                    }, c.readAsDataURL(l)
                })
            }
            let u = {};
            async function resourceToDataURL(t, r, a) {
                var s, l, c;
                let d, m;
                let p = (s = t, l = r, c = a.includeQueryParams, m = s.replace(/\?.*/, ""), c && (m = s), /ttf|otf|eot|woff2?/i.test(m) && (m = m.replace(/.*\//, "")), l ? `[${l}]${m}` : m);
                if (null != u[p]) return u[p];
                a.cacheBust && (t += (/\?/.test(t) ? "&" : "?") + new Date().getTime());
                try {
                    let s = await fetchAsDataURL(t, a.fetchRequestInit, ({
                        res: t,
                        result: a
                    }) => (r || (r = t.headers.get("Content-Type") || ""), a.split(/,/)[1]));
                    d = makeDataUrl(s, r)
                } catch (s) {
                    d = a.imagePlaceholder || "";
                    let r = `Failed to fetch resource: ${t}`;
                    s && (r = "string" == typeof s ? s : s.message), r && console.warn(r)
                }
                return u[p] = d, d
            }
            async function cloneCanvasElement(t) {
                let r = t.toDataURL();
                return "data:," === r ? t.cloneNode(!1) : createImage(r)
            }
            async function cloneVideoElement(t, r) {
                if (t.currentSrc) {
                    let r = document.createElement("canvas"),
                        a = r.getContext("2d");
                    r.width = t.clientWidth, r.height = t.clientHeight, null == a || a.drawImage(t, 0, 0, r.width, r.height);
                    let s = r.toDataURL();
                    return createImage(s)
                }
                let a = t.poster,
                    s = getMimeType(a),
                    l = await resourceToDataURL(a, s, r);
                return createImage(l)
            }
            async function cloneIFrameElement(t) {
                var r;
                try {
                    if (null === (r = null == t ? void 0 : t.contentDocument) || void 0 === r ? void 0 : r.body) return await cloneNode(t.contentDocument.body, {}, !0)
                } catch (t) {}
                return t.cloneNode(!1)
            }
            async function cloneSingleNode(t, r) {
                return isInstanceOfElement(t, HTMLCanvasElement) ? cloneCanvasElement(t) : isInstanceOfElement(t, HTMLVideoElement) ? cloneVideoElement(t, r) : isInstanceOfElement(t, HTMLIFrameElement) ? cloneIFrameElement(t) : t.cloneNode(!1)
            }
            let isSlotElement = t => null != t.tagName && "SLOT" === t.tagName.toUpperCase();
            async function cloneChildren(t, r, a) {
                var s, l;
                let c = [];
                return 0 === (c = isSlotElement(t) && t.assignedNodes ? toArray(t.assignedNodes()) : isInstanceOfElement(t, HTMLIFrameElement) && (null === (s = t.contentDocument) || void 0 === s ? void 0 : s.body) ? toArray(t.contentDocument.body.childNodes) : toArray((null !== (l = t.shadowRoot) && void 0 !== l ? l : t).childNodes)).length || isInstanceOfElement(t, HTMLVideoElement) || await c.reduce((t, s) => t.then(() => cloneNode(s, a)).then(t => {
                    t && r.appendChild(t)
                }), Promise.resolve()), r
            }
            async function ensureSVGSymbols(t, r) {
                let a = t.querySelectorAll ? t.querySelectorAll("use") : [];
                if (0 === a.length) return t;
                let s = {};
                for (let l = 0; l < a.length; l++) {
                    let c = a[l],
                        d = c.getAttribute("xlink:href");
                    if (d) {
                        let a = t.querySelector(d),
                            l = document.querySelector(d);
                        a || !l || s[d] || (s[d] = await cloneNode(l, r, !0))
                    }
                }
                let l = Object.values(s);
                if (l.length) {
                    let r = "http://www.w3.org/1999/xhtml",
                        a = document.createElementNS(r, "svg");
                    a.setAttribute("xmlns", r), a.style.position = "absolute", a.style.width = "0", a.style.height = "0", a.style.overflow = "hidden", a.style.display = "none";
                    let s = document.createElementNS(r, "defs");
                    a.appendChild(s);
                    for (let t = 0; t < l.length; t++) s.appendChild(l[t]);
                    t.appendChild(a)
                }
                return t
            }
            async function cloneNode(t, r, a) {
                return a || !r.filter || r.filter(t) ? Promise.resolve(t).then(t => cloneSingleNode(t, r)).then(a => cloneChildren(t, a, r)).then(r => {
                    var a, s;
                    return a = t, isInstanceOfElement(s = r, Element) && (! function(t, r) {
                        let a = r.style;
                        if (!a) return;
                        let s = window.getComputedStyle(t);
                        s.cssText ? (a.cssText = s.cssText, a.transformOrigin = s.transformOrigin) : toArray(s).forEach(l => {
                            let c = s.getPropertyValue(l);
                            if ("font-size" === l && c.endsWith("px")) {
                                let t = Math.floor(parseFloat(c.substring(0, c.length - 2))) - .1;
                                c = `${t}px`
                            }
                            isInstanceOfElement(t, HTMLIFrameElement) && "display" === l && "inline" === c && (c = "block"), "d" === l && r.getAttribute("d") && (c = `path(${r.getAttribute("d")})`), a.setProperty(l, c, s.getPropertyPriority(l))
                        })
                    }(a, s), clonePseudoElement(a, s, ":before"), clonePseudoElement(a, s, ":after"), isInstanceOfElement(a, HTMLTextAreaElement) && (s.innerHTML = a.value), isInstanceOfElement(a, HTMLInputElement) && s.setAttribute("value", a.value), function(t, r) {
                        if (isInstanceOfElement(t, HTMLSelectElement)) {
                            let a = Array.from(r.children).find(r => t.value === r.getAttribute("value"));
                            a && a.setAttribute("selected", "")
                        }
                    }(a, s)), s
                }).then(t => ensureSVGSymbols(t, r)) : null
            }
            let m = /url\((['"]?)([^'"]+?)\1\)/g,
                p = /url\([^)]+\)\s*format\((["']?)([^"']+)\1\)/g,
                h = /src:\s*(?:url\([^)]+\)\s*format\([^)]+\)[,;]\s*)+/g;
            async function embed_resources_embed(t, r, a, s, l) {
                try {
                    let c;
                    let d = a ? function(t, r) {
                            if (t.match(/^[a-z]+:\/\//i)) return t;
                            if (t.match(/^\/\//)) return window.location.protocol + t;
                            if (t.match(/^[a-z]+:/i)) return t;
                            let a = document.implementation.createHTMLDocument(),
                                s = a.createElement("base"),
                                l = a.createElement("a");
                            return a.head.appendChild(s), a.body.appendChild(l), r && (s.href = r), l.href = t, l.href
                        }(r, a) : r,
                        u = getMimeType(r);
                    if (l) {
                        let t = await l(d);
                        c = makeDataUrl(t, u)
                    } else c = await resourceToDataURL(d, u, s);
                    return t.replace(function(t) {
                        let r = t.replace(/([.*+?^${}()|\[\]\/\\])/g, "\\$1");
                        return RegExp(`(url\\(['"]?)(${r})(['"]?\\))`, "g")
                    }(r), `$1${c}$3`)
                } catch (t) {}
                return t
            }

            function shouldEmbed(t) {
                return -1 !== t.search(m)
            }
            async function embedResources(t, r, a) {
                if (!shouldEmbed(t)) return t;
                let s = function(t, {
                        preferredFontFormat: r
                    }) {
                        return r ? t.replace(h, t => {
                            for (;;) {
                                let [a, , s] = p.exec(t) || [];
                                if (!s) return "";
                                if (s === r) return `src: ${a};`
                            }
                        }) : t
                    }(t, a),
                    l = function(t) {
                        let r = [];
                        return t.replace(m, (t, a, s) => (r.push(s), t)), r.filter(t => !isDataUrl(t))
                    }(s);
                return l.reduce((t, s) => t.then(t => embed_resources_embed(t, s, r, a)), Promise.resolve(s))
            }
            async function embedProp(t, r, a) {
                var s;
                let l = null === (s = r.style) || void 0 === s ? void 0 : s.getPropertyValue(t);
                if (l) {
                    let s = await embedResources(l, null, a);
                    return r.style.setProperty(t, s, r.style.getPropertyPriority(t)), !0
                }
                return !1
            }
            async function embedBackground(t, r) {
                await embedProp("background", t, r) || await embedProp("background-image", t, r), await embedProp("mask", t, r) || await embedProp("mask-image", t, r)
            }
            async function embedImageNode(t, r) {
                let a = isInstanceOfElement(t, HTMLImageElement);
                if (!(a && !isDataUrl(t.src)) && !(isInstanceOfElement(t, SVGImageElement) && !isDataUrl(t.href.baseVal))) return;
                let s = a ? t.src : t.href.baseVal,
                    l = await resourceToDataURL(s, getMimeType(s), r);
                await new Promise((r, s) => {
                    t.onload = r, t.onerror = s, t.decode && (t.decode = r), "lazy" === t.loading && (t.loading = "eager"), a ? (t.srcset = "", t.src = l) : t.href.baseVal = l
                })
            }
            async function embedChildren(t, r) {
                let a = toArray(t.childNodes),
                    s = a.map(t => embedImages(t, r));
                await Promise.all(s).then(() => t)
            }
            async function embedImages(t, r) {
                isInstanceOfElement(t, Element) && (await embedBackground(t, r), await embedImageNode(t, r), await embedChildren(t, r))
            }
            let f = {};
            async function fetchCSS(t) {
                let r = f[t];
                if (null != r) return r;
                let a = await fetch(t),
                    s = await a.text();
                return r = {
                    url: t,
                    cssText: s
                }, f[t] = r, r
            }
            async function embedFonts(t, r) {
                let a = t.cssText,
                    s = /url\(["']?([^"')]+)["']?\)/g,
                    l = a.match(/url\([^)]+\)/g) || [],
                    c = l.map(async l => {
                        let c = l.replace(s, "$1");
                        return c.startsWith("https://") || (c = new URL(c, t.url).href), fetchAsDataURL(c, r.fetchRequestInit, ({
                            result: t
                        }) => (a = a.replace(l, `url(${t})`), [l, t]))
                    });
                return Promise.all(c).then(() => a)
            }

            function parseCSS(t) {
                if (null == t) return [];
                let r = [],
                    a = t.replace(/(\/\*[\s\S]*?\*\/)/gi, ""),
                    s = RegExp("((@.*?keyframes [\\s\\S]*?){([\\s\\S]*?}\\s*?)})", "gi");
                for (;;) {
                    let t = s.exec(a);
                    if (null === t) break;
                    r.push(t[0])
                }
                a = a.replace(s, "");
                let l = /@import[\s\S]*?url\([^)]*\)[\s\S]*?;/gi,
                    c = RegExp("((\\s*?(?:\\/\\*[\\s\\S]*?\\*\\/)?\\s*?@media[\\s\\S]*?){([\\s\\S]*?)}\\s*?})|(([\\s\\S]*?){([\\s\\S]*?)})", "gi");
                for (;;) {
                    let t = l.exec(a);
                    if (null === t) {
                        if (null === (t = c.exec(a))) break;
                        l.lastIndex = c.lastIndex
                    } else c.lastIndex = l.lastIndex;
                    r.push(t[0])
                }
                return r
            }
            async function getCSSRules(t, r) {
                let a = [],
                    s = [];
                return t.forEach(a => {
                    if ("cssRules" in a) try {
                        toArray(a.cssRules || []).forEach((t, l) => {
                            if (t.type === CSSRule.IMPORT_RULE) {
                                let c = l + 1,
                                    d = t.href,
                                    u = fetchCSS(d).then(t => embedFonts(t, r)).then(t => parseCSS(t).forEach(t => {
                                        try {
                                            a.insertRule(t, t.startsWith("@import") ? c += 1 : a.cssRules.length)
                                        } catch (r) {
                                            console.error("Error inserting rule from remote css", {
                                                rule: t,
                                                error: r
                                            })
                                        }
                                    })).catch(t => {
                                        console.error("Error loading remote css", t.toString())
                                    });
                                s.push(u)
                            }
                        })
                    } catch (c) {
                        let l = t.find(t => null == t.href) || document.styleSheets[0];
                        null != a.href && s.push(fetchCSS(a.href).then(t => embedFonts(t, r)).then(t => parseCSS(t).forEach(t => {
                            l.insertRule(t, a.cssRules.length)
                        })).catch(t => {
                            console.error("Error loading remote stylesheet", t)
                        })), console.error("Error inlining remote css file", c)
                    }
                }), Promise.all(s).then(() => (t.forEach(t => {
                    if ("cssRules" in t) try {
                        toArray(t.cssRules || []).forEach(t => {
                            a.push(t)
                        })
                    } catch (r) {
                        console.error(`Error while reading CSS rules from ${t.href}`, r)
                    }
                }), a))
            }
            async function parseWebFontRules(t, r) {
                if (null == t.ownerDocument) throw Error("Provided element is not within a Document");
                let a = toArray(t.ownerDocument.styleSheets),
                    s = await getCSSRules(a, r);
                return s.filter(t => t.type === CSSRule.FONT_FACE_RULE).filter(t => shouldEmbed(t.style.getPropertyValue("src")))
            }
            async function embed_webfonts_getWebFontCSS(t, r) {
                let a = await parseWebFontRules(t, r),
                    s = await Promise.all(a.map(t => {
                        let a = t.parentStyleSheet ? t.parentStyleSheet.href : null;
                        return embedResources(t.cssText, a, r)
                    }));
                return s.join("\n")
            }
            async function embedWebFonts(t, r) {
                let a = null != r.fontEmbedCSS ? r.fontEmbedCSS : r.skipFonts ? null : await embed_webfonts_getWebFontCSS(t, r);
                if (a) {
                    let r = document.createElement("style"),
                        s = document.createTextNode(a);
                    r.appendChild(s), t.firstChild ? t.insertBefore(r, t.firstChild) : t.appendChild(r)
                }
            }
            async function toSvg(t, r = {}) {
                let {
                    width: a,
                    height: s
                } = util_getImageSize(t, r), l = await cloneNode(t, r, !0);
                await embedWebFonts(l, r), await embedImages(l, r),
                    function(t, r) {
                        let {
                            style: a
                        } = t;
                        r.backgroundColor && (a.backgroundColor = r.backgroundColor), r.width && (a.width = `${r.width}px`), r.height && (a.height = `${r.height}px`);
                        let s = r.style;
                        null != s && Object.keys(s).forEach(t => {
                            a[t] = s[t]
                        })
                    }(l, r);
                let c = await nodeToDataURL(l, a, s);
                return c
            }
            async function toCanvas(t, r = {}) {
                let {
                    width: a,
                    height: s
                } = util_getImageSize(t, r), l = await toSvg(t, r), c = await createImage(l), d = document.createElement("canvas"), u = d.getContext("2d"), m = r.pixelRatio || function() {
                    let t, r;
                    try {
                        r = process
                    } catch (t) {}
                    let a = r && r.env ? r.env.devicePixelRatio : null;
                    return a && Number.isNaN(t = parseInt(a, 10)) && (t = 1), t || window.devicePixelRatio || 1
                }(), p = r.canvasWidth || a, h = r.canvasHeight || s;
                return d.width = p * m, d.height = h * m, !r.skipAutoScale && (d.width > 16384 || d.height > 16384) && (d.width > 16384 && d.height > 16384 ? d.width > d.height ? (d.height *= 16384 / d.width, d.width = 16384) : (d.width *= 16384 / d.height, d.height = 16384) : d.width > 16384 ? (d.height *= 16384 / d.width, d.width = 16384) : (d.width *= 16384 / d.height, d.height = 16384)), d.style.width = `${p}`, d.style.height = `${h}`, r.backgroundColor && (u.fillStyle = r.backgroundColor, u.fillRect(0, 0, d.width, d.height)), u.drawImage(c, 0, 0, d.width, d.height), d
            }
            async function toJpeg(t, r = {}) {
                let a = await toCanvas(t, r);
                return a.toDataURL("image/jpeg", r.quality || 1)
            }
        },
        97513: function(t, r, a) {
            "use strict";
            var s = a(41609)(),
                l = a(32645)("Object.prototype.toString"),
                isStandardArguments = function(t) {
                    return (!s || !t || "object" != typeof t || !(Symbol.toStringTag in t)) && "[object Arguments]" === l(t)
                },
                isLegacyArguments = function(t) {
                    return !!isStandardArguments(t) || null !== t && "object" == typeof t && "number" == typeof t.length && t.length >= 0 && "[object Array]" !== l(t) && "[object Function]" === l(t.callee)
                },
                c = function() {
                    return isStandardArguments(arguments)
                }();
            isStandardArguments.isLegacyArguments = isLegacyArguments, t.exports = c ? isStandardArguments : isLegacyArguments
        },
        70915: function(t) {
            "use strict";
            var r, a, s = Function.prototype.toString,
                l = "object" == typeof Reflect && null !== Reflect && Reflect.apply;
            if ("function" == typeof l && "function" == typeof Object.defineProperty) try {
                r = Object.defineProperty({}, "length", {
                    get: function() {
                        throw a
                    }
                }), a = {}, l(function() {
                    throw 42
                }, null, r)
            } catch (t) {
                t !== a && (l = null)
            } else l = null;
            var c = /^\s*class\b/,
                isES6ClassFn = function(t) {
                    try {
                        var r = s.call(t);
                        return c.test(r)
                    } catch (t) {
                        return !1
                    }
                },
                tryFunctionObject = function(t) {
                    try {
                        if (isES6ClassFn(t)) return !1;
                        return s.call(t), !0
                    } catch (t) {
                        return !1
                    }
                },
                d = Object.prototype.toString,
                u = "function" == typeof Symbol && !!Symbol.toStringTag,
                m = !(0 in [, ]),
                isDDA = function() {
                    return !1
                };
            if ("object" == typeof document) {
                var p = document.all;
                d.call(p) === d.call(document.all) && (isDDA = function(t) {
                    if ((m || !t) && (void 0 === t || "object" == typeof t)) try {
                        var r = d.call(t);
                        return ("[object HTMLAllCollection]" === r || "[object HTML document.all class]" === r || "[object HTMLCollection]" === r || "[object Object]" === r) && null == t("")
                    } catch (t) {}
                    return !1
                })
            }
            t.exports = l ? function(t) {
                if (isDDA(t)) return !0;
                if (!t || "function" != typeof t && "object" != typeof t) return !1;
                try {
                    l(t, null, r)
                } catch (t) {
                    if (t !== a) return !1
                }
                return !isES6ClassFn(t) && tryFunctionObject(t)
            } : function(t) {
                if (isDDA(t)) return !0;
                if (!t || "function" != typeof t && "object" != typeof t) return !1;
                if (u) return tryFunctionObject(t);
                if (isES6ClassFn(t)) return !1;
                var r = d.call(t);
                return !!("[object Function]" === r || "[object GeneratorFunction]" === r || /^\[object HTML/.test(r)) && tryFunctionObject(t)
            }
        },
        34993: function(t, r, a) {
            "use strict";
            var s, l = Object.prototype.toString,
                c = Function.prototype.toString,
                d = /^\s*(?:function)?\*/,
                u = a(41609)(),
                m = Object.getPrototypeOf,
                getGeneratorFunc = function() {
                    if (!u) return !1;
                    try {
                        return Function("return function*() {}")()
                    } catch (t) {}
                };
            t.exports = function(t) {
                if ("function" != typeof t) return !1;
                if (d.test(c.call(t))) return !0;
                if (!u) return "[object GeneratorFunction]" === l.call(t);
                if (!m) return !1;
                if (void 0 === s) {
                    var r = getGeneratorFunc();
                    s = !!r && m(r)
                }
                return m(t) === s
            }
        },
        84556: function(t) {
            "use strict";
            t.exports = function(t) {
                return t != t
            }
        },
        8755: function(t, r, a) {
            "use strict";
            var s = a(39401),
                l = a(87342),
                c = a(84556),
                d = a(82513),
                u = a(40389),
                m = s(d(), Number);
            l(m, {
                getPolyfill: d,
                implementation: c,
                shim: u
            }), t.exports = m
        },
        82513: function(t, r, a) {
            "use strict";
            var s = a(84556);
            t.exports = function() {
                return Number.isNaN && Number.isNaN(NaN) && !Number.isNaN("a") ? Number.isNaN : s
            }
        },
        40389: function(t, r, a) {
            "use strict";
            var s = a(87342),
                l = a(82513);
            t.exports = function() {
                var t = l();
                return s(Number, {
                    isNaN: t
                }, {
                    isNaN: function() {
                        return Number.isNaN !== t
                    }
                }), t
            }
        },
        27423: function(t, r, a) {
            "use strict";
            var s = a(38834);
            t.exports = function(t) {
                return !!s(t)
            }
        },
        73422: function(t) {
            "use strict";
            t.exports = function() {
                return Object.assign
            }
        },
        37918: function(t) {
            "use strict";
            var numberIsNaN = function(t) {
                return t != t
            };
            t.exports = function(t, r) {
                return 0 === t && 0 === r ? 1 / t == 1 / r : !!(t === r || numberIsNaN(t) && numberIsNaN(r))
            }
        },
        93903: function(t, r, a) {
            "use strict";
            var s = a(87342),
                l = a(39401),
                c = a(37918),
                d = a(98242),
                u = a(8374),
                m = l(d(), Object);
            s(m, {
                getPolyfill: d,
                implementation: c,
                shim: u
            }), t.exports = m
        },
        98242: function(t, r, a) {
            "use strict";
            var s = a(37918);
            t.exports = function() {
                return "function" == typeof Object.is ? Object.is : s
            }
        },
        8374: function(t, r, a) {
            "use strict";
            var s = a(98242),
                l = a(87342);
            t.exports = function() {
                var t = s();
                return l(Object, {
                    is: t
                }, {
                    is: function() {
                        return Object.is !== t
                    }
                }), t
            }
        },
        40112: function(t, r, a) {
            "use strict";
            var s;
            if (!Object.keys) {
                var l = Object.prototype.hasOwnProperty,
                    c = Object.prototype.toString,
                    d = a(93178),
                    u = Object.prototype.propertyIsEnumerable,
                    m = !u.call({
                        toString: null
                    }, "toString"),
                    p = u.call(function() {}, "prototype"),
                    h = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"],
                    equalsConstructorPrototype = function(t) {
                        var r = t.constructor;
                        return r && r.prototype === t
                    },
                    f = {
                        $applicationCache: !0,
                        $console: !0,
                        $external: !0,
                        $frame: !0,
                        $frameElement: !0,
                        $frames: !0,
                        $innerHeight: !0,
                        $innerWidth: !0,
                        $onmozfullscreenchange: !0,
                        $onmozfullscreenerror: !0,
                        $outerHeight: !0,
                        $outerWidth: !0,
                        $pageXOffset: !0,
                        $pageYOffset: !0,
                        $parent: !0,
                        $scrollLeft: !0,
                        $scrollTop: !0,
                        $scrollX: !0,
                        $scrollY: !0,
                        $self: !0,
                        $webkitIndexedDB: !0,
                        $webkitStorageInfo: !0,
                        $window: !0
                    },
                    y = function() {
                        if ("undefined" == typeof window) return !1;
                        for (var t in window) try {
                            if (!f["$" + t] && l.call(window, t) && null !== window[t] && "object" == typeof window[t]) try {
                                equalsConstructorPrototype(window[t])
                            } catch (t) {
                                return !0
                            }
                        } catch (t) {
                            return !0
                        }
                        return !1
                    }(),
                    equalsConstructorPrototypeIfNotBuggy = function(t) {
                        if ("undefined" == typeof window || !y) return equalsConstructorPrototype(t);
                        try {
                            return equalsConstructorPrototype(t)
                        } catch (t) {
                            return !1
                        }
                    };
                s = function(t) {
                    var r = null !== t && "object" == typeof t,
                        a = "[object Function]" === c.call(t),
                        s = d(t),
                        u = r && "[object String]" === c.call(t),
                        f = [];
                    if (!r && !a && !s) throw TypeError("Object.keys called on a non-object");
                    var y = p && a;
                    if (u && t.length > 0 && !l.call(t, 0))
                        for (var b = 0; b < t.length; ++b) f.push(String(b));
                    if (s && t.length > 0)
                        for (var C = 0; C < t.length; ++C) f.push(String(C));
                    else
                        for (var E in t) !(y && "prototype" === E) && l.call(t, E) && f.push(String(E));
                    if (m)
                        for (var j = equalsConstructorPrototypeIfNotBuggy(t), I = 0; I < h.length; ++I) !(j && "constructor" === h[I]) && l.call(t, h[I]) && f.push(h[I]);
                    return f
                }
            }
            t.exports = s
        },
        61854: function(t, r, a) {
            "use strict";
            var s = Array.prototype.slice,
                l = a(93178),
                c = Object.keys,
                d = c ? function(t) {
                    return c(t)
                } : a(40112),
                u = Object.keys;
            d.shim = function() {
                return Object.keys ? ! function() {
                    var t = Object.keys(arguments);
                    return t && t.length === arguments.length
                }(1, 2) && (Object.keys = function(t) {
                    return l(t) ? u(s.call(t)) : u(t)
                }) : Object.keys = d, Object.keys || d
            }, t.exports = d
        },
        93178: function(t) {
            "use strict";
            var r = Object.prototype.toString;
            t.exports = function(t) {
                var a = r.call(t),
                    s = "[object Arguments]" === a;
                return s || (s = "[object Array]" !== a && null !== t && "object" == typeof t && "number" == typeof t.length && t.length >= 0 && "[object Function]" === r.call(t.callee)), s
            }
        },
        25859: function(t) {
            "use strict";

            function Cache(t) {
                this._maxSize = t, this.clear()
            }
            Cache.prototype.clear = function() {
                this._size = 0, this._values = Object.create(null)
            }, Cache.prototype.get = function(t) {
                return this._values[t]
            }, Cache.prototype.set = function(t, r) {
                return this._size >= this._maxSize && this.clear(), !(t in this._values) && this._size++, this._values[t] = r
            };
            var r = /[^.^\]^[]+|(?=\[\]|\.\.)/g,
                a = /^\d+$/,
                s = /^\d/,
                l = /[~`!#$%\^&*+=\-\[\]\\';,/{}|\\":<>\?]/g,
                c = /^\s*(['"]?)(.*?)(\1)\s*$/,
                d = new Cache(512),
                u = new Cache(512),
                m = new Cache(512);

            function normalizePath(t) {
                return d.get(t) || d.set(t, split(t).map(function(t) {
                    return t.replace(c, "$2")
                }))
            }

            function split(t) {
                return t.match(r) || [""]
            }

            function isQuoted(t) {
                return "string" == typeof t && t && -1 !== ["'", '"'].indexOf(t.charAt(0))
            }
            t.exports = {
                Cache: Cache,
                split: split,
                normalizePath: normalizePath,
                setter: function(t) {
                    var r = normalizePath(t);
                    return u.get(t) || u.set(t, function(t, a) {
                        for (var s = 0, l = r.length, c = t; s < l - 1;) {
                            var d = r[s];
                            if ("__proto__" === d || "constructor" === d || "prototype" === d) return t;
                            c = c[r[s++]]
                        }
                        c[r[s]] = a
                    })
                },
                getter: function(t, r) {
                    var a = normalizePath(t);
                    return m.get(t) || m.set(t, function(t) {
                        for (var s = 0, l = a.length; s < l;) {
                            if (null == t && r) return;
                            t = t[a[s++]]
                        }
                        return t
                    })
                },
                join: function(t) {
                    return t.reduce(function(t, r) {
                        return t + (isQuoted(r) || a.test(r) ? "[" + r + "]" : (t ? "." : "") + r)
                    }, "")
                },
                forEach: function(t, r, c) {
                    ! function(t, r, c) {
                        var d, u, m, p, h, f = t.length;
                        for (m = 0; m < f; m++) {
                            (u = t[m]) && (!isQuoted(d = u) && (d.match(s) && !d.match(a) || l.test(d)) && (u = '"' + u + '"'), p = !(h = isQuoted(u)) && /^\d+$/.test(u), r.call(c, u, h, p, m, t))
                        }
                    }(Array.isArray(t) ? t : split(t), r, c)
                }
            }
        },
        98201: function(t, r, a) {
            let s = a(90548),
                l = a(87146),
                c = a(69934),
                d = a(73434);

            function renderCanvas(t, r, a, c, d) {
                let u = [].slice.call(arguments, 1),
                    m = u.length,
                    p = "function" == typeof u[m - 1];
                if (!p && !s()) throw Error("Callback required as last argument");
                if (p) {
                    if (m < 2) throw Error("Too few arguments provided");
                    2 === m ? (d = a, a = r, r = c = void 0) : 3 === m && (r.getContext && void 0 === d ? (d = c, c = void 0) : (d = c, c = a, a = r, r = void 0))
                } else {
                    if (m < 1) throw Error("Too few arguments provided");
                    return 1 === m ? (a = r, r = c = void 0) : 2 !== m || r.getContext || (c = a, a = r, r = void 0), new Promise(function(s, d) {
                        try {
                            let d = l.create(a, c);
                            s(t(d, r, c))
                        } catch (t) {
                            d(t)
                        }
                    })
                }
                try {
                    let s = l.create(a, c);
                    d(null, t(s, r, c))
                } catch (t) {
                    d(t)
                }
            }
            r.create = l.create, r.toCanvas = renderCanvas.bind(null, c.render), r.toDataURL = renderCanvas.bind(null, c.renderToDataURL), r.toString = renderCanvas.bind(null, function(t, r, a) {
                return d.render(t, a)
            })
        },
        90548: function(t) {
            t.exports = function() {
                return "function" == typeof Promise && Promise.prototype && Promise.prototype.then
            }
        },
        16821: function(t, r, a) {
            let s = a(18322).getSymbolSize;
            r.getRowColCoords = function(t) {
                if (1 === t) return [];
                let r = Math.floor(t / 7) + 2,
                    a = s(t),
                    l = 145 === a ? 26 : 2 * Math.ceil((a - 13) / (2 * r - 2)),
                    c = [a - 7];
                for (let t = 1; t < r - 1; t++) c[t] = c[t - 1] - l;
                return c.push(6), c.reverse()
            }, r.getPositions = function(t) {
                let a = [],
                    s = r.getRowColCoords(t),
                    l = s.length;
                for (let t = 0; t < l; t++)
                    for (let r = 0; r < l; r++)(0 !== t || 0 !== r) && (0 !== t || r !== l - 1) && (t !== l - 1 || 0 !== r) && a.push([s[t], s[r]]);
                return a
            }
        },
        83399: function(t, r, a) {
            let s = a(14788),
                l = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", " ", "$", "%", "*", "+", "-", ".", "/", ":"];

            function AlphanumericData(t) {
                this.mode = s.ALPHANUMERIC, this.data = t
            }
            AlphanumericData.getBitsLength = function(t) {
                return 11 * Math.floor(t / 2) + 6 * (t % 2)
            }, AlphanumericData.prototype.getLength = function() {
                return this.data.length
            }, AlphanumericData.prototype.getBitsLength = function() {
                return AlphanumericData.getBitsLength(this.data.length)
            }, AlphanumericData.prototype.write = function(t) {
                let r;
                for (r = 0; r + 2 <= this.data.length; r += 2) {
                    let a = 45 * l.indexOf(this.data[r]);
                    a += l.indexOf(this.data[r + 1]), t.put(a, 11)
                }
                this.data.length % 2 && t.put(l.indexOf(this.data[r]), 6)
            }, t.exports = AlphanumericData
        },
        11488: function(t) {
            function BitBuffer() {
                this.buffer = [], this.length = 0
            }
            BitBuffer.prototype = {
                get: function(t) {
                    return (this.buffer[Math.floor(t / 8)] >>> 7 - t % 8 & 1) == 1
                },
                put: function(t, r) {
                    for (let a = 0; a < r; a++) this.putBit((t >>> r - a - 1 & 1) == 1)
                },
                getLengthInBits: function() {
                    return this.length
                },
                putBit: function(t) {
                    let r = Math.floor(this.length / 8);
                    this.buffer.length <= r && this.buffer.push(0), t && (this.buffer[r] |= 128 >>> this.length % 8), this.length++
                }
            }, t.exports = BitBuffer
        },
        90585: function(t) {
            function BitMatrix(t) {
                if (!t || t < 1) throw Error("BitMatrix size must be defined and greater than 0");
                this.size = t, this.data = new Uint8Array(t * t), this.reservedBit = new Uint8Array(t * t)
            }
            BitMatrix.prototype.set = function(t, r, a, s) {
                let l = t * this.size + r;
                this.data[l] = a, s && (this.reservedBit[l] = !0)
            }, BitMatrix.prototype.get = function(t, r) {
                return this.data[t * this.size + r]
            }, BitMatrix.prototype.xor = function(t, r, a) {
                this.data[t * this.size + r] ^= a
            }, BitMatrix.prototype.isReserved = function(t, r) {
                return this.reservedBit[t * this.size + r]
            }, t.exports = BitMatrix
        },
        19046: function(t, r, a) {
            let s = a(30668),
                l = a(14788);

            function ByteData(t) {
                this.mode = l.BYTE, "string" == typeof t && (t = s(t)), this.data = new Uint8Array(t)
            }
            ByteData.getBitsLength = function(t) {
                return 8 * t
            }, ByteData.prototype.getLength = function() {
                return this.data.length
            }, ByteData.prototype.getBitsLength = function() {
                return ByteData.getBitsLength(this.data.length)
            }, ByteData.prototype.write = function(t) {
                for (let r = 0, a = this.data.length; r < a; r++) t.put(this.data[r], 8)
            }, t.exports = ByteData
        },
        12361: function(t, r, a) {
            let s = a(66426),
                l = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 4, 1, 2, 4, 4, 2, 4, 4, 4, 2, 4, 6, 5, 2, 4, 6, 6, 2, 5, 8, 8, 4, 5, 8, 8, 4, 5, 8, 11, 4, 8, 10, 11, 4, 9, 12, 16, 4, 9, 16, 16, 6, 10, 12, 18, 6, 10, 17, 16, 6, 11, 16, 19, 6, 13, 18, 21, 7, 14, 21, 25, 8, 16, 20, 25, 8, 17, 23, 25, 9, 17, 23, 34, 9, 18, 25, 30, 10, 20, 27, 32, 12, 21, 29, 35, 12, 23, 34, 37, 12, 25, 34, 40, 13, 26, 35, 42, 14, 28, 38, 45, 15, 29, 40, 48, 16, 31, 43, 51, 17, 33, 45, 54, 18, 35, 48, 57, 19, 37, 51, 60, 19, 38, 53, 63, 20, 40, 56, 66, 21, 43, 59, 70, 22, 45, 62, 74, 24, 47, 65, 77, 25, 49, 68, 81],
                c = [7, 10, 13, 17, 10, 16, 22, 28, 15, 26, 36, 44, 20, 36, 52, 64, 26, 48, 72, 88, 36, 64, 96, 112, 40, 72, 108, 130, 48, 88, 132, 156, 60, 110, 160, 192, 72, 130, 192, 224, 80, 150, 224, 264, 96, 176, 260, 308, 104, 198, 288, 352, 120, 216, 320, 384, 132, 240, 360, 432, 144, 280, 408, 480, 168, 308, 448, 532, 180, 338, 504, 588, 196, 364, 546, 650, 224, 416, 600, 700, 224, 442, 644, 750, 252, 476, 690, 816, 270, 504, 750, 900, 300, 560, 810, 960, 312, 588, 870, 1050, 336, 644, 952, 1110, 360, 700, 1020, 1200, 390, 728, 1050, 1260, 420, 784, 1140, 1350, 450, 812, 1200, 1440, 480, 868, 1290, 1530, 510, 924, 1350, 1620, 540, 980, 1440, 1710, 570, 1036, 1530, 1800, 570, 1064, 1590, 1890, 600, 1120, 1680, 1980, 630, 1204, 1770, 2100, 660, 1260, 1860, 2220, 720, 1316, 1950, 2310, 750, 1372, 2040, 2430];
            r.getBlocksCount = function(t, r) {
                switch (r) {
                    case s.L:
                        return l[(t - 1) * 4 + 0];
                    case s.M:
                        return l[(t - 1) * 4 + 1];
                    case s.Q:
                        return l[(t - 1) * 4 + 2];
                    case s.H:
                        return l[(t - 1) * 4 + 3];
                    default:
                        return
                }
            }, r.getTotalCodewordsCount = function(t, r) {
                switch (r) {
                    case s.L:
                        return c[(t - 1) * 4 + 0];
                    case s.M:
                        return c[(t - 1) * 4 + 1];
                    case s.Q:
                        return c[(t - 1) * 4 + 2];
                    case s.H:
                        return c[(t - 1) * 4 + 3];
                    default:
                        return
                }
            }
        },
        66426: function(t, r) {
            r.L = {
                bit: 1
            }, r.M = {
                bit: 0
            }, r.Q = {
                bit: 3
            }, r.H = {
                bit: 2
            }, r.isValid = function(t) {
                return t && void 0 !== t.bit && t.bit >= 0 && t.bit < 4
            }, r.from = function(t, a) {
                if (r.isValid(t)) return t;
                try {
                    return function(t) {
                        if ("string" != typeof t) throw Error("Param is not a string");
                        let a = t.toLowerCase();
                        switch (a) {
                            case "l":
                            case "low":
                                return r.L;
                            case "m":
                            case "medium":
                                return r.M;
                            case "q":
                            case "quartile":
                                return r.Q;
                            case "h":
                            case "high":
                                return r.H;
                            default:
                                throw Error("Unknown EC Level: " + t)
                        }
                    }(t)
                } catch (t) {
                    return a
                }
            }
        },
        15762: function(t, r, a) {
            let s = a(18322).getSymbolSize;
            r.getPositions = function(t) {
                let r = s(t);
                return [
                    [0, 0],
                    [r - 7, 0],
                    [0, r - 7]
                ]
            }
        },
        62122: function(t, r, a) {
            let s = a(18322),
                l = s.getBCHDigit(1335);
            r.getEncodedBits = function(t, r) {
                let a = t.bit << 3 | r,
                    c = a << 10;
                for (; s.getBCHDigit(c) - l >= 0;) c ^= 1335 << s.getBCHDigit(c) - l;
                return (a << 10 | c) ^ 21522
            }
        },
        52057: function(t, r) {
            let a = new Uint8Array(512),
                s = new Uint8Array(256);
            ! function() {
                let t = 1;
                for (let r = 0; r < 255; r++) a[r] = t, s[t] = r, 256 & (t <<= 1) && (t ^= 285);
                for (let t = 255; t < 512; t++) a[t] = a[t - 255]
            }(), r.log = function(t) {
                if (t < 1) throw Error("log(" + t + ")");
                return s[t]
            }, r.exp = function(t) {
                return a[t]
            }, r.mul = function(t, r) {
                return 0 === t || 0 === r ? 0 : a[s[t] + s[r]]
            }
        },
        25259: function(t, r, a) {
            let s = a(14788),
                l = a(18322);

            function KanjiData(t) {
                this.mode = s.KANJI, this.data = t
            }
            KanjiData.getBitsLength = function(t) {
                return 13 * t
            }, KanjiData.prototype.getLength = function() {
                return this.data.length
            }, KanjiData.prototype.getBitsLength = function() {
                return KanjiData.getBitsLength(this.data.length)
            }, KanjiData.prototype.write = function(t) {
                let r;
                for (r = 0; r < this.data.length; r++) {
                    let a = l.toSJIS(this.data[r]);
                    if (a >= 33088 && a <= 40956) a -= 33088;
                    else if (a >= 57408 && a <= 60351) a -= 49472;
                    else throw Error("Invalid SJIS character: " + this.data[r] + "\nMake sure your charset is UTF-8");
                    a = (a >>> 8 & 255) * 192 + (255 & a), t.put(a, 13)
                }
            }, t.exports = KanjiData
        },
        65771: function(t, r) {
            r.Patterns = {
                PATTERN000: 0,
                PATTERN001: 1,
                PATTERN010: 2,
                PATTERN011: 3,
                PATTERN100: 4,
                PATTERN101: 5,
                PATTERN110: 6,
                PATTERN111: 7
            };
            let a = {
                N1: 3,
                N2: 3,
                N3: 40,
                N4: 10
            };
            r.isValid = function(t) {
                return null != t && "" !== t && !isNaN(t) && t >= 0 && t <= 7
            }, r.from = function(t) {
                return r.isValid(t) ? parseInt(t, 10) : void 0
            }, r.getPenaltyN1 = function(t) {
                let r = t.size,
                    s = 0,
                    l = 0,
                    c = 0,
                    d = null,
                    u = null;
                for (let m = 0; m < r; m++) {
                    l = c = 0, d = u = null;
                    for (let p = 0; p < r; p++) {
                        let r = t.get(m, p);
                        r === d ? l++ : (l >= 5 && (s += a.N1 + (l - 5)), d = r, l = 1), (r = t.get(p, m)) === u ? c++ : (c >= 5 && (s += a.N1 + (c - 5)), u = r, c = 1)
                    }
                    l >= 5 && (s += a.N1 + (l - 5)), c >= 5 && (s += a.N1 + (c - 5))
                }
                return s
            }, r.getPenaltyN2 = function(t) {
                let r = t.size,
                    s = 0;
                for (let a = 0; a < r - 1; a++)
                    for (let l = 0; l < r - 1; l++) {
                        let r = t.get(a, l) + t.get(a, l + 1) + t.get(a + 1, l) + t.get(a + 1, l + 1);
                        (4 === r || 0 === r) && s++
                    }
                return s * a.N2
            }, r.getPenaltyN3 = function(t) {
                let r = t.size,
                    s = 0,
                    l = 0,
                    c = 0;
                for (let a = 0; a < r; a++) {
                    l = c = 0;
                    for (let d = 0; d < r; d++) l = l << 1 & 2047 | t.get(a, d), d >= 10 && (1488 === l || 93 === l) && s++, c = c << 1 & 2047 | t.get(d, a), d >= 10 && (1488 === c || 93 === c) && s++
                }
                return s * a.N3
            }, r.getPenaltyN4 = function(t) {
                let r = 0,
                    s = t.data.length;
                for (let a = 0; a < s; a++) r += t.data[a];
                let l = Math.abs(Math.ceil(100 * r / s / 5) - 10);
                return l * a.N4
            }, r.applyMask = function(t, a) {
                let s = a.size;
                for (let l = 0; l < s; l++)
                    for (let c = 0; c < s; c++) a.isReserved(c, l) || a.xor(c, l, function(t, a, s) {
                        switch (t) {
                            case r.Patterns.PATTERN000:
                                return (a + s) % 2 == 0;
                            case r.Patterns.PATTERN001:
                                return a % 2 == 0;
                            case r.Patterns.PATTERN010:
                                return s % 3 == 0;
                            case r.Patterns.PATTERN011:
                                return (a + s) % 3 == 0;
                            case r.Patterns.PATTERN100:
                                return (Math.floor(a / 2) + Math.floor(s / 3)) % 2 == 0;
                            case r.Patterns.PATTERN101:
                                return a * s % 2 + a * s % 3 == 0;
                            case r.Patterns.PATTERN110:
                                return (a * s % 2 + a * s % 3) % 2 == 0;
                            case r.Patterns.PATTERN111:
                                return (a * s % 3 + (a + s) % 2) % 2 == 0;
                            default:
                                throw Error("bad maskPattern:" + t)
                        }
                    }(t, c, l))
            }, r.getBestMask = function(t, a) {
                let s = Object.keys(r.Patterns).length,
                    l = 0,
                    c = 1 / 0;
                for (let d = 0; d < s; d++) {
                    a(d), r.applyMask(d, t);
                    let s = r.getPenaltyN1(t) + r.getPenaltyN2(t) + r.getPenaltyN3(t) + r.getPenaltyN4(t);
                    r.applyMask(d, t), s < c && (c = s, l = d)
                }
                return l
            }
        },
        14788: function(t, r, a) {
            let s = a(77790),
                l = a(85267);
            r.NUMERIC = {
                id: "Numeric",
                bit: 1,
                ccBits: [10, 12, 14]
            }, r.ALPHANUMERIC = {
                id: "Alphanumeric",
                bit: 2,
                ccBits: [9, 11, 13]
            }, r.BYTE = {
                id: "Byte",
                bit: 4,
                ccBits: [8, 16, 16]
            }, r.KANJI = {
                id: "Kanji",
                bit: 8,
                ccBits: [8, 10, 12]
            }, r.MIXED = {
                bit: -1
            }, r.getCharCountIndicator = function(t, r) {
                if (!t.ccBits) throw Error("Invalid mode: " + t);
                if (!s.isValid(r)) throw Error("Invalid version: " + r);
                return r >= 1 && r < 10 ? t.ccBits[0] : r < 27 ? t.ccBits[1] : t.ccBits[2]
            }, r.getBestModeForData = function(t) {
                return l.testNumeric(t) ? r.NUMERIC : l.testAlphanumeric(t) ? r.ALPHANUMERIC : l.testKanji(t) ? r.KANJI : r.BYTE
            }, r.toString = function(t) {
                if (t && t.id) return t.id;
                throw Error("Invalid mode")
            }, r.isValid = function(t) {
                return t && t.bit && t.ccBits
            }, r.from = function(t, a) {
                if (r.isValid(t)) return t;
                try {
                    return function(t) {
                        if ("string" != typeof t) throw Error("Param is not a string");
                        let a = t.toLowerCase();
                        switch (a) {
                            case "numeric":
                                return r.NUMERIC;
                            case "alphanumeric":
                                return r.ALPHANUMERIC;
                            case "kanji":
                                return r.KANJI;
                            case "byte":
                                return r.BYTE;
                            default:
                                throw Error("Unknown mode: " + t)
                        }
                    }(t)
                } catch (t) {
                    return a
                }
            }
        },
        29359: function(t, r, a) {
            let s = a(14788);

            function NumericData(t) {
                this.mode = s.NUMERIC, this.data = t.toString()
            }
            NumericData.getBitsLength = function(t) {
                return 10 * Math.floor(t / 3) + (t % 3 ? t % 3 * 3 + 1 : 0)
            }, NumericData.prototype.getLength = function() {
                return this.data.length
            }, NumericData.prototype.getBitsLength = function() {
                return NumericData.getBitsLength(this.data.length)
            }, NumericData.prototype.write = function(t) {
                let r, a;
                for (r = 0; r + 3 <= this.data.length; r += 3) a = parseInt(this.data.substr(r, 3), 10), t.put(a, 10);
                let s = this.data.length - r;
                s > 0 && (a = parseInt(this.data.substr(r), 10), t.put(a, 3 * s + 1))
            }, t.exports = NumericData
        },
        34152: function(t, r, a) {
            let s = a(52057);
            r.mul = function(t, r) {
                let a = new Uint8Array(t.length + r.length - 1);
                for (let l = 0; l < t.length; l++)
                    for (let c = 0; c < r.length; c++) a[l + c] ^= s.mul(t[l], r[c]);
                return a
            }, r.mod = function(t, r) {
                let a = new Uint8Array(t);
                for (; a.length - r.length >= 0;) {
                    let t = a[0];
                    for (let l = 0; l < r.length; l++) a[l] ^= s.mul(r[l], t);
                    let l = 0;
                    for (; l < a.length && 0 === a[l];) l++;
                    a = a.slice(l)
                }
                return a
            }, r.generateECPolynomial = function(t) {
                let a = new Uint8Array([1]);
                for (let l = 0; l < t; l++) a = r.mul(a, new Uint8Array([1, s.exp(l)]));
                return a
            }
        },
        87146: function(t, r, a) {
            let s = a(18322),
                l = a(66426),
                c = a(11488),
                d = a(90585),
                u = a(16821),
                m = a(15762),
                p = a(65771),
                h = a(12361),
                f = a(7455),
                y = a(31923),
                b = a(62122),
                C = a(14788),
                E = a(90719);

            function setupFormatInfo(t, r, a) {
                let s, l;
                let c = t.size,
                    d = b.getEncodedBits(r, a);
                for (s = 0; s < 15; s++) l = (d >> s & 1) == 1, s < 6 ? t.set(s, 8, l, !0) : s < 8 ? t.set(s + 1, 8, l, !0) : t.set(c - 15 + s, 8, l, !0), s < 8 ? t.set(8, c - s - 1, l, !0) : s < 9 ? t.set(8, 15 - s - 1 + 1, l, !0) : t.set(8, 15 - s - 1, l, !0);
                t.set(c - 8, 8, 1, !0)
            }
            r.create = function(t, r) {
                let a, b;
                if (void 0 === t || "" === t) throw Error("No input text");
                let j = l.M;
                return void 0 !== r && (j = l.from(r.errorCorrectionLevel, l.M), a = y.from(r.version), b = p.from(r.maskPattern), r.toSJISFunc && s.setToSJISFunction(r.toSJISFunc)),
                    function(t, r, a, l) {
                        let b;
                        if (Array.isArray(t)) b = E.fromArray(t);
                        else if ("string" == typeof t) {
                            let s = r;
                            if (!s) {
                                let r = E.rawSplit(t);
                                s = y.getBestVersionForData(r, a)
                            }
                            b = E.fromString(t, s || 40)
                        } else throw Error("Invalid data");
                        let j = y.getBestVersionForData(b, a);
                        if (!j) throw Error("The amount of data is too big to be stored in a QR Code");
                        if (r) {
                            if (r < j) throw Error("\nThe chosen QR Code version cannot contain this amount of data.\nMinimum version required to store current data is: " + j + ".\n")
                        } else r = j;
                        let I = function(t, r, a) {
                                let l = new c;
                                a.forEach(function(r) {
                                    l.put(r.mode.bit, 4), l.put(r.getLength(), C.getCharCountIndicator(r.mode, t)), r.write(l)
                                });
                                let d = s.getSymbolTotalCodewords(t),
                                    u = h.getTotalCodewordsCount(t, r),
                                    m = (d - u) * 8;
                                for (l.getLengthInBits() + 4 <= m && l.put(0, 4); l.getLengthInBits() % 8 != 0;) l.putBit(0);
                                let p = (m - l.getLengthInBits()) / 8;
                                for (let t = 0; t < p; t++) l.put(t % 2 ? 17 : 236, 8);
                                return function(t, r, a) {
                                    let l, c;
                                    let d = s.getSymbolTotalCodewords(r),
                                        u = h.getTotalCodewordsCount(r, a),
                                        m = d - u,
                                        p = h.getBlocksCount(r, a),
                                        y = d % p,
                                        b = p - y,
                                        C = Math.floor(d / p),
                                        E = Math.floor(m / p),
                                        j = E + 1,
                                        I = C - E,
                                        O = new f(I),
                                        P = 0,
                                        R = Array(p),
                                        F = Array(p),
                                        W = 0,
                                        M = new Uint8Array(t.buffer);
                                    for (let t = 0; t < p; t++) {
                                        let r = t < b ? E : j;
                                        R[t] = M.slice(P, P + r), F[t] = O.encode(R[t]), P += r, W = Math.max(W, r)
                                    }
                                    let D = new Uint8Array(d),
                                        L = 0;
                                    for (l = 0; l < W; l++)
                                        for (c = 0; c < p; c++) l < R[c].length && (D[L++] = R[c][l]);
                                    for (l = 0; l < I; l++)
                                        for (c = 0; c < p; c++) D[L++] = F[c][l];
                                    return D
                                }(l, t, r)
                            }(r, a, b),
                            O = s.getSymbolSize(r),
                            P = new d(O);
                        return function(t, r) {
                                let a = t.size,
                                    s = m.getPositions(r);
                                for (let r = 0; r < s.length; r++) {
                                    let l = s[r][0],
                                        c = s[r][1];
                                    for (let r = -1; r <= 7; r++)
                                        if (!(l + r <= -1) && !(a <= l + r))
                                            for (let s = -1; s <= 7; s++) c + s <= -1 || a <= c + s || (r >= 0 && r <= 6 && (0 === s || 6 === s) || s >= 0 && s <= 6 && (0 === r || 6 === r) || r >= 2 && r <= 4 && s >= 2 && s <= 4 ? t.set(l + r, c + s, !0, !0) : t.set(l + r, c + s, !1, !0))
                                }
                            }(P, r),
                            function(t) {
                                let r = t.size;
                                for (let a = 8; a < r - 8; a++) {
                                    let r = a % 2 == 0;
                                    t.set(a, 6, r, !0), t.set(6, a, r, !0)
                                }
                            }(P),
                            function(t, r) {
                                let a = u.getPositions(r);
                                for (let r = 0; r < a.length; r++) {
                                    let s = a[r][0],
                                        l = a[r][1];
                                    for (let r = -2; r <= 2; r++)
                                        for (let a = -2; a <= 2; a++) - 2 === r || 2 === r || -2 === a || 2 === a || 0 === r && 0 === a ? t.set(s + r, l + a, !0, !0) : t.set(s + r, l + a, !1, !0)
                                }
                            }(P, r), setupFormatInfo(P, a, 0), r >= 7 && function(t, r) {
                                let a, s, l;
                                let c = t.size,
                                    d = y.getEncodedBits(r);
                                for (let r = 0; r < 18; r++) a = Math.floor(r / 3), s = r % 3 + c - 8 - 3, l = (d >> r & 1) == 1, t.set(a, s, l, !0), t.set(s, a, l, !0)
                            }(P, r),
                            function(t, r) {
                                let a = t.size,
                                    s = -1,
                                    l = a - 1,
                                    c = 7,
                                    d = 0;
                                for (let u = a - 1; u > 0; u -= 2)
                                    for (6 === u && u--;;) {
                                        for (let a = 0; a < 2; a++)
                                            if (!t.isReserved(l, u - a)) {
                                                let s = !1;
                                                d < r.length && (s = (r[d] >>> c & 1) == 1), t.set(l, u - a, s), -1 == --c && (d++, c = 7)
                                            }
                                        if ((l += s) < 0 || a <= l) {
                                            l -= s, s = -s;
                                            break
                                        }
                                    }
                            }(P, I), isNaN(l) && (l = p.getBestMask(P, setupFormatInfo.bind(null, P, a))), p.applyMask(l, P), setupFormatInfo(P, a, l), {
                                modules: P,
                                version: r,
                                errorCorrectionLevel: a,
                                maskPattern: l,
                                segments: b
                            }
                    }(t, a, j, b)
            }
        },
        7455: function(t, r, a) {
            let s = a(34152);

            function ReedSolomonEncoder(t) {
                this.genPoly = void 0, this.degree = t, this.degree && this.initialize(this.degree)
            }
            ReedSolomonEncoder.prototype.initialize = function(t) {
                this.degree = t, this.genPoly = s.generateECPolynomial(this.degree)
            }, ReedSolomonEncoder.prototype.encode = function(t) {
                if (!this.genPoly) throw Error("Encoder not initialized");
                let r = new Uint8Array(t.length + this.degree);
                r.set(t);
                let a = s.mod(r, this.genPoly),
                    l = this.degree - a.length;
                if (l > 0) {
                    let t = new Uint8Array(this.degree);
                    return t.set(a, l), t
                }
                return a
            }, t.exports = ReedSolomonEncoder
        },
        85267: function(t, r) {
            let a = "[0-9]+",
                s = "(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+";
            s = s.replace(/u/g, "\\u");
            let l = "(?:(?![A-Z0-9 $%*+\\-./:]|" + s + ")(?:.|[\r\n]))+";
            r.KANJI = RegExp(s, "g"), r.BYTE_KANJI = RegExp("[^A-Z0-9 $%*+\\-./:]+", "g"), r.BYTE = RegExp(l, "g"), r.NUMERIC = RegExp(a, "g"), r.ALPHANUMERIC = RegExp("[A-Z $%*+\\-./:]+", "g");
            let c = RegExp("^" + s + "$"),
                d = RegExp("^" + a + "$"),
                u = RegExp("^[A-Z0-9 $%*+\\-./:]+$");
            r.testKanji = function(t) {
                return c.test(t)
            }, r.testNumeric = function(t) {
                return d.test(t)
            }, r.testAlphanumeric = function(t) {
                return u.test(t)
            }
        },
        90719: function(t, r, a) {
            let s = a(14788),
                l = a(29359),
                c = a(83399),
                d = a(19046),
                u = a(25259),
                m = a(85267),
                p = a(18322),
                h = a(96711);

            function getStringByteLength(t) {
                return unescape(encodeURIComponent(t)).length
            }

            function getSegments(t, r, a) {
                let s;
                let l = [];
                for (; null !== (s = t.exec(a));) l.push({
                    data: s[0],
                    index: s.index,
                    mode: r,
                    length: s[0].length
                });
                return l
            }

            function getSegmentsFromString(t) {
                let r, a;
                let l = getSegments(m.NUMERIC, s.NUMERIC, t),
                    c = getSegments(m.ALPHANUMERIC, s.ALPHANUMERIC, t);
                p.isKanjiModeEnabled() ? (r = getSegments(m.BYTE, s.BYTE, t), a = getSegments(m.KANJI, s.KANJI, t)) : (r = getSegments(m.BYTE_KANJI, s.BYTE, t), a = []);
                let d = l.concat(c, r, a);
                return d.sort(function(t, r) {
                    return t.index - r.index
                }).map(function(t) {
                    return {
                        data: t.data,
                        mode: t.mode,
                        length: t.length
                    }
                })
            }

            function getSegmentBitsLength(t, r) {
                switch (r) {
                    case s.NUMERIC:
                        return l.getBitsLength(t);
                    case s.ALPHANUMERIC:
                        return c.getBitsLength(t);
                    case s.KANJI:
                        return u.getBitsLength(t);
                    case s.BYTE:
                        return d.getBitsLength(t)
                }
            }

            function buildSingleSegment(t, r) {
                let a;
                let m = s.getBestModeForData(t);
                if ((a = s.from(r, m)) !== s.BYTE && a.bit < m.bit) throw Error('"' + t + '" cannot be encoded with mode ' + s.toString(a) + ".\n Suggested mode is: " + s.toString(m));
                switch (a !== s.KANJI || p.isKanjiModeEnabled() || (a = s.BYTE), a) {
                    case s.NUMERIC:
                        return new l(t);
                    case s.ALPHANUMERIC:
                        return new c(t);
                    case s.KANJI:
                        return new u(t);
                    case s.BYTE:
                        return new d(t)
                }
            }
            r.fromArray = function(t) {
                return t.reduce(function(t, r) {
                    return "string" == typeof r ? t.push(buildSingleSegment(r, null)) : r.data && t.push(buildSingleSegment(r.data, r.mode)), t
                }, [])
            }, r.fromString = function(t, a) {
                let l = getSegmentsFromString(t, p.isKanjiModeEnabled()),
                    c = function(t) {
                        let r = [];
                        for (let a = 0; a < t.length; a++) {
                            let l = t[a];
                            switch (l.mode) {
                                case s.NUMERIC:
                                    r.push([l, {
                                        data: l.data,
                                        mode: s.ALPHANUMERIC,
                                        length: l.length
                                    }, {
                                        data: l.data,
                                        mode: s.BYTE,
                                        length: l.length
                                    }]);
                                    break;
                                case s.ALPHANUMERIC:
                                    r.push([l, {
                                        data: l.data,
                                        mode: s.BYTE,
                                        length: l.length
                                    }]);
                                    break;
                                case s.KANJI:
                                    r.push([l, {
                                        data: l.data,
                                        mode: s.BYTE,
                                        length: getStringByteLength(l.data)
                                    }]);
                                    break;
                                case s.BYTE:
                                    r.push([{
                                        data: l.data,
                                        mode: s.BYTE,
                                        length: getStringByteLength(l.data)
                                    }])
                            }
                        }
                        return r
                    }(l),
                    d = function(t, r) {
                        let a = {},
                            l = {
                                start: {}
                            },
                            c = ["start"];
                        for (let d = 0; d < t.length; d++) {
                            let u = t[d],
                                m = [];
                            for (let t = 0; t < u.length; t++) {
                                let p = u[t],
                                    h = "" + d + t;
                                m.push(h), a[h] = {
                                    node: p,
                                    lastCount: 0
                                }, l[h] = {};
                                for (let t = 0; t < c.length; t++) {
                                    let d = c[t];
                                    a[d] && a[d].node.mode === p.mode ? (l[d][h] = getSegmentBitsLength(a[d].lastCount + p.length, p.mode) - getSegmentBitsLength(a[d].lastCount, p.mode), a[d].lastCount += p.length) : (a[d] && (a[d].lastCount = p.length), l[d][h] = getSegmentBitsLength(p.length, p.mode) + 4 + s.getCharCountIndicator(p.mode, r))
                                }
                            }
                            c = m
                        }
                        for (let t = 0; t < c.length; t++) l[c[t]].end = 0;
                        return {
                            map: l,
                            table: a
                        }
                    }(c, a),
                    u = h.find_path(d.map, "start", "end"),
                    m = [];
                for (let t = 1; t < u.length - 1; t++) m.push(d.table[u[t]].node);
                return r.fromArray(m.reduce(function(t, r) {
                    let a = t.length - 1 >= 0 ? t[t.length - 1] : null;
                    return a && a.mode === r.mode ? t[t.length - 1].data += r.data : t.push(r), t
                }, []))
            }, r.rawSplit = function(t) {
                return r.fromArray(getSegmentsFromString(t, p.isKanjiModeEnabled()))
            }
        },
        18322: function(t, r) {
            let a;
            let s = [0, 26, 44, 70, 100, 134, 172, 196, 242, 292, 346, 404, 466, 532, 581, 655, 733, 815, 901, 991, 1085, 1156, 1258, 1364, 1474, 1588, 1706, 1828, 1921, 2051, 2185, 2323, 2465, 2611, 2761, 2876, 3034, 3196, 3362, 3532, 3706];
            r.getSymbolSize = function(t) {
                if (!t) throw Error('"version" cannot be null or undefined');
                if (t < 1 || t > 40) throw Error('"version" should be in range from 1 to 40');
                return 4 * t + 17
            }, r.getSymbolTotalCodewords = function(t) {
                return s[t]
            }, r.getBCHDigit = function(t) {
                let r = 0;
                for (; 0 !== t;) r++, t >>>= 1;
                return r
            }, r.setToSJISFunction = function(t) {
                if ("function" != typeof t) throw Error('"toSJISFunc" is not a valid function.');
                a = t
            }, r.isKanjiModeEnabled = function() {
                return void 0 !== a
            }, r.toSJIS = function(t) {
                return a(t)
            }
        },
        77790: function(t, r) {
            r.isValid = function(t) {
                return !isNaN(t) && t >= 1 && t <= 40
            }
        },
        31923: function(t, r, a) {
            let s = a(18322),
                l = a(12361),
                c = a(66426),
                d = a(14788),
                u = a(77790),
                m = s.getBCHDigit(7973);

            function getReservedBitsCount(t, r) {
                return d.getCharCountIndicator(t, r) + 4
            }
            r.from = function(t, r) {
                return u.isValid(t) ? parseInt(t, 10) : r
            }, r.getCapacity = function(t, r, a) {
                if (!u.isValid(t)) throw Error("Invalid QR Code version");
                void 0 === a && (a = d.BYTE);
                let c = s.getSymbolTotalCodewords(t),
                    m = l.getTotalCodewordsCount(t, r),
                    p = (c - m) * 8;
                if (a === d.MIXED) return p;
                let h = p - getReservedBitsCount(a, t);
                switch (a) {
                    case d.NUMERIC:
                        return Math.floor(h / 10 * 3);
                    case d.ALPHANUMERIC:
                        return Math.floor(h / 11 * 2);
                    case d.KANJI:
                        return Math.floor(h / 13);
                    case d.BYTE:
                    default:
                        return Math.floor(h / 8)
                }
            }, r.getBestVersionForData = function(t, a) {
                let s;
                let l = c.from(a, c.M);
                if (Array.isArray(t)) {
                    if (t.length > 1) return function(t, a) {
                        for (let s = 1; s <= 40; s++) {
                            let l = function(t, r) {
                                let a = 0;
                                return t.forEach(function(t) {
                                    let s = getReservedBitsCount(t.mode, r);
                                    a += s + t.getBitsLength()
                                }), a
                            }(t, s);
                            if (l <= r.getCapacity(s, a, d.MIXED)) return s
                        }
                    }(t, l);
                    if (0 === t.length) return 1;
                    s = t[0]
                } else s = t;
                return function(t, a, s) {
                    for (let l = 1; l <= 40; l++)
                        if (a <= r.getCapacity(l, s, t)) return l
                }(s.mode, s.getLength(), l)
            }, r.getEncodedBits = function(t) {
                if (!u.isValid(t) || t < 7) throw Error("Invalid QR Code version");
                let r = t << 12;
                for (; s.getBCHDigit(r) - m >= 0;) r ^= 7973 << s.getBCHDigit(r) - m;
                return t << 12 | r
            }
        },
        69934: function(t, r, a) {
            let s = a(55080);
            r.render = function(t, r, a) {
                var l;
                let c = a,
                    d = r;
                void 0 !== c || r && r.getContext || (c = r, r = void 0), r || (d = function() {
                    try {
                        return document.createElement("canvas")
                    } catch (t) {
                        throw Error("You need to specify a canvas element")
                    }
                }()), c = s.getOptions(c);
                let u = s.getImageWidth(t.modules.size, c),
                    m = d.getContext("2d"),
                    p = m.createImageData(u, u);
                return s.qrToImageData(p.data, t, c), l = d, m.clearRect(0, 0, l.width, l.height), l.style || (l.style = {}), l.height = u, l.width = u, l.style.height = u + "px", l.style.width = u + "px", m.putImageData(p, 0, 0), d
            }, r.renderToDataURL = function(t, a, s) {
                let l = s;
                void 0 !== l || a && a.getContext || (l = a, a = void 0), l || (l = {});
                let c = r.render(t, a, l),
                    d = l.type || "image/png",
                    u = l.rendererOpts || {};
                return c.toDataURL(d, u.quality)
            }
        },
        73434: function(t, r, a) {
            let s = a(55080);

            function getColorAttrib(t, r) {
                let a = t.a / 255,
                    s = r + '="' + t.hex + '"';
                return a < 1 ? s + " " + r + '-opacity="' + a.toFixed(2).slice(1) + '"' : s
            }

            function svgCmd(t, r, a) {
                let s = t + r;
                return void 0 !== a && (s += " " + a), s
            }
            r.render = function(t, r, a) {
                let l = s.getOptions(r),
                    c = t.modules.size,
                    d = t.modules.data,
                    u = c + 2 * l.margin,
                    m = l.color.light.a ? "<path " + getColorAttrib(l.color.light, "fill") + ' d="M0 0h' + u + "v" + u + 'H0z"/>' : "",
                    p = "<path " + getColorAttrib(l.color.dark, "stroke") + ' d="' + function(t, r, a) {
                        let s = "",
                            l = 0,
                            c = !1,
                            d = 0;
                        for (let u = 0; u < t.length; u++) {
                            let m = Math.floor(u % r),
                                p = Math.floor(u / r);
                            m || c || (c = !0), t[u] ? (d++, u > 0 && m > 0 && t[u - 1] || (s += c ? svgCmd("M", m + a, .5 + p + a) : svgCmd("m", l, 0), l = 0, c = !1), m + 1 < r && t[u + 1] || (s += svgCmd("h", d), d = 0)) : l++
                        }
                        return s
                    }(d, c, l.margin) + '"/>',
                    h = l.width ? 'width="' + l.width + '" height="' + l.width + '" ' : "",
                    f = '<svg xmlns="http://www.w3.org/2000/svg" ' + h + ('viewBox="0 0 ' + u) + " " + u + '" shape-rendering="crispEdges">' + m + p + "</svg>\n";
                return "function" == typeof a && a(null, f), f
            }
        },
        55080: function(t, r) {
            function hex2rgba(t) {
                if ("number" == typeof t && (t = t.toString()), "string" != typeof t) throw Error("Color should be defined as hex string");
                let r = t.slice().replace("#", "").split("");
                if (r.length < 3 || 5 === r.length || r.length > 8) throw Error("Invalid hex color: " + t);
                (3 === r.length || 4 === r.length) && (r = Array.prototype.concat.apply([], r.map(function(t) {
                    return [t, t]
                }))), 6 === r.length && r.push("F", "F");
                let a = parseInt(r.join(""), 16);
                return {
                    r: a >> 24 & 255,
                    g: a >> 16 & 255,
                    b: a >> 8 & 255,
                    a: 255 & a,
                    hex: "#" + r.slice(0, 6).join("")
                }
            }
            r.getOptions = function(t) {
                t || (t = {}), t.color || (t.color = {});
                let r = void 0 === t.margin || null === t.margin || t.margin < 0 ? 4 : t.margin,
                    a = t.width && t.width >= 21 ? t.width : void 0,
                    s = t.scale || 4;
                return {
                    width: a,
                    scale: a ? 4 : s,
                    margin: r,
                    color: {
                        dark: hex2rgba(t.color.dark || "#000000ff"),
                        light: hex2rgba(t.color.light || "#ffffffff")
                    },
                    type: t.type,
                    rendererOpts: t.rendererOpts || {}
                }
            }, r.getScale = function(t, r) {
                return r.width && r.width >= t + 2 * r.margin ? r.width / (t + 2 * r.margin) : r.scale
            }, r.getImageWidth = function(t, a) {
                let s = r.getScale(t, a);
                return Math.floor((t + 2 * a.margin) * s)
            }, r.qrToImageData = function(t, a, s) {
                let l = a.modules.size,
                    c = a.modules.data,
                    d = r.getScale(l, s),
                    u = Math.floor((l + 2 * s.margin) * d),
                    m = s.margin * d,
                    p = [s.color.light, s.color.dark];
                for (let r = 0; r < u; r++)
                    for (let a = 0; a < u; a++) {
                        let h = (r * u + a) * 4,
                            f = s.color.light;
                        if (r >= m && a >= m && r < u - m && a < u - m) {
                            let t = Math.floor((r - m) / d),
                                s = Math.floor((a - m) / d);
                            f = p[c[t * l + s] ? 1 : 0]
                        }
                        t[h++] = f.r, t[h++] = f.g, t[h++] = f.b, t[h] = f.a
                    }
            }
        },
        89461: function(t) {
            "use strict";
            var r = Array.isArray,
                a = Object.keys,
                s = Object.prototype.hasOwnProperty,
                l = "undefined" != typeof Element;
            t.exports = function(t, c) {
                try {
                    return function equal(t, c) {
                        if (t === c) return !0;
                        if (t && c && "object" == typeof t && "object" == typeof c) {
                            var d, u, m, p = r(t),
                                h = r(c);
                            if (p && h) {
                                if ((u = t.length) != c.length) return !1;
                                for (d = u; 0 != d--;)
                                    if (!equal(t[d], c[d])) return !1;
                                return !0
                            }
                            if (p != h) return !1;
                            var f = t instanceof Date,
                                y = c instanceof Date;
                            if (f != y) return !1;
                            if (f && y) return t.getTime() == c.getTime();
                            var b = t instanceof RegExp,
                                C = c instanceof RegExp;
                            if (b != C) return !1;
                            if (b && C) return t.toString() == c.toString();
                            var E = a(t);
                            if ((u = E.length) !== a(c).length) return !1;
                            for (d = u; 0 != d--;)
                                if (!s.call(c, E[d])) return !1;
                            if (l && t instanceof Element && c instanceof Element) return t === c;
                            for (d = u; 0 != d--;)
                                if (("_owner" !== (m = E[d]) || !t.$$typeof) && !equal(t[m], c[m])) return !1;
                            return !0
                        }
                        return t != t && c != c
                    }(t, c)
                } catch (t) {
                    if (t.message && t.message.match(/stack|recursion/i) || -2146828260 === t.number) return console.warn("Warning: react-fast-compare does not handle circular references.", t.name, t.message), !1;
                    throw t
                }
            }
        },
        74378: function(t, r, a) {
            "use strict";
            a.d(r, {
                w5: function() {
                    return N
                }
            });
            var s = a(97352);
            let g = ({
                    root: t,
                    particles: r,
                    decay: a,
                    lifetime: s,
                    updateParticle: l,
                    onFinish: c
                }) => {
                    let d = 0,
                        n = () => {
                            r.forEach(t => l(t, d / s, a)), (d += 1) < s ? window.requestAnimationFrame(n) : (r.forEach(r => {
                                if (r.element.parentNode === t) return t.removeChild(r.element)
                            }), c())
                        };
                    window.requestAnimationFrame(n)
                },
                {
                    PI: l
                } = Math,
                A = t => t * (l / 180),
                w = (t, r) => {
                    let a = Math.ceil(t);
                    return Math.floor(Math.random() * (Math.floor(r) - a)) + a
                },
                x = (t, r, a, s) => {
                    let c = A(t),
                        d = A(r),
                        {
                            random: u
                        } = Math;
                    return {
                        x: 0,
                        y: 0,
                        z: 0,
                        height: 0,
                        wobble: 10 * u(),
                        velocity: .5 * a + u() * a,
                        angle2D: -c + (.5 * d - u() * d),
                        angle3D: -(l / 4) + u() * (l / 2),
                        tiltAngle: u() * l,
                        differentiator: s
                    }
                },
                H = t => {
                    let r = document.getElementById(t);
                    return r || console.error(`Element with an ID of ${t} could not be found. Please provide a valid ID.`), r
                },
                c = ["#A45BF1", "#25C6F6", "#72F753", "#F76C88", "#F5F770"],
                d = [-.6, -.3, 0, .3, .6],
                S = (t, r, a, s, l, c) => Array.from({
                    length: r
                }).map((r, u) => {
                    let m = document.createElement("span");
                    return m.style["background-color"] = c[u % c.length], m.style.width = `${a}px`, m.style.height = `${a}px`, m.style.position = l, m.style.zIndex = `${s}`, t.appendChild(m), {
                        element: m,
                        differentiator: w(0, d.length)
                    }
                }),
                Z = (t, r, a) => {
                    let {
                        x: s,
                        y: l,
                        tiltAngle: c,
                        wobble: u,
                        angle2D: m,
                        angle3D: p,
                        velocity: h,
                        differentiator: f
                    } = t.physics;
                    t.physics.x += Math.cos(m) * h, t.physics.y += Math.sin(m) * h, t.physics.z += Math.sin(p) * h, t.physics.wobble += .05, t.physics.velocity *= a, t.physics.y += 3.5, t.physics.tiltAngle += .15;
                    let y = s + (d[f] * r * u * u + 20 * (f % 2 ? Math.sin(u / 4) : Math.cos(u / 4)));
                    t.element.style.transform = `translate3d(${y}px, ${l+5*Math.sin(u)}px, 0) rotate3d(1, 1, 1, ${f%2?c:-1*c}rad)`, t.element.style.scale = `${1-.2*r}`, r > .5 && (t.element.style.opacity = `${2-2*r}`)
                },
                v = (t, r, a) => {
                    let {
                        elementCount: s = 50,
                        elementSize: l = 8,
                        colors: d = c,
                        angle: u = 90,
                        spread: m = 45,
                        decay: p = .94,
                        lifetime: h = 200,
                        startVelocity: f = 35,
                        zIndex: y = 0,
                        position: b = "fixed",
                        onAnimationComplete: C
                    } = a || {}, E = S(t, s, l, y, b, d).map(({
                        element: t,
                        differentiator: r
                    }) => ({
                        element: t,
                        physics: x(u, m, f, r)
                    }));
                    g({
                        root: t,
                        particles: E,
                        decay: p,
                        lifetime: h,
                        updateParticle: Z,
                        onFinish: () => {
                            "function" == typeof C && C(), r()
                        }
                    })
                },
                u = ["\uD83E\uDD13", "\uD83D\uDE0A", "\uD83E\uDD73"],
                m = [-.6, -.3, 0, .3, .6],
                T = (t, r, a, s, l, c) => Array.from({
                    length: r
                }).map((r, d) => {
                    let u = document.createElement("span");
                    return u.innerHTML = c[d % c.length], u.style.fontSize = `${a+w(0,4)}px`, u.style.position = l, u.style.zIndex = `${s}`, t.appendChild(u), {
                        element: u,
                        differentiator: w(0, m.length)
                    }
                }),
                V = (t, r, a) => {
                    let {
                        x: s,
                        y: l,
                        tiltAngle: c,
                        angle2D: d,
                        velocity: u,
                        differentiator: p,
                        wobble: h
                    } = t.physics;
                    t.physics.x += Math.cos(d) * u, t.physics.y += Math.sin(d) * u, t.physics.wobble += 0, t.physics.velocity *= a, t.physics.y += 5, t.physics.tiltAngle += .05;
                    let f = s + (m[p] * r * h * h + 20 * Math.sin(h / 4));
                    t.element.style.transform = `translate3d(${f}px, ${l}px, 0) rotate3d(0, 0, 1, ${p%2?c:-1*c}rad)`, r > .5 && (t.element.style.opacity = `${2-2*r}`)
                },
                k = (t, r, a) => {
                    let {
                        elementCount: s = 20,
                        elementSize: l = 25,
                        emoji: c = u,
                        angle: d = 90,
                        spread: m = 45,
                        decay: p = .94,
                        lifetime: h = 200,
                        startVelocity: f = 35,
                        zIndex: y = 0,
                        position: b = "fixed",
                        onAnimationComplete: C
                    } = a || {}, E = T(t, s, l, y, b, c).map(({
                        element: t,
                        differentiator: r
                    }) => ({
                        element: t,
                        physics: x(d, m, f, r)
                    }));
                    g({
                        root: t,
                        particles: E,
                        decay: p,
                        lifetime: h,
                        updateParticle: V,
                        onFinish: () => {
                            "function" == typeof C && C(), r()
                        }
                    })
                };
            var p = `<svg width="100%" viewBox="0 0 976 3040" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M489.693 1269.49C489.773 1378.79 410.493 1466.8 389.107 1571.11C384.147 1595.33 382.893 1620.12 386.187 1644.64C389.44 1668.83 399.28 1691.16 409.04 1713.29C419.253 1736.44 429.28 1760.11 429.453 1785.83C429.64 1812.27 416.307 1836.8 408.933 1861.59C396 1905.15 409.613 1948.88 425.213 1989.73C442.04 2033.83 461.387 2077.87 456.6 2126.17C453.92 2153.15 444.147 2179.13 434.2 2204.13C424.173 2229.35 413.72 2254.28 405.507 2280.17C389.213 2331.51 379.493 2385.83 378.267 2439.72C377.693 2464.89 380.333 2490.25 388.667 2514.11C397.053 2538.09 412.6 2558.75 424.733 2580.84C449.907 2626.64 458.453 2681 451.053 2732.52C443.853 2782.56 414.227 2825.99 408.893 2876.35C404.44 2918.39 416.733 2961.63 440.08 2996.53C450.373 3011.91 463.267 3025.44 477.867 3036.75C480.773 3039 484.88 3034.95 481.947 3032.68C446.147 3004.96 423.24 2964.2 415.907 2919.71C412.107 2896.61 413.627 2872.95 419.427 2850.35C426.053 2824.51 438.067 2800.36 446.667 2775.17C462.44 2729 463.147 2678.51 450.92 2631.45C444.733 2607.64 434.453 2585.4 421.893 2564.32C407.933 2540.91 394.307 2518.68 388.32 2491.71C382.493 2465.45 383.413 2438 385.56 2411.37C387.853 2382.85 392.467 2354.56 398.827 2326.67C405 2299.61 413.253 2273.05 423.107 2247.12C432.533 2222.27 443.533 2198.05 451.867 2172.8C459.707 2149.04 464.387 2124.29 463 2099.23C461.773 2077.19 455.64 2055.65 448.467 2034.89C433.587 1991.8 411.307 1949.77 409.413 1903.37C408.36 1877.76 417.12 1854.67 425.587 1830.97C433.68 1808.33 437.44 1786.41 432.787 1762.6C428.307 1739.63 417.333 1718.23 408.12 1696.91C397.267 1671.77 390.413 1646.41 390.013 1618.89C388.387 1509.52 469.707 1420.85 490.813 1316.72C493.973 1301.19 495.467 1285.33 495.453 1269.49C495.453 1265.77 489.693 1265.77 489.693 1269.49" stroke="#7A7E82" stroke-width="4"/>
<path d="M555.653 1298.41H423.52C415.173 1298.41 408.413 1305.17 408.413 1313.52C408.413 1321.85 415.173 1328.63 423.52 1328.63H555.653C564 1328.63 570.76 1321.85 570.76 1313.52C570.76 1305.17 564 1298.41 555.653 1298.41Z" fill="currentColor"/>
<path d="M555.653 1298.41H423.52C415.173 1298.41 408.413 1305.17 408.413 1313.52C408.413 1321.85 415.173 1328.63 423.52 1328.63H555.653C564 1328.63 570.76 1321.85 570.76 1313.52C570.76 1305.17 564 1298.41 555.653 1298.41Z" fill="black" fill-opacity="0.1"/>
<path d="M975.133 528.947C975.133 820.667 756.973 1255.43 487.853 1255.43C218.733 1255.43 0.559814 820.667 0.559814 528.947C0.559814 237.227 218.733 0.733359 487.853 0.733359C756.973 0.733359 975.133 237.227 975.133 528.947Z" fill="currentColor"/>
<path d="M549.04 1298.41C531.293 1285.91 519.893 1269.95 512.587 1254.2C504.387 1255.01 496.147 1255.43 487.853 1255.43C481.04 1255.43 474.28 1255.15 467.546 1254.6C460.226 1270.21 448.867 1286.01 431.253 1298.41H549.04Z" fill="currentColor"/>
<path d="M211.413 569.213C193.787 569.213 175.947 564.4 160.92 555.24C128.133 535.293 108.133 498.56 101.147 460.827C97.0133 438.533 96.9468 415.827 99.1068 393.214C120.627 308.28 168.453 234.48 233.467 183.733C246.947 173.213 261.16 163.693 276.027 155.267C280.347 152.813 284.72 150.467 289.147 148.2C291.707 147.373 294.347 146.92 297.12 146.92C301.347 146.92 305.907 147.974 311.067 150.414C332.773 160.64 334.36 192.213 323.693 213.72C313.04 235.226 294.187 251.8 283.413 273.253C262 315.88 276.48 366.707 287.347 413.147C298.213 459.6 302.427 515.373 267.8 548.187C252.707 562.48 232.227 569.213 211.413 569.213" fill="white" fill-opacity="0.2"/>
<path d="M785.133 110.4C863.72 204.187 911.613 328.747 911.613 465.414C911.613 757.147 693.44 1191.89 424.32 1191.89C350.973 1191.89 281.413 1159.6 219.013 1106.71C296.067 1196.16 388.48 1255.43 487.853 1255.43C756.973 1255.43 975.133 820.667 975.133 528.947C975.133 358.547 900.693 206.987 785.133 110.4Z" fill="black" fill-opacity="0.1"/>
</svg>`;
            let h = ["#A45BF1", "#25C6F6", "#72F753", "#F76C88", "#F5F770"],
                f = [-.6, -.3, 0, .3, .6],
                X = (t, r, a) => {
                    r.parentNode === a && a.removeChild(r)
                },
                _ = (t, r, a, s, l, c) => Array.from({
                    length: r
                }).map((r, d) => {
                    let u = document.createElement("span");
                    return u.innerHTML = p, u.style.width = `${a}px`, u.style.position = l, u.style.color = c[d % c.length], u.style.zIndex = `${s}`, u.addEventListener("click", r => {
                        X(r, u, t)
                    }, {
                        once: !0
                    }), t.appendChild(u), {
                        element: u,
                        differentiator: w(0, f.length)
                    }
                }),
                q = (t, r, a) => {
                    let {
                        x: s,
                        y: l,
                        tiltAngle: c,
                        angle2D: d,
                        velocity: u,
                        differentiator: m,
                        wobble: p
                    } = t.physics;
                    t.physics.x += .5 * Math.cos(d) * u, t.physics.y += .5 * Math.sin(d) * u, t.physics.wobble += 0, t.physics.velocity *= a, t.physics.tiltAngle += .1;
                    let h = s + (f[m] * r * p * p + 20 * Math.sin(p));
                    t.element.style.transform = `translate3d(${h}px, ${l}px, 0) rotate3d(0, 0, 1, ${m%2?Math.sin(c/4)/3:Math.cos(c/4)/3}rad)`, t.element.style.scale = `${1-.2*r}`, r > .5 && (t.element.style.opacity = `${2-2*r}`)
                },
                z = (t, r, a) => {
                    let {
                        angle: s = 90,
                        decay: l = .999,
                        spread: c = 50,
                        startVelocity: d = 3,
                        elementCount: u = 10,
                        elementSize: m = 20,
                        lifetime: p = 600,
                        zIndex: f = 0,
                        position: y = "fixed",
                        colors: b = h,
                        onAnimationComplete: C
                    } = a || {}, E = _(t, u, m, f, y, b).map(({
                        element: t,
                        differentiator: r
                    }) => ({
                        element: t,
                        physics: x(s, c, d, r)
                    }));
                    g({
                        root: t,
                        particles: E,
                        decay: l,
                        lifetime: p,
                        updateParticle: q,
                        onFinish: () => {
                            "function" == typeof C && C(), r()
                        }
                    })
                },
                N = (t, r, a) => {
                    let [l, c] = (0, s.useState)(!1), o = () => {
                        c(!1)
                    };
                    return {
                        reward: (0, s.useCallback)(() => {
                            let s = H(t);
                            if (s) switch (c(!0), r) {
                                case "confetti":
                                    v(s, o, a);
                                    break;
                                case "emoji":
                                    k(s, o, a);
                                    break;
                                case "balloons":
                                    z(s, o, a);
                                    break;
                                default:
                                    console.error(`${r} is not a valid react-rewards type.`)
                            }
                        }, [a, t, r]),
                        isAnimating: l
                    }
                }
        },
        74447: function(t, r, a) {
            let s = a(81361),
                l = a(91492),
                c = "[^\\s'’\\(\\)!?;:\"-]",
                d = RegExp(`(?:(?:(\\s?(?:^|[.\\(\\)!?;:"-])\\s*)(${c}))|(${c}))(${c}*[’']*${c}*)`, "g"),
                convertToRegExp = t => t.map(t => [RegExp(`\\b${t}\\b`, "gi"), t]);
            t.exports = (t, r = {}) => {
                t = t.toLowerCase().replace(d, (t, r = "", a, l, c, d, u) => {
                    let m = t.length + d >= u.length,
                        p = function(t) {
                            let r = t[0];
                            return /\s/.test(r) ? t.slice(1) : /[\(\)]/.test(r) ? null : t
                        }(t);
                    return p ? !a && s.has(l + c) && !m ? p : r + (l || a).toUpperCase() + c : t
                });
                let a = r.special || [],
                    c = [...l, ...a],
                    u = convertToRegExp(c);
                return u.forEach(([r, a]) => {
                    t = t.replace(r, a)
                }), t
            }
        },
        81361: function(t) {
            t.exports = new Set(["for", "and", "nor", "but", "or", "yet", "so", "a", "an", "the", "aboard", "about", "above", "across", "after", "against", "along", "amid", "among", "anti", "around", "as", "at", "before", "behind", "below", "beneath", "beside", "besides", "between", "beyond", "but", "by", "concerning", "considering", "despite", "down", "during", "except", "excepting", "excluding", "following", "for", "from", "in", "inside", "into", "like", "minus", "near", "of", "off", "on", "onto", "opposite", "over", "past", "per", "plus", "regarding", "round", "save", "since", "than", "through", "to", "toward", "towards", "under", "underneath", "unlike", "until", "up", "upon", "versus", "via", "with", "within", "without"])
        },
        91492: function(t) {
            t.exports = ["ZEIT", "ZEIT Inc.", "Vercel", "Vercel Inc.", "CLI", "API", "HTTP", "HTTPS", "JSX", "DNS", "URL", "now.sh", "now.json", "vercel.app", "vercel.json", "CI", "CD", "CDN", "package.json", "package.lock", "yarn.lock", "GitHub", "GitLab", "CSS", "Sass", "JS", "JavaScript", "TypeScript", "HTML", "WordPress", "Next.js", "Node.js", "Webpack", "Docker", "Bash", "Kubernetes", "SWR", "TinaCMS", "UI", "UX", "TS", "TSX", "iPhone", "iPad", "watchOS", "iOS", "iPadOS", "macOS", "PHP", "composer.json", "composer.lock", "CMS", "SQL", "C", "C#", "GraphQL", "GraphiQL", "JWT", "JWTs"]
        },
        77771: function(t, r, a) {
            "use strict";

            function extractHostname(t, r) {
                let a = 0,
                    s = t.length,
                    l = !1;
                if (!r) {
                    if (t.startsWith("data:")) return null;
                    for (; a < t.length && 32 >= t.charCodeAt(a);) a += 1;
                    for (; s > a + 1 && 32 >= t.charCodeAt(s - 1);) s -= 1;
                    if (47 === t.charCodeAt(a) && 47 === t.charCodeAt(a + 1)) a += 2;
                    else {
                        let r = t.indexOf(":/", a);
                        if (-1 !== r) {
                            let s = r - a,
                                l = t.charCodeAt(a),
                                c = t.charCodeAt(a + 1),
                                d = t.charCodeAt(a + 2),
                                u = t.charCodeAt(a + 3),
                                m = t.charCodeAt(a + 4);
                            if (5 === s && 104 === l && 116 === c && 116 === d && 112 === u && 115 === m);
                            else if (4 === s && 104 === l && 116 === c && 116 === d && 112 === u);
                            else if (3 === s && 119 === l && 115 === c && 115 === d);
                            else if (2 === s && 119 === l && 115 === c);
                            else
                                for (let s = a; s < r; s += 1) {
                                    let r = 32 | t.charCodeAt(s);
                                    if (!(r >= 97 && r <= 122 || r >= 48 && r <= 57 || 46 === r || 45 === r || 43 === r)) return null
                                }
                            for (a = r + 2; 47 === t.charCodeAt(a);) a += 1
                        }
                    }
                    let r = -1,
                        c = -1,
                        d = -1;
                    for (let u = a; u < s; u += 1) {
                        let a = t.charCodeAt(u);
                        if (35 === a || 47 === a || 63 === a) {
                            s = u;
                            break
                        }
                        64 === a ? r = u : 93 === a ? c = u : 58 === a ? d = u : a >= 65 && a <= 90 && (l = !0)
                    }
                    if (-1 !== r && r > a && r < s && (a = r + 1), 91 === t.charCodeAt(a)) return -1 !== c ? t.slice(a + 1, c).toLowerCase() : null; - 1 !== d && d > a && d < s && (s = d)
                }
                for (; s > a + 1 && 46 === t.charCodeAt(s - 1);) s -= 1;
                let c = 0 !== a || s !== t.length ? t.slice(a, s) : t;
                return l ? c.toLowerCase() : c
            }

            function isValidAscii(t) {
                return t >= 97 && t <= 122 || t >= 48 && t <= 57 || t > 127
            }

            function is_valid(t) {
                if (t.length > 255 || 0 === t.length || !isValidAscii(t.charCodeAt(0)) && 46 !== t.charCodeAt(0) && 95 !== t.charCodeAt(0)) return !1;
                let r = -1,
                    a = -1,
                    s = t.length;
                for (let l = 0; l < s; l += 1) {
                    let s = t.charCodeAt(l);
                    if (46 === s) {
                        if (l - r > 64 || 46 === a || 45 === a || 95 === a) return !1;
                        r = l
                    } else if (!(isValidAscii(s) || 45 === s || 95 === s)) return !1;
                    a = s
                }
                return s - r - 1 <= 63 && 45 !== a
            }

            function setDefaultsImpl({
                allowIcannDomains: t = !0,
                allowPrivateDomains: r = !1,
                detectIp: a = !0,
                extractHostname: s = !0,
                mixedInputs: l = !0,
                validHosts: c = null,
                validateHostname: d = !0
            }) {
                return {
                    allowIcannDomains: t,
                    allowPrivateDomains: r,
                    detectIp: a,
                    extractHostname: s,
                    mixedInputs: l,
                    validHosts: c,
                    validateHostname: d
                }
            }
            a.d(r, {
                Qc: function() {
                    return parse
                }
            });
            let s = setDefaultsImpl({});

            function getEmptyResult() {
                return {
                    domain: null,
                    domainWithoutSuffix: null,
                    hostname: null,
                    isIcann: null,
                    isIp: null,
                    isPrivate: null,
                    publicSuffix: null,
                    subdomain: null
                }
            }
            let l = function() {
                    let t = [1, {}],
                        r = [0, {
                            city: t
                        }];
                    return [0, {
                        ck: [0, {
                            www: t
                        }],
                        jp: [0, {
                            kawasaki: r,
                            kitakyushu: r,
                            kobe: r,
                            nagoya: r,
                            sapporo: r,
                            sendai: r,
                            yokohama: r
                        }]
                    }]
                }(),
                c = function() {
                    let t = [1, {}],
                        r = [2, {}],
                        a = [1, {
                            gov: t,
                            com: t,
                            org: t,
                            net: t,
                            edu: t
                        }],
                        s = [0, {
                            "*": r
                        }],
                        l = [1, {
                            blogspot: r
                        }],
                        c = [1, {
                            gov: t
                        }],
                        d = [0, {
                            notebook: r,
                            studio: r
                        }],
                        u = [0, {
                            notebook: r
                        }],
                        m = [0, {
                            notebook: r,
                            "notebook-fips": r,
                            studio: r
                        }],
                        p = [0, {
                            notebook: r,
                            "notebook-fips": r,
                            studio: r,
                            "studio-fips": r
                        }],
                        h = [0, {
                            "*": t
                        }],
                        f = [0, {
                            cloud: r
                        }],
                        y = [1, {
                            co: r
                        }],
                        b = [2, {
                            nodes: r
                        }],
                        C = [0, {
                            s3: r,
                            "s3-accesspoint": r,
                            "s3-website": r
                        }],
                        E = [0, {
                            s3: r,
                            "s3-accesspoint": r
                        }],
                        j = [0, {
                            "execute-api": r,
                            "emrappui-prod": r,
                            "emrnotebooks-prod": r,
                            "emrstudio-prod": r,
                            dualstack: E,
                            s3: r,
                            "s3-accesspoint": r,
                            "s3-object-lambda": r,
                            "s3-website": r
                        }],
                        I = [0, {
                            direct: r
                        }],
                        O = [2, {
                            id: r
                        }],
                        P = [0, {
                            "webview-assets": r
                        }],
                        R = [0, {
                            vfs: r,
                            "webview-assets": r
                        }],
                        F = [0, {
                            "execute-api": r,
                            "emrappui-prod": r,
                            "emrnotebooks-prod": r,
                            "emrstudio-prod": r,
                            dualstack: C,
                            s3: r,
                            "s3-accesspoint": r,
                            "s3-object-lambda": r,
                            "s3-website": r,
                            "aws-cloud9": P,
                            cloud9: R
                        }],
                        W = [0, {
                            "execute-api": r,
                            "emrappui-prod": r,
                            "emrnotebooks-prod": r,
                            "emrstudio-prod": r,
                            dualstack: E,
                            s3: r,
                            "s3-accesspoint": r,
                            "s3-object-lambda": r,
                            "s3-website": r,
                            "aws-cloud9": P,
                            cloud9: R
                        }],
                        M = [0, {
                            "execute-api": r,
                            "emrappui-prod": r,
                            "emrnotebooks-prod": r,
                            "emrstudio-prod": r,
                            dualstack: C,
                            s3: r,
                            "s3-accesspoint": r,
                            "s3-object-lambda": r,
                            "s3-website": r,
                            "analytics-gateway": r,
                            "aws-cloud9": P,
                            cloud9: R
                        }],
                        D = [0, {
                            "execute-api": r,
                            dualstack: E,
                            s3: r,
                            "s3-accesspoint": r,
                            "s3-object-lambda": r,
                            "s3-website": r
                        }],
                        L = [0, {
                            s3: r,
                            "s3-accesspoint": r,
                            "s3-accesspoint-fips": r,
                            "s3-fips": r,
                            "s3-website": r
                        }],
                        U = [0, {
                            "execute-api": r,
                            "emrappui-prod": r,
                            "emrnotebooks-prod": r,
                            "emrstudio-prod": r,
                            dualstack: L,
                            s3: r,
                            "s3-accesspoint": r,
                            "s3-accesspoint-fips": r,
                            "s3-fips": r,
                            "s3-object-lambda": r,
                            "s3-website": r,
                            "aws-cloud9": P,
                            cloud9: R
                        }],
                        B = [0, {
                            s3: r,
                            "s3-accesspoint": r,
                            "s3-accesspoint-fips": r,
                            "s3-fips": r
                        }],
                        $ = [0, {
                            "execute-api": r,
                            "emrappui-prod": r,
                            "emrnotebooks-prod": r,
                            "emrstudio-prod": r,
                            dualstack: B,
                            s3: r,
                            "s3-accesspoint": r,
                            "s3-accesspoint-fips": r,
                            "s3-fips": r,
                            "s3-object-lambda": r,
                            "s3-website": r
                        }],
                        K = [0, {
                            auth: r
                        }],
                        G = [0, {
                            auth: r,
                            "auth-fips": r
                        }],
                        J = [0, {
                            apps: r
                        }],
                        Y = [0, {
                            paas: r
                        }],
                        Q = [0, {
                            app: r
                        }],
                        ee = [2, {
                            eu: r
                        }],
                        et = [0, {
                            site: r
                        }],
                        en = [0, {
                            pages: r
                        }],
                        er = [1, {
                            com: t,
                            edu: t,
                            net: t,
                            org: t
                        }],
                        ea = [0, {
                            j: r
                        }],
                        ei = [0, {
                            jelastic: r
                        }],
                        eo = [0, {
                            user: r
                        }],
                        es = [1, {
                            ybo: r
                        }],
                        el = [0, {
                            cust: r,
                            reservd: r
                        }],
                        ec = [0, {
                            cust: r
                        }],
                        ed = [1, {
                            gov: t,
                            edu: t,
                            mil: t,
                            com: t,
                            org: t,
                            net: t
                        }],
                        eu = [0, {
                            s3: r
                        }],
                        em = [1, {
                            edu: t,
                            biz: t,
                            net: t,
                            org: t,
                            gov: t,
                            info: t,
                            com: t
                        }],
                        ep = [1, {
                            gov: t,
                            blogspot: r
                        }],
                        eh = [1, {
                            framer: r
                        }],
                        ef = [1, {
                            barsy: r
                        }],
                        ey = [0, {
                            forgot: r
                        }],
                        eg = [1, {
                            gs: t
                        }],
                        ev = [0, {
                            nes: t
                        }],
                        eb = [1, {
                            k12: t,
                            cc: t,
                            lib: t
                        }],
                        ew = [1, {
                            cc: t,
                            lib: t
                        }];
                    return [0, {
                        ac: [1, {
                            com: t,
                            edu: t,
                            gov: t,
                            net: t,
                            mil: t,
                            org: t,
                            drr: r
                        }],
                        ad: [1, {
                            nom: t
                        }],
                        ae: [1, {
                            co: t,
                            net: t,
                            org: t,
                            sch: t,
                            ac: t,
                            gov: t,
                            mil: t,
                            blogspot: r
                        }],
                        aero: [1, {
                            "accident-investigation": t,
                            "accident-prevention": t,
                            aerobatic: t,
                            aeroclub: t,
                            aerodrome: t,
                            agents: t,
                            aircraft: t,
                            airline: t,
                            airport: t,
                            "air-surveillance": t,
                            airtraffic: t,
                            "air-traffic-control": t,
                            ambulance: t,
                            amusement: t,
                            association: t,
                            author: t,
                            ballooning: t,
                            broker: t,
                            caa: t,
                            cargo: t,
                            catering: t,
                            certification: t,
                            championship: t,
                            charter: t,
                            civilaviation: t,
                            club: t,
                            conference: t,
                            consultant: t,
                            consulting: t,
                            control: t,
                            council: t,
                            crew: t,
                            design: t,
                            dgca: t,
                            educator: t,
                            emergency: t,
                            engine: t,
                            engineer: t,
                            entertainment: t,
                            equipment: t,
                            exchange: t,
                            express: t,
                            federation: t,
                            flight: t,
                            fuel: t,
                            gliding: t,
                            government: t,
                            groundhandling: t,
                            group: t,
                            hanggliding: t,
                            homebuilt: t,
                            insurance: t,
                            journal: t,
                            journalist: t,
                            leasing: t,
                            logistics: t,
                            magazine: t,
                            maintenance: t,
                            media: t,
                            microlight: t,
                            modelling: t,
                            navigation: t,
                            parachuting: t,
                            paragliding: t,
                            "passenger-association": t,
                            pilot: t,
                            press: t,
                            production: t,
                            recreation: t,
                            repbody: t,
                            res: t,
                            research: t,
                            rotorcraft: t,
                            safety: t,
                            scientist: t,
                            services: t,
                            show: t,
                            skydiving: t,
                            software: t,
                            student: t,
                            trader: t,
                            trading: t,
                            trainer: t,
                            union: t,
                            workinggroup: t,
                            works: t
                        }],
                        af: a,
                        ag: [1, {
                            com: t,
                            org: t,
                            net: t,
                            co: t,
                            nom: t
                        }],
                        ai: [1, {
                            off: t,
                            com: t,
                            net: t,
                            org: t,
                            uwu: r
                        }],
                        al: [1, {
                            com: t,
                            edu: t,
                            gov: t,
                            mil: t,
                            net: t,
                            org: t,
                            blogspot: r
                        }],
                        am: [1, {
                            co: t,
                            com: t,
                            commune: t,
                            net: t,
                            org: t,
                            radio: r,
                            blogspot: r,
                            neko: r,
                            nyaa: r
                        }],
                        ao: [1, {
                            ed: t,
                            gv: t,
                            og: t,
                            co: t,
                            pb: t,
                            it: t
                        }],
                        aq: t,
                        ar: [1, {
                            bet: t,
                            com: l,
                            coop: t,
                            edu: t,
                            gob: t,
                            gov: t,
                            int: t,
                            mil: t,
                            musica: t,
                            mutual: t,
                            net: t,
                            org: t,
                            senasa: t,
                            tur: t
                        }],
                        arpa: [1, {
                            e164: t,
                            "in-addr": t,
                            ip6: t,
                            iris: t,
                            uri: t,
                            urn: t
                        }],
                        as: c,
                        asia: [1, {
                            cloudns: r
                        }],
                        at: [1, {
                            ac: [1, {
                                sth: t
                            }],
                            co: l,
                            gv: t,
                            or: t,
                            funkfeuer: [0, {
                                wien: r
                            }],
                            futurecms: [0, {
                                "*": r,
                                ex: s,
                                in: s
                            }],
                            futurehosting: r,
                            futuremailing: r,
                            ortsinfo: [0, {
                                ex: s,
                                kunden: s
                            }],
                            biz: r,
                            info: r,
                            "123webseite": r,
                            priv: r,
                            myspreadshop: r,
                            "12hp": r,
                            "2ix": r,
                            "4lima": r,
                            "lima-city": r
                        }],
                        au: [1, {
                            com: [1, {
                                blogspot: r,
                                cloudlets: [0, {
                                    mel: r
                                }],
                                myspreadshop: r
                            }],
                            net: t,
                            org: t,
                            edu: [1, {
                                act: t,
                                catholic: t,
                                nsw: [1, {
                                    schools: t
                                }],
                                nt: t,
                                qld: t,
                                sa: t,
                                tas: t,
                                vic: t,
                                wa: t
                            }],
                            gov: [1, {
                                qld: t,
                                sa: t,
                                tas: t,
                                vic: t,
                                wa: t
                            }],
                            asn: t,
                            id: t,
                            info: t,
                            conf: t,
                            oz: t,
                            act: t,
                            nsw: t,
                            nt: t,
                            qld: t,
                            sa: t,
                            tas: t,
                            vic: t,
                            wa: t
                        }],
                        aw: [1, {
                            com: t
                        }],
                        ax: [1, {
                            be: r,
                            cat: r,
                            es: r,
                            eu: r,
                            gg: r,
                            mc: r,
                            us: r,
                            xy: r
                        }],
                        az: [1, {
                            com: t,
                            net: t,
                            int: t,
                            gov: t,
                            org: t,
                            edu: t,
                            info: t,
                            pp: t,
                            mil: t,
                            name: t,
                            pro: t,
                            biz: t
                        }],
                        ba: [1, {
                            com: t,
                            edu: t,
                            gov: t,
                            mil: t,
                            net: t,
                            org: t,
                            rs: r,
                            blogspot: r
                        }],
                        bb: [1, {
                            biz: t,
                            co: t,
                            com: t,
                            edu: t,
                            gov: t,
                            info: t,
                            net: t,
                            org: t,
                            store: t,
                            tv: t
                        }],
                        bd: h,
                        be: [1, {
                            ac: t,
                            webhosting: r,
                            blogspot: r,
                            interhostsolutions: f,
                            kuleuven: [0, {
                                ezproxy: r
                            }],
                            "123website": r,
                            myspreadshop: r,
                            transurl: s
                        }],
                        bf: c,
                        bg: [1, {
                            0: t,
                            1: t,
                            2: t,
                            3: t,
                            4: t,
                            5: t,
                            6: t,
                            7: t,
                            8: t,
                            9: t,
                            a: t,
                            b: t,
                            c: t,
                            d: t,
                            e: t,
                            f: t,
                            g: t,
                            h: t,
                            i: t,
                            j: t,
                            k: t,
                            l: t,
                            m: t,
                            n: t,
                            o: t,
                            p: t,
                            q: t,
                            r: t,
                            s: t,
                            t: t,
                            u: t,
                            v: t,
                            w: t,
                            x: t,
                            y: t,
                            z: t,
                            blogspot: r,
                            barsy: r
                        }],
                        bh: a,
                        bi: [1, {
                            co: t,
                            com: t,
                            edu: t,
                            or: t,
                            org: t
                        }],
                        biz: [1, {
                            activetrail: r,
                            cloudns: r,
                            jozi: r,
                            dyndns: r,
                            "for-better": r,
                            "for-more": r,
                            "for-some": r,
                            "for-the": r,
                            selfip: r,
                            webhop: r,
                            orx: r,
                            mmafan: r,
                            myftp: r,
                            "no-ip": r,
                            dscloud: r
                        }],
                        bj: [1, {
                            africa: t,
                            agro: t,
                            architectes: t,
                            assur: t,
                            avocats: t,
                            co: t,
                            com: t,
                            eco: t,
                            econo: t,
                            edu: t,
                            info: t,
                            loisirs: t,
                            money: t,
                            net: t,
                            org: t,
                            ote: t,
                            resto: t,
                            restaurant: t,
                            tourism: t,
                            univ: t,
                            blogspot: r
                        }],
                        bm: a,
                        bn: [1, {
                            com: t,
                            edu: t,
                            gov: t,
                            net: t,
                            org: t,
                            co: r
                        }],
                        bo: [1, {
                            com: t,
                            edu: t,
                            gob: t,
                            int: t,
                            org: t,
                            net: t,
                            mil: t,
                            tv: t,
                            web: t,
                            academia: t,
                            agro: t,
                            arte: t,
                            blog: t,
                            bolivia: t,
                            ciencia: t,
                            cooperativa: t,
                            democracia: t,
                            deporte: t,
                            ecologia: t,
                            economia: t,
                            empresa: t,
                            indigena: t,
                            industria: t,
                            info: t,
                            medicina: t,
                            movimiento: t,
                            musica: t,
                            natural: t,
                            nombre: t,
                            noticias: t,
                            patria: t,
                            politica: t,
                            profesional: t,
                            plurinacional: t,
                            pueblo: t,
                            revista: t,
                            salud: t,
                            tecnologia: t,
                            tksat: t,
                            transporte: t,
                            wiki: t
                        }],
                        br: [1, {
                            "9guacu": t,
                            abc: t,
                            adm: t,
                            adv: t,
                            agr: t,
                            aju: t,
                            am: t,
                            anani: t,
                            aparecida: t,
                            app: t,
                            arq: t,
                            art: t,
                            ato: t,
                            b: t,
                            barueri: t,
                            belem: t,
                            bhz: t,
                            bib: t,
                            bio: t,
                            blog: t,
                            bmd: t,
                            boavista: t,
                            bsb: t,
                            campinagrande: t,
                            campinas: t,
                            caxias: t,
                            cim: t,
                            cng: t,
                            cnt: t,
                            com: [1, {
                                blogspot: r,
                                simplesite: r
                            }],
                            contagem: t,
                            coop: t,
                            coz: t,
                            cri: t,
                            cuiaba: t,
                            curitiba: t,
                            def: t,
                            des: t,
                            det: t,
                            dev: t,
                            ecn: t,
                            eco: t,
                            edu: t,
                            emp: t,
                            enf: t,
                            eng: t,
                            esp: t,
                            etc: t,
                            eti: t,
                            far: t,
                            feira: t,
                            flog: t,
                            floripa: t,
                            fm: t,
                            fnd: t,
                            fortal: t,
                            fot: t,
                            foz: t,
                            fst: t,
                            g12: t,
                            geo: t,
                            ggf: t,
                            goiania: t,
                            gov: [1, {
                                ac: t,
                                al: t,
                                am: t,
                                ap: t,
                                ba: t,
                                ce: t,
                                df: t,
                                es: t,
                                go: t,
                                ma: t,
                                mg: t,
                                ms: t,
                                mt: t,
                                pa: t,
                                pb: t,
                                pe: t,
                                pi: t,
                                pr: t,
                                rj: t,
                                rn: t,
                                ro: t,
                                rr: t,
                                rs: t,
                                sc: t,
                                se: t,
                                sp: t,
                                to: t
                            }],
                            gru: t,
                            imb: t,
                            ind: t,
                            inf: t,
                            jab: t,
                            jampa: t,
                            jdf: t,
                            joinville: t,
                            jor: t,
                            jus: t,
                            leg: [1, {
                                ac: r,
                                al: r,
                                am: r,
                                ap: r,
                                ba: r,
                                ce: r,
                                df: r,
                                es: r,
                                go: r,
                                ma: r,
                                mg: r,
                                ms: r,
                                mt: r,
                                pa: r,
                                pb: r,
                                pe: r,
                                pi: r,
                                pr: r,
                                rj: r,
                                rn: r,
                                ro: r,
                                rr: r,
                                rs: r,
                                sc: r,
                                se: r,
                                sp: r,
                                to: r
                            }],
                            lel: t,
                            log: t,
                            londrina: t,
                            macapa: t,
                            maceio: t,
                            manaus: t,
                            maringa: t,
                            mat: t,
                            med: t,
                            mil: t,
                            morena: t,
                            mp: t,
                            mus: t,
                            natal: t,
                            net: t,
                            niteroi: t,
                            nom: h,
                            not: t,
                            ntr: t,
                            odo: t,
                            ong: t,
                            org: t,
                            osasco: t,
                            palmas: t,
                            poa: t,
                            ppg: t,
                            pro: t,
                            psc: t,
                            psi: t,
                            pvh: t,
                            qsl: t,
                            radio: t,
                            rec: t,
                            recife: t,
                            rep: t,
                            ribeirao: t,
                            rio: t,
                            riobranco: t,
                            riopreto: t,
                            salvador: t,
                            sampa: t,
                            santamaria: t,
                            santoandre: t,
                            saobernardo: t,
                            saogonca: t,
                            seg: t,
                            sjc: t,
                            slg: t,
                            slz: t,
                            sorocaba: t,
                            srv: t,
                            taxi: t,
                            tc: t,
                            tec: t,
                            teo: t,
                            the: t,
                            tmp: t,
                            trd: t,
                            tur: t,
                            tv: t,
                            udi: t,
                            vet: t,
                            vix: t,
                            vlog: t,
                            wiki: t,
                            zlg: t
                        }],
                        bs: [1, {
                            com: t,
                            net: t,
                            org: t,
                            edu: t,
                            gov: t,
                            we: r
                        }],
                        bt: a,
                        bv: t,
                        bw: [1, {
                            co: t,
                            org: t
                        }],
                        by: [1, {
                            gov: t,
                            mil: t,
                            com: l,
                            of: t,
                            mycloud: r,
                            mediatech: r
                        }],
                        bz: [1, {
                            com: t,
                            net: t,
                            org: t,
                            edu: t,
                            gov: t,
                            za: r,
                            gsj: r
                        }],
                        ca: [1, {
                            ab: t,
                            bc: t,
                            mb: t,
                            nb: t,
                            nf: t,
                            nl: t,
                            ns: t,
                            nt: t,
                            nu: t,
                            on: t,
                            pe: t,
                            qc: t,
                            sk: t,
                            yk: t,
                            gc: t,
                            barsy: r,
                            awdev: s,
                            co: r,
                            blogspot: r,
                            "no-ip": r,
                            myspreadshop: r
                        }],
                        cat: t,
                        cc: [1, {
                            cloudns: r,
                            ftpaccess: r,
                            "game-server": r,
                            myphotos: r,
                            scrapping: r,
                            twmail: r,
                            csx: r,
                            fantasyleague: r,
                            spawn: [0, {
                                instances: r
                            }]
                        }],
                        cd: c,
                        cf: l,
                        cg: t,
                        ch: [1, {
                            square7: r,
                            blogspot: r,
                            flow: [0, {
                                ae: [0, {
                                    alp1: r
                                }],
                                appengine: r
                            }],
                            "linkyard-cloud": r,
                            dnsking: r,
                            gotdns: r,
                            "123website": r,
                            myspreadshop: r,
                            firenet: [0, {
                                "*": r,
                                svc: s
                            }],
                            "12hp": r,
                            "2ix": r,
                            "4lima": r,
                            "lima-city": r
                        }],
                        ci: [1, {
                            org: t,
                            or: t,
                            com: t,
                            co: t,
                            edu: t,
                            ed: t,
                            ac: t,
                            net: t,
                            go: t,
                            asso: t,
                            "xn--aroport-bya": t,
                            aéroport: t,
                            int: t,
                            presse: t,
                            md: t,
                            gouv: t,
                            fin: r,
                            nl: r
                        }],
                        ck: h,
                        cl: [1, {
                            co: t,
                            gob: t,
                            gov: t,
                            mil: t,
                            blogspot: r
                        }],
                        cm: [1, {
                            co: t,
                            com: t,
                            gov: t,
                            net: t
                        }],
                        cn: [1, {
                            ac: t,
                            com: [1, {
                                amazonaws: [0, {
                                    "cn-north-1": [0, {
                                        "execute-api": r,
                                        "emrappui-prod": r,
                                        "emrnotebooks-prod": r,
                                        "emrstudio-prod": r,
                                        dualstack: C,
                                        s3: r,
                                        "s3-accesspoint": r,
                                        "s3-deprecated": r,
                                        "s3-object-lambda": r,
                                        "s3-website": r
                                    }],
                                    "cn-northwest-1": j,
                                    compute: s,
                                    airflow: [0, {
                                        "cn-north-1": s,
                                        "cn-northwest-1": s
                                    }],
                                    eb: [0, {
                                        "cn-north-1": r,
                                        "cn-northwest-1": r
                                    }],
                                    elb: s
                                }],
                                sagemaker: [0, {
                                    "cn-north-1": d,
                                    "cn-northwest-1": d
                                }]
                            }],
                            edu: t,
                            gov: t,
                            net: t,
                            org: t,
                            mil: t,
                            "xn--55qx5d": t,
                            公司: t,
                            "xn--io0a7i": t,
                            网络: t,
                            "xn--od0alg": t,
                            網絡: t,
                            ah: t,
                            bj: t,
                            cq: t,
                            fj: t,
                            gd: t,
                            gs: t,
                            gz: t,
                            gx: t,
                            ha: t,
                            hb: t,
                            he: t,
                            hi: t,
                            hl: t,
                            hn: t,
                            jl: t,
                            js: t,
                            jx: t,
                            ln: t,
                            nm: t,
                            nx: t,
                            qh: t,
                            sc: t,
                            sd: t,
                            sh: t,
                            sn: t,
                            sx: t,
                            tj: t,
                            xj: t,
                            xz: t,
                            yn: t,
                            zj: t,
                            hk: t,
                            mo: t,
                            tw: t,
                            "canva-apps": r,
                            instantcloud: r,
                            quickconnect: I
                        }],
                        co: [1, {
                            arts: t,
                            com: l,
                            edu: t,
                            firm: t,
                            gov: t,
                            info: t,
                            int: t,
                            mil: t,
                            net: t,
                            nom: t,
                            org: t,
                            rec: t,
                            web: t,
                            carrd: r,
                            crd: r,
                            otap: s,
                            leadpages: r,
                            lpages: r,
                            mypi: r,
                            n4t: r,
                            firewalledreplit: O,
                            repl: O,
                            supabase: r
                        }],
                        com: [1, {
                            devcdnaccesso: s,
                            adobeaemcloud: [2, {
                                dev: s
                            }],
                            airkitapps: r,
                            "airkitapps-au": r,
                            aivencloud: r,
                            kasserver: r,
                            amazonaws: [0, {
                                "af-south-1": F,
                                "ap-east-1": W,
                                "ap-northeast-1": M,
                                "ap-northeast-2": M,
                                "ap-northeast-3": F,
                                "ap-south-1": M,
                                "ap-south-2": D,
                                "ap-southeast-1": M,
                                "ap-southeast-2": M,
                                "ap-southeast-3": j,
                                "ap-southeast-4": D,
                                "ca-central-1": U,
                                "eu-central-1": M,
                                "eu-central-2": D,
                                "eu-north-1": W,
                                "eu-south-1": F,
                                "eu-south-2": D,
                                "eu-west-1": [0, {
                                    "execute-api": r,
                                    "emrappui-prod": r,
                                    "emrnotebooks-prod": r,
                                    "emrstudio-prod": r,
                                    dualstack: C,
                                    s3: r,
                                    "s3-accesspoint": r,
                                    "s3-deprecated": r,
                                    "s3-object-lambda": r,
                                    "s3-website": r,
                                    "analytics-gateway": r,
                                    "aws-cloud9": P,
                                    cloud9: R
                                }],
                                "eu-west-2": W,
                                "eu-west-3": F,
                                "il-central-1": D,
                                "me-central-1": j,
                                "me-south-1": W,
                                "sa-east-1": F,
                                "us-east-1": [2, {
                                    "execute-api": r,
                                    "emrappui-prod": r,
                                    "emrnotebooks-prod": r,
                                    "emrstudio-prod": r,
                                    dualstack: L,
                                    s3: r,
                                    "s3-accesspoint": r,
                                    "s3-accesspoint-fips": r,
                                    "s3-deprecated": r,
                                    "s3-fips": r,
                                    "s3-object-lambda": r,
                                    "s3-website": r,
                                    "analytics-gateway": r,
                                    "aws-cloud9": P,
                                    cloud9: R
                                }],
                                "us-east-2": [0, {
                                    "execute-api": r,
                                    "emrappui-prod": r,
                                    "emrnotebooks-prod": r,
                                    "emrstudio-prod": r,
                                    dualstack: B,
                                    s3: r,
                                    "s3-accesspoint": r,
                                    "s3-accesspoint-fips": r,
                                    "s3-deprecated": r,
                                    "s3-fips": r,
                                    "s3-object-lambda": r,
                                    "s3-website": r,
                                    "analytics-gateway": r,
                                    "aws-cloud9": P,
                                    cloud9: R
                                }],
                                "us-gov-east-1": $,
                                "us-gov-west-1": $,
                                "us-west-1": U,
                                "us-west-2": [0, {
                                    "execute-api": r,
                                    "emrappui-prod": r,
                                    "emrnotebooks-prod": r,
                                    "emrstudio-prod": r,
                                    dualstack: L,
                                    s3: r,
                                    "s3-accesspoint": r,
                                    "s3-accesspoint-fips": r,
                                    "s3-deprecated": r,
                                    "s3-fips": r,
                                    "s3-object-lambda": r,
                                    "s3-website": r,
                                    "analytics-gateway": r,
                                    "aws-cloud9": P,
                                    cloud9: R
                                }],
                                compute: s,
                                "compute-1": s,
                                airflow: [0, {
                                    "ap-northeast-1": s,
                                    "ap-northeast-2": s,
                                    "ap-south-1": s,
                                    "ap-southeast-1": s,
                                    "ap-southeast-2": s,
                                    "ca-central-1": s,
                                    "eu-central-1": s,
                                    "eu-north-1": s,
                                    "eu-west-1": s,
                                    "eu-west-2": s,
                                    "eu-west-3": s,
                                    "sa-east-1": s,
                                    "us-east-1": s,
                                    "us-east-2": s,
                                    "us-west-2": s
                                }],
                                s3: r,
                                "s3-1": r,
                                "s3-ap-east-1": r,
                                "s3-ap-northeast-1": r,
                                "s3-ap-northeast-2": r,
                                "s3-ap-northeast-3": r,
                                "s3-ap-south-1": r,
                                "s3-ap-southeast-1": r,
                                "s3-ap-southeast-2": r,
                                "s3-ca-central-1": r,
                                "s3-eu-central-1": r,
                                "s3-eu-north-1": r,
                                "s3-eu-west-1": r,
                                "s3-eu-west-2": r,
                                "s3-eu-west-3": r,
                                "s3-external-1": r,
                                "s3-fips-us-gov-east-1": r,
                                "s3-fips-us-gov-west-1": r,
                                "s3-global": [0, {
                                    accesspoint: [0, {
                                        mrap: r
                                    }]
                                }],
                                "s3-me-south-1": r,
                                "s3-sa-east-1": r,
                                "s3-us-east-2": r,
                                "s3-us-gov-east-1": r,
                                "s3-us-gov-west-1": r,
                                "s3-us-west-1": r,
                                "s3-us-west-2": r,
                                "s3-website-ap-northeast-1": r,
                                "s3-website-ap-southeast-1": r,
                                "s3-website-ap-southeast-2": r,
                                "s3-website-eu-west-1": r,
                                "s3-website-sa-east-1": r,
                                "s3-website-us-east-1": r,
                                "s3-website-us-gov-west-1": r,
                                "s3-website-us-west-1": r,
                                "s3-website-us-west-2": r,
                                elb: s
                            }],
                            amazoncognito: [0, {
                                "af-south-1": K,
                                "ap-northeast-1": K,
                                "ap-northeast-2": K,
                                "ap-northeast-3": K,
                                "ap-south-1": K,
                                "ap-southeast-1": K,
                                "ap-southeast-2": K,
                                "ap-southeast-3": K,
                                "ca-central-1": K,
                                "eu-central-1": K,
                                "eu-north-1": K,
                                "eu-south-1": K,
                                "eu-west-1": K,
                                "eu-west-2": K,
                                "eu-west-3": K,
                                "il-central-1": K,
                                "me-south-1": K,
                                "sa-east-1": K,
                                "us-east-1": G,
                                "us-east-2": G,
                                "us-gov-west-1": [0, {
                                    "auth-fips": r
                                }],
                                "us-west-1": G,
                                "us-west-2": G
                            }],
                            amplifyapp: s,
                            awsapprunner: s,
                            elasticbeanstalk: [2, {
                                "af-south-1": r,
                                "ap-east-1": r,
                                "ap-northeast-1": r,
                                "ap-northeast-2": r,
                                "ap-northeast-3": r,
                                "ap-south-1": r,
                                "ap-southeast-1": r,
                                "ap-southeast-2": r,
                                "ap-southeast-3": r,
                                "ca-central-1": r,
                                "eu-central-1": r,
                                "eu-north-1": r,
                                "eu-south-1": r,
                                "eu-west-1": r,
                                "eu-west-2": r,
                                "eu-west-3": r,
                                "il-central-1": r,
                                "me-south-1": r,
                                "sa-east-1": r,
                                "us-east-1": r,
                                "us-east-2": r,
                                "us-gov-east-1": r,
                                "us-gov-west-1": r,
                                "us-west-1": r,
                                "us-west-2": r
                            }],
                            awsglobalaccelerator: r,
                            siiites: r,
                            appspacehosted: r,
                            appspaceusercontent: r,
                            "on-aptible": r,
                            myasustor: r,
                            "balena-devices": r,
                            betainabox: r,
                            boutir: r,
                            bplaced: r,
                            cafjs: r,
                            "canva-apps": r,
                            br: r,
                            cn: r,
                            de: r,
                            eu: r,
                            jpn: r,
                            mex: r,
                            ru: r,
                            sa: r,
                            uk: r,
                            us: r,
                            za: r,
                            ar: r,
                            hu: r,
                            kr: r,
                            no: r,
                            qc: r,
                            uy: r,
                            africa: r,
                            gr: r,
                            co: r,
                            jdevcloud: r,
                            wpdevcloud: r,
                            cloudcontrolled: r,
                            cloudcontrolapp: r,
                            "cf-ipfs": r,
                            "cloudflare-ipfs": r,
                            trycloudflare: r,
                            "customer-oci": [0, {
                                "*": r,
                                oci: s,
                                ocp: s,
                                ocs: s
                            }],
                            dattolocal: r,
                            dattorelay: r,
                            dattoweb: r,
                            mydatto: r,
                            builtwithdark: r,
                            datadetect: [0, {
                                demo: r,
                                instance: r
                            }],
                            ddns5: r,
                            discordsays: r,
                            discordsez: r,
                            drayddns: r,
                            dreamhosters: r,
                            mydrobo: r,
                            "dyndns-at-home": r,
                            "dyndns-at-work": r,
                            "dyndns-blog": r,
                            "dyndns-free": r,
                            "dyndns-home": r,
                            "dyndns-ip": r,
                            "dyndns-mail": r,
                            "dyndns-office": r,
                            "dyndns-pics": r,
                            "dyndns-remote": r,
                            "dyndns-server": r,
                            "dyndns-web": r,
                            "dyndns-wiki": r,
                            "dyndns-work": r,
                            blogdns: r,
                            cechire: r,
                            dnsalias: r,
                            dnsdojo: r,
                            doesntexist: r,
                            dontexist: r,
                            doomdns: r,
                            "dyn-o-saur": r,
                            dynalias: r,
                            "est-a-la-maison": r,
                            "est-a-la-masion": r,
                            "est-le-patron": r,
                            "est-mon-blogueur": r,
                            "from-ak": r,
                            "from-al": r,
                            "from-ar": r,
                            "from-ca": r,
                            "from-ct": r,
                            "from-dc": r,
                            "from-de": r,
                            "from-fl": r,
                            "from-ga": r,
                            "from-hi": r,
                            "from-ia": r,
                            "from-id": r,
                            "from-il": r,
                            "from-in": r,
                            "from-ks": r,
                            "from-ky": r,
                            "from-ma": r,
                            "from-md": r,
                            "from-mi": r,
                            "from-mn": r,
                            "from-mo": r,
                            "from-ms": r,
                            "from-mt": r,
                            "from-nc": r,
                            "from-nd": r,
                            "from-ne": r,
                            "from-nh": r,
                            "from-nj": r,
                            "from-nm": r,
                            "from-nv": r,
                            "from-oh": r,
                            "from-ok": r,
                            "from-or": r,
                            "from-pa": r,
                            "from-pr": r,
                            "from-ri": r,
                            "from-sc": r,
                            "from-sd": r,
                            "from-tn": r,
                            "from-tx": r,
                            "from-ut": r,
                            "from-va": r,
                            "from-vt": r,
                            "from-wa": r,
                            "from-wi": r,
                            "from-wv": r,
                            "from-wy": r,
                            getmyip: r,
                            gotdns: r,
                            "hobby-site": r,
                            homelinux: r,
                            homeunix: r,
                            iamallama: r,
                            "is-a-anarchist": r,
                            "is-a-blogger": r,
                            "is-a-bookkeeper": r,
                            "is-a-bulls-fan": r,
                            "is-a-caterer": r,
                            "is-a-chef": r,
                            "is-a-conservative": r,
                            "is-a-cpa": r,
                            "is-a-cubicle-slave": r,
                            "is-a-democrat": r,
                            "is-a-designer": r,
                            "is-a-doctor": r,
                            "is-a-financialadvisor": r,
                            "is-a-geek": r,
                            "is-a-green": r,
                            "is-a-guru": r,
                            "is-a-hard-worker": r,
                            "is-a-hunter": r,
                            "is-a-landscaper": r,
                            "is-a-lawyer": r,
                            "is-a-liberal": r,
                            "is-a-libertarian": r,
                            "is-a-llama": r,
                            "is-a-musician": r,
                            "is-a-nascarfan": r,
                            "is-a-nurse": r,
                            "is-a-painter": r,
                            "is-a-personaltrainer": r,
                            "is-a-photographer": r,
                            "is-a-player": r,
                            "is-a-republican": r,
                            "is-a-rockstar": r,
                            "is-a-socialist": r,
                            "is-a-student": r,
                            "is-a-teacher": r,
                            "is-a-techie": r,
                            "is-a-therapist": r,
                            "is-an-accountant": r,
                            "is-an-actor": r,
                            "is-an-actress": r,
                            "is-an-anarchist": r,
                            "is-an-artist": r,
                            "is-an-engineer": r,
                            "is-an-entertainer": r,
                            "is-certified": r,
                            "is-gone": r,
                            "is-into-anime": r,
                            "is-into-cars": r,
                            "is-into-cartoons": r,
                            "is-into-games": r,
                            "is-leet": r,
                            "is-not-certified": r,
                            "is-slick": r,
                            "is-uberleet": r,
                            "is-with-theband": r,
                            "isa-geek": r,
                            "isa-hockeynut": r,
                            issmarterthanyou: r,
                            "likes-pie": r,
                            likescandy: r,
                            "neat-url": r,
                            "saves-the-whales": r,
                            selfip: r,
                            "sells-for-less": r,
                            "sells-for-u": r,
                            servebbs: r,
                            "simple-url": r,
                            "space-to-rent": r,
                            "teaches-yoga": r,
                            writesthisblog: r,
                            digitaloceanspaces: s,
                            ddnsfree: r,
                            ddnsgeek: r,
                            giize: r,
                            gleeze: r,
                            kozow: r,
                            loseyourip: r,
                            ooguy: r,
                            theworkpc: r,
                            mytuleap: r,
                            "tuleap-partners": r,
                            encoreapi: r,
                            evennode: [0, {
                                "eu-1": r,
                                "eu-2": r,
                                "eu-3": r,
                                "eu-4": r,
                                "us-1": r,
                                "us-2": r,
                                "us-3": r,
                                "us-4": r
                            }],
                            onfabrica: r,
                            fbsbx: J,
                            "fastly-edge": r,
                            "fastly-terrarium": r,
                            "fastvps-server": r,
                            mydobiss: r,
                            firebaseapp: r,
                            fldrv: r,
                            forgeblocks: r,
                            framercanvas: r,
                            "freebox-os": r,
                            freeboxos: r,
                            freemyip: r,
                            gentapps: r,
                            gentlentapis: r,
                            githubusercontent: r,
                            "0emm": s,
                            appspot: [2, {
                                r: s
                            }],
                            codespot: r,
                            googleapis: r,
                            googlecode: r,
                            pagespeedmobilizer: r,
                            publishproxy: r,
                            withgoogle: r,
                            withyoutube: r,
                            blogspot: r,
                            awsmppl: r,
                            herokuapp: r,
                            herokussl: r,
                            impertrixcdn: r,
                            impertrix: r,
                            smushcdn: r,
                            wphostedmail: r,
                            wpmucdn: r,
                            pixolino: r,
                            amscompute: r,
                            dopaas: r,
                            "hosted-by-previder": Y,
                            hosteur: [0, {
                                "rag-cloud": r,
                                "rag-cloud-ch": r
                            }],
                            "ik-server": [0, {
                                jcloud: r,
                                "jcloud-ver-jpc": r
                            }],
                            jelastic: [0, {
                                demo: r
                            }],
                            kilatiron: r,
                            massivegrid: Y,
                            wafaicloud: [0, {
                                jed: r,
                                lon: r,
                                ryd: r
                            }],
                            joyent: [0, {
                                cns: s
                            }],
                            ktistory: r,
                            lpusercontent: r,
                            lmpm: Q,
                            linode: [0, {
                                members: r,
                                nodebalancer: s
                            }],
                            linodeobjects: s,
                            linodeusercontent: [0, {
                                ip: r
                            }],
                            barsycenter: r,
                            barsyonline: r,
                            mazeplay: r,
                            miniserver: r,
                            meteorapp: ee,
                            hostedpi: r,
                            "mythic-beasts": [0, {
                                customer: r,
                                caracal: r,
                                fentiger: r,
                                lynx: r,
                                ocelot: r,
                                oncilla: r,
                                onza: r,
                                sphinx: r,
                                vs: r,
                                x: r,
                                yali: r
                            }],
                            nospamproxy: f,
                            "4u": r,
                            nfshost: r,
                            "001www": r,
                            ddnslive: r,
                            myiphost: r,
                            blogsyte: r,
                            ciscofreak: r,
                            damnserver: r,
                            ditchyourip: r,
                            dnsiskinky: r,
                            dynns: r,
                            geekgalaxy: r,
                            "health-carereform": r,
                            homesecuritymac: r,
                            homesecuritypc: r,
                            myactivedirectory: r,
                            mysecuritycamera: r,
                            "net-freaks": r,
                            onthewifi: r,
                            point2this: r,
                            quicksytes: r,
                            securitytactics: r,
                            serveexchange: r,
                            servehumour: r,
                            servep2p: r,
                            servesarcasm: r,
                            stufftoread: r,
                            unusualperson: r,
                            workisboring: r,
                            "3utilities": r,
                            ddnsking: r,
                            myvnc: r,
                            servebeer: r,
                            servecounterstrike: r,
                            serveftp: r,
                            servegame: r,
                            servehalflife: r,
                            servehttp: r,
                            serveirc: r,
                            servemp3: r,
                            servepics: r,
                            servequake: r,
                            observableusercontent: [0, {
                                static: r
                            }],
                            simplesite: r,
                            orsites: r,
                            operaunite: r,
                            "authgear-staging": r,
                            authgearapps: r,
                            skygearapp: r,
                            outsystemscloud: r,
                            ownprovider: r,
                            pgfog: r,
                            pagefrontapp: r,
                            pagexl: r,
                            paywhirl: s,
                            gotpantheon: r,
                            "platter-app": r,
                            pleskns: r,
                            "postman-echo": r,
                            prgmr: [0, {
                                xen: r
                            }],
                            pythonanywhere: ee,
                            qualifioapp: r,
                            ladesk: r,
                            qbuser: r,
                            qa2: r,
                            "dev-myqnapcloud": r,
                            "alpha-myqnapcloud": r,
                            myqnapcloud: r,
                            quipelements: s,
                            rackmaze: r,
                            rhcloud: r,
                            render: Q,
                            onrender: r,
                            "180r": r,
                            dojin: r,
                            sakuratan: r,
                            sakuraweb: r,
                            x0: r,
                            code: [0, {
                                builder: s,
                                "dev-builder": s,
                                "stg-builder": s
                            }],
                            logoip: r,
                            scrysec: r,
                            "firewall-gateway": r,
                            myshopblocks: r,
                            myshopify: r,
                            shopitsite: r,
                            "1kapp": r,
                            appchizi: r,
                            applinzi: r,
                            sinaapp: r,
                            vipsinaapp: r,
                            "bounty-full": [2, {
                                alpha: r,
                                beta: r
                            }],
                            streamlitapp: r,
                            "try-snowplow": r,
                            "stackhero-network": r,
                            "playstation-cloud": r,
                            myspreadshop: r,
                            stdlib: [0, {
                                api: r
                            }],
                            "temp-dns": r,
                            dsmynas: r,
                            familyds: r,
                            mytabit: r,
                            "tb-hosting": et,
                            reservd: r,
                            thingdustdata: r,
                            bloxcms: r,
                            "townnews-staging": r,
                            typeform: [0, {
                                pro: r
                            }],
                            hk: r,
                            it: r,
                            vultrobjects: s,
                            wafflecell: r,
                            "reserve-online": r,
                            hotelwithflight: r,
                            remotewd: r,
                            wiardweb: en,
                            messwithdns: r,
                            "woltlab-demo": r,
                            wpenginepowered: [2, {
                                js: r
                            }],
                            wixsite: r,
                            xnbay: [2, {
                                u2: r,
                                "u2-local": r
                            }],
                            yolasite: r
                        }],
                        coop: t,
                        cr: [1, {
                            ac: t,
                            co: t,
                            ed: t,
                            fi: t,
                            go: t,
                            or: t,
                            sa: t
                        }],
                        cu: [1, {
                            com: t,
                            edu: t,
                            org: t,
                            net: t,
                            gov: t,
                            inf: t
                        }],
                        cv: [1, {
                            com: t,
                            edu: t,
                            int: t,
                            nome: t,
                            org: t,
                            blogspot: r
                        }],
                        cw: er,
                        cx: [1, {
                            gov: t,
                            ath: r,
                            info: r
                        }],
                        cy: [1, {
                            ac: t,
                            biz: t,
                            com: [1, {
                                blogspot: r,
                                scaleforce: ea
                            }],
                            ekloges: t,
                            gov: t,
                            ltd: t,
                            mil: t,
                            net: t,
                            org: t,
                            press: t,
                            pro: t,
                            tm: t
                        }],
                        cz: [1, {
                            co: r,
                            realm: r,
                            e4: r,
                            blogspot: r,
                            metacentrum: [0, {
                                cloud: s,
                                custom: r
                            }],
                            muni: [0, {
                                cloud: [0, {
                                    flt: r,
                                    usr: r
                                }]
                            }]
                        }],
                        de: [1, {
                            bplaced: r,
                            square7: r,
                            com: r,
                            cosidns: [0, {
                                dyn: r
                            }],
                            "dynamisches-dns": r,
                            dnsupdater: r,
                            "internet-dns": r,
                            "l-o-g-i-n": r,
                            dnshome: r,
                            fuettertdasnetz: r,
                            isteingeek: r,
                            istmein: r,
                            lebtimnetz: r,
                            leitungsen: r,
                            traeumtgerade: r,
                            ddnss: [2, {
                                dyn: r,
                                dyndns: r
                            }],
                            dyndns1: r,
                            "dyn-ip24": r,
                            "home-webserver": [2, {
                                dyn: r
                            }],
                            "myhome-server": r,
                            frusky: s,
                            goip: r,
                            blogspot: r,
                            "xn--gnstigbestellen-zvb": r,
                            günstigbestellen: r,
                            "xn--gnstigliefern-wob": r,
                            günstigliefern: r,
                            "hs-heilbronn": [0, {
                                it: en
                            }],
                            "dyn-berlin": r,
                            "in-berlin": r,
                            "in-brb": r,
                            "in-butter": r,
                            "in-dsl": r,
                            "in-vpn": r,
                            iservschule: r,
                            "mein-iserv": r,
                            schulplattform: r,
                            schulserver: r,
                            "test-iserv": r,
                            keymachine: r,
                            "git-repos": r,
                            "lcube-server": r,
                            "svn-repos": r,
                            barsy: r,
                            "123webseite": r,
                            logoip: r,
                            "firewall-gateway": r,
                            "my-gateway": r,
                            "my-router": r,
                            spdns: r,
                            speedpartner: [0, {
                                customer: r
                            }],
                            myspreadshop: r,
                            "taifun-dns": r,
                            "12hp": r,
                            "2ix": r,
                            "4lima": r,
                            "lima-city": r,
                            "dd-dns": r,
                            "dray-dns": r,
                            draydns: r,
                            "dyn-vpn": r,
                            dynvpn: r,
                            "mein-vigor": r,
                            "my-vigor": r,
                            "my-wan": r,
                            "syno-ds": r,
                            "synology-diskstation": r,
                            "synology-ds": r,
                            uberspace: s,
                            virtualuser: r,
                            "virtual-user": r,
                            "community-pro": r,
                            diskussionsbereich: r
                        }],
                        dj: t,
                        dk: [1, {
                            biz: r,
                            co: r,
                            firm: r,
                            reg: r,
                            store: r,
                            blogspot: r,
                            "123hjemmeside": r,
                            myspreadshop: r
                        }],
                        dm: a,
                        do: [1, {
                            art: t,
                            com: t,
                            edu: t,
                            gob: t,
                            gov: t,
                            mil: t,
                            net: t,
                            org: t,
                            sld: t,
                            web: t
                        }],
                        dz: [1, {
                            art: t,
                            asso: t,
                            com: t,
                            edu: t,
                            gov: t,
                            org: t,
                            net: t,
                            pol: t,
                            soc: t,
                            tm: t
                        }],
                        ec: [1, {
                            com: t,
                            info: t,
                            net: t,
                            fin: t,
                            k12: t,
                            med: t,
                            pro: t,
                            org: t,
                            edu: t,
                            gov: t,
                            gob: t,
                            mil: t,
                            base: r,
                            official: r
                        }],
                        edu: [1, {
                            rit: [0, {
                                "git-pages": r
                            }]
                        }],
                        ee: [1, {
                            edu: t,
                            gov: t,
                            riik: t,
                            lib: t,
                            med: t,
                            com: l,
                            pri: t,
                            aip: t,
                            org: t,
                            fie: t
                        }],
                        eg: [1, {
                            com: l,
                            edu: t,
                            eun: t,
                            gov: t,
                            mil: t,
                            name: t,
                            net: t,
                            org: t,
                            sci: t
                        }],
                        er: h,
                        es: [1, {
                            com: l,
                            nom: t,
                            org: t,
                            gob: t,
                            edu: t,
                            "123miweb": r,
                            myspreadshop: r
                        }],
                        et: [1, {
                            com: t,
                            gov: t,
                            org: t,
                            edu: t,
                            biz: t,
                            name: t,
                            info: t,
                            net: t
                        }],
                        eu: [1, {
                            airkitapps: r,
                            mycd: r,
                            cloudns: r,
                            dogado: ei,
                            barsy: r,
                            wellbeingzone: r,
                            spdns: r,
                            transurl: s,
                            diskstation: r
                        }],
                        fi: [1, {
                            aland: t,
                            dy: r,
                            blogspot: r,
                            "xn--hkkinen-5wa": r,
                            häkkinen: r,
                            iki: r,
                            cloudplatform: [0, {
                                fi: r
                            }],
                            datacenter: [0, {
                                demo: r,
                                paas: r
                            }],
                            kapsi: r,
                            "123kotisivu": r,
                            myspreadshop: r
                        }],
                        fj: [1, {
                            ac: t,
                            biz: t,
                            com: t,
                            gov: t,
                            info: t,
                            mil: t,
                            name: t,
                            net: t,
                            org: t,
                            pro: t
                        }],
                        fk: h,
                        fm: [1, {
                            com: t,
                            edu: t,
                            net: t,
                            org: t,
                            radio: r,
                            user: s
                        }],
                        fo: t,
                        fr: [1, {
                            asso: t,
                            com: t,
                            gouv: t,
                            nom: t,
                            prd: t,
                            tm: t,
                            avoues: t,
                            cci: t,
                            greta: t,
                            "huissier-justice": t,
                            "en-root": r,
                            "fbx-os": r,
                            fbxos: r,
                            "freebox-os": r,
                            freeboxos: r,
                            blogspot: r,
                            goupile: r,
                            "123siteweb": r,
                            "on-web": r,
                            "chirurgiens-dentistes-en-france": r,
                            dedibox: r,
                            aeroport: r,
                            avocat: r,
                            chambagri: r,
                            "chirurgiens-dentistes": r,
                            "experts-comptables": r,
                            medecin: r,
                            notaires: r,
                            pharmacien: r,
                            port: r,
                            veterinaire: r,
                            myspreadshop: r,
                            ynh: r
                        }],
                        ga: t,
                        gb: t,
                        gd: [1, {
                            edu: t,
                            gov: t
                        }],
                        ge: [1, {
                            com: t,
                            edu: t,
                            gov: t,
                            org: t,
                            mil: t,
                            net: t,
                            pvt: t
                        }],
                        gf: t,
                        gg: [1, {
                            co: t,
                            net: t,
                            org: t,
                            kaas: r,
                            cya: r,
                            panel: [2, {
                                daemon: r
                            }]
                        }],
                        gh: [1, {
                            com: t,
                            edu: t,
                            gov: t,
                            org: t,
                            mil: t
                        }],
                        gi: [1, {
                            com: t,
                            ltd: t,
                            gov: t,
                            mod: t,
                            edu: t,
                            org: t
                        }],
                        gl: [1, {
                            co: t,
                            com: t,
                            edu: t,
                            net: t,
                            org: t,
                            biz: r,
                            xx: r
                        }],
                        gm: t,
                        gn: [1, {
                            ac: t,
                            com: t,
                            edu: t,
                            gov: t,
                            org: t,
                            net: t
                        }],
                        gov: t,
                        gp: [1, {
                            com: t,
                            net: t,
                            mobi: t,
                            edu: t,
                            org: t,
                            asso: t,
                            app: r
                        }],
                        gq: t,
                        gr: [1, {
                            com: t,
                            edu: t,
                            net: t,
                            org: t,
                            gov: t,
                            blogspot: r,
                            simplesite: r
                        }],
                        gs: t,
                        gt: [1, {
                            com: t,
                            edu: t,
                            gob: t,
                            ind: t,
                            mil: t,
                            net: t,
                            org: t,
                            blog: r,
                            de: r,
                            to: r
                        }],
                        gu: [1, {
                            com: t,
                            edu: t,
                            gov: t,
                            guam: t,
                            info: t,
                            net: t,
                            org: t,
                            web: t
                        }],
                        gw: t,
                        gy: [1, {
                            co: t,
                            com: t,
                            edu: t,
                            gov: t,
                            net: t,
                            org: t,
                            be: r
                        }],
                        hk: [1, {
                            com: t,
                            edu: t,
                            gov: t,
                            idv: t,
                            net: t,
                            org: t,
                            "xn--55qx5d": t,
                            公司: t,
                            "xn--wcvs22d": t,
                            教育: t,
                            "xn--lcvr32d": t,
                            敎育: t,
                            "xn--mxtq1m": t,
                            政府: t,
                            "xn--gmqw5a": t,
                            個人: t,
                            "xn--ciqpn": t,
                            个人: t,
                            "xn--gmq050i": t,
                            箇人: t,
                            "xn--zf0avx": t,
                            網络: t,
                            "xn--io0a7i": t,
                            网络: t,
                            "xn--mk0axi": t,
                            组織: t,
                            "xn--od0alg": t,
                            網絡: t,
                            "xn--od0aq3b": t,
                            网絡: t,
                            "xn--tn0ag": t,
                            组织: t,
                            "xn--uc0atv": t,
                            組織: t,
                            "xn--uc0ay4a": t,
                            組织: t,
                            blogspot: r,
                            secaas: r,
                            ltd: r,
                            inc: r
                        }],
                        hm: t,
                        hn: [1, {
                            com: t,
                            edu: t,
                            org: t,
                            net: t,
                            mil: t,
                            gob: t,
                            cc: r
                        }],
                        hr: [1, {
                            iz: t,
                            from: t,
                            name: t,
                            com: t,
                            blogspot: r,
                            free: r
                        }],
                        ht: [1, {
                            com: t,
                            shop: t,
                            firm: t,
                            info: t,
                            adult: t,
                            net: t,
                            pro: t,
                            org: t,
                            med: t,
                            art: t,
                            coop: t,
                            pol: t,
                            asso: t,
                            edu: t,
                            rel: t,
                            gouv: t,
                            perso: t
                        }],
                        hu: [1, {
                            2e3: t,
                            co: t,
                            info: t,
                            org: t,
                            priv: t,
                            sport: t,
                            tm: t,
                            agrar: t,
                            bolt: t,
                            casino: t,
                            city: t,
                            erotica: t,
                            erotika: t,
                            film: t,
                            forum: t,
                            games: t,
                            hotel: t,
                            ingatlan: t,
                            jogasz: t,
                            konyvelo: t,
                            lakas: t,
                            media: t,
                            news: t,
                            reklam: t,
                            sex: t,
                            shop: t,
                            suli: t,
                            szex: t,
                            tozsde: t,
                            utazas: t,
                            video: t,
                            blogspot: r
                        }],
                        id: [1, {
                            ac: t,
                            biz: t,
                            co: l,
                            desa: t,
                            go: t,
                            mil: t,
                            my: [1, {
                                rss: s
                            }],
                            net: t,
                            or: t,
                            ponpes: t,
                            sch: t,
                            web: t,
                            flap: r,
                            forte: r
                        }],
                        ie: [1, {
                            gov: t,
                            blogspot: r,
                            myspreadshop: r
                        }],
                        il: [1, {
                            ac: t,
                            co: [1, {
                                ravpage: r,
                                blogspot: r,
                                tabitorder: r,
                                mytabit: r
                            }],
                            gov: t,
                            idf: t,
                            k12: t,
                            muni: t,
                            net: t,
                            org: t
                        }],
                        "xn--4dbrk0ce": [1, {
                            "xn--4dbgdty6c": t,
                            "xn--5dbhl8d": t,
                            "xn--8dbq2a": t,
                            "xn--hebda8b": t
                        }],
                        ישראל: [1, {
                            אקדמיה: t,
                            ישוב: t,
                            צהל: t,
                            ממשל: t
                        }],
                        im: [1, {
                            ac: t,
                            co: [1, {
                                ltd: t,
                                plc: t
                            }],
                            com: t,
                            net: t,
                            org: t,
                            tt: t,
                            tv: t,
                            ro: r
                        }],
                        in: [1, {
                            "5g": t,
                            "6g": t,
                            ac: t,
                            ai: t,
                            am: t,
                            bihar: t,
                            biz: t,
                            business: t,
                            ca: t,
                            cn: t,
                            co: t,
                            com: t,
                            coop: t,
                            cs: t,
                            delhi: t,
                            dr: t,
                            edu: t,
                            er: t,
                            firm: t,
                            gen: t,
                            gov: t,
                            gujarat: t,
                            ind: t,
                            info: t,
                            int: t,
                            internet: t,
                            io: t,
                            me: t,
                            mil: t,
                            net: t,
                            nic: t,
                            org: t,
                            pg: t,
                            post: t,
                            pro: t,
                            res: t,
                            travel: t,
                            tv: t,
                            uk: t,
                            up: t,
                            us: t,
                            web: r,
                            cloudns: r,
                            blogspot: r,
                            barsy: r,
                            supabase: r
                        }],
                        info: [1, {
                            cloudns: r,
                            "dynamic-dns": r,
                            dyndns: r,
                            "barrel-of-knowledge": r,
                            "barrell-of-knowledge": r,
                            "for-our": r,
                            "groks-the": r,
                            "groks-this": r,
                            "here-for-more": r,
                            knowsitall: r,
                            selfip: r,
                            webhop: r,
                            barsy: r,
                            mayfirst: r,
                            forumz: r,
                            nsupdate: r,
                            dvrcam: r,
                            ilovecollege: r,
                            "no-ip": r,
                            dnsupdate: r,
                            "v-info": r
                        }],
                        int: [1, {
                            eu: t
                        }],
                        io: [1, {
                            2038: r,
                            com: t,
                            "on-acorn": s,
                            apigee: r,
                            "b-data": r,
                            backplaneapp: r,
                            banzaicloud: [0, {
                                app: r,
                                backyards: s
                            }],
                            beagleboard: r,
                            bitbucket: r,
                            bluebite: r,
                            boxfuse: r,
                            browsersafetymark: r,
                            bigv: [0, {
                                uk0: r
                            }],
                            cleverapps: r,
                            dappnode: [0, {
                                dyndns: r
                            }],
                            dedyn: r,
                            drud: r,
                            definima: r,
                            "fh-muenster": r,
                            shw: r,
                            forgerock: [0, {
                                id: r
                            }],
                            ghost: r,
                            github: r,
                            gitlab: r,
                            lolipop: r,
                            "hasura-app": r,
                            hostyhosting: r,
                            moonscale: s,
                            beebyte: Y,
                            beebyteapp: [0, {
                                sekd1: r
                            }],
                            jele: r,
                            unispace: [0, {
                                "cloud-fr1": r
                            }],
                            webthings: r,
                            loginline: r,
                            barsy: r,
                            azurecontainer: s,
                            ngrok: [2, {
                                ap: r,
                                au: r,
                                eu: r,
                                in: r,
                                jp: r,
                                sa: r,
                                us: r
                            }],
                            nodeart: [0, {
                                stage: r
                            }],
                            nid: r,
                            pantheonsite: r,
                            dyn53: r,
                            pstmn: [2, {
                                mock: r
                            }],
                            protonet: r,
                            qoto: r,
                            qcx: [2, {
                                sys: s
                            }],
                            vaporcloud: r,
                            vbrplsbx: [0, {
                                g: r
                            }],
                            "on-k3s": s,
                            "on-rio": s,
                            readthedocs: r,
                            resindevice: r,
                            resinstaging: [0, {
                                devices: r
                            }],
                            hzc: r,
                            sandcats: r,
                            shiftcrypto: r,
                            shiftedit: r,
                            "mo-siemens": r,
                            musician: r,
                            lair: J,
                            stolos: s,
                            spacekit: r,
                            utwente: r,
                            s5y: s,
                            edugit: r,
                            telebit: r,
                            thingdust: [0, {
                                dev: el,
                                disrec: el,
                                prod: ec,
                                testing: el
                            }],
                            tickets: r,
                            upli: r,
                            wedeploy: r,
                            editorx: r,
                            wixstudio: r,
                            basicserver: r,
                            virtualserver: r
                        }],
                        iq: ed,
                        ir: [1, {
                            ac: t,
                            co: t,
                            gov: t,
                            id: t,
                            net: t,
                            org: t,
                            sch: t,
                            "xn--mgba3a4f16a": t,
                            ایران: t,
                            "xn--mgba3a4fra": t,
                            ايران: t
                        }],
                        is: [1, {
                            net: t,
                            com: t,
                            edu: t,
                            gov: t,
                            org: t,
                            int: t,
                            cupcake: r,
                            blogspot: r
                        }],
                        it: [1, {
                            gov: t,
                            edu: t,
                            abr: t,
                            abruzzo: t,
                            "aosta-valley": t,
                            aostavalley: t,
                            bas: t,
                            basilicata: t,
                            cal: t,
                            calabria: t,
                            cam: t,
                            campania: t,
                            "emilia-romagna": t,
                            emiliaromagna: t,
                            emr: t,
                            "friuli-v-giulia": t,
                            "friuli-ve-giulia": t,
                            "friuli-vegiulia": t,
                            "friuli-venezia-giulia": t,
                            "friuli-veneziagiulia": t,
                            "friuli-vgiulia": t,
                            "friuliv-giulia": t,
                            "friulive-giulia": t,
                            friulivegiulia: t,
                            "friulivenezia-giulia": t,
                            friuliveneziagiulia: t,
                            friulivgiulia: t,
                            fvg: t,
                            laz: t,
                            lazio: t,
                            lig: t,
                            liguria: t,
                            lom: t,
                            lombardia: t,
                            lombardy: t,
                            lucania: t,
                            mar: t,
                            marche: t,
                            mol: t,
                            molise: t,
                            piedmont: t,
                            piemonte: t,
                            pmn: t,
                            pug: t,
                            puglia: t,
                            sar: t,
                            sardegna: t,
                            sardinia: t,
                            sic: t,
                            sicilia: t,
                            sicily: t,
                            taa: t,
                            tos: t,
                            toscana: t,
                            "trentin-sud-tirol": t,
                            "xn--trentin-sd-tirol-rzb": t,
                            "trentin-s\xfcd-tirol": t,
                            "trentin-sudtirol": t,
                            "xn--trentin-sdtirol-7vb": t,
                            "trentin-s\xfcdtirol": t,
                            "trentin-sued-tirol": t,
                            "trentin-suedtirol": t,
                            "trentino-a-adige": t,
                            "trentino-aadige": t,
                            "trentino-alto-adige": t,
                            "trentino-altoadige": t,
                            "trentino-s-tirol": t,
                            "trentino-stirol": t,
                            "trentino-sud-tirol": t,
                            "xn--trentino-sd-tirol-c3b": t,
                            "trentino-s\xfcd-tirol": t,
                            "trentino-sudtirol": t,
                            "xn--trentino-sdtirol-szb": t,
                            "trentino-s\xfcdtirol": t,
                            "trentino-sued-tirol": t,
                            "trentino-suedtirol": t,
                            trentino: t,
                            "trentinoa-adige": t,
                            trentinoaadige: t,
                            "trentinoalto-adige": t,
                            trentinoaltoadige: t,
                            "trentinos-tirol": t,
                            trentinostirol: t,
                            "trentinosud-tirol": t,
                            "xn--trentinosd-tirol-rzb": t,
                            "trentinos\xfcd-tirol": t,
                            trentinosudtirol: t,
                            "xn--trentinosdtirol-7vb": t,
                            trentinosüdtirol: t,
                            "trentinosued-tirol": t,
                            trentinosuedtirol: t,
                            "trentinsud-tirol": t,
                            "xn--trentinsd-tirol-6vb": t,
                            "trentins\xfcd-tirol": t,
                            trentinsudtirol: t,
                            "xn--trentinsdtirol-nsb": t,
                            trentinsüdtirol: t,
                            "trentinsued-tirol": t,
                            trentinsuedtirol: t,
                            tuscany: t,
                            umb: t,
                            umbria: t,
                            "val-d-aosta": t,
                            "val-daosta": t,
                            "vald-aosta": t,
                            valdaosta: t,
                            "valle-aosta": t,
                            "valle-d-aosta": t,
                            "valle-daosta": t,
                            valleaosta: t,
                            "valled-aosta": t,
                            valledaosta: t,
                            "vallee-aoste": t,
                            "xn--valle-aoste-ebb": t,
                            "vall\xe9e-aoste": t,
                            "vallee-d-aoste": t,
                            "xn--valle-d-aoste-ehb": t,
                            "vall\xe9e-d-aoste": t,
                            valleeaoste: t,
                            "xn--valleaoste-e7a": t,
                            valléeaoste: t,
                            valleedaoste: t,
                            "xn--valledaoste-ebb": t,
                            valléedaoste: t,
                            vao: t,
                            vda: t,
                            ven: t,
                            veneto: t,
                            ag: t,
                            agrigento: t,
                            al: t,
                            alessandria: t,
                            "alto-adige": t,
                            altoadige: t,
                            an: t,
                            ancona: t,
                            "andria-barletta-trani": t,
                            "andria-trani-barletta": t,
                            andriabarlettatrani: t,
                            andriatranibarletta: t,
                            ao: t,
                            aosta: t,
                            aoste: t,
                            ap: t,
                            aq: t,
                            aquila: t,
                            ar: t,
                            arezzo: t,
                            "ascoli-piceno": t,
                            ascolipiceno: t,
                            asti: t,
                            at: t,
                            av: t,
                            avellino: t,
                            ba: t,
                            "balsan-sudtirol": t,
                            "xn--balsan-sdtirol-nsb": t,
                            "balsan-s\xfcdtirol": t,
                            "balsan-suedtirol": t,
                            balsan: t,
                            bari: t,
                            "barletta-trani-andria": t,
                            barlettatraniandria: t,
                            belluno: t,
                            benevento: t,
                            bergamo: t,
                            bg: t,
                            bi: t,
                            biella: t,
                            bl: t,
                            bn: t,
                            bo: t,
                            bologna: t,
                            "bolzano-altoadige": t,
                            bolzano: t,
                            "bozen-sudtirol": t,
                            "xn--bozen-sdtirol-2ob": t,
                            "bozen-s\xfcdtirol": t,
                            "bozen-suedtirol": t,
                            bozen: t,
                            br: t,
                            brescia: t,
                            brindisi: t,
                            bs: t,
                            bt: t,
                            "bulsan-sudtirol": t,
                            "xn--bulsan-sdtirol-nsb": t,
                            "bulsan-s\xfcdtirol": t,
                            "bulsan-suedtirol": t,
                            bulsan: t,
                            bz: t,
                            ca: t,
                            cagliari: t,
                            caltanissetta: t,
                            "campidano-medio": t,
                            campidanomedio: t,
                            campobasso: t,
                            "carbonia-iglesias": t,
                            carboniaiglesias: t,
                            "carrara-massa": t,
                            carraramassa: t,
                            caserta: t,
                            catania: t,
                            catanzaro: t,
                            cb: t,
                            ce: t,
                            "cesena-forli": t,
                            "xn--cesena-forl-mcb": t,
                            "cesena-forl\xec": t,
                            cesenaforli: t,
                            "xn--cesenaforl-i8a": t,
                            cesenaforlì: t,
                            ch: t,
                            chieti: t,
                            ci: t,
                            cl: t,
                            cn: t,
                            co: t,
                            como: t,
                            cosenza: t,
                            cr: t,
                            cremona: t,
                            crotone: t,
                            cs: t,
                            ct: t,
                            cuneo: t,
                            cz: t,
                            "dell-ogliastra": t,
                            dellogliastra: t,
                            en: t,
                            enna: t,
                            fc: t,
                            fe: t,
                            fermo: t,
                            ferrara: t,
                            fg: t,
                            fi: t,
                            firenze: t,
                            florence: t,
                            fm: t,
                            foggia: t,
                            "forli-cesena": t,
                            "xn--forl-cesena-fcb": t,
                            "forl\xec-cesena": t,
                            forlicesena: t,
                            "xn--forlcesena-c8a": t,
                            forlìcesena: t,
                            fr: t,
                            frosinone: t,
                            ge: t,
                            genoa: t,
                            genova: t,
                            go: t,
                            gorizia: t,
                            gr: t,
                            grosseto: t,
                            "iglesias-carbonia": t,
                            iglesiascarbonia: t,
                            im: t,
                            imperia: t,
                            is: t,
                            isernia: t,
                            kr: t,
                            "la-spezia": t,
                            laquila: t,
                            laspezia: t,
                            latina: t,
                            lc: t,
                            le: t,
                            lecce: t,
                            lecco: t,
                            li: t,
                            livorno: t,
                            lo: t,
                            lodi: t,
                            lt: t,
                            lu: t,
                            lucca: t,
                            macerata: t,
                            mantova: t,
                            "massa-carrara": t,
                            massacarrara: t,
                            matera: t,
                            mb: t,
                            mc: t,
                            me: t,
                            "medio-campidano": t,
                            mediocampidano: t,
                            messina: t,
                            mi: t,
                            milan: t,
                            milano: t,
                            mn: t,
                            mo: t,
                            modena: t,
                            "monza-brianza": t,
                            "monza-e-della-brianza": t,
                            monza: t,
                            monzabrianza: t,
                            monzaebrianza: t,
                            monzaedellabrianza: t,
                            ms: t,
                            mt: t,
                            na: t,
                            naples: t,
                            napoli: t,
                            no: t,
                            novara: t,
                            nu: t,
                            nuoro: t,
                            og: t,
                            ogliastra: t,
                            "olbia-tempio": t,
                            olbiatempio: t,
                            or: t,
                            oristano: t,
                            ot: t,
                            pa: t,
                            padova: t,
                            padua: t,
                            palermo: t,
                            parma: t,
                            pavia: t,
                            pc: t,
                            pd: t,
                            pe: t,
                            perugia: t,
                            "pesaro-urbino": t,
                            pesarourbino: t,
                            pescara: t,
                            pg: t,
                            pi: t,
                            piacenza: t,
                            pisa: t,
                            pistoia: t,
                            pn: t,
                            po: t,
                            pordenone: t,
                            potenza: t,
                            pr: t,
                            prato: t,
                            pt: t,
                            pu: t,
                            pv: t,
                            pz: t,
                            ra: t,
                            ragusa: t,
                            ravenna: t,
                            rc: t,
                            re: t,
                            "reggio-calabria": t,
                            "reggio-emilia": t,
                            reggiocalabria: t,
                            reggioemilia: t,
                            rg: t,
                            ri: t,
                            rieti: t,
                            rimini: t,
                            rm: t,
                            rn: t,
                            ro: t,
                            roma: t,
                            rome: t,
                            rovigo: t,
                            sa: t,
                            salerno: t,
                            sassari: t,
                            savona: t,
                            si: t,
                            siena: t,
                            siracusa: t,
                            so: t,
                            sondrio: t,
                            sp: t,
                            sr: t,
                            ss: t,
                            suedtirol: t,
                            "xn--sdtirol-n2a": t,
                            südtirol: t,
                            sv: t,
                            ta: t,
                            taranto: t,
                            te: t,
                            "tempio-olbia": t,
                            tempioolbia: t,
                            teramo: t,
                            terni: t,
                            tn: t,
                            to: t,
                            torino: t,
                            tp: t,
                            tr: t,
                            "trani-andria-barletta": t,
                            "trani-barletta-andria": t,
                            traniandriabarletta: t,
                            tranibarlettaandria: t,
                            trapani: t,
                            trento: t,
                            treviso: t,
                            trieste: t,
                            ts: t,
                            turin: t,
                            tv: t,
                            ud: t,
                            udine: t,
                            "urbino-pesaro": t,
                            urbinopesaro: t,
                            va: t,
                            varese: t,
                            vb: t,
                            vc: t,
                            ve: t,
                            venezia: t,
                            venice: t,
                            verbania: t,
                            vercelli: t,
                            verona: t,
                            vi: t,
                            "vibo-valentia": t,
                            vibovalentia: t,
                            vicenza: t,
                            viterbo: t,
                            vr: t,
                            vs: t,
                            vt: t,
                            vv: t,
                            blogspot: r,
                            ibxos: r,
                            iliadboxos: r,
                            neen: [0, {
                                jc: r
                            }],
                            tim: [0, {
                                open: [0, {
                                    jelastic: f
                                }]
                            }],
                            "16-b": r,
                            "32-b": r,
                            "64-b": r,
                            "123homepage": r,
                            myspreadshop: r,
                            syncloud: r
                        }],
                        je: [1, {
                            co: t,
                            net: t,
                            org: t,
                            of: r
                        }],
                        jm: h,
                        jo: [1, {
                            com: t,
                            org: t,
                            net: t,
                            edu: t,
                            sch: t,
                            gov: t,
                            mil: t,
                            name: t
                        }],
                        jobs: t,
                        jp: [1, {
                            ac: t,
                            ad: t,
                            co: t,
                            ed: t,
                            go: t,
                            gr: t,
                            lg: t,
                            ne: [1, {
                                aseinet: eo,
                                gehirn: r,
                                ivory: r,
                                "mail-box": r,
                                mints: r,
                                mokuren: r,
                                opal: r,
                                sakura: r,
                                sumomo: r,
                                topaz: r
                            }],
                            or: t,
                            aichi: [1, {
                                aisai: t,
                                ama: t,
                                anjo: t,
                                asuke: t,
                                chiryu: t,
                                chita: t,
                                fuso: t,
                                gamagori: t,
                                handa: t,
                                hazu: t,
                                hekinan: t,
                                higashiura: t,
                                ichinomiya: t,
                                inazawa: t,
                                inuyama: t,
                                isshiki: t,
                                iwakura: t,
                                kanie: t,
                                kariya: t,
                                kasugai: t,
                                kira: t,
                                kiyosu: t,
                                komaki: t,
                                konan: t,
                                kota: t,
                                mihama: t,
                                miyoshi: t,
                                nishio: t,
                                nisshin: t,
                                obu: t,
                                oguchi: t,
                                oharu: t,
                                okazaki: t,
                                owariasahi: t,
                                seto: t,
                                shikatsu: t,
                                shinshiro: t,
                                shitara: t,
                                tahara: t,
                                takahama: t,
                                tobishima: t,
                                toei: t,
                                togo: t,
                                tokai: t,
                                tokoname: t,
                                toyoake: t,
                                toyohashi: t,
                                toyokawa: t,
                                toyone: t,
                                toyota: t,
                                tsushima: t,
                                yatomi: t
                            }],
                            akita: [1, {
                                akita: t,
                                daisen: t,
                                fujisato: t,
                                gojome: t,
                                hachirogata: t,
                                happou: t,
                                higashinaruse: t,
                                honjo: t,
                                honjyo: t,
                                ikawa: t,
                                kamikoani: t,
                                kamioka: t,
                                katagami: t,
                                kazuno: t,
                                kitaakita: t,
                                kosaka: t,
                                kyowa: t,
                                misato: t,
                                mitane: t,
                                moriyoshi: t,
                                nikaho: t,
                                noshiro: t,
                                odate: t,
                                oga: t,
                                ogata: t,
                                semboku: t,
                                yokote: t,
                                yurihonjo: t
                            }],
                            aomori: [1, {
                                aomori: t,
                                gonohe: t,
                                hachinohe: t,
                                hashikami: t,
                                hiranai: t,
                                hirosaki: t,
                                itayanagi: t,
                                kuroishi: t,
                                misawa: t,
                                mutsu: t,
                                nakadomari: t,
                                noheji: t,
                                oirase: t,
                                owani: t,
                                rokunohe: t,
                                sannohe: t,
                                shichinohe: t,
                                shingo: t,
                                takko: t,
                                towada: t,
                                tsugaru: t,
                                tsuruta: t
                            }],
                            chiba: [1, {
                                abiko: t,
                                asahi: t,
                                chonan: t,
                                chosei: t,
                                choshi: t,
                                chuo: t,
                                funabashi: t,
                                futtsu: t,
                                hanamigawa: t,
                                ichihara: t,
                                ichikawa: t,
                                ichinomiya: t,
                                inzai: t,
                                isumi: t,
                                kamagaya: t,
                                kamogawa: t,
                                kashiwa: t,
                                katori: t,
                                katsuura: t,
                                kimitsu: t,
                                kisarazu: t,
                                kozaki: t,
                                kujukuri: t,
                                kyonan: t,
                                matsudo: t,
                                midori: t,
                                mihama: t,
                                minamiboso: t,
                                mobara: t,
                                mutsuzawa: t,
                                nagara: t,
                                nagareyama: t,
                                narashino: t,
                                narita: t,
                                noda: t,
                                oamishirasato: t,
                                omigawa: t,
                                onjuku: t,
                                otaki: t,
                                sakae: t,
                                sakura: t,
                                shimofusa: t,
                                shirako: t,
                                shiroi: t,
                                shisui: t,
                                sodegaura: t,
                                sosa: t,
                                tako: t,
                                tateyama: t,
                                togane: t,
                                tohnosho: t,
                                tomisato: t,
                                urayasu: t,
                                yachimata: t,
                                yachiyo: t,
                                yokaichiba: t,
                                yokoshibahikari: t,
                                yotsukaido: t
                            }],
                            ehime: [1, {
                                ainan: t,
                                honai: t,
                                ikata: t,
                                imabari: t,
                                iyo: t,
                                kamijima: t,
                                kihoku: t,
                                kumakogen: t,
                                masaki: t,
                                matsuno: t,
                                matsuyama: t,
                                namikata: t,
                                niihama: t,
                                ozu: t,
                                saijo: t,
                                seiyo: t,
                                shikokuchuo: t,
                                tobe: t,
                                toon: t,
                                uchiko: t,
                                uwajima: t,
                                yawatahama: t
                            }],
                            fukui: [1, {
                                echizen: t,
                                eiheiji: t,
                                fukui: t,
                                ikeda: t,
                                katsuyama: t,
                                mihama: t,
                                minamiechizen: t,
                                obama: t,
                                ohi: t,
                                ono: t,
                                sabae: t,
                                sakai: t,
                                takahama: t,
                                tsuruga: t,
                                wakasa: t
                            }],
                            fukuoka: [1, {
                                ashiya: t,
                                buzen: t,
                                chikugo: t,
                                chikuho: t,
                                chikujo: t,
                                chikushino: t,
                                chikuzen: t,
                                chuo: t,
                                dazaifu: t,
                                fukuchi: t,
                                hakata: t,
                                higashi: t,
                                hirokawa: t,
                                hisayama: t,
                                iizuka: t,
                                inatsuki: t,
                                kaho: t,
                                kasuga: t,
                                kasuya: t,
                                kawara: t,
                                keisen: t,
                                koga: t,
                                kurate: t,
                                kurogi: t,
                                kurume: t,
                                minami: t,
                                miyako: t,
                                miyama: t,
                                miyawaka: t,
                                mizumaki: t,
                                munakata: t,
                                nakagawa: t,
                                nakama: t,
                                nishi: t,
                                nogata: t,
                                ogori: t,
                                okagaki: t,
                                okawa: t,
                                oki: t,
                                omuta: t,
                                onga: t,
                                onojo: t,
                                oto: t,
                                saigawa: t,
                                sasaguri: t,
                                shingu: t,
                                shinyoshitomi: t,
                                shonai: t,
                                soeda: t,
                                sue: t,
                                tachiarai: t,
                                tagawa: t,
                                takata: t,
                                toho: t,
                                toyotsu: t,
                                tsuiki: t,
                                ukiha: t,
                                umi: t,
                                usui: t,
                                yamada: t,
                                yame: t,
                                yanagawa: t,
                                yukuhashi: t
                            }],
                            fukushima: [1, {
                                aizubange: t,
                                aizumisato: t,
                                aizuwakamatsu: t,
                                asakawa: t,
                                bandai: t,
                                date: t,
                                fukushima: t,
                                furudono: t,
                                futaba: t,
                                hanawa: t,
                                higashi: t,
                                hirata: t,
                                hirono: t,
                                iitate: t,
                                inawashiro: t,
                                ishikawa: t,
                                iwaki: t,
                                izumizaki: t,
                                kagamiishi: t,
                                kaneyama: t,
                                kawamata: t,
                                kitakata: t,
                                kitashiobara: t,
                                koori: t,
                                koriyama: t,
                                kunimi: t,
                                miharu: t,
                                mishima: t,
                                namie: t,
                                nango: t,
                                nishiaizu: t,
                                nishigo: t,
                                okuma: t,
                                omotego: t,
                                ono: t,
                                otama: t,
                                samegawa: t,
                                shimogo: t,
                                shirakawa: t,
                                showa: t,
                                soma: t,
                                sukagawa: t,
                                taishin: t,
                                tamakawa: t,
                                tanagura: t,
                                tenei: t,
                                yabuki: t,
                                yamato: t,
                                yamatsuri: t,
                                yanaizu: t,
                                yugawa: t
                            }],
                            gifu: [1, {
                                anpachi: t,
                                ena: t,
                                gifu: t,
                                ginan: t,
                                godo: t,
                                gujo: t,
                                hashima: t,
                                hichiso: t,
                                hida: t,
                                higashishirakawa: t,
                                ibigawa: t,
                                ikeda: t,
                                kakamigahara: t,
                                kani: t,
                                kasahara: t,
                                kasamatsu: t,
                                kawaue: t,
                                kitagata: t,
                                mino: t,
                                minokamo: t,
                                mitake: t,
                                mizunami: t,
                                motosu: t,
                                nakatsugawa: t,
                                ogaki: t,
                                sakahogi: t,
                                seki: t,
                                sekigahara: t,
                                shirakawa: t,
                                tajimi: t,
                                takayama: t,
                                tarui: t,
                                toki: t,
                                tomika: t,
                                wanouchi: t,
                                yamagata: t,
                                yaotsu: t,
                                yoro: t
                            }],
                            gunma: [1, {
                                annaka: t,
                                chiyoda: t,
                                fujioka: t,
                                higashiagatsuma: t,
                                isesaki: t,
                                itakura: t,
                                kanna: t,
                                kanra: t,
                                katashina: t,
                                kawaba: t,
                                kiryu: t,
                                kusatsu: t,
                                maebashi: t,
                                meiwa: t,
                                midori: t,
                                minakami: t,
                                naganohara: t,
                                nakanojo: t,
                                nanmoku: t,
                                numata: t,
                                oizumi: t,
                                ora: t,
                                ota: t,
                                shibukawa: t,
                                shimonita: t,
                                shinto: t,
                                showa: t,
                                takasaki: t,
                                takayama: t,
                                tamamura: t,
                                tatebayashi: t,
                                tomioka: t,
                                tsukiyono: t,
                                tsumagoi: t,
                                ueno: t,
                                yoshioka: t
                            }],
                            hiroshima: [1, {
                                asaminami: t,
                                daiwa: t,
                                etajima: t,
                                fuchu: t,
                                fukuyama: t,
                                hatsukaichi: t,
                                higashihiroshima: t,
                                hongo: t,
                                jinsekikogen: t,
                                kaita: t,
                                kui: t,
                                kumano: t,
                                kure: t,
                                mihara: t,
                                miyoshi: t,
                                naka: t,
                                onomichi: t,
                                osakikamijima: t,
                                otake: t,
                                saka: t,
                                sera: t,
                                seranishi: t,
                                shinichi: t,
                                shobara: t,
                                takehara: t
                            }],
                            hokkaido: [1, {
                                abashiri: t,
                                abira: t,
                                aibetsu: t,
                                akabira: t,
                                akkeshi: t,
                                asahikawa: t,
                                ashibetsu: t,
                                ashoro: t,
                                assabu: t,
                                atsuma: t,
                                bibai: t,
                                biei: t,
                                bifuka: t,
                                bihoro: t,
                                biratori: t,
                                chippubetsu: t,
                                chitose: t,
                                date: t,
                                ebetsu: t,
                                embetsu: t,
                                eniwa: t,
                                erimo: t,
                                esan: t,
                                esashi: t,
                                fukagawa: t,
                                fukushima: t,
                                furano: t,
                                furubira: t,
                                haboro: t,
                                hakodate: t,
                                hamatonbetsu: t,
                                hidaka: t,
                                higashikagura: t,
                                higashikawa: t,
                                hiroo: t,
                                hokuryu: t,
                                hokuto: t,
                                honbetsu: t,
                                horokanai: t,
                                horonobe: t,
                                ikeda: t,
                                imakane: t,
                                ishikari: t,
                                iwamizawa: t,
                                iwanai: t,
                                kamifurano: t,
                                kamikawa: t,
                                kamishihoro: t,
                                kamisunagawa: t,
                                kamoenai: t,
                                kayabe: t,
                                kembuchi: t,
                                kikonai: t,
                                kimobetsu: t,
                                kitahiroshima: t,
                                kitami: t,
                                kiyosato: t,
                                koshimizu: t,
                                kunneppu: t,
                                kuriyama: t,
                                kuromatsunai: t,
                                kushiro: t,
                                kutchan: t,
                                kyowa: t,
                                mashike: t,
                                matsumae: t,
                                mikasa: t,
                                minamifurano: t,
                                mombetsu: t,
                                moseushi: t,
                                mukawa: t,
                                muroran: t,
                                naie: t,
                                nakagawa: t,
                                nakasatsunai: t,
                                nakatombetsu: t,
                                nanae: t,
                                nanporo: t,
                                nayoro: t,
                                nemuro: t,
                                niikappu: t,
                                niki: t,
                                nishiokoppe: t,
                                noboribetsu: t,
                                numata: t,
                                obihiro: t,
                                obira: t,
                                oketo: t,
                                okoppe: t,
                                otaru: t,
                                otobe: t,
                                otofuke: t,
                                otoineppu: t,
                                oumu: t,
                                ozora: t,
                                pippu: t,
                                rankoshi: t,
                                rebun: t,
                                rikubetsu: t,
                                rishiri: t,
                                rishirifuji: t,
                                saroma: t,
                                sarufutsu: t,
                                shakotan: t,
                                shari: t,
                                shibecha: t,
                                shibetsu: t,
                                shikabe: t,
                                shikaoi: t,
                                shimamaki: t,
                                shimizu: t,
                                shimokawa: t,
                                shinshinotsu: t,
                                shintoku: t,
                                shiranuka: t,
                                shiraoi: t,
                                shiriuchi: t,
                                sobetsu: t,
                                sunagawa: t,
                                taiki: t,
                                takasu: t,
                                takikawa: t,
                                takinoue: t,
                                teshikaga: t,
                                tobetsu: t,
                                tohma: t,
                                tomakomai: t,
                                tomari: t,
                                toya: t,
                                toyako: t,
                                toyotomi: t,
                                toyoura: t,
                                tsubetsu: t,
                                tsukigata: t,
                                urakawa: t,
                                urausu: t,
                                uryu: t,
                                utashinai: t,
                                wakkanai: t,
                                wassamu: t,
                                yakumo: t,
                                yoichi: t
                            }],
                            hyogo: [1, {
                                aioi: t,
                                akashi: t,
                                ako: t,
                                amagasaki: t,
                                aogaki: t,
                                asago: t,
                                ashiya: t,
                                awaji: t,
                                fukusaki: t,
                                goshiki: t,
                                harima: t,
                                himeji: t,
                                ichikawa: t,
                                inagawa: t,
                                itami: t,
                                kakogawa: t,
                                kamigori: t,
                                kamikawa: t,
                                kasai: t,
                                kasuga: t,
                                kawanishi: t,
                                miki: t,
                                minamiawaji: t,
                                nishinomiya: t,
                                nishiwaki: t,
                                ono: t,
                                sanda: t,
                                sannan: t,
                                sasayama: t,
                                sayo: t,
                                shingu: t,
                                shinonsen: t,
                                shiso: t,
                                sumoto: t,
                                taishi: t,
                                taka: t,
                                takarazuka: t,
                                takasago: t,
                                takino: t,
                                tamba: t,
                                tatsuno: t,
                                toyooka: t,
                                yabu: t,
                                yashiro: t,
                                yoka: t,
                                yokawa: t
                            }],
                            ibaraki: [1, {
                                ami: t,
                                asahi: t,
                                bando: t,
                                chikusei: t,
                                daigo: t,
                                fujishiro: t,
                                hitachi: t,
                                hitachinaka: t,
                                hitachiomiya: t,
                                hitachiota: t,
                                ibaraki: t,
                                ina: t,
                                inashiki: t,
                                itako: t,
                                iwama: t,
                                joso: t,
                                kamisu: t,
                                kasama: t,
                                kashima: t,
                                kasumigaura: t,
                                koga: t,
                                miho: t,
                                mito: t,
                                moriya: t,
                                naka: t,
                                namegata: t,
                                oarai: t,
                                ogawa: t,
                                omitama: t,
                                ryugasaki: t,
                                sakai: t,
                                sakuragawa: t,
                                shimodate: t,
                                shimotsuma: t,
                                shirosato: t,
                                sowa: t,
                                suifu: t,
                                takahagi: t,
                                tamatsukuri: t,
                                tokai: t,
                                tomobe: t,
                                tone: t,
                                toride: t,
                                tsuchiura: t,
                                tsukuba: t,
                                uchihara: t,
                                ushiku: t,
                                yachiyo: t,
                                yamagata: t,
                                yawara: t,
                                yuki: t
                            }],
                            ishikawa: [1, {
                                anamizu: t,
                                hakui: t,
                                hakusan: t,
                                kaga: t,
                                kahoku: t,
                                kanazawa: t,
                                kawakita: t,
                                komatsu: t,
                                nakanoto: t,
                                nanao: t,
                                nomi: t,
                                nonoichi: t,
                                noto: t,
                                shika: t,
                                suzu: t,
                                tsubata: t,
                                tsurugi: t,
                                uchinada: t,
                                wajima: t
                            }],
                            iwate: [1, {
                                fudai: t,
                                fujisawa: t,
                                hanamaki: t,
                                hiraizumi: t,
                                hirono: t,
                                ichinohe: t,
                                ichinoseki: t,
                                iwaizumi: t,
                                iwate: t,
                                joboji: t,
                                kamaishi: t,
                                kanegasaki: t,
                                karumai: t,
                                kawai: t,
                                kitakami: t,
                                kuji: t,
                                kunohe: t,
                                kuzumaki: t,
                                miyako: t,
                                mizusawa: t,
                                morioka: t,
                                ninohe: t,
                                noda: t,
                                ofunato: t,
                                oshu: t,
                                otsuchi: t,
                                rikuzentakata: t,
                                shiwa: t,
                                shizukuishi: t,
                                sumita: t,
                                tanohata: t,
                                tono: t,
                                yahaba: t,
                                yamada: t
                            }],
                            kagawa: [1, {
                                ayagawa: t,
                                higashikagawa: t,
                                kanonji: t,
                                kotohira: t,
                                manno: t,
                                marugame: t,
                                mitoyo: t,
                                naoshima: t,
                                sanuki: t,
                                tadotsu: t,
                                takamatsu: t,
                                tonosho: t,
                                uchinomi: t,
                                utazu: t,
                                zentsuji: t
                            }],
                            kagoshima: [1, {
                                akune: t,
                                amami: t,
                                hioki: t,
                                isa: t,
                                isen: t,
                                izumi: t,
                                kagoshima: t,
                                kanoya: t,
                                kawanabe: t,
                                kinko: t,
                                kouyama: t,
                                makurazaki: t,
                                matsumoto: t,
                                minamitane: t,
                                nakatane: t,
                                nishinoomote: t,
                                satsumasendai: t,
                                soo: t,
                                tarumizu: t,
                                yusui: t
                            }],
                            kanagawa: [1, {
                                aikawa: t,
                                atsugi: t,
                                ayase: t,
                                chigasaki: t,
                                ebina: t,
                                fujisawa: t,
                                hadano: t,
                                hakone: t,
                                hiratsuka: t,
                                isehara: t,
                                kaisei: t,
                                kamakura: t,
                                kiyokawa: t,
                                matsuda: t,
                                minamiashigara: t,
                                miura: t,
                                nakai: t,
                                ninomiya: t,
                                odawara: t,
                                oi: t,
                                oiso: t,
                                sagamihara: t,
                                samukawa: t,
                                tsukui: t,
                                yamakita: t,
                                yamato: t,
                                yokosuka: t,
                                yugawara: t,
                                zama: t,
                                zushi: t
                            }],
                            kochi: [1, {
                                aki: t,
                                geisei: t,
                                hidaka: t,
                                higashitsuno: t,
                                ino: t,
                                kagami: t,
                                kami: t,
                                kitagawa: t,
                                kochi: t,
                                mihara: t,
                                motoyama: t,
                                muroto: t,
                                nahari: t,
                                nakamura: t,
                                nankoku: t,
                                nishitosa: t,
                                niyodogawa: t,
                                ochi: t,
                                okawa: t,
                                otoyo: t,
                                otsuki: t,
                                sakawa: t,
                                sukumo: t,
                                susaki: t,
                                tosa: t,
                                tosashimizu: t,
                                toyo: t,
                                tsuno: t,
                                umaji: t,
                                yasuda: t,
                                yusuhara: t
                            }],
                            kumamoto: [1, {
                                amakusa: t,
                                arao: t,
                                aso: t,
                                choyo: t,
                                gyokuto: t,
                                kamiamakusa: t,
                                kikuchi: t,
                                kumamoto: t,
                                mashiki: t,
                                mifune: t,
                                minamata: t,
                                minamioguni: t,
                                nagasu: t,
                                nishihara: t,
                                oguni: t,
                                ozu: t,
                                sumoto: t,
                                takamori: t,
                                uki: t,
                                uto: t,
                                yamaga: t,
                                yamato: t,
                                yatsushiro: t
                            }],
                            kyoto: [1, {
                                ayabe: t,
                                fukuchiyama: t,
                                higashiyama: t,
                                ide: t,
                                ine: t,
                                joyo: t,
                                kameoka: t,
                                kamo: t,
                                kita: t,
                                kizu: t,
                                kumiyama: t,
                                kyotamba: t,
                                kyotanabe: t,
                                kyotango: t,
                                maizuru: t,
                                minami: t,
                                minamiyamashiro: t,
                                miyazu: t,
                                muko: t,
                                nagaokakyo: t,
                                nakagyo: t,
                                nantan: t,
                                oyamazaki: t,
                                sakyo: t,
                                seika: t,
                                tanabe: t,
                                uji: t,
                                ujitawara: t,
                                wazuka: t,
                                yamashina: t,
                                yawata: t
                            }],
                            mie: [1, {
                                asahi: t,
                                inabe: t,
                                ise: t,
                                kameyama: t,
                                kawagoe: t,
                                kiho: t,
                                kisosaki: t,
                                kiwa: t,
                                komono: t,
                                kumano: t,
                                kuwana: t,
                                matsusaka: t,
                                meiwa: t,
                                mihama: t,
                                minamiise: t,
                                misugi: t,
                                miyama: t,
                                nabari: t,
                                shima: t,
                                suzuka: t,
                                tado: t,
                                taiki: t,
                                taki: t,
                                tamaki: t,
                                toba: t,
                                tsu: t,
                                udono: t,
                                ureshino: t,
                                watarai: t,
                                yokkaichi: t
                            }],
                            miyagi: [1, {
                                furukawa: t,
                                higashimatsushima: t,
                                ishinomaki: t,
                                iwanuma: t,
                                kakuda: t,
                                kami: t,
                                kawasaki: t,
                                marumori: t,
                                matsushima: t,
                                minamisanriku: t,
                                misato: t,
                                murata: t,
                                natori: t,
                                ogawara: t,
                                ohira: t,
                                onagawa: t,
                                osaki: t,
                                rifu: t,
                                semine: t,
                                shibata: t,
                                shichikashuku: t,
                                shikama: t,
                                shiogama: t,
                                shiroishi: t,
                                tagajo: t,
                                taiwa: t,
                                tome: t,
                                tomiya: t,
                                wakuya: t,
                                watari: t,
                                yamamoto: t,
                                zao: t
                            }],
                            miyazaki: [1, {
                                aya: t,
                                ebino: t,
                                gokase: t,
                                hyuga: t,
                                kadogawa: t,
                                kawaminami: t,
                                kijo: t,
                                kitagawa: t,
                                kitakata: t,
                                kitaura: t,
                                kobayashi: t,
                                kunitomi: t,
                                kushima: t,
                                mimata: t,
                                miyakonojo: t,
                                miyazaki: t,
                                morotsuka: t,
                                nichinan: t,
                                nishimera: t,
                                nobeoka: t,
                                saito: t,
                                shiiba: t,
                                shintomi: t,
                                takaharu: t,
                                takanabe: t,
                                takazaki: t,
                                tsuno: t
                            }],
                            nagano: [1, {
                                achi: t,
                                agematsu: t,
                                anan: t,
                                aoki: t,
                                asahi: t,
                                azumino: t,
                                chikuhoku: t,
                                chikuma: t,
                                chino: t,
                                fujimi: t,
                                hakuba: t,
                                hara: t,
                                hiraya: t,
                                iida: t,
                                iijima: t,
                                iiyama: t,
                                iizuna: t,
                                ikeda: t,
                                ikusaka: t,
                                ina: t,
                                karuizawa: t,
                                kawakami: t,
                                kiso: t,
                                kisofukushima: t,
                                kitaaiki: t,
                                komagane: t,
                                komoro: t,
                                matsukawa: t,
                                matsumoto: t,
                                miasa: t,
                                minamiaiki: t,
                                minamimaki: t,
                                minamiminowa: t,
                                minowa: t,
                                miyada: t,
                                miyota: t,
                                mochizuki: t,
                                nagano: t,
                                nagawa: t,
                                nagiso: t,
                                nakagawa: t,
                                nakano: t,
                                nozawaonsen: t,
                                obuse: t,
                                ogawa: t,
                                okaya: t,
                                omachi: t,
                                omi: t,
                                ookuwa: t,
                                ooshika: t,
                                otaki: t,
                                otari: t,
                                sakae: t,
                                sakaki: t,
                                saku: t,
                                sakuho: t,
                                shimosuwa: t,
                                shinanomachi: t,
                                shiojiri: t,
                                suwa: t,
                                suzaka: t,
                                takagi: t,
                                takamori: t,
                                takayama: t,
                                tateshina: t,
                                tatsuno: t,
                                togakushi: t,
                                togura: t,
                                tomi: t,
                                ueda: t,
                                wada: t,
                                yamagata: t,
                                yamanouchi: t,
                                yasaka: t,
                                yasuoka: t
                            }],
                            nagasaki: [1, {
                                chijiwa: t,
                                futsu: t,
                                goto: t,
                                hasami: t,
                                hirado: t,
                                iki: t,
                                isahaya: t,
                                kawatana: t,
                                kuchinotsu: t,
                                matsuura: t,
                                nagasaki: t,
                                obama: t,
                                omura: t,
                                oseto: t,
                                saikai: t,
                                sasebo: t,
                                seihi: t,
                                shimabara: t,
                                shinkamigoto: t,
                                togitsu: t,
                                tsushima: t,
                                unzen: t
                            }],
                            nara: [1, {
                                ando: t,
                                gose: t,
                                heguri: t,
                                higashiyoshino: t,
                                ikaruga: t,
                                ikoma: t,
                                kamikitayama: t,
                                kanmaki: t,
                                kashiba: t,
                                kashihara: t,
                                katsuragi: t,
                                kawai: t,
                                kawakami: t,
                                kawanishi: t,
                                koryo: t,
                                kurotaki: t,
                                mitsue: t,
                                miyake: t,
                                nara: t,
                                nosegawa: t,
                                oji: t,
                                ouda: t,
                                oyodo: t,
                                sakurai: t,
                                sango: t,
                                shimoichi: t,
                                shimokitayama: t,
                                shinjo: t,
                                soni: t,
                                takatori: t,
                                tawaramoto: t,
                                tenkawa: t,
                                tenri: t,
                                uda: t,
                                yamatokoriyama: t,
                                yamatotakada: t,
                                yamazoe: t,
                                yoshino: t
                            }],
                            niigata: [1, {
                                aga: t,
                                agano: t,
                                gosen: t,
                                itoigawa: t,
                                izumozaki: t,
                                joetsu: t,
                                kamo: t,
                                kariwa: t,
                                kashiwazaki: t,
                                minamiuonuma: t,
                                mitsuke: t,
                                muika: t,
                                murakami: t,
                                myoko: t,
                                nagaoka: t,
                                niigata: t,
                                ojiya: t,
                                omi: t,
                                sado: t,
                                sanjo: t,
                                seiro: t,
                                seirou: t,
                                sekikawa: t,
                                shibata: t,
                                tagami: t,
                                tainai: t,
                                tochio: t,
                                tokamachi: t,
                                tsubame: t,
                                tsunan: t,
                                uonuma: t,
                                yahiko: t,
                                yoita: t,
                                yuzawa: t
                            }],
                            oita: [1, {
                                beppu: t,
                                bungoono: t,
                                bungotakada: t,
                                hasama: t,
                                hiji: t,
                                himeshima: t,
                                hita: t,
                                kamitsue: t,
                                kokonoe: t,
                                kuju: t,
                                kunisaki: t,
                                kusu: t,
                                oita: t,
                                saiki: t,
                                taketa: t,
                                tsukumi: t,
                                usa: t,
                                usuki: t,
                                yufu: t
                            }],
                            okayama: [1, {
                                akaiwa: t,
                                asakuchi: t,
                                bizen: t,
                                hayashima: t,
                                ibara: t,
                                kagamino: t,
                                kasaoka: t,
                                kibichuo: t,
                                kumenan: t,
                                kurashiki: t,
                                maniwa: t,
                                misaki: t,
                                nagi: t,
                                niimi: t,
                                nishiawakura: t,
                                okayama: t,
                                satosho: t,
                                setouchi: t,
                                shinjo: t,
                                shoo: t,
                                soja: t,
                                takahashi: t,
                                tamano: t,
                                tsuyama: t,
                                wake: t,
                                yakage: t
                            }],
                            okinawa: [1, {
                                aguni: t,
                                ginowan: t,
                                ginoza: t,
                                gushikami: t,
                                haebaru: t,
                                higashi: t,
                                hirara: t,
                                iheya: t,
                                ishigaki: t,
                                ishikawa: t,
                                itoman: t,
                                izena: t,
                                kadena: t,
                                kin: t,
                                kitadaito: t,
                                kitanakagusuku: t,
                                kumejima: t,
                                kunigami: t,
                                minamidaito: t,
                                motobu: t,
                                nago: t,
                                naha: t,
                                nakagusuku: t,
                                nakijin: t,
                                nanjo: t,
                                nishihara: t,
                                ogimi: t,
                                okinawa: t,
                                onna: t,
                                shimoji: t,
                                taketomi: t,
                                tarama: t,
                                tokashiki: t,
                                tomigusuku: t,
                                tonaki: t,
                                urasoe: t,
                                uruma: t,
                                yaese: t,
                                yomitan: t,
                                yonabaru: t,
                                yonaguni: t,
                                zamami: t
                            }],
                            osaka: [1, {
                                abeno: t,
                                chihayaakasaka: t,
                                chuo: t,
                                daito: t,
                                fujiidera: t,
                                habikino: t,
                                hannan: t,
                                higashiosaka: t,
                                higashisumiyoshi: t,
                                higashiyodogawa: t,
                                hirakata: t,
                                ibaraki: t,
                                ikeda: t,
                                izumi: t,
                                izumiotsu: t,
                                izumisano: t,
                                kadoma: t,
                                kaizuka: t,
                                kanan: t,
                                kashiwara: t,
                                katano: t,
                                kawachinagano: t,
                                kishiwada: t,
                                kita: t,
                                kumatori: t,
                                matsubara: t,
                                minato: t,
                                minoh: t,
                                misaki: t,
                                moriguchi: t,
                                neyagawa: t,
                                nishi: t,
                                nose: t,
                                osakasayama: t,
                                sakai: t,
                                sayama: t,
                                sennan: t,
                                settsu: t,
                                shijonawate: t,
                                shimamoto: t,
                                suita: t,
                                tadaoka: t,
                                taishi: t,
                                tajiri: t,
                                takaishi: t,
                                takatsuki: t,
                                tondabayashi: t,
                                toyonaka: t,
                                toyono: t,
                                yao: t
                            }],
                            saga: [1, {
                                ariake: t,
                                arita: t,
                                fukudomi: t,
                                genkai: t,
                                hamatama: t,
                                hizen: t,
                                imari: t,
                                kamimine: t,
                                kanzaki: t,
                                karatsu: t,
                                kashima: t,
                                kitagata: t,
                                kitahata: t,
                                kiyama: t,
                                kouhoku: t,
                                kyuragi: t,
                                nishiarita: t,
                                ogi: t,
                                omachi: t,
                                ouchi: t,
                                saga: t,
                                shiroishi: t,
                                taku: t,
                                tara: t,
                                tosu: t,
                                yoshinogari: t
                            }],
                            saitama: [1, {
                                arakawa: t,
                                asaka: t,
                                chichibu: t,
                                fujimi: t,
                                fujimino: t,
                                fukaya: t,
                                hanno: t,
                                hanyu: t,
                                hasuda: t,
                                hatogaya: t,
                                hatoyama: t,
                                hidaka: t,
                                higashichichibu: t,
                                higashimatsuyama: t,
                                honjo: t,
                                ina: t,
                                iruma: t,
                                iwatsuki: t,
                                kamiizumi: t,
                                kamikawa: t,
                                kamisato: t,
                                kasukabe: t,
                                kawagoe: t,
                                kawaguchi: t,
                                kawajima: t,
                                kazo: t,
                                kitamoto: t,
                                koshigaya: t,
                                kounosu: t,
                                kuki: t,
                                kumagaya: t,
                                matsubushi: t,
                                minano: t,
                                misato: t,
                                miyashiro: t,
                                miyoshi: t,
                                moroyama: t,
                                nagatoro: t,
                                namegawa: t,
                                niiza: t,
                                ogano: t,
                                ogawa: t,
                                ogose: t,
                                okegawa: t,
                                omiya: t,
                                otaki: t,
                                ranzan: t,
                                ryokami: t,
                                saitama: t,
                                sakado: t,
                                satte: t,
                                sayama: t,
                                shiki: t,
                                shiraoka: t,
                                soka: t,
                                sugito: t,
                                toda: t,
                                tokigawa: t,
                                tokorozawa: t,
                                tsurugashima: t,
                                urawa: t,
                                warabi: t,
                                yashio: t,
                                yokoze: t,
                                yono: t,
                                yorii: t,
                                yoshida: t,
                                yoshikawa: t,
                                yoshimi: t
                            }],
                            shiga: [1, {
                                aisho: t,
                                gamo: t,
                                higashiomi: t,
                                hikone: t,
                                koka: t,
                                konan: t,
                                kosei: t,
                                koto: t,
                                kusatsu: t,
                                maibara: t,
                                moriyama: t,
                                nagahama: t,
                                nishiazai: t,
                                notogawa: t,
                                omihachiman: t,
                                otsu: t,
                                ritto: t,
                                ryuoh: t,
                                takashima: t,
                                takatsuki: t,
                                torahime: t,
                                toyosato: t,
                                yasu: t
                            }],
                            shimane: [1, {
                                akagi: t,
                                ama: t,
                                gotsu: t,
                                hamada: t,
                                higashiizumo: t,
                                hikawa: t,
                                hikimi: t,
                                izumo: t,
                                kakinoki: t,
                                masuda: t,
                                matsue: t,
                                misato: t,
                                nishinoshima: t,
                                ohda: t,
                                okinoshima: t,
                                okuizumo: t,
                                shimane: t,
                                tamayu: t,
                                tsuwano: t,
                                unnan: t,
                                yakumo: t,
                                yasugi: t,
                                yatsuka: t
                            }],
                            shizuoka: [1, {
                                arai: t,
                                atami: t,
                                fuji: t,
                                fujieda: t,
                                fujikawa: t,
                                fujinomiya: t,
                                fukuroi: t,
                                gotemba: t,
                                haibara: t,
                                hamamatsu: t,
                                higashiizu: t,
                                ito: t,
                                iwata: t,
                                izu: t,
                                izunokuni: t,
                                kakegawa: t,
                                kannami: t,
                                kawanehon: t,
                                kawazu: t,
                                kikugawa: t,
                                kosai: t,
                                makinohara: t,
                                matsuzaki: t,
                                minamiizu: t,
                                mishima: t,
                                morimachi: t,
                                nishiizu: t,
                                numazu: t,
                                omaezaki: t,
                                shimada: t,
                                shimizu: t,
                                shimoda: t,
                                shizuoka: t,
                                susono: t,
                                yaizu: t,
                                yoshida: t
                            }],
                            tochigi: [1, {
                                ashikaga: t,
                                bato: t,
                                haga: t,
                                ichikai: t,
                                iwafune: t,
                                kaminokawa: t,
                                kanuma: t,
                                karasuyama: t,
                                kuroiso: t,
                                mashiko: t,
                                mibu: t,
                                moka: t,
                                motegi: t,
                                nasu: t,
                                nasushiobara: t,
                                nikko: t,
                                nishikata: t,
                                nogi: t,
                                ohira: t,
                                ohtawara: t,
                                oyama: t,
                                sakura: t,
                                sano: t,
                                shimotsuke: t,
                                shioya: t,
                                takanezawa: t,
                                tochigi: t,
                                tsuga: t,
                                ujiie: t,
                                utsunomiya: t,
                                yaita: t
                            }],
                            tokushima: [1, {
                                aizumi: t,
                                anan: t,
                                ichiba: t,
                                itano: t,
                                kainan: t,
                                komatsushima: t,
                                matsushige: t,
                                mima: t,
                                minami: t,
                                miyoshi: t,
                                mugi: t,
                                nakagawa: t,
                                naruto: t,
                                sanagochi: t,
                                shishikui: t,
                                tokushima: t,
                                wajiki: t
                            }],
                            tokyo: [1, {
                                adachi: t,
                                akiruno: t,
                                akishima: t,
                                aogashima: t,
                                arakawa: t,
                                bunkyo: t,
                                chiyoda: t,
                                chofu: t,
                                chuo: t,
                                edogawa: t,
                                fuchu: t,
                                fussa: t,
                                hachijo: t,
                                hachioji: t,
                                hamura: t,
                                higashikurume: t,
                                higashimurayama: t,
                                higashiyamato: t,
                                hino: t,
                                hinode: t,
                                hinohara: t,
                                inagi: t,
                                itabashi: t,
                                katsushika: t,
                                kita: t,
                                kiyose: t,
                                kodaira: t,
                                koganei: t,
                                kokubunji: t,
                                komae: t,
                                koto: t,
                                kouzushima: t,
                                kunitachi: t,
                                machida: t,
                                meguro: t,
                                minato: t,
                                mitaka: t,
                                mizuho: t,
                                musashimurayama: t,
                                musashino: t,
                                nakano: t,
                                nerima: t,
                                ogasawara: t,
                                okutama: t,
                                ome: t,
                                oshima: t,
                                ota: t,
                                setagaya: t,
                                shibuya: t,
                                shinagawa: t,
                                shinjuku: t,
                                suginami: t,
                                sumida: t,
                                tachikawa: t,
                                taito: t,
                                tama: t,
                                toshima: t
                            }],
                            tottori: [1, {
                                chizu: t,
                                hino: t,
                                kawahara: t,
                                koge: t,
                                kotoura: t,
                                misasa: t,
                                nanbu: t,
                                nichinan: t,
                                sakaiminato: t,
                                tottori: t,
                                wakasa: t,
                                yazu: t,
                                yonago: t
                            }],
                            toyama: [1, {
                                asahi: t,
                                fuchu: t,
                                fukumitsu: t,
                                funahashi: t,
                                himi: t,
                                imizu: t,
                                inami: t,
                                johana: t,
                                kamiichi: t,
                                kurobe: t,
                                nakaniikawa: t,
                                namerikawa: t,
                                nanto: t,
                                nyuzen: t,
                                oyabe: t,
                                taira: t,
                                takaoka: t,
                                tateyama: t,
                                toga: t,
                                tonami: t,
                                toyama: t,
                                unazuki: t,
                                uozu: t,
                                yamada: t
                            }],
                            wakayama: [1, {
                                arida: t,
                                aridagawa: t,
                                gobo: t,
                                hashimoto: t,
                                hidaka: t,
                                hirogawa: t,
                                inami: t,
                                iwade: t,
                                kainan: t,
                                kamitonda: t,
                                katsuragi: t,
                                kimino: t,
                                kinokawa: t,
                                kitayama: t,
                                koya: t,
                                koza: t,
                                kozagawa: t,
                                kudoyama: t,
                                kushimoto: t,
                                mihama: t,
                                misato: t,
                                nachikatsuura: t,
                                shingu: t,
                                shirahama: t,
                                taiji: t,
                                tanabe: t,
                                wakayama: t,
                                yuasa: t,
                                yura: t
                            }],
                            yamagata: [1, {
                                asahi: t,
                                funagata: t,
                                higashine: t,
                                iide: t,
                                kahoku: t,
                                kaminoyama: t,
                                kaneyama: t,
                                kawanishi: t,
                                mamurogawa: t,
                                mikawa: t,
                                murayama: t,
                                nagai: t,
                                nakayama: t,
                                nanyo: t,
                                nishikawa: t,
                                obanazawa: t,
                                oe: t,
                                oguni: t,
                                ohkura: t,
                                oishida: t,
                                sagae: t,
                                sakata: t,
                                sakegawa: t,
                                shinjo: t,
                                shirataka: t,
                                shonai: t,
                                takahata: t,
                                tendo: t,
                                tozawa: t,
                                tsuruoka: t,
                                yamagata: t,
                                yamanobe: t,
                                yonezawa: t,
                                yuza: t
                            }],
                            yamaguchi: [1, {
                                abu: t,
                                hagi: t,
                                hikari: t,
                                hofu: t,
                                iwakuni: t,
                                kudamatsu: t,
                                mitou: t,
                                nagato: t,
                                oshima: t,
                                shimonoseki: t,
                                shunan: t,
                                tabuse: t,
                                tokuyama: t,
                                toyota: t,
                                ube: t,
                                yuu: t
                            }],
                            yamanashi: [1, {
                                chuo: t,
                                doshi: t,
                                fuefuki: t,
                                fujikawa: t,
                                fujikawaguchiko: t,
                                fujiyoshida: t,
                                hayakawa: t,
                                hokuto: t,
                                ichikawamisato: t,
                                kai: t,
                                kofu: t,
                                koshu: t,
                                kosuge: t,
                                "minami-alps": t,
                                minobu: t,
                                nakamichi: t,
                                nanbu: t,
                                narusawa: t,
                                nirasaki: t,
                                nishikatsura: t,
                                oshino: t,
                                otsuki: t,
                                showa: t,
                                tabayama: t,
                                tsuru: t,
                                uenohara: t,
                                yamanakako: t,
                                yamanashi: t
                            }],
                            "xn--4pvxs": t,
                            栃木: t,
                            "xn--vgu402c": t,
                            愛知: t,
                            "xn--c3s14m": t,
                            愛媛: t,
                            "xn--f6qx53a": t,
                            兵庫: t,
                            "xn--8pvr4u": t,
                            熊本: t,
                            "xn--uist22h": t,
                            茨城: t,
                            "xn--djrs72d6uy": t,
                            北海道: t,
                            "xn--mkru45i": t,
                            千葉: t,
                            "xn--0trq7p7nn": t,
                            和歌山: t,
                            "xn--8ltr62k": t,
                            長崎: t,
                            "xn--2m4a15e": t,
                            長野: t,
                            "xn--efvn9s": t,
                            新潟: t,
                            "xn--32vp30h": t,
                            青森: t,
                            "xn--4it797k": t,
                            静岡: t,
                            "xn--1lqs71d": t,
                            東京: t,
                            "xn--5rtp49c": t,
                            石川: t,
                            "xn--5js045d": t,
                            埼玉: t,
                            "xn--ehqz56n": t,
                            三重: t,
                            "xn--1lqs03n": t,
                            京都: t,
                            "xn--qqqt11m": t,
                            佐賀: t,
                            "xn--kbrq7o": t,
                            大分: t,
                            "xn--pssu33l": t,
                            大阪: t,
                            "xn--ntsq17g": t,
                            奈良: t,
                            "xn--uisz3g": t,
                            宮城: t,
                            "xn--6btw5a": t,
                            宮崎: t,
                            "xn--1ctwo": t,
                            富山: t,
                            "xn--6orx2r": t,
                            山口: t,
                            "xn--rht61e": t,
                            山形: t,
                            "xn--rht27z": t,
                            山梨: t,
                            "xn--djty4k": t,
                            岩手: t,
                            "xn--nit225k": t,
                            岐阜: t,
                            "xn--rht3d": t,
                            岡山: t,
                            "xn--klty5x": t,
                            島根: t,
                            "xn--kltx9a": t,
                            広島: t,
                            "xn--kltp7d": t,
                            徳島: t,
                            "xn--uuwu58a": t,
                            沖縄: t,
                            "xn--zbx025d": t,
                            滋賀: t,
                            "xn--ntso0iqx3a": t,
                            神奈川: t,
                            "xn--elqq16h": t,
                            福井: t,
                            "xn--4it168d": t,
                            福岡: t,
                            "xn--klt787d": t,
                            福島: t,
                            "xn--rny31h": t,
                            秋田: t,
                            "xn--7t0a264c": t,
                            群馬: t,
                            "xn--5rtq34k": t,
                            香川: t,
                            "xn--k7yn95e": t,
                            高知: t,
                            "xn--tor131o": t,
                            鳥取: t,
                            "xn--d5qv7z876c": t,
                            鹿児島: t,
                            kawasaki: h,
                            kitakyushu: h,
                            kobe: h,
                            nagoya: h,
                            sapporo: h,
                            sendai: h,
                            yokohama: h,
                            buyshop: r,
                            fashionstore: r,
                            handcrafted: r,
                            kawaiishop: r,
                            supersale: r,
                            theshop: r,
                            usercontent: r,
                            angry: r,
                            babyblue: r,
                            babymilk: r,
                            backdrop: r,
                            bambina: r,
                            bitter: r,
                            blush: r,
                            boo: r,
                            boy: r,
                            boyfriend: r,
                            but: r,
                            candypop: r,
                            capoo: r,
                            catfood: r,
                            cheap: r,
                            chicappa: r,
                            chillout: r,
                            chips: r,
                            chowder: r,
                            chu: r,
                            ciao: r,
                            cocotte: r,
                            coolblog: r,
                            cranky: r,
                            cutegirl: r,
                            daa: r,
                            deca: r,
                            deci: r,
                            digick: r,
                            egoism: r,
                            fakefur: r,
                            fem: r,
                            flier: r,
                            floppy: r,
                            fool: r,
                            frenchkiss: r,
                            girlfriend: r,
                            girly: r,
                            gloomy: r,
                            gonna: r,
                            greater: r,
                            hacca: r,
                            heavy: r,
                            her: r,
                            hiho: r,
                            hippy: r,
                            holy: r,
                            hungry: r,
                            icurus: r,
                            itigo: r,
                            jellybean: r,
                            kikirara: r,
                            kill: r,
                            kilo: r,
                            kuron: r,
                            littlestar: r,
                            lolipopmc: r,
                            lolitapunk: r,
                            lomo: r,
                            lovepop: r,
                            lovesick: r,
                            main: r,
                            mods: r,
                            mond: r,
                            mongolian: r,
                            moo: r,
                            namaste: r,
                            nikita: r,
                            nobushi: r,
                            noor: r,
                            oops: r,
                            parallel: r,
                            parasite: r,
                            pecori: r,
                            peewee: r,
                            penne: r,
                            pepper: r,
                            perma: r,
                            pigboat: r,
                            pinoko: r,
                            punyu: r,
                            pupu: r,
                            pussycat: r,
                            pya: r,
                            raindrop: r,
                            readymade: r,
                            sadist: r,
                            schoolbus: r,
                            secret: r,
                            staba: r,
                            stripper: r,
                            sub: r,
                            sunnyday: r,
                            thick: r,
                            tonkotsu: r,
                            under: r,
                            upper: r,
                            velvet: r,
                            verse: r,
                            versus: r,
                            vivian: r,
                            watson: r,
                            weblike: r,
                            whitesnow: r,
                            zombie: r,
                            blogspot: r,
                            "2-d": r,
                            bona: r,
                            crap: r,
                            daynight: r,
                            eek: r,
                            flop: r,
                            halfmoon: r,
                            jeez: r,
                            matrix: r,
                            mimoza: r,
                            netgamers: r,
                            nyanta: r,
                            o0o0: r,
                            rdy: r,
                            rgr: r,
                            rulez: r,
                            sakurastorage: [0, {
                                isk01: eu,
                                isk02: eu
                            }],
                            saloon: r,
                            sblo: r,
                            skr: r,
                            tank: r,
                            "uh-oh": r,
                            undo: r,
                            webaccel: [0, {
                                rs: r,
                                user: r
                            }],
                            websozai: r,
                            xii: r
                        }],
                        ke: [1, {
                            ac: t,
                            co: l,
                            go: t,
                            info: t,
                            me: t,
                            mobi: t,
                            ne: t,
                            or: t,
                            sc: t
                        }],
                        kg: [1, {
                            org: t,
                            net: t,
                            com: t,
                            edu: t,
                            gov: t,
                            mil: t,
                            blog: r,
                            io: r,
                            jp: r,
                            tv: r,
                            uk: r,
                            us: r
                        }],
                        kh: h,
                        ki: em,
                        km: [1, {
                            org: t,
                            nom: t,
                            gov: t,
                            prd: t,
                            tm: t,
                            edu: t,
                            mil: t,
                            ass: t,
                            com: t,
                            coop: t,
                            asso: t,
                            presse: t,
                            medecin: t,
                            notaires: t,
                            pharmaciens: t,
                            veterinaire: t,
                            gouv: t
                        }],
                        kn: [1, {
                            net: t,
                            org: t,
                            edu: t,
                            gov: t
                        }],
                        kp: [1, {
                            com: t,
                            edu: t,
                            gov: t,
                            org: t,
                            rep: t,
                            tra: t
                        }],
                        kr: [1, {
                            ac: t,
                            co: t,
                            es: t,
                            go: t,
                            hs: t,
                            kg: t,
                            mil: t,
                            ms: t,
                            ne: t,
                            or: t,
                            pe: t,
                            re: t,
                            sc: t,
                            busan: t,
                            chungbuk: t,
                            chungnam: t,
                            daegu: t,
                            daejeon: t,
                            gangwon: t,
                            gwangju: t,
                            gyeongbuk: t,
                            gyeonggi: t,
                            gyeongnam: t,
                            incheon: t,
                            jeju: t,
                            jeonbuk: t,
                            jeonnam: t,
                            seoul: t,
                            ulsan: t,
                            blogspot: r
                        }],
                        kw: [1, {
                            com: t,
                            edu: t,
                            emb: t,
                            gov: t,
                            ind: t,
                            net: t,
                            org: t
                        }],
                        ky: er,
                        kz: [1, {
                            org: t,
                            edu: t,
                            net: t,
                            gov: t,
                            mil: t,
                            com: t,
                            jcloud: r,
                            kazteleport: [0, {
                                upaas: r
                            }]
                        }],
                        la: [1, {
                            int: t,
                            net: t,
                            info: t,
                            edu: t,
                            gov: t,
                            per: t,
                            com: t,
                            org: t,
                            bnr: r,
                            c: r
                        }],
                        lb: a,
                        lc: [1, {
                            com: t,
                            net: t,
                            co: t,
                            org: t,
                            edu: t,
                            gov: t,
                            oy: r
                        }],
                        li: [1, {
                            blogspot: r,
                            caa: r
                        }],
                        lk: [1, {
                            gov: t,
                            sch: t,
                            net: t,
                            int: t,
                            com: t,
                            org: t,
                            edu: t,
                            ngo: t,
                            soc: t,
                            web: t,
                            ltd: t,
                            assn: t,
                            grp: t,
                            hotel: t,
                            ac: t
                        }],
                        lr: a,
                        ls: [1, {
                            ac: t,
                            biz: t,
                            co: t,
                            edu: t,
                            gov: t,
                            info: t,
                            net: t,
                            org: t,
                            sc: t,
                            de: r
                        }],
                        lt: ep,
                        lu: [1, {
                            blogspot: r,
                            "123website": r
                        }],
                        lv: [1, {
                            com: t,
                            edu: t,
                            gov: t,
                            org: t,
                            mil: t,
                            id: t,
                            net: t,
                            asn: t,
                            conf: t
                        }],
                        ly: [1, {
                            com: t,
                            net: t,
                            gov: t,
                            plc: t,
                            edu: t,
                            sch: t,
                            med: t,
                            org: t,
                            id: t
                        }],
                        ma: [1, {
                            co: t,
                            net: t,
                            gov: t,
                            org: t,
                            ac: t,
                            press: t
                        }],
                        mc: [1, {
                            tm: t,
                            asso: t
                        }],
                        md: [1, {
                            blogspot: r,
                            at: r,
                            de: r,
                            jp: r,
                            to: r
                        }],
                        me: [1, {
                            co: t,
                            net: t,
                            org: t,
                            edu: t,
                            ac: t,
                            gov: t,
                            its: t,
                            priv: t,
                            c66: r,
                            daplie: [2, {
                                localhost: r
                            }],
                            edgestack: r,
                            filegear: r,
                            "filegear-au": r,
                            "filegear-de": r,
                            "filegear-gb": r,
                            "filegear-ie": r,
                            "filegear-jp": r,
                            "filegear-sg": r,
                            glitch: r,
                            ravendb: r,
                            lohmus: r,
                            barsy: r,
                            mcpe: r,
                            mcdir: r,
                            soundcast: r,
                            tcp4: r,
                            brasilia: r,
                            ddns: r,
                            dnsfor: r,
                            hopto: r,
                            loginto: r,
                            noip: r,
                            webhop: r,
                            vp4: r,
                            diskstation: r,
                            dscloud: r,
                            i234: r,
                            myds: r,
                            synology: r,
                            transip: et,
                            wedeploy: r,
                            yombo: r,
                            nohost: r
                        }],
                        mg: [1, {
                            org: t,
                            nom: t,
                            gov: t,
                            prd: t,
                            tm: t,
                            edu: t,
                            mil: t,
                            com: t,
                            co: t
                        }],
                        mh: t,
                        mil: t,
                        mk: [1, {
                            com: t,
                            org: t,
                            net: t,
                            edu: t,
                            gov: t,
                            inf: t,
                            name: t,
                            blogspot: r
                        }],
                        ml: [1, {
                            com: t,
                            edu: t,
                            gouv: t,
                            gov: t,
                            net: t,
                            org: t,
                            presse: t
                        }],
                        mm: h,
                        mn: [1, {
                            gov: t,
                            edu: t,
                            org: t,
                            nyc: r
                        }],
                        mo: a,
                        mobi: [1, {
                            barsy: r,
                            dscloud: r
                        }],
                        mp: [1, {
                            ju: r
                        }],
                        mq: t,
                        mr: ep,
                        ms: [1, {
                            com: t,
                            edu: t,
                            gov: t,
                            net: t,
                            org: t,
                            lab: r,
                            minisite: r
                        }],
                        mt: [1, {
                            com: l,
                            edu: t,
                            net: t,
                            org: t
                        }],
                        mu: [1, {
                            com: t,
                            net: t,
                            org: t,
                            gov: t,
                            ac: t,
                            co: t,
                            or: t
                        }],
                        museum: t,
                        mv: [1, {
                            aero: t,
                            biz: t,
                            com: t,
                            coop: t,
                            edu: t,
                            gov: t,
                            info: t,
                            int: t,
                            mil: t,
                            museum: t,
                            name: t,
                            net: t,
                            org: t,
                            pro: t
                        }],
                        mw: [1, {
                            ac: t,
                            biz: t,
                            co: t,
                            com: t,
                            coop: t,
                            edu: t,
                            gov: t,
                            int: t,
                            museum: t,
                            net: t,
                            org: t
                        }],
                        mx: [1, {
                            com: t,
                            org: t,
                            gob: t,
                            edu: t,
                            net: t,
                            blogspot: r
                        }],
                        my: [1, {
                            biz: t,
                            com: t,
                            edu: t,
                            gov: t,
                            mil: t,
                            name: t,
                            net: t,
                            org: t,
                            blogspot: r
                        }],
                        mz: [1, {
                            ac: t,
                            adv: t,
                            co: t,
                            edu: t,
                            gov: t,
                            mil: t,
                            net: t,
                            org: t
                        }],
                        na: [1, {
                            info: t,
                            pro: t,
                            name: t,
                            school: t,
                            or: t,
                            dr: t,
                            us: t,
                            mx: t,
                            ca: t,
                            in: t,
                            cc: t,
                            tv: t,
                            ws: t,
                            mobi: t,
                            co: t,
                            com: t,
                            org: t
                        }],
                        name: [1, {
                            her: ey,
                            his: ey
                        }],
                        nc: [1, {
                            asso: t,
                            nom: t
                        }],
                        ne: t,
                        net: [1, {
                            adobeaemcloud: r,
                            "adobeio-static": r,
                            adobeioruntime: r,
                            akadns: r,
                            akamai: r,
                            "akamai-staging": r,
                            akamaiedge: r,
                            "akamaiedge-staging": r,
                            akamaihd: r,
                            "akamaihd-staging": r,
                            akamaiorigin: r,
                            "akamaiorigin-staging": r,
                            akamaized: r,
                            "akamaized-staging": r,
                            edgekey: r,
                            "edgekey-staging": r,
                            edgesuite: r,
                            "edgesuite-staging": r,
                            alwaysdata: r,
                            myamaze: r,
                            cloudfront: r,
                            t3l3p0rt: r,
                            appudo: r,
                            "atlassian-dev": [0, {
                                prod: [0, {
                                    cdn: r
                                }]
                            }],
                            myfritz: r,
                            onavstack: r,
                            shopselect: r,
                            blackbaudcdn: r,
                            boomla: r,
                            bplaced: r,
                            square7: r,
                            gb: r,
                            hu: r,
                            jp: r,
                            se: r,
                            uk: r,
                            in: r,
                            clickrising: r,
                            cloudaccess: r,
                            "cdn77-ssl": r,
                            cdn77: [0, {
                                r: r
                            }],
                            "feste-ip": r,
                            "knx-server": r,
                            "static-access": r,
                            cryptonomic: s,
                            dattolocal: r,
                            mydatto: r,
                            debian: r,
                            bitbridge: r,
                            "at-band-camp": r,
                            blogdns: r,
                            "broke-it": r,
                            buyshouses: r,
                            dnsalias: r,
                            dnsdojo: r,
                            "does-it": r,
                            dontexist: r,
                            dynalias: r,
                            dynathome: r,
                            endofinternet: r,
                            "from-az": r,
                            "from-co": r,
                            "from-la": r,
                            "from-ny": r,
                            "gets-it": r,
                            "ham-radio-op": r,
                            homeftp: r,
                            homeip: r,
                            homelinux: r,
                            homeunix: r,
                            "in-the-band": r,
                            "is-a-chef": r,
                            "is-a-geek": r,
                            "isa-geek": r,
                            "kicks-ass": r,
                            "office-on-the": r,
                            podzone: r,
                            "scrapper-site": r,
                            selfip: r,
                            "sells-it": r,
                            servebbs: r,
                            serveftp: r,
                            thruhere: r,
                            webhop: r,
                            definima: r,
                            casacam: r,
                            dynu: r,
                            dynv6: r,
                            twmail: r,
                            ru: r,
                            channelsdvr: [2, {
                                u: r
                            }],
                            fastlylb: [2, {
                                map: r
                            }],
                            fastly: [0, {
                                freetls: r,
                                map: r,
                                prod: [0, {
                                    a: r,
                                    global: r
                                }],
                                ssl: [0, {
                                    a: r,
                                    b: r,
                                    global: r
                                }]
                            }],
                            edgeapp: r,
                            flynnhosting: r,
                            "cdn-edges": r,
                            heteml: r,
                            cloudfunctions: r,
                            moonscale: r,
                            "in-dsl": r,
                            "in-vpn": r,
                            ipifony: r,
                            iobb: r,
                            cloudjiffy: [2, {
                                "fra1-de": r,
                                "west1-us": r
                            }],
                            elastx: [0, {
                                "jls-sto1": r,
                                "jls-sto2": r,
                                "jls-sto3": r
                            }],
                            faststacks: r,
                            massivegrid: [0, {
                                paas: [0, {
                                    "fr-1": r,
                                    "lon-1": r,
                                    "lon-2": r,
                                    "ny-1": r,
                                    "ny-2": r,
                                    "sg-1": r
                                }]
                            }],
                            saveincloud: [0, {
                                jelastic: r,
                                "nordeste-idc": r
                            }],
                            scaleforce: ea,
                            tsukaeru: ei,
                            kinghost: r,
                            uni5: r,
                            krellian: r,
                            barsy: r,
                            memset: r,
                            azurewebsites: r,
                            "azure-mobile": r,
                            cloudapp: r,
                            azurestaticapps: [2, {
                                1: r,
                                2: r,
                                3: r,
                                4: r,
                                5: r,
                                6: r,
                                7: r,
                                centralus: r,
                                eastasia: r,
                                eastus2: r,
                                westeurope: r,
                                westus2: r
                            }],
                            dnsup: r,
                            hicam: r,
                            "now-dns": r,
                            ownip: r,
                            vpndns: r,
                            "eating-organic": r,
                            mydissent: r,
                            myeffect: r,
                            mymediapc: r,
                            mypsx: r,
                            mysecuritycamera: r,
                            nhlfan: r,
                            "no-ip": r,
                            pgafan: r,
                            privatizehealthinsurance: r,
                            bounceme: r,
                            ddns: r,
                            redirectme: r,
                            serveblog: r,
                            serveminecraft: r,
                            sytes: r,
                            cloudycluster: r,
                            ovh: [0, {
                                webpaas: s,
                                hosting: s
                            }],
                            bar0: r,
                            bar1: r,
                            bar2: r,
                            rackmaze: r,
                            squares: r,
                            schokokeks: r,
                            "firewall-gateway": r,
                            seidat: r,
                            senseering: r,
                            siteleaf: r,
                            "vps-host": [2, {
                                jelastic: [0, {
                                    atl: r,
                                    njs: r,
                                    ric: r
                                }]
                            }],
                            myspreadshop: r,
                            srcf: [0, {
                                soc: r,
                                user: r
                            }],
                            supabase: r,
                            dsmynas: r,
                            familyds: r,
                            tailscale: [0, {
                                beta: r
                            }],
                            ts: r,
                            torproject: [2, {
                                pages: r
                            }],
                            "reserve-online": r,
                            "community-pro": r,
                            meinforum: r,
                            yandexcloud: [2, {
                                storage: r,
                                website: r
                            }],
                            za: r
                        }],
                        nf: [1, {
                            com: t,
                            net: t,
                            per: t,
                            rec: t,
                            web: t,
                            arts: t,
                            firm: t,
                            info: t,
                            other: t,
                            store: t
                        }],
                        ng: [1, {
                            com: l,
                            edu: t,
                            gov: t,
                            i: t,
                            mil: t,
                            mobi: t,
                            name: t,
                            net: t,
                            org: t,
                            sch: t,
                            col: r,
                            firm: r,
                            gen: r,
                            ltd: r,
                            ngo: r
                        }],
                        ni: [1, {
                            ac: t,
                            biz: t,
                            co: t,
                            com: t,
                            edu: t,
                            gob: t,
                            in: t,
                            info: t,
                            int: t,
                            mil: t,
                            net: t,
                            nom: t,
                            org: t,
                            web: t
                        }],
                        nl: [1, {
                            co: r,
                            "hosting-cluster": r,
                            blogspot: r,
                            gov: r,
                            khplay: r,
                            "123website": r,
                            myspreadshop: r,
                            transurl: s,
                            cistron: r,
                            demon: r
                        }],
                        no: [1, {
                            fhs: t,
                            vgs: t,
                            fylkesbibl: t,
                            folkebibl: t,
                            museum: t,
                            idrett: t,
                            priv: t,
                            mil: t,
                            stat: t,
                            dep: t,
                            kommune: t,
                            herad: t,
                            aa: eg,
                            ah: eg,
                            bu: eg,
                            fm: eg,
                            hl: eg,
                            hm: eg,
                            "jan-mayen": eg,
                            mr: eg,
                            nl: eg,
                            nt: eg,
                            of: eg,
                            ol: eg,
                            oslo: eg,
                            rl: eg,
                            sf: eg,
                            st: eg,
                            svalbard: eg,
                            tm: eg,
                            tr: eg,
                            va: eg,
                            vf: eg,
                            akrehamn: t,
                            "xn--krehamn-dxa": t,
                            åkrehamn: t,
                            algard: t,
                            "xn--lgrd-poac": t,
                            ålgård: t,
                            arna: t,
                            brumunddal: t,
                            bryne: t,
                            bronnoysund: t,
                            "xn--brnnysund-m8ac": t,
                            brønnøysund: t,
                            drobak: t,
                            "xn--drbak-wua": t,
                            drøbak: t,
                            egersund: t,
                            fetsund: t,
                            floro: t,
                            "xn--flor-jra": t,
                            florø: t,
                            fredrikstad: t,
                            hokksund: t,
                            honefoss: t,
                            "xn--hnefoss-q1a": t,
                            hønefoss: t,
                            jessheim: t,
                            jorpeland: t,
                            "xn--jrpeland-54a": t,
                            jørpeland: t,
                            kirkenes: t,
                            kopervik: t,
                            krokstadelva: t,
                            langevag: t,
                            "xn--langevg-jxa": t,
                            langevåg: t,
                            leirvik: t,
                            mjondalen: t,
                            "xn--mjndalen-64a": t,
                            mjøndalen: t,
                            "mo-i-rana": t,
                            mosjoen: t,
                            "xn--mosjen-eya": t,
                            mosjøen: t,
                            nesoddtangen: t,
                            orkanger: t,
                            osoyro: t,
                            "xn--osyro-wua": t,
                            osøyro: t,
                            raholt: t,
                            "xn--rholt-mra": t,
                            råholt: t,
                            sandnessjoen: t,
                            "xn--sandnessjen-ogb": t,
                            sandnessjøen: t,
                            skedsmokorset: t,
                            slattum: t,
                            spjelkavik: t,
                            stathelle: t,
                            stavern: t,
                            stjordalshalsen: t,
                            "xn--stjrdalshalsen-sqb": t,
                            stjørdalshalsen: t,
                            tananger: t,
                            tranby: t,
                            vossevangen: t,
                            afjord: t,
                            "xn--fjord-lra": t,
                            åfjord: t,
                            agdenes: t,
                            al: t,
                            "xn--l-1fa": t,
                            ål: t,
                            alesund: t,
                            "xn--lesund-hua": t,
                            ålesund: t,
                            alstahaug: t,
                            alta: t,
                            "xn--lt-liac": t,
                            áltá: t,
                            alaheadju: t,
                            "xn--laheadju-7ya": t,
                            álaheadju: t,
                            alvdal: t,
                            amli: t,
                            "xn--mli-tla": t,
                            åmli: t,
                            amot: t,
                            "xn--mot-tla": t,
                            åmot: t,
                            andebu: t,
                            andoy: t,
                            "xn--andy-ira": t,
                            andøy: t,
                            andasuolo: t,
                            ardal: t,
                            "xn--rdal-poa": t,
                            årdal: t,
                            aremark: t,
                            arendal: t,
                            "xn--s-1fa": t,
                            ås: t,
                            aseral: t,
                            "xn--seral-lra": t,
                            åseral: t,
                            asker: t,
                            askim: t,
                            askvoll: t,
                            askoy: t,
                            "xn--asky-ira": t,
                            askøy: t,
                            asnes: t,
                            "xn--snes-poa": t,
                            åsnes: t,
                            audnedaln: t,
                            aukra: t,
                            aure: t,
                            aurland: t,
                            "aurskog-holand": t,
                            "xn--aurskog-hland-jnb": t,
                            "aurskog-h\xf8land": t,
                            austevoll: t,
                            austrheim: t,
                            averoy: t,
                            "xn--avery-yua": t,
                            averøy: t,
                            balestrand: t,
                            ballangen: t,
                            balat: t,
                            "xn--blt-elab": t,
                            bálát: t,
                            balsfjord: t,
                            bahccavuotna: t,
                            "xn--bhccavuotna-k7a": t,
                            báhccavuotna: t,
                            bamble: t,
                            bardu: t,
                            beardu: t,
                            beiarn: t,
                            bajddar: t,
                            "xn--bjddar-pta": t,
                            bájddar: t,
                            baidar: t,
                            "xn--bidr-5nac": t,
                            báidár: t,
                            berg: t,
                            bergen: t,
                            berlevag: t,
                            "xn--berlevg-jxa": t,
                            berlevåg: t,
                            bearalvahki: t,
                            "xn--bearalvhki-y4a": t,
                            bearalváhki: t,
                            bindal: t,
                            birkenes: t,
                            bjarkoy: t,
                            "xn--bjarky-fya": t,
                            bjarkøy: t,
                            bjerkreim: t,
                            bjugn: t,
                            bodo: t,
                            "xn--bod-2na": t,
                            bodø: t,
                            badaddja: t,
                            "xn--bdddj-mrabd": t,
                            bådåddjå: t,
                            budejju: t,
                            bokn: t,
                            bremanger: t,
                            bronnoy: t,
                            "xn--brnny-wuac": t,
                            brønnøy: t,
                            bygland: t,
                            bykle: t,
                            barum: t,
                            "xn--brum-voa": t,
                            bærum: t,
                            telemark: [0, {
                                bo: t,
                                "xn--b-5ga": t,
                                bø: t
                            }],
                            nordland: [0, {
                                bo: t,
                                "xn--b-5ga": t,
                                bø: t,
                                heroy: t,
                                "xn--hery-ira": t,
                                herøy: t
                            }],
                            bievat: t,
                            "xn--bievt-0qa": t,
                            bievát: t,
                            bomlo: t,
                            "xn--bmlo-gra": t,
                            bømlo: t,
                            batsfjord: t,
                            "xn--btsfjord-9za": t,
                            båtsfjord: t,
                            bahcavuotna: t,
                            "xn--bhcavuotna-s4a": t,
                            báhcavuotna: t,
                            dovre: t,
                            drammen: t,
                            drangedal: t,
                            dyroy: t,
                            "xn--dyry-ira": t,
                            dyrøy: t,
                            donna: t,
                            "xn--dnna-gra": t,
                            dønna: t,
                            eid: t,
                            eidfjord: t,
                            eidsberg: t,
                            eidskog: t,
                            eidsvoll: t,
                            eigersund: t,
                            elverum: t,
                            enebakk: t,
                            engerdal: t,
                            etne: t,
                            etnedal: t,
                            evenes: t,
                            evenassi: t,
                            "xn--eveni-0qa01ga": t,
                            evenášši: t,
                            "evje-og-hornnes": t,
                            farsund: t,
                            fauske: t,
                            fuossko: t,
                            fuoisku: t,
                            fedje: t,
                            fet: t,
                            finnoy: t,
                            "xn--finny-yua": t,
                            finnøy: t,
                            fitjar: t,
                            fjaler: t,
                            fjell: t,
                            flakstad: t,
                            flatanger: t,
                            flekkefjord: t,
                            flesberg: t,
                            flora: t,
                            fla: t,
                            "xn--fl-zia": t,
                            flå: t,
                            folldal: t,
                            forsand: t,
                            fosnes: t,
                            frei: t,
                            frogn: t,
                            froland: t,
                            frosta: t,
                            frana: t,
                            "xn--frna-woa": t,
                            fræna: t,
                            froya: t,
                            "xn--frya-hra": t,
                            frøya: t,
                            fusa: t,
                            fyresdal: t,
                            forde: t,
                            "xn--frde-gra": t,
                            førde: t,
                            gamvik: t,
                            gangaviika: t,
                            "xn--ggaviika-8ya47h": t,
                            gáŋgaviika: t,
                            gaular: t,
                            gausdal: t,
                            gildeskal: t,
                            "xn--gildeskl-g0a": t,
                            gildeskål: t,
                            giske: t,
                            gjemnes: t,
                            gjerdrum: t,
                            gjerstad: t,
                            gjesdal: t,
                            gjovik: t,
                            "xn--gjvik-wua": t,
                            gjøvik: t,
                            gloppen: t,
                            gol: t,
                            gran: t,
                            grane: t,
                            granvin: t,
                            gratangen: t,
                            grimstad: t,
                            grong: t,
                            kraanghke: t,
                            "xn--kranghke-b0a": t,
                            kråanghke: t,
                            grue: t,
                            gulen: t,
                            hadsel: t,
                            halden: t,
                            halsa: t,
                            hamar: t,
                            hamaroy: t,
                            habmer: t,
                            "xn--hbmer-xqa": t,
                            hábmer: t,
                            hapmir: t,
                            "xn--hpmir-xqa": t,
                            hápmir: t,
                            hammerfest: t,
                            hammarfeasta: t,
                            "xn--hmmrfeasta-s4ac": t,
                            hámmárfeasta: t,
                            haram: t,
                            hareid: t,
                            harstad: t,
                            hasvik: t,
                            aknoluokta: t,
                            "xn--koluokta-7ya57h": t,
                            ákŋoluokta: t,
                            hattfjelldal: t,
                            aarborte: t,
                            haugesund: t,
                            hemne: t,
                            hemnes: t,
                            hemsedal: t,
                            "more-og-romsdal": [0, {
                                heroy: t,
                                sande: t
                            }],
                            "xn--mre-og-romsdal-qqb": [0, {
                                "xn--hery-ira": t,
                                sande: t
                            }],
                            "m\xf8re-og-romsdal": [0, {
                                herøy: t,
                                sande: t
                            }],
                            hitra: t,
                            hjartdal: t,
                            hjelmeland: t,
                            hobol: t,
                            "xn--hobl-ira": t,
                            hobøl: t,
                            hof: t,
                            hol: t,
                            hole: t,
                            holmestrand: t,
                            holtalen: t,
                            "xn--holtlen-hxa": t,
                            holtålen: t,
                            hornindal: t,
                            horten: t,
                            hurdal: t,
                            hurum: t,
                            hvaler: t,
                            hyllestad: t,
                            hagebostad: t,
                            "xn--hgebostad-g3a": t,
                            hægebostad: t,
                            hoyanger: t,
                            "xn--hyanger-q1a": t,
                            høyanger: t,
                            hoylandet: t,
                            "xn--hylandet-54a": t,
                            høylandet: t,
                            ha: t,
                            "xn--h-2fa": t,
                            hå: t,
                            ibestad: t,
                            inderoy: t,
                            "xn--indery-fya": t,
                            inderøy: t,
                            iveland: t,
                            jevnaker: t,
                            jondal: t,
                            jolster: t,
                            "xn--jlster-bya": t,
                            jølster: t,
                            karasjok: t,
                            karasjohka: t,
                            "xn--krjohka-hwab49j": t,
                            kárášjohka: t,
                            karlsoy: t,
                            galsa: t,
                            "xn--gls-elac": t,
                            gálsá: t,
                            karmoy: t,
                            "xn--karmy-yua": t,
                            karmøy: t,
                            kautokeino: t,
                            guovdageaidnu: t,
                            klepp: t,
                            klabu: t,
                            "xn--klbu-woa": t,
                            klæbu: t,
                            kongsberg: t,
                            kongsvinger: t,
                            kragero: t,
                            "xn--krager-gya": t,
                            kragerø: t,
                            kristiansand: t,
                            kristiansund: t,
                            krodsherad: t,
                            "xn--krdsherad-m8a": t,
                            krødsherad: t,
                            kvalsund: t,
                            rahkkeravju: t,
                            "xn--rhkkervju-01af": t,
                            ráhkkerávju: t,
                            kvam: t,
                            kvinesdal: t,
                            kvinnherad: t,
                            kviteseid: t,
                            kvitsoy: t,
                            "xn--kvitsy-fya": t,
                            kvitsøy: t,
                            kvafjord: t,
                            "xn--kvfjord-nxa": t,
                            kvæfjord: t,
                            giehtavuoatna: t,
                            kvanangen: t,
                            "xn--kvnangen-k0a": t,
                            kvænangen: t,
                            navuotna: t,
                            "xn--nvuotna-hwa": t,
                            návuotna: t,
                            kafjord: t,
                            "xn--kfjord-iua": t,
                            kåfjord: t,
                            gaivuotna: t,
                            "xn--givuotna-8ya": t,
                            gáivuotna: t,
                            larvik: t,
                            lavangen: t,
                            lavagis: t,
                            loabat: t,
                            "xn--loabt-0qa": t,
                            loabát: t,
                            lebesby: t,
                            davvesiida: t,
                            leikanger: t,
                            leirfjord: t,
                            leka: t,
                            leksvik: t,
                            lenvik: t,
                            leangaviika: t,
                            "xn--leagaviika-52b": t,
                            leaŋgaviika: t,
                            lesja: t,
                            levanger: t,
                            lier: t,
                            lierne: t,
                            lillehammer: t,
                            lillesand: t,
                            lindesnes: t,
                            lindas: t,
                            "xn--linds-pra": t,
                            lindås: t,
                            lom: t,
                            loppa: t,
                            lahppi: t,
                            "xn--lhppi-xqa": t,
                            láhppi: t,
                            lund: t,
                            lunner: t,
                            luroy: t,
                            "xn--lury-ira": t,
                            lurøy: t,
                            luster: t,
                            lyngdal: t,
                            lyngen: t,
                            ivgu: t,
                            lardal: t,
                            lerdal: t,
                            "xn--lrdal-sra": t,
                            lærdal: t,
                            lodingen: t,
                            "xn--ldingen-q1a": t,
                            lødingen: t,
                            lorenskog: t,
                            "xn--lrenskog-54a": t,
                            lørenskog: t,
                            loten: t,
                            "xn--lten-gra": t,
                            løten: t,
                            malvik: t,
                            masoy: t,
                            "xn--msy-ula0h": t,
                            måsøy: t,
                            muosat: t,
                            "xn--muost-0qa": t,
                            muosát: t,
                            mandal: t,
                            marker: t,
                            marnardal: t,
                            masfjorden: t,
                            meland: t,
                            meldal: t,
                            melhus: t,
                            meloy: t,
                            "xn--mely-ira": t,
                            meløy: t,
                            meraker: t,
                            "xn--merker-kua": t,
                            meråker: t,
                            moareke: t,
                            "xn--moreke-jua": t,
                            moåreke: t,
                            midsund: t,
                            "midtre-gauldal": t,
                            modalen: t,
                            modum: t,
                            molde: t,
                            moskenes: t,
                            moss: t,
                            mosvik: t,
                            malselv: t,
                            "xn--mlselv-iua": t,
                            målselv: t,
                            malatvuopmi: t,
                            "xn--mlatvuopmi-s4a": t,
                            málatvuopmi: t,
                            namdalseid: t,
                            aejrie: t,
                            namsos: t,
                            namsskogan: t,
                            naamesjevuemie: t,
                            "xn--nmesjevuemie-tcba": t,
                            nååmesjevuemie: t,
                            laakesvuemie: t,
                            nannestad: t,
                            narvik: t,
                            narviika: t,
                            naustdal: t,
                            "nedre-eiker": t,
                            akershus: ev,
                            buskerud: ev,
                            nesna: t,
                            nesodden: t,
                            nesseby: t,
                            unjarga: t,
                            "xn--unjrga-rta": t,
                            unjárga: t,
                            nesset: t,
                            nissedal: t,
                            nittedal: t,
                            "nord-aurdal": t,
                            "nord-fron": t,
                            "nord-odal": t,
                            norddal: t,
                            nordkapp: t,
                            davvenjarga: t,
                            "xn--davvenjrga-y4a": t,
                            davvenjárga: t,
                            "nordre-land": t,
                            nordreisa: t,
                            raisa: t,
                            "xn--risa-5na": t,
                            ráisa: t,
                            "nore-og-uvdal": t,
                            notodden: t,
                            naroy: t,
                            "xn--nry-yla5g": t,
                            nærøy: t,
                            notteroy: t,
                            "xn--nttery-byae": t,
                            nøtterøy: t,
                            odda: t,
                            oksnes: t,
                            "xn--ksnes-uua": t,
                            øksnes: t,
                            oppdal: t,
                            oppegard: t,
                            "xn--oppegrd-ixa": t,
                            oppegård: t,
                            orkdal: t,
                            orland: t,
                            "xn--rland-uua": t,
                            ørland: t,
                            orskog: t,
                            "xn--rskog-uua": t,
                            ørskog: t,
                            orsta: t,
                            "xn--rsta-fra": t,
                            ørsta: t,
                            hedmark: [0, {
                                os: t,
                                valer: t,
                                "xn--vler-qoa": t,
                                våler: t
                            }],
                            hordaland: [0, {
                                os: t
                            }],
                            osen: t,
                            osteroy: t,
                            "xn--ostery-fya": t,
                            osterøy: t,
                            "ostre-toten": t,
                            "xn--stre-toten-zcb": t,
                            "\xf8stre-toten": t,
                            overhalla: t,
                            "ovre-eiker": t,
                            "xn--vre-eiker-k8a": t,
                            "\xf8vre-eiker": t,
                            oyer: t,
                            "xn--yer-zna": t,
                            øyer: t,
                            oygarden: t,
                            "xn--ygarden-p1a": t,
                            øygarden: t,
                            "oystre-slidre": t,
                            "xn--ystre-slidre-ujb": t,
                            "\xf8ystre-slidre": t,
                            porsanger: t,
                            porsangu: t,
                            "xn--porsgu-sta26f": t,
                            porsáŋgu: t,
                            porsgrunn: t,
                            radoy: t,
                            "xn--rady-ira": t,
                            radøy: t,
                            rakkestad: t,
                            rana: t,
                            ruovat: t,
                            randaberg: t,
                            rauma: t,
                            rendalen: t,
                            rennebu: t,
                            rennesoy: t,
                            "xn--rennesy-v1a": t,
                            rennesøy: t,
                            rindal: t,
                            ringebu: t,
                            ringerike: t,
                            ringsaker: t,
                            rissa: t,
                            risor: t,
                            "xn--risr-ira": t,
                            risør: t,
                            roan: t,
                            rollag: t,
                            rygge: t,
                            ralingen: t,
                            "xn--rlingen-mxa": t,
                            rælingen: t,
                            rodoy: t,
                            "xn--rdy-0nab": t,
                            rødøy: t,
                            romskog: t,
                            "xn--rmskog-bya": t,
                            rømskog: t,
                            roros: t,
                            "xn--rros-gra": t,
                            røros: t,
                            rost: t,
                            "xn--rst-0na": t,
                            røst: t,
                            royken: t,
                            "xn--ryken-vua": t,
                            røyken: t,
                            royrvik: t,
                            "xn--ryrvik-bya": t,
                            røyrvik: t,
                            rade: t,
                            "xn--rde-ula": t,
                            råde: t,
                            salangen: t,
                            siellak: t,
                            saltdal: t,
                            salat: t,
                            "xn--slt-elab": t,
                            sálát: t,
                            "xn--slat-5na": t,
                            sálat: t,
                            samnanger: t,
                            vestfold: [0, {
                                sande: t
                            }],
                            sandefjord: t,
                            sandnes: t,
                            sandoy: t,
                            "xn--sandy-yua": t,
                            sandøy: t,
                            sarpsborg: t,
                            sauda: t,
                            sauherad: t,
                            sel: t,
                            selbu: t,
                            selje: t,
                            seljord: t,
                            sigdal: t,
                            siljan: t,
                            sirdal: t,
                            skaun: t,
                            skedsmo: t,
                            ski: t,
                            skien: t,
                            skiptvet: t,
                            skjervoy: t,
                            "xn--skjervy-v1a": t,
                            skjervøy: t,
                            skierva: t,
                            "xn--skierv-uta": t,
                            skiervá: t,
                            skjak: t,
                            "xn--skjk-soa": t,
                            skjåk: t,
                            skodje: t,
                            skanland: t,
                            "xn--sknland-fxa": t,
                            skånland: t,
                            skanit: t,
                            "xn--sknit-yqa": t,
                            skánit: t,
                            smola: t,
                            "xn--smla-hra": t,
                            smøla: t,
                            snillfjord: t,
                            snasa: t,
                            "xn--snsa-roa": t,
                            snåsa: t,
                            snoasa: t,
                            snaase: t,
                            "xn--snase-nra": t,
                            snåase: t,
                            sogndal: t,
                            sokndal: t,
                            sola: t,
                            solund: t,
                            songdalen: t,
                            sortland: t,
                            spydeberg: t,
                            stange: t,
                            stavanger: t,
                            steigen: t,
                            steinkjer: t,
                            stjordal: t,
                            "xn--stjrdal-s1a": t,
                            stjørdal: t,
                            stokke: t,
                            "stor-elvdal": t,
                            stord: t,
                            stordal: t,
                            storfjord: t,
                            omasvuotna: t,
                            strand: t,
                            stranda: t,
                            stryn: t,
                            sula: t,
                            suldal: t,
                            sund: t,
                            sunndal: t,
                            surnadal: t,
                            sveio: t,
                            svelvik: t,
                            sykkylven: t,
                            sogne: t,
                            "xn--sgne-gra": t,
                            søgne: t,
                            somna: t,
                            "xn--smna-gra": t,
                            sømna: t,
                            "sondre-land": t,
                            "xn--sndre-land-0cb": t,
                            "s\xf8ndre-land": t,
                            "sor-aurdal": t,
                            "xn--sr-aurdal-l8a": t,
                            "s\xf8r-aurdal": t,
                            "sor-fron": t,
                            "xn--sr-fron-q1a": t,
                            "s\xf8r-fron": t,
                            "sor-odal": t,
                            "xn--sr-odal-q1a": t,
                            "s\xf8r-odal": t,
                            "sor-varanger": t,
                            "xn--sr-varanger-ggb": t,
                            "s\xf8r-varanger": t,
                            "matta-varjjat": t,
                            "xn--mtta-vrjjat-k7af": t,
                            "m\xe1tta-v\xe1rjjat": t,
                            sorfold: t,
                            "xn--srfold-bya": t,
                            sørfold: t,
                            sorreisa: t,
                            "xn--srreisa-q1a": t,
                            sørreisa: t,
                            sorum: t,
                            "xn--srum-gra": t,
                            sørum: t,
                            tana: t,
                            deatnu: t,
                            time: t,
                            tingvoll: t,
                            tinn: t,
                            tjeldsund: t,
                            dielddanuorri: t,
                            tjome: t,
                            "xn--tjme-hra": t,
                            tjøme: t,
                            tokke: t,
                            tolga: t,
                            torsken: t,
                            tranoy: t,
                            "xn--trany-yua": t,
                            tranøy: t,
                            tromso: t,
                            "xn--troms-zua": t,
                            tromsø: t,
                            tromsa: t,
                            romsa: t,
                            trondheim: t,
                            troandin: t,
                            trysil: t,
                            trana: t,
                            "xn--trna-woa": t,
                            træna: t,
                            trogstad: t,
                            "xn--trgstad-r1a": t,
                            trøgstad: t,
                            tvedestrand: t,
                            tydal: t,
                            tynset: t,
                            tysfjord: t,
                            divtasvuodna: t,
                            divttasvuotna: t,
                            tysnes: t,
                            tysvar: t,
                            "xn--tysvr-vra": t,
                            tysvær: t,
                            tonsberg: t,
                            "xn--tnsberg-q1a": t,
                            tønsberg: t,
                            ullensaker: t,
                            ullensvang: t,
                            ulvik: t,
                            utsira: t,
                            vadso: t,
                            "xn--vads-jra": t,
                            vadsø: t,
                            cahcesuolo: t,
                            "xn--hcesuolo-7ya35b": t,
                            čáhcesuolo: t,
                            vaksdal: t,
                            valle: t,
                            vang: t,
                            vanylven: t,
                            vardo: t,
                            "xn--vard-jra": t,
                            vardø: t,
                            varggat: t,
                            "xn--vrggt-xqad": t,
                            várggát: t,
                            vefsn: t,
                            vaapste: t,
                            vega: t,
                            vegarshei: t,
                            "xn--vegrshei-c0a": t,
                            vegårshei: t,
                            vennesla: t,
                            verdal: t,
                            verran: t,
                            vestby: t,
                            vestnes: t,
                            "vestre-slidre": t,
                            "vestre-toten": t,
                            vestvagoy: t,
                            "xn--vestvgy-ixa6o": t,
                            vestvågøy: t,
                            vevelstad: t,
                            vik: t,
                            vikna: t,
                            vindafjord: t,
                            volda: t,
                            voss: t,
                            varoy: t,
                            "xn--vry-yla5g": t,
                            værøy: t,
                            vagan: t,
                            "xn--vgan-qoa": t,
                            vågan: t,
                            voagat: t,
                            vagsoy: t,
                            "xn--vgsy-qoa0j": t,
                            vågsøy: t,
                            vaga: t,
                            "xn--vg-yiab": t,
                            vågå: t,
                            ostfold: [0, {
                                valer: t
                            }],
                            "xn--stfold-9xa": [0, {
                                "xn--vler-qoa": t
                            }],
                            østfold: [0, {
                                våler: t
                            }],
                            co: r,
                            blogspot: r,
                            "123hjemmeside": r,
                            myspreadshop: r
                        }],
                        np: h,
                        nr: em,
                        nu: [1, {
                            merseine: r,
                            mine: r,
                            shacknet: r,
                            enterprisecloud: r
                        }],
                        nz: [1, {
                            ac: t,
                            co: l,
                            cri: t,
                            geek: t,
                            gen: t,
                            govt: t,
                            health: t,
                            iwi: t,
                            kiwi: t,
                            maori: t,
                            mil: t,
                            "xn--mori-qsa": t,
                            māori: t,
                            net: t,
                            org: t,
                            parliament: t,
                            school: t
                        }],
                        om: [1, {
                            co: t,
                            com: t,
                            edu: t,
                            gov: t,
                            med: t,
                            museum: t,
                            net: t,
                            org: t,
                            pro: t
                        }],
                        onion: t,
                        org: [1, {
                            altervista: r,
                            amune: [0, {
                                tele: r
                            }],
                            pimienta: r,
                            poivron: r,
                            potager: r,
                            sweetpepper: r,
                            ae: r,
                            us: r,
                            certmgr: r,
                            cdn77: [0, {
                                c: r,
                                rsc: r
                            }],
                            "cdn77-secure": [0, {
                                origin: [0, {
                                    ssl: r
                                }]
                            }],
                            cloudns: r,
                            duckdns: r,
                            tunk: r,
                            dyndns: [2, {
                                go: r,
                                home: r
                            }],
                            blogdns: r,
                            blogsite: r,
                            boldlygoingnowhere: r,
                            dnsalias: r,
                            dnsdojo: r,
                            doesntexist: r,
                            dontexist: r,
                            doomdns: r,
                            dvrdns: r,
                            dynalias: r,
                            endofinternet: r,
                            endoftheinternet: r,
                            "from-me": r,
                            "game-host": r,
                            gotdns: r,
                            "hobby-site": r,
                            homedns: r,
                            homeftp: r,
                            homelinux: r,
                            homeunix: r,
                            "is-a-bruinsfan": r,
                            "is-a-candidate": r,
                            "is-a-celticsfan": r,
                            "is-a-chef": r,
                            "is-a-geek": r,
                            "is-a-knight": r,
                            "is-a-linux-user": r,
                            "is-a-patsfan": r,
                            "is-a-soxfan": r,
                            "is-found": r,
                            "is-lost": r,
                            "is-saved": r,
                            "is-very-bad": r,
                            "is-very-evil": r,
                            "is-very-good": r,
                            "is-very-nice": r,
                            "is-very-sweet": r,
                            "isa-geek": r,
                            "kicks-ass": r,
                            misconfused: r,
                            podzone: r,
                            readmyblog: r,
                            selfip: r,
                            sellsyourhome: r,
                            servebbs: r,
                            serveftp: r,
                            servegame: r,
                            "stuff-4-sale": r,
                            webhop: r,
                            ddnss: r,
                            accesscam: r,
                            camdvr: r,
                            freeddns: r,
                            mywire: r,
                            webredirect: r,
                            eu: [2, {
                                al: r,
                                asso: r,
                                at: r,
                                au: r,
                                be: r,
                                bg: r,
                                ca: r,
                                cd: r,
                                ch: r,
                                cn: r,
                                cy: r,
                                cz: r,
                                de: r,
                                dk: r,
                                edu: r,
                                ee: r,
                                es: r,
                                fi: r,
                                fr: r,
                                gr: r,
                                hr: r,
                                hu: r,
                                ie: r,
                                il: r,
                                in: r,
                                int: r,
                                is: r,
                                it: r,
                                jp: r,
                                kr: r,
                                lt: r,
                                lu: r,
                                lv: r,
                                mc: r,
                                me: r,
                                mk: r,
                                mt: r,
                                my: r,
                                net: r,
                                ng: r,
                                nl: r,
                                no: r,
                                nz: r,
                                paris: r,
                                pl: r,
                                pt: r,
                                "q-a": r,
                                ro: r,
                                ru: r,
                                se: r,
                                si: r,
                                sk: r,
                                tr: r,
                                uk: r,
                                us: r
                            }],
                            twmail: r,
                            fedorainfracloud: r,
                            fedorapeople: r,
                            fedoraproject: [0, {
                                cloud: r,
                                os: Q,
                                stg: [0, {
                                    os: Q
                                }]
                            }],
                            freedesktop: r,
                            hepforge: r,
                            "in-dsl": r,
                            "in-vpn": r,
                            js: r,
                            barsy: r,
                            mayfirst: r,
                            "mozilla-iot": r,
                            bmoattachments: r,
                            dynserv: r,
                            "now-dns": r,
                            "cable-modem": r,
                            collegefan: r,
                            couchpotatofries: r,
                            mlbfan: r,
                            mysecuritycamera: r,
                            nflfan: r,
                            "read-books": r,
                            ufcfan: r,
                            hopto: r,
                            myftp: r,
                            "no-ip": r,
                            zapto: r,
                            httpbin: r,
                            pubtls: r,
                            jpn: r,
                            "my-firewall": r,
                            myfirewall: r,
                            spdns: r,
                            "small-web": r,
                            dsmynas: r,
                            familyds: r,
                            teckids: eu,
                            tuxfamily: r,
                            diskstation: r,
                            hk: r,
                            wmflabs: r,
                            toolforge: r,
                            wmcloud: r,
                            za: r
                        }],
                        pa: [1, {
                            ac: t,
                            gob: t,
                            com: t,
                            org: t,
                            sld: t,
                            edu: t,
                            net: t,
                            ing: t,
                            abo: t,
                            med: t,
                            nom: t
                        }],
                        pe: [1, {
                            edu: t,
                            gob: t,
                            nom: t,
                            mil: t,
                            org: t,
                            com: t,
                            net: t,
                            blogspot: r
                        }],
                        pf: [1, {
                            com: t,
                            org: t,
                            edu: t
                        }],
                        pg: h,
                        ph: [1, {
                            com: t,
                            net: t,
                            org: t,
                            gov: t,
                            edu: t,
                            ngo: t,
                            mil: t,
                            i: t
                        }],
                        pk: [1, {
                            com: t,
                            net: t,
                            edu: t,
                            org: t,
                            fam: t,
                            biz: t,
                            web: t,
                            gov: t,
                            gob: t,
                            gok: t,
                            gon: t,
                            gop: t,
                            gos: t,
                            info: t
                        }],
                        pl: [1, {
                            com: t,
                            net: t,
                            org: t,
                            aid: t,
                            agro: t,
                            atm: t,
                            auto: t,
                            biz: t,
                            edu: t,
                            gmina: t,
                            gsm: t,
                            info: t,
                            mail: t,
                            miasta: t,
                            media: t,
                            mil: t,
                            nieruchomosci: t,
                            nom: t,
                            pc: t,
                            powiat: t,
                            priv: t,
                            realestate: t,
                            rel: t,
                            sex: t,
                            shop: t,
                            sklep: t,
                            sos: t,
                            szkola: t,
                            targi: t,
                            tm: t,
                            tourism: t,
                            travel: t,
                            turystyka: t,
                            gov: [1, {
                                ap: t,
                                griw: t,
                                ic: t,
                                is: t,
                                kmpsp: t,
                                konsulat: t,
                                kppsp: t,
                                kwp: t,
                                kwpsp: t,
                                mup: t,
                                mw: t,
                                oia: t,
                                oirm: t,
                                oke: t,
                                oow: t,
                                oschr: t,
                                oum: t,
                                pa: t,
                                pinb: t,
                                piw: t,
                                po: t,
                                pr: t,
                                psp: t,
                                psse: t,
                                pup: t,
                                rzgw: t,
                                sa: t,
                                sdn: t,
                                sko: t,
                                so: t,
                                sr: t,
                                starostwo: t,
                                ug: t,
                                ugim: t,
                                um: t,
                                umig: t,
                                upow: t,
                                uppo: t,
                                us: t,
                                uw: t,
                                uzs: t,
                                wif: t,
                                wiih: t,
                                winb: t,
                                wios: t,
                                witd: t,
                                wiw: t,
                                wkz: t,
                                wsa: t,
                                wskr: t,
                                wsse: t,
                                wuoz: t,
                                wzmiuw: t,
                                zp: t,
                                zpisdn: t
                            }],
                            augustow: t,
                            "babia-gora": t,
                            bedzin: t,
                            beskidy: t,
                            bialowieza: t,
                            bialystok: t,
                            bielawa: t,
                            bieszczady: t,
                            boleslawiec: t,
                            bydgoszcz: t,
                            bytom: t,
                            cieszyn: t,
                            czeladz: t,
                            czest: t,
                            dlugoleka: t,
                            elblag: t,
                            elk: t,
                            glogow: t,
                            gniezno: t,
                            gorlice: t,
                            grajewo: t,
                            ilawa: t,
                            jaworzno: t,
                            "jelenia-gora": t,
                            jgora: t,
                            kalisz: t,
                            "kazimierz-dolny": t,
                            karpacz: t,
                            kartuzy: t,
                            kaszuby: t,
                            katowice: t,
                            kepno: t,
                            ketrzyn: t,
                            klodzko: t,
                            kobierzyce: t,
                            kolobrzeg: t,
                            konin: t,
                            konskowola: t,
                            kutno: t,
                            lapy: t,
                            lebork: t,
                            legnica: t,
                            lezajsk: t,
                            limanowa: t,
                            lomza: t,
                            lowicz: t,
                            lubin: t,
                            lukow: t,
                            malbork: t,
                            malopolska: t,
                            mazowsze: t,
                            mazury: t,
                            mielec: t,
                            mielno: t,
                            mragowo: t,
                            naklo: t,
                            nowaruda: t,
                            nysa: t,
                            olawa: t,
                            olecko: t,
                            olkusz: t,
                            olsztyn: t,
                            opoczno: t,
                            opole: t,
                            ostroda: t,
                            ostroleka: t,
                            ostrowiec: t,
                            ostrowwlkp: t,
                            pila: t,
                            pisz: t,
                            podhale: t,
                            podlasie: t,
                            polkowice: t,
                            pomorze: t,
                            pomorskie: t,
                            prochowice: t,
                            pruszkow: t,
                            przeworsk: t,
                            pulawy: t,
                            radom: t,
                            "rawa-maz": t,
                            rybnik: t,
                            rzeszow: t,
                            sanok: t,
                            sejny: t,
                            slask: t,
                            slupsk: t,
                            sosnowiec: t,
                            "stalowa-wola": t,
                            skoczow: t,
                            starachowice: t,
                            stargard: t,
                            suwalki: t,
                            swidnica: t,
                            swiebodzin: t,
                            swinoujscie: t,
                            szczecin: t,
                            szczytno: t,
                            tarnobrzeg: t,
                            tgory: t,
                            turek: t,
                            tychy: t,
                            ustka: t,
                            walbrzych: t,
                            warmia: t,
                            warszawa: t,
                            waw: t,
                            wegrow: t,
                            wielun: t,
                            wlocl: t,
                            wloclawek: t,
                            wodzislaw: t,
                            wolomin: t,
                            wroclaw: t,
                            zachpomor: t,
                            zagan: t,
                            zarow: t,
                            zgora: t,
                            zgorzelec: t,
                            beep: r,
                            "ecommerce-shop": r,
                            shoparena: r,
                            homesklep: r,
                            sdscloud: r,
                            unicloud: r,
                            krasnik: r,
                            leczna: r,
                            lubartow: r,
                            lublin: r,
                            poniatowa: r,
                            swidnik: r,
                            co: r,
                            torun: r,
                            simplesite: r,
                            art: r,
                            gliwice: r,
                            krakow: r,
                            poznan: r,
                            wroc: r,
                            zakopane: r,
                            myspreadshop: r,
                            gda: r,
                            gdansk: r,
                            gdynia: r,
                            med: r,
                            sopot: r
                        }],
                        pm: [1, {
                            own: r,
                            name: r
                        }],
                        pn: [1, {
                            gov: t,
                            co: t,
                            org: t,
                            edu: t,
                            net: t
                        }],
                        post: t,
                        pr: [1, {
                            com: t,
                            net: t,
                            org: t,
                            gov: t,
                            edu: t,
                            isla: t,
                            pro: t,
                            biz: t,
                            info: t,
                            name: t,
                            est: t,
                            prof: t,
                            ac: t
                        }],
                        pro: [1, {
                            aaa: t,
                            aca: t,
                            acct: t,
                            avocat: t,
                            bar: t,
                            cpa: t,
                            eng: t,
                            jur: t,
                            law: t,
                            med: t,
                            recht: t,
                            cloudns: r,
                            dnstrace: [0, {
                                bci: r
                            }],
                            barsy: r
                        }],
                        ps: [1, {
                            edu: t,
                            gov: t,
                            sec: t,
                            plo: t,
                            com: t,
                            org: t,
                            net: t
                        }],
                        pt: [1, {
                            net: t,
                            gov: t,
                            org: t,
                            edu: t,
                            int: t,
                            publ: t,
                            com: t,
                            nome: t,
                            blogspot: r,
                            "123paginaweb": r
                        }],
                        pw: [1, {
                            co: t,
                            ne: t,
                            or: t,
                            ed: t,
                            go: t,
                            belau: t,
                            cloudns: r,
                            x443: r
                        }],
                        py: [1, {
                            com: t,
                            coop: t,
                            edu: t,
                            gov: t,
                            mil: t,
                            net: t,
                            org: t
                        }],
                        qa: [1, {
                            com: t,
                            edu: t,
                            gov: t,
                            mil: t,
                            name: t,
                            net: t,
                            org: t,
                            sch: t,
                            blogspot: r
                        }],
                        re: [1, {
                            asso: t,
                            com: t,
                            nom: t,
                            blogspot: r
                        }],
                        ro: [1, {
                            arts: t,
                            com: t,
                            firm: t,
                            info: t,
                            nom: t,
                            nt: t,
                            org: t,
                            rec: t,
                            store: t,
                            tm: t,
                            www: t,
                            co: r,
                            shop: r,
                            blogspot: r,
                            barsy: r
                        }],
                        rs: [1, {
                            ac: t,
                            co: t,
                            edu: t,
                            gov: t,
                            in: t,
                            org: t,
                            brendly: [0, {
                                shop: r
                            }],
                            blogspot: r,
                            ua: r,
                            ox: r
                        }],
                        ru: [1, {
                            ac: r,
                            edu: r,
                            gov: r,
                            int: r,
                            mil: r,
                            test: r,
                            eurodir: r,
                            adygeya: r,
                            bashkiria: r,
                            bir: r,
                            cbg: r,
                            com: r,
                            dagestan: r,
                            grozny: r,
                            kalmykia: r,
                            kustanai: r,
                            marine: r,
                            mordovia: r,
                            msk: r,
                            mytis: r,
                            nalchik: r,
                            nov: r,
                            pyatigorsk: r,
                            spb: r,
                            vladikavkaz: r,
                            vladimir: r,
                            blogspot: r,
                            na4u: r,
                            mircloud: r,
                            regruhosting: ei,
                            myjino: [2, {
                                hosting: s,
                                landing: s,
                                spectrum: s,
                                vps: s
                            }],
                            cldmail: [0, {
                                hb: r
                            }],
                            mcdir: [2, {
                                vps: r
                            }],
                            mcpre: r,
                            net: r,
                            org: r,
                            pp: r,
                            "123sait": r,
                            lk3: r,
                            ras: r
                        }],
                        rw: [1, {
                            ac: t,
                            co: t,
                            coop: t,
                            gov: t,
                            mil: t,
                            net: t,
                            org: t
                        }],
                        sa: [1, {
                            com: t,
                            net: t,
                            org: t,
                            gov: t,
                            med: t,
                            pub: t,
                            edu: t,
                            sch: t
                        }],
                        sb: a,
                        sc: a,
                        sd: [1, {
                            com: t,
                            net: t,
                            org: t,
                            edu: t,
                            med: t,
                            tv: t,
                            gov: t,
                            info: t
                        }],
                        se: [1, {
                            a: t,
                            ac: t,
                            b: t,
                            bd: t,
                            brand: t,
                            c: t,
                            d: t,
                            e: t,
                            f: t,
                            fh: t,
                            fhsk: t,
                            fhv: t,
                            g: t,
                            h: t,
                            i: t,
                            k: t,
                            komforb: t,
                            kommunalforbund: t,
                            komvux: t,
                            l: t,
                            lanbib: t,
                            m: t,
                            n: t,
                            naturbruksgymn: t,
                            o: t,
                            org: t,
                            p: t,
                            parti: t,
                            pp: t,
                            press: t,
                            r: t,
                            s: t,
                            t: t,
                            tm: t,
                            u: t,
                            w: t,
                            x: t,
                            y: t,
                            z: t,
                            com: r,
                            blogspot: r,
                            conf: r,
                            iopsys: r,
                            "123minsida": r,
                            itcouldbewor: r,
                            myspreadshop: r,
                            paba: [0, {
                                su: r
                            }]
                        }],
                        sg: [1, {
                            com: t,
                            net: t,
                            org: t,
                            gov: t,
                            edu: t,
                            per: t,
                            blogspot: r,
                            enscaled: r
                        }],
                        sh: [1, {
                            com: t,
                            net: t,
                            gov: t,
                            org: t,
                            mil: t,
                            bip: r,
                            hashbang: r,
                            platform: [0, {
                                bc: r,
                                ent: r,
                                eu: r,
                                us: r
                            }],
                            now: r,
                            vxl: r,
                            wedeploy: r
                        }],
                        si: [1, {
                            gitapp: r,
                            gitpage: r,
                            blogspot: r
                        }],
                        sj: t,
                        sk: l,
                        sl: a,
                        sm: t,
                        sn: [1, {
                            art: t,
                            com: t,
                            edu: t,
                            gouv: t,
                            org: t,
                            perso: t,
                            univ: t,
                            blogspot: r
                        }],
                        so: [1, {
                            com: t,
                            edu: t,
                            gov: t,
                            me: t,
                            net: t,
                            org: t,
                            sch: r
                        }],
                        sr: t,
                        ss: [1, {
                            biz: t,
                            com: t,
                            edu: t,
                            gov: t,
                            me: t,
                            net: t,
                            org: t,
                            sch: t
                        }],
                        st: [1, {
                            co: t,
                            com: t,
                            consulado: t,
                            edu: t,
                            embaixada: t,
                            mil: t,
                            net: t,
                            org: t,
                            principe: t,
                            saotome: t,
                            store: t,
                            kirara: r,
                            noho: r
                        }],
                        su: [1, {
                            abkhazia: r,
                            adygeya: r,
                            aktyubinsk: r,
                            arkhangelsk: r,
                            armenia: r,
                            ashgabad: r,
                            azerbaijan: r,
                            balashov: r,
                            bashkiria: r,
                            bryansk: r,
                            bukhara: r,
                            chimkent: r,
                            dagestan: r,
                            "east-kazakhstan": r,
                            exnet: r,
                            georgia: r,
                            grozny: r,
                            ivanovo: r,
                            jambyl: r,
                            kalmykia: r,
                            kaluga: r,
                            karacol: r,
                            karaganda: r,
                            karelia: r,
                            khakassia: r,
                            krasnodar: r,
                            kurgan: r,
                            kustanai: r,
                            lenug: r,
                            mangyshlak: r,
                            mordovia: r,
                            msk: r,
                            murmansk: r,
                            nalchik: r,
                            navoi: r,
                            "north-kazakhstan": r,
                            nov: r,
                            obninsk: r,
                            penza: r,
                            pokrovsk: r,
                            sochi: r,
                            spb: r,
                            tashkent: r,
                            termez: r,
                            togliatti: r,
                            troitsk: r,
                            tselinograd: r,
                            tula: r,
                            tuva: r,
                            vladikavkaz: r,
                            vladimir: r,
                            vologda: r
                        }],
                        sv: [1, {
                            com: t,
                            edu: t,
                            gob: t,
                            org: t,
                            red: t
                        }],
                        sx: c,
                        sy: ed,
                        sz: [1, {
                            co: t,
                            ac: t,
                            org: t
                        }],
                        tc: [1, {
                            ch: r,
                            me: r,
                            we: r
                        }],
                        td: l,
                        tel: t,
                        tf: [1, {
                            sch: r
                        }],
                        tg: t,
                        th: [1, {
                            ac: t,
                            co: t,
                            go: t,
                            in: t,
                            mi: t,
                            net: t,
                            or: t,
                            online: r,
                            shop: r
                        }],
                        tj: [1, {
                            ac: t,
                            biz: t,
                            co: t,
                            com: t,
                            edu: t,
                            go: t,
                            gov: t,
                            int: t,
                            mil: t,
                            name: t,
                            net: t,
                            nic: t,
                            org: t,
                            test: t,
                            web: t
                        }],
                        tk: t,
                        tl: c,
                        tm: [1, {
                            com: t,
                            co: t,
                            org: t,
                            net: t,
                            nom: t,
                            gov: t,
                            mil: t,
                            edu: t
                        }],
                        tn: [1, {
                            com: t,
                            ens: t,
                            fin: t,
                            gov: t,
                            ind: t,
                            info: t,
                            intl: t,
                            mincom: t,
                            nat: t,
                            net: t,
                            org: t,
                            perso: t,
                            tourism: t,
                            orangecloud: r
                        }],
                        to: [1, {
                            611: r,
                            com: t,
                            gov: t,
                            net: t,
                            org: t,
                            edu: t,
                            mil: t,
                            oya: r,
                            rdv: r,
                            x0: r,
                            vpnplus: r,
                            quickconnect: I,
                            nyan: r
                        }],
                        tr: [1, {
                            av: t,
                            bbs: t,
                            bel: t,
                            biz: t,
                            com: l,
                            dr: t,
                            edu: t,
                            gen: t,
                            gov: t,
                            info: t,
                            mil: t,
                            k12: t,
                            kep: t,
                            name: t,
                            net: t,
                            org: t,
                            pol: t,
                            tel: t,
                            tsk: t,
                            tv: t,
                            web: t,
                            nc: c
                        }],
                        tt: [1, {
                            co: t,
                            com: t,
                            org: t,
                            net: t,
                            biz: t,
                            info: t,
                            pro: t,
                            int: t,
                            coop: t,
                            jobs: t,
                            mobi: t,
                            travel: t,
                            museum: t,
                            aero: t,
                            name: t,
                            gov: t,
                            edu: t
                        }],
                        tv: [1, {
                            dyndns: r,
                            "better-than": r,
                            "on-the-web": r,
                            "worse-than": r,
                            from: r,
                            sakura: r
                        }],
                        tw: [1, {
                            edu: t,
                            gov: t,
                            mil: t,
                            com: [1, {
                                mymailer: r
                            }],
                            net: t,
                            org: t,
                            idv: t,
                            game: t,
                            ebiz: t,
                            club: t,
                            "xn--zf0ao64a": t,
                            網路: t,
                            "xn--uc0atv": t,
                            組織: t,
                            "xn--czrw28b": t,
                            商業: t,
                            url: r,
                            blogspot: r
                        }],
                        tz: [1, {
                            ac: t,
                            co: t,
                            go: t,
                            hotel: t,
                            info: t,
                            me: t,
                            mil: t,
                            mobi: t,
                            ne: t,
                            or: t,
                            sc: t,
                            tv: t
                        }],
                        ua: [1, {
                            com: t,
                            edu: t,
                            gov: t,
                            in: t,
                            net: t,
                            org: t,
                            cherkassy: t,
                            cherkasy: t,
                            chernigov: t,
                            chernihiv: t,
                            chernivtsi: t,
                            chernovtsy: t,
                            ck: t,
                            cn: t,
                            cr: t,
                            crimea: t,
                            cv: t,
                            dn: t,
                            dnepropetrovsk: t,
                            dnipropetrovsk: t,
                            donetsk: t,
                            dp: t,
                            if: t,
                            "ivano-frankivsk": t,
                            kh: t,
                            kharkiv: t,
                            kharkov: t,
                            kherson: t,
                            khmelnitskiy: t,
                            khmelnytskyi: t,
                            kiev: t,
                            kirovograd: t,
                            km: t,
                            kr: t,
                            kropyvnytskyi: t,
                            krym: t,
                            ks: t,
                            kv: t,
                            kyiv: t,
                            lg: t,
                            lt: t,
                            lugansk: t,
                            luhansk: t,
                            lutsk: t,
                            lv: t,
                            lviv: t,
                            mk: t,
                            mykolaiv: t,
                            nikolaev: t,
                            od: t,
                            odesa: t,
                            odessa: t,
                            pl: t,
                            poltava: t,
                            rivne: t,
                            rovno: t,
                            rv: t,
                            sb: t,
                            sebastopol: t,
                            sevastopol: t,
                            sm: t,
                            sumy: t,
                            te: t,
                            ternopil: t,
                            uz: t,
                            uzhgorod: t,
                            uzhhorod: t,
                            vinnica: t,
                            vinnytsia: t,
                            vn: t,
                            volyn: t,
                            yalta: t,
                            zakarpattia: t,
                            zaporizhzhe: t,
                            zaporizhzhia: t,
                            zhitomir: t,
                            zhytomyr: t,
                            zp: t,
                            zt: t,
                            cc: r,
                            inf: r,
                            ltd: r,
                            cx: r,
                            ie: r,
                            biz: r,
                            co: r,
                            pp: r,
                            v: r
                        }],
                        ug: [1, {
                            co: t,
                            or: t,
                            ac: t,
                            sc: t,
                            go: t,
                            ne: t,
                            com: t,
                            org: t,
                            blogspot: r
                        }],
                        uk: [1, {
                            ac: t,
                            co: [1, {
                                bytemark: [0, {
                                    dh: r,
                                    vm: r
                                }],
                                blogspot: r,
                                layershift: ea,
                                barsy: r,
                                barsyonline: r,
                                retrosnub: ec,
                                "nh-serv": r,
                                "no-ip": r,
                                wellbeingzone: r,
                                adimo: r,
                                myspreadshop: r
                            }],
                            gov: [1, {
                                campaign: r,
                                service: r,
                                api: r
                            }],
                            ltd: t,
                            me: t,
                            net: t,
                            nhs: t,
                            org: [1, {
                                glug: r,
                                lug: r,
                                lugs: r,
                                affinitylottery: r,
                                raffleentry: r,
                                weeklylottery: r
                            }],
                            plc: t,
                            police: t,
                            sch: h,
                            conn: r,
                            copro: r,
                            hosp: r,
                            "independent-commission": r,
                            "independent-inquest": r,
                            "independent-inquiry": r,
                            "independent-panel": r,
                            "independent-review": r,
                            "public-inquiry": r,
                            "royal-commission": r,
                            pymnt: r,
                            barsy: r
                        }],
                        us: [1, {
                            dni: t,
                            fed: t,
                            isa: t,
                            kids: t,
                            nsn: t,
                            ak: eb,
                            al: eb,
                            ar: eb,
                            as: eb,
                            az: eb,
                            ca: eb,
                            co: eb,
                            ct: eb,
                            dc: eb,
                            de: [1, {
                                cc: t,
                                lib: r
                            }],
                            fl: eb,
                            ga: eb,
                            gu: eb,
                            hi: ew,
                            ia: eb,
                            id: eb,
                            il: eb,
                            in: eb,
                            ks: eb,
                            ky: eb,
                            la: eb,
                            ma: [1, {
                                k12: [1, {
                                    pvt: t,
                                    chtr: t,
                                    paroch: t
                                }],
                                cc: t,
                                lib: t
                            }],
                            md: eb,
                            me: eb,
                            mi: [1, {
                                k12: t,
                                cc: t,
                                lib: t,
                                "ann-arbor": t,
                                cog: t,
                                dst: t,
                                eaton: t,
                                gen: t,
                                mus: t,
                                tec: t,
                                washtenaw: t
                            }],
                            mn: eb,
                            mo: eb,
                            ms: eb,
                            mt: eb,
                            nc: eb,
                            nd: ew,
                            ne: eb,
                            nh: eb,
                            nj: eb,
                            nm: eb,
                            nv: eb,
                            ny: eb,
                            oh: eb,
                            ok: eb,
                            or: eb,
                            pa: eb,
                            pr: eb,
                            ri: ew,
                            sc: eb,
                            sd: ew,
                            tn: eb,
                            tx: eb,
                            ut: eb,
                            vi: eb,
                            vt: eb,
                            va: eb,
                            wa: eb,
                            wi: eb,
                            wv: [1, {
                                cc: t
                            }],
                            wy: eb,
                            graphox: r,
                            cloudns: r,
                            drud: r,
                            "is-by": r,
                            "land-4-sale": r,
                            "stuff-4-sale": r,
                            enscaled: [0, {
                                phx: r
                            }],
                            mircloud: r,
                            freeddns: r,
                            golffan: r,
                            noip: r,
                            pointto: r,
                            platterp: r
                        }],
                        uy: [1, {
                            com: l,
                            edu: t,
                            gub: t,
                            mil: t,
                            net: t,
                            org: t
                        }],
                        uz: [1, {
                            co: t,
                            com: t,
                            net: t,
                            org: t
                        }],
                        va: t,
                        vc: [1, {
                            com: t,
                            net: t,
                            org: t,
                            gov: t,
                            mil: t,
                            edu: t,
                            gv: [2, {
                                d: r
                            }],
                            "0e": r
                        }],
                        ve: [1, {
                            arts: t,
                            bib: t,
                            co: t,
                            com: t,
                            e12: t,
                            edu: t,
                            firm: t,
                            gob: t,
                            gov: t,
                            info: t,
                            int: t,
                            mil: t,
                            net: t,
                            nom: t,
                            org: t,
                            rar: t,
                            rec: t,
                            store: t,
                            tec: t,
                            web: t
                        }],
                        vg: [1, {
                            at: r
                        }],
                        vi: [1, {
                            co: t,
                            com: t,
                            k12: t,
                            net: t,
                            org: t
                        }],
                        vn: [1, {
                            ac: t,
                            ai: t,
                            biz: t,
                            com: t,
                            edu: t,
                            gov: t,
                            health: t,
                            id: t,
                            info: t,
                            int: t,
                            io: t,
                            name: t,
                            net: t,
                            org: t,
                            pro: t,
                            angiang: t,
                            bacgiang: t,
                            backan: t,
                            baclieu: t,
                            bacninh: t,
                            "baria-vungtau": t,
                            bentre: t,
                            binhdinh: t,
                            binhduong: t,
                            binhphuoc: t,
                            binhthuan: t,
                            camau: t,
                            cantho: t,
                            caobang: t,
                            daklak: t,
                            daknong: t,
                            danang: t,
                            dienbien: t,
                            dongnai: t,
                            dongthap: t,
                            gialai: t,
                            hagiang: t,
                            haiduong: t,
                            haiphong: t,
                            hanam: t,
                            hanoi: t,
                            hatinh: t,
                            haugiang: t,
                            hoabinh: t,
                            hungyen: t,
                            khanhhoa: t,
                            kiengiang: t,
                            kontum: t,
                            laichau: t,
                            lamdong: t,
                            langson: t,
                            laocai: t,
                            longan: t,
                            namdinh: t,
                            nghean: t,
                            ninhbinh: t,
                            ninhthuan: t,
                            phutho: t,
                            phuyen: t,
                            quangbinh: t,
                            quangnam: t,
                            quangngai: t,
                            quangninh: t,
                            quangtri: t,
                            soctrang: t,
                            sonla: t,
                            tayninh: t,
                            thaibinh: t,
                            thainguyen: t,
                            thanhhoa: t,
                            thanhphohochiminh: t,
                            thuathienhue: t,
                            tiengiang: t,
                            travinh: t,
                            tuyenquang: t,
                            vinhlong: t,
                            vinhphuc: t,
                            yenbai: t,
                            blogspot: r
                        }],
                        vu: [1, {
                            com: t,
                            edu: t,
                            net: t,
                            org: t,
                            cn: r,
                            blog: r,
                            dev: r,
                            me: r
                        }],
                        wf: [1, {
                            biz: r,
                            sch: r
                        }],
                        ws: [1, {
                            com: t,
                            net: t,
                            org: t,
                            gov: t,
                            edu: t,
                            advisor: s,
                            cloud66: r,
                            dyndns: r,
                            mypets: r
                        }],
                        yt: [1, {
                            org: r
                        }],
                        "xn--mgbaam7a8h": t,
                        امارات: t,
                        "xn--y9a3aq": t,
                        հայ: t,
                        "xn--54b7fta0cc": t,
                        বাংলা: t,
                        "xn--90ae": t,
                        бг: t,
                        "xn--mgbcpq6gpa1a": t,
                        البحرين: t,
                        "xn--90ais": t,
                        бел: t,
                        "xn--fiqs8s": t,
                        中国: t,
                        "xn--fiqz9s": t,
                        中國: t,
                        "xn--lgbbat1ad8j": t,
                        الجزائر: t,
                        "xn--wgbh1c": t,
                        مصر: t,
                        "xn--e1a4c": t,
                        ею: t,
                        "xn--qxa6a": t,
                        ευ: t,
                        "xn--mgbah1a3hjkrd": t,
                        موريتانيا: t,
                        "xn--node": t,
                        გე: t,
                        "xn--qxam": t,
                        ελ: t,
                        "xn--j6w193g": [1, {
                            "xn--55qx5d": t,
                            "xn--wcvs22d": t,
                            "xn--mxtq1m": t,
                            "xn--gmqw5a": t,
                            "xn--od0alg": t,
                            "xn--uc0atv": t
                        }],
                        香港: [1, {
                            公司: t,
                            教育: t,
                            政府: t,
                            個人: t,
                            網絡: t,
                            組織: t
                        }],
                        "xn--2scrj9c": t,
                        ಭಾರತ: t,
                        "xn--3hcrj9c": t,
                        ଭାରତ: t,
                        "xn--45br5cyl": t,
                        ভাৰত: t,
                        "xn--h2breg3eve": t,
                        भारतम्: t,
                        "xn--h2brj9c8c": t,
                        भारोत: t,
                        "xn--mgbgu82a": t,
                        ڀارت: t,
                        "xn--rvc1e0am3e": t,
                        ഭാ രതം: t,
                        "xn--h2brj9c": t,
                        भारत: t,
                        "xn--mgbbh1a": t,
                        بارت: t,
                        "xn--mgbbh1a71e": t,
                        بھارت: t,
                        "xn--fpcrj9c3d": t,
                        భా రత్: t,
                        "xn--gecrj9c": t,
                        ભારત: t,
                        "xn--s9brj9c": t,
                        ਭਾਰਤ: t,
                        "xn--45brj9c": t,
                        ভারত: t,
                        "xn--xkc2dl3a5ee0h": t,
                        இந்தியா: t,
                        "xn--mgba3a4f16a": t,
                        ایران: t,
                        "xn--mgba3a4fra": t,
                        ايران: t,
                        "xn--mgbtx2b": t,
                        عراق: t,
                        "xn--mgbayh7gpa": t,
                        الاردن: t,
                        "xn--3e0b707e": t,
                        한국: t,
                        "xn--80ao21a": t,
                        қаз: t,
                        "xn--q7ce6a": t,
                        ລາວ: t,
                        "xn--fzc2c9e2c": t,
                        ලංකා: t,
                        "xn--xkc2al3hye2a": t,
                        இலங்கை: t,
                        "xn--mgbc0a9azcg": t,
                        المغرب: t,
                        "xn--d1alf": t,
                        мкд: t,
                        "xn--l1acc": t,
                        мон: t,
                        "xn--mix891f": t,
                        澳門: t,
                        "xn--mix082f": t,
                        澳门: t,
                        "xn--mgbx4cd0ab": t,
                        مليسيا: t,
                        "xn--mgb9awbf": t,
                        عمان: t,
                        "xn--mgbai9azgqp6j": t,
                        پاکستان: t,
                        "xn--mgbai9a5eva00b": t,
                        پاكستان: t,
                        "xn--ygbi2ammx": t,
                        فلسطين: t,
                        "xn--90a3ac": [1, {
                            "xn--o1ac": t,
                            "xn--c1avg": t,
                            "xn--90azh": t,
                            "xn--d1at": t,
                            "xn--o1ach": t,
                            "xn--80au": t
                        }],
                        срб: [1, {
                            пр: t,
                            орг: t,
                            обр: t,
                            од: t,
                            упр: t,
                            ак: t
                        }],
                        "xn--p1ai": t,
                        рф: t,
                        "xn--wgbl6a": t,
                        قطر: t,
                        "xn--mgberp4a5d4ar": t,
                        السعودية: t,
                        "xn--mgberp4a5d4a87g": t,
                        السعودیة: t,
                        "xn--mgbqly7c0a67fbc": t,
                        السعودیۃ: t,
                        "xn--mgbqly7cvafr": t,
                        السعوديه: t,
                        "xn--mgbpl2fh": t,
                        سودان: t,
                        "xn--yfro4i67o": t,
                        新加坡: t,
                        "xn--clchc0ea0b2g2a9gcd": t,
                        சிங்கப்பூர்: t,
                        "xn--ogbpf8fl": t,
                        سورية: t,
                        "xn--mgbtf8fl": t,
                        سوريا: t,
                        "xn--o3cw4h": [1, {
                            "xn--12c1fe0br": t,
                            "xn--12co0c3b4eva": t,
                            "xn--h3cuzk1di": t,
                            "xn--o3cyx2a": t,
                            "xn--m3ch0j3a": t,
                            "xn--12cfi8ixb8l": t
                        }],
                        ไทย: [1, {
                            ศึกษา: t,
                            ธุรกิจ: t,
                            รั ฐบาล: t,
                            ทหาร: t,
                            เน็ ต: t,
                            องค์ กร: t
                        }],
                        "xn--pgbs0dh": t,
                        تونس: t,
                        "xn--kpry57d": t,
                        台灣: t,
                        "xn--kprw13d": t,
                        台湾: t,
                        "xn--nnx388a": t,
                        臺灣: t,
                        "xn--j1amh": t,
                        укр: t,
                        "xn--mgb2ddes": t,
                        اليمن: t,
                        xxx: t,
                        ye: ed,
                        za: [0, {
                            ac: t,
                            agric: t,
                            alt: t,
                            co: l,
                            edu: t,
                            gov: t,
                            grondar: t,
                            law: t,
                            mil: t,
                            net: t,
                            ngo: t,
                            nic: t,
                            nis: t,
                            nom: t,
                            org: t,
                            school: t,
                            tm: t,
                            web: t
                        }],
                        zm: [1, {
                            ac: t,
                            biz: t,
                            co: t,
                            com: t,
                            edu: t,
                            gov: t,
                            info: t,
                            mil: t,
                            net: t,
                            org: t,
                            sch: t
                        }],
                        zw: [1, {
                            ac: t,
                            co: t,
                            gov: t,
                            mil: t,
                            org: t
                        }],
                        aaa: t,
                        aarp: t,
                        abb: t,
                        abbott: t,
                        abbvie: t,
                        abc: t,
                        able: t,
                        abogado: t,
                        abudhabi: t,
                        academy: [1, {
                            official: r
                        }],
                        accenture: t,
                        accountant: t,
                        accountants: t,
                        aco: t,
                        actor: t,
                        ads: t,
                        adult: t,
                        aeg: t,
                        aetna: t,
                        afl: t,
                        africa: t,
                        agakhan: t,
                        agency: t,
                        aig: t,
                        airbus: t,
                        airforce: t,
                        airtel: t,
                        akdn: t,
                        alibaba: t,
                        alipay: t,
                        allfinanz: t,
                        allstate: t,
                        ally: t,
                        alsace: t,
                        alstom: t,
                        amazon: t,
                        americanexpress: t,
                        americanfamily: t,
                        amex: t,
                        amfam: t,
                        amica: t,
                        amsterdam: t,
                        analytics: t,
                        android: t,
                        anquan: t,
                        anz: t,
                        aol: t,
                        apartments: t,
                        app: [1, {
                            beget: s,
                            clerk: r,
                            clerkstage: r,
                            wnext: r,
                            platform0: r,
                            deta: r,
                            ondigitalocean: r,
                            easypanel: r,
                            encr: r,
                            edgecompute: r,
                            fireweb: r,
                            onflashdrive: r,
                            framer: r,
                            run: [2, {
                                a: r
                            }],
                            web: r,
                            hasura: r,
                            loginline: r,
                            messerli: r,
                            netlify: r,
                            ngrok: r,
                            "ngrok-free": r,
                            developer: s,
                            noop: r,
                            northflank: s,
                            snowflake: [2, {
                                privatelink: r
                            }],
                            streamlit: r,
                            storipress: r,
                            telebit: r,
                            typedream: r,
                            vercel: r,
                            bookonline: r
                        }],
                        apple: t,
                        aquarelle: t,
                        arab: t,
                        aramco: t,
                        archi: t,
                        army: t,
                        art: t,
                        arte: t,
                        asda: t,
                        associates: t,
                        athleta: t,
                        attorney: t,
                        auction: t,
                        audi: t,
                        audible: t,
                        audio: t,
                        auspost: t,
                        author: t,
                        auto: t,
                        autos: t,
                        avianca: t,
                        aws: [1, {
                            sagemaker: [0, {
                                "af-south-1": d,
                                "ap-east-1": d,
                                "ap-northeast-1": d,
                                "ap-northeast-2": d,
                                "ap-northeast-3": d,
                                "ap-south-1": d,
                                "ap-south-2": u,
                                "ap-southeast-1": d,
                                "ap-southeast-2": d,
                                "ap-southeast-3": d,
                                "ap-southeast-4": u,
                                "ca-central-1": d,
                                "eu-central-1": d,
                                "eu-central-2": u,
                                "eu-north-1": d,
                                "eu-south-1": d,
                                "eu-south-2": u,
                                "eu-west-1": d,
                                "eu-west-2": d,
                                "eu-west-3": d,
                                "il-central-1": d,
                                "me-central-1": d,
                                "me-south-1": d,
                                "sa-east-1": d,
                                "us-east-1": m,
                                "us-east-2": m,
                                "us-gov-east-1": p,
                                "us-gov-west-1": p,
                                "us-west-1": d,
                                "us-west-2": m
                            }]
                        }],
                        axa: t,
                        azure: t,
                        baby: t,
                        baidu: t,
                        banamex: t,
                        bananarepublic: t,
                        band: t,
                        bank: t,
                        bar: t,
                        barcelona: t,
                        barclaycard: t,
                        barclays: t,
                        barefoot: t,
                        bargains: t,
                        baseball: t,
                        basketball: [1, {
                            aus: r,
                            nz: r
                        }],
                        bauhaus: t,
                        bayern: t,
                        bbc: t,
                        bbt: t,
                        bbva: t,
                        bcg: t,
                        bcn: t,
                        beats: t,
                        beauty: t,
                        beer: t,
                        bentley: t,
                        berlin: t,
                        best: t,
                        bestbuy: t,
                        bet: t,
                        bharti: t,
                        bible: t,
                        bid: t,
                        bike: t,
                        bing: t,
                        bingo: t,
                        bio: t,
                        black: t,
                        blackfriday: t,
                        blockbuster: t,
                        blog: t,
                        bloomberg: t,
                        blue: t,
                        bms: t,
                        bmw: t,
                        bnpparibas: t,
                        boats: t,
                        boehringer: t,
                        bofa: t,
                        bom: t,
                        bond: t,
                        boo: t,
                        book: t,
                        booking: t,
                        bosch: t,
                        bostik: t,
                        boston: t,
                        bot: t,
                        boutique: t,
                        box: t,
                        bradesco: t,
                        bridgestone: t,
                        broadway: t,
                        broker: t,
                        brother: t,
                        brussels: t,
                        build: t,
                        builders: [1, {
                            cloudsite: r
                        }],
                        business: y,
                        buy: t,
                        buzz: t,
                        bzh: t,
                        cab: t,
                        cafe: t,
                        cal: t,
                        call: t,
                        calvinklein: t,
                        cam: t,
                        camera: t,
                        camp: t,
                        canon: t,
                        capetown: t,
                        capital: t,
                        capitalone: t,
                        car: t,
                        caravan: t,
                        cards: t,
                        care: t,
                        career: t,
                        careers: t,
                        cars: t,
                        casa: [1, {
                            nabu: [0, {
                                ui: r
                            }]
                        }],
                        case: t,
                        cash: t,
                        casino: t,
                        catering: t,
                        catholic: t,
                        cba: t,
                        cbn: t,
                        cbre: t,
                        center: t,
                        ceo: t,
                        cern: t,
                        cfa: t,
                        cfd: t,
                        chanel: t,
                        channel: t,
                        charity: t,
                        chase: t,
                        chat: t,
                        cheap: t,
                        chintai: t,
                        christmas: t,
                        chrome: t,
                        church: t,
                        cipriani: t,
                        circle: t,
                        cisco: t,
                        citadel: t,
                        citi: t,
                        citic: t,
                        city: t,
                        claims: t,
                        cleaning: t,
                        click: t,
                        clinic: t,
                        clinique: t,
                        clothing: t,
                        cloud: [1, {
                            banzai: s,
                            elementor: r,
                            encoway: [0, {
                                eu: r
                            }],
                            statics: s,
                            ravendb: r,
                            axarnet: [0, {
                                "es-1": r
                            }],
                            diadem: r,
                            jelastic: [0, {
                                vip: r
                            }],
                            jele: r,
                            "jenv-aruba": [0, {
                                aruba: [0, {
                                    eur: [0, {
                                        it1: r
                                    }]
                                }],
                                it1: r
                            }],
                            keliweb: [2, {
                                cs: r
                            }],
                            oxa: [2, {
                                tn: r,
                                uk: r
                            }],
                            primetel: [2, {
                                uk: r
                            }],
                            reclaim: [0, {
                                ca: r,
                                uk: r,
                                us: r
                            }],
                            trendhosting: [0, {
                                ch: r,
                                de: r
                            }],
                            jotelulu: r,
                            kuleuven: r,
                            linkyard: r,
                            magentosite: s,
                            perspecta: r,
                            vapor: r,
                            "on-rancher": s,
                            scw: [0, {
                                baremetal: [0, {
                                    "fr-par-1": r,
                                    "fr-par-2": r,
                                    "nl-ams-1": r
                                }],
                                "fr-par": [0, {
                                    fnc: [2, {
                                        functions: r
                                    }],
                                    k8s: b,
                                    s3: r,
                                    "s3-website": r,
                                    whm: r
                                }],
                                instances: [0, {
                                    priv: r,
                                    pub: r
                                }],
                                k8s: r,
                                "nl-ams": [0, {
                                    k8s: b,
                                    s3: r,
                                    "s3-website": r,
                                    whm: r
                                }],
                                "pl-waw": [0, {
                                    k8s: b,
                                    s3: r,
                                    "s3-website": r
                                }],
                                scalebook: r,
                                smartlabeling: r
                            }],
                            sensiosite: s,
                            trafficplex: r,
                            urown: r,
                            voorloper: r
                        }],
                        club: [1, {
                            cloudns: r,
                            jele: r,
                            barsy: r
                        }],
                        clubmed: t,
                        coach: t,
                        codes: [1, {
                            owo: s
                        }],
                        coffee: t,
                        college: t,
                        cologne: t,
                        comcast: t,
                        commbank: t,
                        community: [1, {
                            nog: r,
                            ravendb: r,
                            myforum: r
                        }],
                        company: t,
                        compare: t,
                        computer: t,
                        comsec: t,
                        condos: t,
                        construction: t,
                        consulting: t,
                        contact: t,
                        contractors: t,
                        cooking: t,
                        cool: [1, {
                            elementor: r,
                            de: r
                        }],
                        corsica: t,
                        country: t,
                        coupon: t,
                        coupons: t,
                        courses: t,
                        cpa: t,
                        credit: t,
                        creditcard: t,
                        creditunion: t,
                        cricket: t,
                        crown: t,
                        crs: t,
                        cruise: t,
                        cruises: t,
                        cuisinella: t,
                        cymru: t,
                        cyou: t,
                        dabur: t,
                        dad: t,
                        dance: t,
                        data: t,
                        date: t,
                        dating: t,
                        datsun: t,
                        day: t,
                        dclk: t,
                        dds: t,
                        deal: t,
                        dealer: t,
                        deals: t,
                        degree: t,
                        delivery: t,
                        dell: t,
                        deloitte: t,
                        delta: t,
                        democrat: t,
                        dental: t,
                        dentist: t,
                        desi: t,
                        design: [1, {
                            bss: r
                        }],
                        dev: [1, {
                            autocode: r,
                            lcl: s,
                            lclstage: s,
                            stg: s,
                            stgstage: s,
                            pages: r,
                            r2: r,
                            workers: r,
                            curv: r,
                            deno: r,
                            "deno-staging": r,
                            deta: r,
                            fly: r,
                            githubpreview: r,
                            gateway: s,
                            iserv: r,
                            localcert: [0, {
                                user: s
                            }],
                            loginline: r,
                            mediatech: r,
                            ngrok: r,
                            "ngrok-free": r,
                            "platter-app": r,
                            shiftcrypto: r,
                            vercel: r,
                            webhare: s
                        }],
                        dhl: t,
                        diamonds: t,
                        diet: t,
                        digital: [1, {
                            cloudapps: [2, {
                                london: r
                            }]
                        }],
                        direct: t,
                        directory: t,
                        discount: t,
                        discover: t,
                        dish: t,
                        diy: t,
                        dnp: t,
                        docs: t,
                        doctor: t,
                        dog: t,
                        domains: t,
                        dot: t,
                        download: t,
                        drive: t,
                        dtv: t,
                        dubai: t,
                        dunlop: t,
                        dupont: t,
                        durban: t,
                        dvag: t,
                        dvr: t,
                        earth: [1, {
                            dapps: [0, {
                                "*": r,
                                bzz: s
                            }]
                        }],
                        eat: t,
                        eco: t,
                        edeka: t,
                        education: y,
                        email: t,
                        emerck: t,
                        energy: t,
                        engineer: t,
                        engineering: t,
                        enterprises: t,
                        epson: t,
                        equipment: t,
                        ericsson: t,
                        erni: t,
                        esq: t,
                        estate: [1, {
                            compute: s
                        }],
                        eurovision: t,
                        eus: [1, {
                            party: eo
                        }],
                        events: [1, {
                            koobin: r,
                            co: r
                        }],
                        exchange: t,
                        expert: t,
                        exposed: t,
                        express: t,
                        extraspace: t,
                        fage: t,
                        fail: t,
                        fairwinds: t,
                        faith: es,
                        family: t,
                        fan: t,
                        fans: t,
                        farm: [1, {
                            storj: r
                        }],
                        farmers: t,
                        fashion: t,
                        fast: t,
                        fedex: t,
                        feedback: t,
                        ferrari: t,
                        ferrero: t,
                        fidelity: t,
                        fido: t,
                        film: t,
                        final: t,
                        finance: t,
                        financial: y,
                        fire: t,
                        firestone: t,
                        firmdale: t,
                        fish: t,
                        fishing: t,
                        fit: t,
                        fitness: t,
                        flickr: t,
                        flights: t,
                        flir: t,
                        florist: t,
                        flowers: t,
                        fly: t,
                        foo: t,
                        food: t,
                        football: t,
                        ford: t,
                        forex: t,
                        forsale: t,
                        forum: t,
                        foundation: t,
                        fox: t,
                        free: t,
                        fresenius: t,
                        frl: t,
                        frogans: t,
                        frontier: t,
                        ftr: t,
                        fujitsu: t,
                        fun: t,
                        fund: t,
                        furniture: t,
                        futbol: t,
                        fyi: t,
                        gal: t,
                        gallery: t,
                        gallo: t,
                        gallup: t,
                        game: t,
                        games: t,
                        gap: t,
                        garden: t,
                        gay: t,
                        gbiz: t,
                        gdn: [1, {
                            cnpy: r
                        }],
                        gea: t,
                        gent: t,
                        genting: t,
                        george: t,
                        ggee: t,
                        gift: t,
                        gifts: t,
                        gives: t,
                        giving: t,
                        glass: t,
                        gle: t,
                        global: t,
                        globo: t,
                        gmail: t,
                        gmbh: t,
                        gmo: t,
                        gmx: t,
                        godaddy: t,
                        gold: t,
                        goldpoint: t,
                        golf: t,
                        goo: t,
                        goodyear: t,
                        goog: [1, {
                            cloud: r,
                            translate: r,
                            usercontent: s
                        }],
                        google: t,
                        gop: t,
                        got: t,
                        grainger: t,
                        graphics: t,
                        gratis: t,
                        green: t,
                        gripe: t,
                        grocery: t,
                        group: [1, {
                            discourse: r
                        }],
                        guardian: t,
                        gucci: t,
                        guge: t,
                        guide: t,
                        guitars: t,
                        guru: t,
                        hair: t,
                        hamburg: t,
                        hangout: t,
                        haus: t,
                        hbo: t,
                        hdfc: t,
                        hdfcbank: t,
                        health: [1, {
                            hra: r
                        }],
                        healthcare: t,
                        help: t,
                        helsinki: t,
                        here: t,
                        hermes: t,
                        hiphop: t,
                        hisamitsu: t,
                        hitachi: t,
                        hiv: t,
                        hkt: t,
                        hockey: t,
                        holdings: t,
                        holiday: t,
                        homedepot: t,
                        homegoods: t,
                        homes: t,
                        homesense: t,
                        honda: t,
                        horse: t,
                        hospital: t,
                        host: [1, {
                            cloudaccess: r,
                            freesite: r,
                            easypanel: r,
                            fastvps: r,
                            myfast: r,
                            tempurl: r,
                            wpmudev: r,
                            jele: r,
                            mircloud: r,
                            pcloud: r,
                            half: r
                        }],
                        hosting: [1, {
                            opencraft: r
                        }],
                        hot: t,
                        hotels: t,
                        hotmail: t,
                        house: t,
                        how: t,
                        hsbc: t,
                        hughes: t,
                        hyatt: t,
                        hyundai: t,
                        ibm: t,
                        icbc: t,
                        ice: t,
                        icu: t,
                        ieee: t,
                        ifm: t,
                        ikano: t,
                        imamat: t,
                        imdb: t,
                        immo: t,
                        immobilien: t,
                        inc: t,
                        industries: t,
                        infiniti: t,
                        ing: t,
                        ink: t,
                        institute: t,
                        insurance: t,
                        insure: t,
                        international: t,
                        intuit: t,
                        investments: t,
                        ipiranga: t,
                        irish: t,
                        ismaili: t,
                        ist: t,
                        istanbul: t,
                        itau: t,
                        itv: t,
                        jaguar: t,
                        java: t,
                        jcb: t,
                        jeep: t,
                        jetzt: t,
                        jewelry: t,
                        jio: t,
                        jll: t,
                        jmp: t,
                        jnj: t,
                        joburg: t,
                        jot: t,
                        joy: t,
                        jpmorgan: t,
                        jprs: t,
                        juegos: t,
                        juniper: t,
                        kaufen: t,
                        kddi: t,
                        kerryhotels: t,
                        kerrylogistics: t,
                        kerryproperties: t,
                        kfh: t,
                        kia: t,
                        kids: t,
                        kim: t,
                        kindle: t,
                        kitchen: t,
                        kiwi: t,
                        koeln: t,
                        komatsu: t,
                        kosher: t,
                        kpmg: t,
                        kpn: t,
                        krd: [1, {
                            co: r,
                            edu: r
                        }],
                        kred: t,
                        kuokgroup: t,
                        kyoto: t,
                        lacaixa: t,
                        lamborghini: t,
                        lamer: t,
                        lancaster: t,
                        land: [1, {
                            static: [2, {
                                dev: r,
                                sites: r
                            }]
                        }],
                        landrover: t,
                        lanxess: t,
                        lasalle: t,
                        lat: t,
                        latino: t,
                        latrobe: t,
                        law: t,
                        lawyer: t,
                        lds: t,
                        lease: t,
                        leclerc: t,
                        lefrak: t,
                        legal: t,
                        lego: t,
                        lexus: t,
                        lgbt: t,
                        lidl: t,
                        life: t,
                        lifeinsurance: t,
                        lifestyle: t,
                        lighting: t,
                        like: t,
                        lilly: t,
                        limited: t,
                        limo: t,
                        lincoln: t,
                        link: [1, {
                            cyon: r,
                            mypep: r,
                            dweb: s
                        }],
                        lipsy: t,
                        live: [1, {
                            hlx: r
                        }],
                        living: t,
                        llc: t,
                        llp: t,
                        loan: t,
                        loans: t,
                        locker: t,
                        locus: t,
                        lol: [1, {
                            omg: r
                        }],
                        london: t,
                        lotte: t,
                        lotto: t,
                        love: t,
                        lpl: t,
                        lplfinancial: t,
                        ltd: t,
                        ltda: t,
                        lundbeck: t,
                        luxe: t,
                        luxury: t,
                        madrid: t,
                        maif: t,
                        maison: t,
                        makeup: t,
                        man: t,
                        management: [1, {
                            router: r
                        }],
                        mango: t,
                        map: t,
                        market: t,
                        marketing: t,
                        markets: t,
                        marriott: t,
                        marshalls: t,
                        mattel: t,
                        mba: t,
                        mckinsey: t,
                        med: t,
                        media: eh,
                        meet: t,
                        melbourne: t,
                        meme: t,
                        memorial: t,
                        men: t,
                        menu: ef,
                        merckmsd: t,
                        miami: t,
                        microsoft: t,
                        mini: t,
                        mint: t,
                        mit: t,
                        mitsubishi: t,
                        mlb: t,
                        mls: t,
                        mma: t,
                        mobile: t,
                        moda: t,
                        moe: t,
                        moi: t,
                        mom: t,
                        monash: t,
                        money: t,
                        monster: t,
                        mormon: t,
                        mortgage: t,
                        moscow: t,
                        moto: t,
                        motorcycles: t,
                        mov: t,
                        movie: t,
                        msd: t,
                        mtn: t,
                        mtr: t,
                        music: t,
                        nab: t,
                        nagoya: t,
                        natura: t,
                        navy: t,
                        nba: t,
                        nec: t,
                        netbank: t,
                        netflix: t,
                        network: [1, {
                            alces: s,
                            co: r,
                            arvo: r,
                            azimuth: r,
                            tlon: r
                        }],
                        neustar: t,
                        new: t,
                        news: [1, {
                            noticeable: r
                        }],
                        next: t,
                        nextdirect: t,
                        nexus: t,
                        nfl: t,
                        ngo: t,
                        nhk: t,
                        nico: t,
                        nike: t,
                        nikon: t,
                        ninja: t,
                        nissan: t,
                        nissay: t,
                        nokia: t,
                        norton: t,
                        now: t,
                        nowruz: t,
                        nowtv: t,
                        nra: t,
                        nrw: t,
                        ntt: t,
                        nyc: t,
                        obi: t,
                        observer: t,
                        office: t,
                        okinawa: t,
                        olayan: t,
                        olayangroup: t,
                        oldnavy: t,
                        ollo: t,
                        omega: t,
                        one: [1, {
                            onred: [2, {
                                staging: r
                            }],
                            service: r,
                            homelink: r
                        }],
                        ong: t,
                        onl: t,
                        online: [1, {
                            eero: r,
                            "eero-stage": r,
                            barsy: r
                        }],
                        ooo: t,
                        open: t,
                        oracle: t,
                        orange: [1, {
                            tech: r
                        }],
                        organic: t,
                        origins: t,
                        osaka: t,
                        otsuka: t,
                        ott: t,
                        ovh: [1, {
                            nerdpol: r
                        }],
                        page: [1, {
                            hlx: r,
                            hlx3: r,
                            translated: r,
                            codeberg: r,
                            pdns: r,
                            plesk: r,
                            prvcy: r,
                            rocky: r,
                            magnet: r
                        }],
                        panasonic: t,
                        paris: t,
                        pars: t,
                        partners: t,
                        parts: t,
                        party: es,
                        pay: t,
                        pccw: t,
                        pet: t,
                        pfizer: t,
                        pharmacy: t,
                        phd: t,
                        philips: t,
                        phone: t,
                        photo: t,
                        photography: t,
                        photos: eh,
                        physio: t,
                        pics: t,
                        pictet: t,
                        pictures: [1, {
                            1337: r
                        }],
                        pid: t,
                        pin: t,
                        ping: t,
                        pink: t,
                        pioneer: t,
                        pizza: [1, {
                            ngrok: r
                        }],
                        place: y,
                        play: t,
                        playstation: t,
                        plumbing: t,
                        plus: t,
                        pnc: t,
                        pohl: t,
                        poker: t,
                        politie: t,
                        porn: [1, {
                            indie: r
                        }],
                        pramerica: t,
                        praxi: t,
                        press: t,
                        prime: t,
                        prod: t,
                        productions: t,
                        prof: t,
                        progressive: t,
                        promo: t,
                        properties: t,
                        property: t,
                        protection: t,
                        pru: t,
                        prudential: t,
                        pub: ef,
                        pwc: t,
                        qpon: t,
                        quebec: t,
                        quest: t,
                        racing: t,
                        radio: t,
                        read: t,
                        realestate: t,
                        realtor: t,
                        realty: t,
                        recipes: t,
                        red: t,
                        redstone: t,
                        redumbrella: t,
                        rehab: t,
                        reise: t,
                        reisen: t,
                        reit: t,
                        reliance: t,
                        ren: t,
                        rent: t,
                        rentals: t,
                        repair: t,
                        report: t,
                        republican: t,
                        rest: t,
                        restaurant: t,
                        review: es,
                        reviews: t,
                        rexroth: t,
                        rich: t,
                        richardli: t,
                        ricoh: t,
                        ril: t,
                        rio: t,
                        rip: [1, {
                            clan: r
                        }],
                        rocks: [1, {
                            myddns: r,
                            "lima-city": r,
                            webspace: r
                        }],
                        rodeo: t,
                        rogers: t,
                        room: t,
                        rsvp: t,
                        rugby: t,
                        ruhr: t,
                        run: [1, {
                            hs: r,
                            development: r,
                            ravendb: r,
                            servers: r,
                            build: s,
                            code: s,
                            database: s,
                            migration: s,
                            onporter: r,
                            repl: r,
                            wix: r
                        }],
                        rwe: t,
                        ryukyu: t,
                        saarland: t,
                        safe: t,
                        safety: t,
                        sakura: t,
                        sale: t,
                        salon: t,
                        samsclub: t,
                        samsung: t,
                        sandvik: t,
                        sandvikcoromant: t,
                        sanofi: t,
                        sap: t,
                        sarl: t,
                        sas: t,
                        save: t,
                        saxo: t,
                        sbi: t,
                        sbs: t,
                        scb: t,
                        schaeffler: t,
                        schmidt: t,
                        scholarships: t,
                        school: t,
                        schule: t,
                        schwarz: t,
                        science: es,
                        scot: [1, {
                            edu: r,
                            gov: [2, {
                                service: r
                            }]
                        }],
                        search: t,
                        seat: t,
                        secure: t,
                        security: t,
                        seek: t,
                        select: t,
                        sener: t,
                        services: [1, {
                            loginline: r
                        }],
                        seven: t,
                        sew: t,
                        sex: t,
                        sexy: t,
                        sfr: t,
                        shangrila: t,
                        sharp: t,
                        shaw: t,
                        shell: t,
                        shia: t,
                        shiksha: t,
                        shoes: t,
                        shop: [1, {
                            base: r,
                            hoplix: r,
                            barsy: r
                        }],
                        shopping: t,
                        shouji: t,
                        show: t,
                        silk: t,
                        sina: t,
                        singles: t,
                        site: [1, {
                            cloudera: s,
                            cyon: r,
                            fnwk: r,
                            folionetwork: r,
                            fastvps: r,
                            jele: r,
                            lelux: r,
                            loginline: r,
                            barsy: r,
                            mintere: r,
                            omniwe: r,
                            opensocial: r,
                            platformsh: s,
                            tst: s,
                            byen: r,
                            srht: r,
                            novecore: r
                        }],
                        ski: t,
                        skin: t,
                        sky: t,
                        skype: t,
                        sling: t,
                        smart: t,
                        smile: t,
                        sncf: t,
                        soccer: t,
                        social: t,
                        softbank: t,
                        software: t,
                        sohu: t,
                        solar: t,
                        solutions: [1, {
                            diher: s
                        }],
                        song: t,
                        sony: t,
                        soy: t,
                        spa: t,
                        space: [1, {
                            myfast: r,
                            uber: r,
                            xs4all: r
                        }],
                        sport: t,
                        spot: t,
                        srl: t,
                        stada: t,
                        staples: t,
                        star: t,
                        statebank: t,
                        statefarm: t,
                        stc: t,
                        stcgroup: t,
                        stockholm: t,
                        storage: t,
                        store: [1, {
                            sellfy: r,
                            shopware: r,
                            storebase: r
                        }],
                        stream: t,
                        studio: t,
                        study: t,
                        style: t,
                        sucks: t,
                        supplies: t,
                        supply: t,
                        support: ef,
                        surf: t,
                        surgery: t,
                        suzuki: t,
                        swatch: t,
                        swiss: t,
                        sydney: t,
                        systems: [1, {
                            knightpoint: r
                        }],
                        tab: t,
                        taipei: t,
                        talk: t,
                        taobao: t,
                        target: t,
                        tatamotors: t,
                        tatar: t,
                        tattoo: t,
                        tax: t,
                        taxi: t,
                        tci: t,
                        tdk: t,
                        team: [1, {
                            discourse: r,
                            jelastic: r
                        }],
                        tech: t,
                        technology: y,
                        temasek: t,
                        tennis: t,
                        teva: t,
                        thd: t,
                        theater: t,
                        theatre: t,
                        tiaa: t,
                        tickets: t,
                        tienda: t,
                        tips: t,
                        tires: t,
                        tirol: t,
                        tjmaxx: t,
                        tjx: t,
                        tkmaxx: t,
                        tmall: t,
                        today: [1, {
                            prequalifyme: r
                        }],
                        tokyo: t,
                        tools: t,
                        top: [1, {
                            "now-dns": r,
                            ntdll: r
                        }],
                        toray: t,
                        toshiba: t,
                        total: t,
                        tours: t,
                        town: t,
                        toyota: t,
                        toys: t,
                        trade: es,
                        trading: t,
                        training: t,
                        travel: t,
                        travelers: t,
                        travelersinsurance: t,
                        trust: t,
                        trv: t,
                        tube: t,
                        tui: t,
                        tunes: t,
                        tushu: t,
                        tvs: t,
                        ubank: t,
                        ubs: t,
                        unicom: t,
                        university: t,
                        uno: t,
                        uol: t,
                        ups: t,
                        vacations: t,
                        vana: t,
                        vanguard: t,
                        vegas: t,
                        ventures: t,
                        verisign: t,
                        versicherung: t,
                        vet: t,
                        viajes: t,
                        video: t,
                        vig: t,
                        viking: t,
                        villas: t,
                        vin: t,
                        vip: t,
                        virgin: t,
                        visa: t,
                        vision: t,
                        viva: t,
                        vivo: t,
                        vlaanderen: t,
                        vodka: t,
                        volvo: t,
                        vote: t,
                        voting: t,
                        voto: t,
                        voyage: t,
                        wales: t,
                        walmart: t,
                        walter: t,
                        wang: t,
                        wanggou: t,
                        watch: t,
                        watches: t,
                        weather: t,
                        weatherchannel: t,
                        webcam: t,
                        weber: t,
                        website: eh,
                        wed: t,
                        wedding: t,
                        weibo: t,
                        weir: t,
                        whoswho: t,
                        wien: t,
                        wiki: eh,
                        williamhill: t,
                        win: t,
                        windows: t,
                        wine: t,
                        winners: t,
                        wme: t,
                        wolterskluwer: t,
                        woodside: t,
                        work: t,
                        works: t,
                        world: t,
                        wow: t,
                        wtc: t,
                        wtf: t,
                        xbox: t,
                        xerox: t,
                        xfinity: t,
                        xihuan: t,
                        xin: t,
                        "xn--11b4c3d": t,
                        कॉम: t,
                        "xn--1ck2e1b": t,
                        セール: t,
                        "xn--1qqw23a": t,
                        佛山: t,
                        "xn--30rr7y": t,
                        慈善: t,
                        "xn--3bst00m": t,
                        集团: t,
                        "xn--3ds443g": t,
                        在线: t,
                        "xn--3pxu8k": t,
                        点看: t,
                        "xn--42c2d9a": t,
                        คอม: t,
                        "xn--45q11c": t,
                        八卦: t,
                        "xn--4gbrim": t,
                        موقع: t,
                        "xn--55qw42g": t,
                        公益: t,
                        "xn--55qx5d": t,
                        公司: t,
                        "xn--5su34j936bgsg": t,
                        香格里拉: t,
                        "xn--5tzm5g": t,
                        网站: t,
                        "xn--6frz82g": t,
                        移动: t,
                        "xn--6qq986b3xl": t,
                        我爱你: t,
                        "xn--80adxhks": t,
                        москва: t,
                        "xn--80aqecdr1a": t,
                        католик: t,
                        "xn--80asehdb": t,
                        онлайн: t,
                        "xn--80aswg": t,
                        сайт: t,
                        "xn--8y0a063a": t,
                        联通: t,
                        "xn--9dbq2a": t,
                        קום: t,
                        "xn--9et52u": t,
                        时尚: t,
                        "xn--9krt00a": t,
                        微博: t,
                        "xn--b4w605ferd": t,
                        淡马锡: t,
                        "xn--bck1b9a5dre4c": t,
                        ファッション: t,
                        "xn--c1avg": t,
                        орг: t,
                        "xn--c2br7g": t,
                        नेट: t,
                        "xn--cck2b3b": t,
                        ストア: t,
                        "xn--cckwcxetd": t,
                        アマゾン: t,
                        "xn--cg4bki": t,
                        삼성: t,
                        "xn--czr694b": t,
                        商标: t,
                        "xn--czrs0t": t,
                        商店: t,
                        "xn--czru2d": t,
                        商城: t,
                        "xn--d1acj3b": t,
                        дети: t,
                        "xn--eckvdtc9d": t,
                        ポイント: t,
                        "xn--efvy88h": t,
                        新闻: t,
                        "xn--fct429k": t,
                        家電: t,
                        "xn--fhbei": t,
                        كوم: t,
                        "xn--fiq228c5hs": t,
                        中文网: t,
                        "xn--fiq64b": t,
                        中信: t,
                        "xn--fjq720a": t,
                        娱乐: t,
                        "xn--flw351e": t,
                        谷歌: t,
                        "xn--fzys8d69uvgm": t,
                        電訊盈科: t,
                        "xn--g2xx48c": t,
                        购物: t,
                        "xn--gckr3f0f": t,
                        クラウド: t,
                        "xn--gk3at1e": t,
                        通販: t,
                        "xn--hxt814e": t,
                        网店: t,
                        "xn--i1b6b1a6a2e": t,
                        संगठन: t,
                        "xn--imr513n": t,
                        餐厅: t,
                        "xn--io0a7i": t,
                        网络: t,
                        "xn--j1aef": t,
                        ком: t,
                        "xn--jlq480n2rg": t,
                        亚马逊: t,
                        "xn--jvr189m": t,
                        食品: t,
                        "xn--kcrx77d1x4a": t,
                        飞利浦: t,
                        "xn--kput3i": t,
                        手机: t,
                        "xn--mgba3a3ejt": t,
                        ارامكو: t,
                        "xn--mgba7c0bbn0a": t,
                        العليان: t,
                        "xn--mgbab2bd": t,
                        بازار: t,
                        "xn--mgbca7dzdo": t,
                        ابوظبي: t,
                        "xn--mgbi4ecexp": t,
                        كاثوليك: t,
                        "xn--mgbt3dhd": t,
                        همراه: t,
                        "xn--mk1bu44c": t,
                        닷컴: t,
                        "xn--mxtq1m": t,
                        政府: t,
                        "xn--ngbc5azd": t,
                        شبكة: t,
                        "xn--ngbe9e0a": t,
                        بيتك: t,
                        "xn--ngbrx": t,
                        عرب: t,
                        "xn--nqv7f": t,
                        机构: t,
                        "xn--nqv7fs00ema": t,
                        组织机构: t,
                        "xn--nyqy26a": t,
                        健康: t,
                        "xn--otu796d": t,
                        招聘: t,
                        "xn--p1acf": [1, {
                            "xn--90amc": r,
                            "xn--j1aef": r,
                            "xn--j1ael8b": r,
                            "xn--h1ahn": r,
                            "xn--j1adp": r,
                            "xn--c1avg": r,
                            "xn--80aaa0cvac": r,
                            "xn--h1aliz": r,
                            "xn--90a1af": r,
                            "xn--41a": r
                        }],
                        рус: [1, {
                            биз: r,
                            ком: r,
                            крым: r,
                            мир: r,
                            мск: r,
                            орг: r,
                            самара: r,
                            сочи: r,
                            спб: r,
                            я: r
                        }],
                        "xn--pssy2u": t,
                        大拿: t,
                        "xn--q9jyb4c": t,
                        みんな: t,
                        "xn--qcka1pmc": t,
                        グーグル: t,
                        "xn--rhqv96g": t,
                        世界: t,
                        "xn--rovu88b": t,
                        書籍: t,
                        "xn--ses554g": t,
                        网址: t,
                        "xn--t60b56a": t,
                        닷넷: t,
                        "xn--tckwe": t,
                        コム: t,
                        "xn--tiq49xqyj": t,
                        天主教: t,
                        "xn--unup4y": t,
                        游戏: t,
                        "xn--vermgensberater-ctb": t,
                        vermögensberater: t,
                        "xn--vermgensberatung-pwb": t,
                        vermögensberatung: t,
                        "xn--vhquv": t,
                        企业: t,
                        "xn--vuq861b": t,
                        信息: t,
                        "xn--w4r85el8fhu5dnra": t,
                        嘉里大酒店: t,
                        "xn--w4rs40l": t,
                        嘉里: t,
                        "xn--xhq521b": t,
                        广东: t,
                        "xn--zfr164b": t,
                        政务: t,
                        xyz: [1, {
                            blogsite: r,
                            localzone: r,
                            crafting: r,
                            zapto: r,
                            telebit: s
                        }],
                        yachts: t,
                        yahoo: t,
                        yamaxun: t,
                        yandex: t,
                        yodobashi: t,
                        yoga: t,
                        yokohama: t,
                        you: t,
                        youtube: t,
                        yun: t,
                        zappos: t,
                        zara: t,
                        zero: t,
                        zip: t,
                        zone: [1, {
                            cloud66: r,
                            hs: r,
                            triton: s,
                            lima: r
                        }],
                        zuerich: t
                    }]
                }();

            function lookupInTrie(t, r, a, s) {
                let l = null,
                    c = r;
                for (; void 0 !== c && ((c[0] & s) != 0 && (l = {
                        index: a + 1,
                        isIcann: 1 === c[0],
                        isPrivate: 2 === c[0]
                    }), -1 !== a);) {
                    let r = c[1];
                    c = Object.prototype.hasOwnProperty.call(r, t[a]) ? r[t[a]] : r["*"], a -= 1
                }
                return l
            }

            function suffix_trie_suffixLookup(t, r, a) {
                var s;
                if (function(t, r, a) {
                        if (!r.allowPrivateDomains && t.length > 3) {
                            let r = t.length - 1,
                                s = t.charCodeAt(r),
                                l = t.charCodeAt(r - 1),
                                c = t.charCodeAt(r - 2),
                                d = t.charCodeAt(r - 3);
                            if (109 === s && 111 === l && 99 === c && 46 === d) return a.isIcann = !0, a.isPrivate = !1, a.publicSuffix = "com", !0;
                            if (103 === s && 114 === l && 111 === c && 46 === d) return a.isIcann = !0, a.isPrivate = !1, a.publicSuffix = "org", !0;
                            if (117 === s && 100 === l && 101 === c && 46 === d) return a.isIcann = !0, a.isPrivate = !1, a.publicSuffix = "edu", !0;
                            if (118 === s && 111 === l && 103 === c && 46 === d) return a.isIcann = !0, a.isPrivate = !1, a.publicSuffix = "gov", !0;
                            else if (116 === s && 101 === l && 110 === c && 46 === d) return a.isIcann = !0, a.isPrivate = !1, a.publicSuffix = "net", !0;
                            else if (101 === s && 100 === l && 46 === c) return a.isIcann = !0, a.isPrivate = !1, a.publicSuffix = "de", !0
                        }
                        return !1
                    }(t, r, a)) return;
                let d = t.split("."),
                    u = (r.allowPrivateDomains ? 2 : 0) | (r.allowIcannDomains ? 1 : 0),
                    m = lookupInTrie(d, l, d.length - 1, u);
                if (null !== m) {
                    a.isIcann = m.isIcann, a.isPrivate = m.isPrivate, a.publicSuffix = d.slice(m.index + 1).join(".");
                    return
                }
                let p = lookupInTrie(d, c, d.length - 1, u);
                if (null !== p) {
                    a.isIcann = p.isIcann, a.isPrivate = p.isPrivate, a.publicSuffix = d.slice(p.index).join(".");
                    return
                }
                a.isIcann = !1, a.isPrivate = !1, a.publicSuffix = null !== (s = d[d.length - 1]) && void 0 !== s ? s : null
            }

            function parse(t, r = {}) {
                return function(t, r, a, l, c) {
                    var d, u, m, p, h;
                    let f = void 0 === l ? s : setDefaultsImpl(l);
                    return "string" != typeof t || (f.extractHostname ? f.mixedInputs ? c.hostname = extractHostname(t, is_valid(t)) : c.hostname = extractHostname(t, !1) : c.hostname = t, 0 === r || null === c.hostname) || f.detectIp && (c.isIp = function(t) {
                        if (t.length < 3) return !1;
                        let r = t.startsWith("[") ? 1 : 0,
                            a = t.length;
                        if ("]" === t[a - 1] && (a -= 1), a - r > 39) return !1;
                        let s = !1;
                        for (; r < a; r += 1) {
                            let a = t.charCodeAt(r);
                            if (58 === a) s = !0;
                            else if (!(a >= 48 && a <= 57 || a >= 97 && a <= 102 || a >= 65 && a <= 90)) return !1
                        }
                        return s
                    }(d = c.hostname) || function(t) {
                        if (t.length < 7 || t.length > 15) return !1;
                        let r = 0;
                        for (let a = 0; a < t.length; a += 1) {
                            let s = t.charCodeAt(a);
                            if (46 === s) r += 1;
                            else if (s < 48 || s > 57) return !1
                        }
                        return 3 === r && 46 !== t.charCodeAt(0) && 46 !== t.charCodeAt(t.length - 1)
                    }(d), c.isIp) || (f.validateHostname && f.extractHostname && !is_valid(c.hostname) ? c.hostname = null : (a(c.hostname, f, c), 2 === r || null === c.publicSuffix || (c.domain = function(t, r, a) {
                        if (null !== a.validHosts) {
                            let t = a.validHosts;
                            for (let a of t)
                                if (r.endsWith(a) && (r.length === a.length || "." === r[r.length - a.length - 1])) return a
                        }
                        let s = 0;
                        if (r.startsWith("."))
                            for (; s < r.length && "." === r[s];) s += 1;
                        return t.length === r.length - s ? null : function(t, r) {
                            let a = t.length - r.length - 2,
                                s = t.lastIndexOf(".", a);
                            return -1 === s ? t : t.slice(s + 1)
                        }(r, t)
                    }(c.publicSuffix, c.hostname, f), 3 === r || null === c.domain) || (c.subdomain = (u = c.hostname, (m = c.domain).length === u.length ? "" : u.slice(0, -m.length - 1)), 4 === r) || (c.domainWithoutSuffix = (p = c.domain, h = c.publicSuffix, p.slice(0, -h.length - 1))))), c
                }(t, 5, suffix_trie_suffixLookup, r, getEmptyResult())
            }
            getEmptyResult()
        },
        59004: function(t) {
            function toposort(t, r) {
                var a = t.length,
                    s = Array(a),
                    l = {},
                    c = a,
                    d = function(t) {
                        for (var r = new Map, a = 0, s = t.length; a < s; a++) {
                            var l = t[a];
                            r.has(l[0]) || r.set(l[0], new Set), r.has(l[1]) || r.set(l[1], new Set), r.get(l[0]).add(l[1])
                        }
                        return r
                    }(r),
                    u = function(t) {
                        for (var r = new Map, a = 0, s = t.length; a < s; a++) r.set(t[a], a);
                        return r
                    }(t);
                for (r.forEach(function(t) {
                        if (!u.has(t[0]) || !u.has(t[1])) throw Error("Unknown node. There is an unknown node in the supplied edges.")
                    }); c--;) l[c] || function visit(t, r, c) {
                    if (c.has(t)) {
                        var m;
                        try {
                            m = ", node was:" + JSON.stringify(t)
                        } catch (t) {
                            m = ""
                        }
                        throw Error("Cyclic dependency" + m)
                    }
                    if (!u.has(t)) throw Error("Found unknown node. Make sure to provided all involved nodes. Unknown node: " + JSON.stringify(t));
                    if (!l[r]) {
                        l[r] = !0;
                        var p = d.get(t) || new Set;
                        if (r = (p = Array.from(p)).length) {
                            c.add(t);
                            do {
                                var h = p[--r];
                                visit(h, u.get(h), c)
                            } while (r);
                            c.delete(t)
                        }
                        s[--a] = t
                    }
                }(t[c], c, new Set);
                return s
            }
            t.exports = function(t) {
                return toposort(function(t) {
                    for (var r = new Set, a = 0, s = t.length; a < s; a++) {
                        var l = t[a];
                        r.add(l[0]), r.add(l[1])
                    }
                    return Array.from(r)
                }(t), t)
            }, t.exports.array = toposort
        },
        43978: function(t, r, a) {
            "use strict";
            a.d(r, {
                C: function() {
                    return e
                },
                x: function() {
                    return i
                }
            });
            var s = a(28839),
                l = a(97352);

            function i(t) {
                var r = (0, l.useState)(function() {
                        return (0, s.vV)("function" == typeof t ? t() : t, !0)
                    }),
                    a = r[1];
                return [r[0], (0, l.useCallback)(function(t) {
                    a("function" == typeof t ? (0, s.Uy)(t) : (0, s.vV)(t))
                }, [])]
            }

            function e(t, r, a) {
                var c = (0, l.useMemo)(function() {
                    return (0, s.Uy)(t)
                }, [t]);
                return (0, l.useReducer)(c, r, a)
            }
        },
        23899: function(t) {
            t.exports = function(t) {
                return t && "object" == typeof t && "function" == typeof t.copy && "function" == typeof t.fill && "function" == typeof t.readUInt8
            }
        },
        33605: function(t, r, a) {
            "use strict";
            var s = a(97513),
                l = a(34993),
                c = a(38834),
                d = a(27423);

            function uncurryThis(t) {
                return t.call.bind(t)
            }
            var u = "undefined" != typeof BigInt,
                m = "undefined" != typeof Symbol,
                p = uncurryThis(Object.prototype.toString),
                h = uncurryThis(Number.prototype.valueOf),
                f = uncurryThis(String.prototype.valueOf),
                y = uncurryThis(Boolean.prototype.valueOf);
            if (u) var b = uncurryThis(BigInt.prototype.valueOf);
            if (m) var C = uncurryThis(Symbol.prototype.valueOf);

            function checkBoxedPrimitive(t, r) {
                if ("object" != typeof t) return !1;
                try {
                    return r(t), !0
                } catch (t) {
                    return !1
                }
            }

            function isMapToString(t) {
                return "[object Map]" === p(t)
            }

            function isSetToString(t) {
                return "[object Set]" === p(t)
            }

            function isWeakMapToString(t) {
                return "[object WeakMap]" === p(t)
            }

            function isWeakSetToString(t) {
                return "[object WeakSet]" === p(t)
            }

            function isArrayBufferToString(t) {
                return "[object ArrayBuffer]" === p(t)
            }

            function isArrayBuffer(t) {
                return "undefined" != typeof ArrayBuffer && (isArrayBufferToString.working ? isArrayBufferToString(t) : t instanceof ArrayBuffer)
            }

            function isDataViewToString(t) {
                return "[object DataView]" === p(t)
            }

            function isDataView(t) {
                return "undefined" != typeof DataView && (isDataViewToString.working ? isDataViewToString(t) : t instanceof DataView)
            }
            r.isArgumentsObject = s, r.isGeneratorFunction = l, r.isTypedArray = d, r.isPromise = function(t) {
                return "undefined" != typeof Promise && t instanceof Promise || null !== t && "object" == typeof t && "function" == typeof t.then && "function" == typeof t.catch
            }, r.isArrayBufferView = function(t) {
                return "undefined" != typeof ArrayBuffer && ArrayBuffer.isView ? ArrayBuffer.isView(t) : d(t) || isDataView(t)
            }, r.isUint8Array = function(t) {
                return "Uint8Array" === c(t)
            }, r.isUint8ClampedArray = function(t) {
                return "Uint8ClampedArray" === c(t)
            }, r.isUint16Array = function(t) {
                return "Uint16Array" === c(t)
            }, r.isUint32Array = function(t) {
                return "Uint32Array" === c(t)
            }, r.isInt8Array = function(t) {
                return "Int8Array" === c(t)
            }, r.isInt16Array = function(t) {
                return "Int16Array" === c(t)
            }, r.isInt32Array = function(t) {
                return "Int32Array" === c(t)
            }, r.isFloat32Array = function(t) {
                return "Float32Array" === c(t)
            }, r.isFloat64Array = function(t) {
                return "Float64Array" === c(t)
            }, r.isBigInt64Array = function(t) {
                return "BigInt64Array" === c(t)
            }, r.isBigUint64Array = function(t) {
                return "BigUint64Array" === c(t)
            }, isMapToString.working = "undefined" != typeof Map && isMapToString(new Map), r.isMap = function(t) {
                return "undefined" != typeof Map && (isMapToString.working ? isMapToString(t) : t instanceof Map)
            }, isSetToString.working = "undefined" != typeof Set && isSetToString(new Set), r.isSet = function(t) {
                return "undefined" != typeof Set && (isSetToString.working ? isSetToString(t) : t instanceof Set)
            }, isWeakMapToString.working = "undefined" != typeof WeakMap && isWeakMapToString(new WeakMap), r.isWeakMap = function(t) {
                return "undefined" != typeof WeakMap && (isWeakMapToString.working ? isWeakMapToString(t) : t instanceof WeakMap)
            }, isWeakSetToString.working = "undefined" != typeof WeakSet && isWeakSetToString(new WeakSet), r.isWeakSet = function(t) {
                return isWeakSetToString(t)
            }, isArrayBufferToString.working = "undefined" != typeof ArrayBuffer && isArrayBufferToString(new ArrayBuffer), r.isArrayBuffer = isArrayBuffer, isDataViewToString.working = "undefined" != typeof ArrayBuffer && "undefined" != typeof DataView && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1)), r.isDataView = isDataView;
            var E = "undefined" != typeof SharedArrayBuffer ? SharedArrayBuffer : void 0;

            function isSharedArrayBufferToString(t) {
                return "[object SharedArrayBuffer]" === p(t)
            }

            function isSharedArrayBuffer(t) {
                return void 0 !== E && (void 0 === isSharedArrayBufferToString.working && (isSharedArrayBufferToString.working = isSharedArrayBufferToString(new E)), isSharedArrayBufferToString.working ? isSharedArrayBufferToString(t) : t instanceof E)
            }

            function isNumberObject(t) {
                return checkBoxedPrimitive(t, h)
            }

            function isStringObject(t) {
                return checkBoxedPrimitive(t, f)
            }

            function isBooleanObject(t) {
                return checkBoxedPrimitive(t, y)
            }

            function isBigIntObject(t) {
                return u && checkBoxedPrimitive(t, b)
            }

            function isSymbolObject(t) {
                return m && checkBoxedPrimitive(t, C)
            }
            r.isSharedArrayBuffer = isSharedArrayBuffer, r.isAsyncFunction = function(t) {
                return "[object AsyncFunction]" === p(t)
            }, r.isMapIterator = function(t) {
                return "[object Map Iterator]" === p(t)
            }, r.isSetIterator = function(t) {
                return "[object Set Iterator]" === p(t)
            }, r.isGeneratorObject = function(t) {
                return "[object Generator]" === p(t)
            }, r.isWebAssemblyCompiledModule = function(t) {
                return "[object WebAssembly.Module]" === p(t)
            }, r.isNumberObject = isNumberObject, r.isStringObject = isStringObject, r.isBooleanObject = isBooleanObject, r.isBigIntObject = isBigIntObject, r.isSymbolObject = isSymbolObject, r.isBoxedPrimitive = function(t) {
                return isNumberObject(t) || isStringObject(t) || isBooleanObject(t) || isBigIntObject(t) || isSymbolObject(t)
            }, r.isAnyArrayBuffer = function(t) {
                return "undefined" != typeof Uint8Array && (isArrayBuffer(t) || isSharedArrayBuffer(t))
            }, ["isProxy", "isExternal", "isModuleNamespaceObject"].forEach(function(t) {
                Object.defineProperty(r, t, {
                    enumerable: !1,
                    value: function() {
                        throw Error(t + " is not supported in userland")
                    }
                })
            })
        },
        32285: function(t, r, a) {
            var s = a(9389),
                l = Object.getOwnPropertyDescriptors || function(t) {
                    for (var r = Object.keys(t), a = {}, s = 0; s < r.length; s++) a[r[s]] = Object.getOwnPropertyDescriptor(t, r[s]);
                    return a
                },
                c = /%[sdj%]/g;
            r.format = function(t) {
                if (!isString(t)) {
                    for (var r = [], a = 0; a < arguments.length; a++) r.push(inspect(arguments[a]));
                    return r.join(" ")
                }
                for (var a = 1, s = arguments, l = s.length, d = String(t).replace(c, function(t) {
                        if ("%%" === t) return "%";
                        if (a >= l) return t;
                        switch (t) {
                            case "%s":
                                return String(s[a++]);
                            case "%d":
                                return Number(s[a++]);
                            case "%j":
                                try {
                                    return JSON.stringify(s[a++])
                                } catch (t) {
                                    return "[Circular]"
                                }
                            default:
                                return t
                        }
                    }), u = s[a]; a < l; u = s[++a]) isNull(u) || !isObject(u) ? d += " " + u : d += " " + inspect(u);
                return d
            }, r.deprecate = function(t, a) {
                if (void 0 !== s && !0 === s.noDeprecation) return t;
                if (void 0 === s) return function() {
                    return r.deprecate(t, a).apply(this, arguments)
                };
                var l = !1;
                return function() {
                    if (!l) {
                        if (s.throwDeprecation) throw Error(a);
                        s.traceDeprecation ? console.trace(a) : console.error(a), l = !0
                    }
                    return t.apply(this, arguments)
                }
            };
            var d = {},
                u = /^$/;
            if (s.env.NODE_DEBUG) {
                var m = s.env.NODE_DEBUG;
                u = RegExp("^" + (m = m.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase()) + "$", "i")
            }

            function inspect(t, a) {
                var s = {
                    seen: [],
                    stylize: stylizeNoColor
                };
                return arguments.length >= 3 && (s.depth = arguments[2]), arguments.length >= 4 && (s.colors = arguments[3]), isBoolean(a) ? s.showHidden = a : a && r._extend(s, a), isUndefined(s.showHidden) && (s.showHidden = !1), isUndefined(s.depth) && (s.depth = 2), isUndefined(s.colors) && (s.colors = !1), isUndefined(s.customInspect) && (s.customInspect = !0), s.colors && (s.stylize = stylizeWithColor), formatValue(s, t, s.depth)
            }

            function stylizeWithColor(t, r) {
                var a = inspect.styles[r];
                return a ? "\x1b[" + inspect.colors[a][0] + "m" + t + "\x1b[" + inspect.colors[a][1] + "m" : t
            }

            function stylizeNoColor(t, r) {
                return t
            }

            function formatValue(t, a, s) {
                if (t.customInspect && a && isFunction(a.inspect) && a.inspect !== r.inspect && !(a.constructor && a.constructor.prototype === a)) {
                    var l, c, d, u, m, p = a.inspect(s, t);
                    return isString(p) || (p = formatValue(t, p, s)), p
                }
                var h = function(t, r) {
                    if (isUndefined(r)) return t.stylize("undefined", "undefined");
                    if (isString(r)) {
                        var a = "'" + JSON.stringify(r).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
                        return t.stylize(a, "string")
                    }
                    return isNumber(r) ? t.stylize("" + r, "number") : isBoolean(r) ? t.stylize("" + r, "boolean") : isNull(r) ? t.stylize("null", "null") : void 0
                }(t, a);
                if (h) return h;
                var f = Object.keys(a),
                    y = (u = {}, f.forEach(function(t, r) {
                        u[t] = !0
                    }), u);
                if (t.showHidden && (f = Object.getOwnPropertyNames(a)), isError(a) && (f.indexOf("message") >= 0 || f.indexOf("description") >= 0)) return formatError(a);
                if (0 === f.length) {
                    if (isFunction(a)) {
                        var b = a.name ? ": " + a.name : "";
                        return t.stylize("[Function" + b + "]", "special")
                    }
                    if (isRegExp(a)) return t.stylize(RegExp.prototype.toString.call(a), "regexp");
                    if (isDate(a)) return t.stylize(Date.prototype.toString.call(a), "date");
                    if (isError(a)) return formatError(a)
                }
                var C = "",
                    E = !1,
                    j = ["{", "}"];
                return (isArray(a) && (E = !0, j = ["[", "]"]), isFunction(a) && (C = " [Function" + (a.name ? ": " + a.name : "") + "]"), isRegExp(a) && (C = " " + RegExp.prototype.toString.call(a)), isDate(a) && (C = " " + Date.prototype.toUTCString.call(a)), isError(a) && (C = " " + formatError(a)), 0 !== f.length || E && 0 != a.length) ? s < 0 ? isRegExp(a) ? t.stylize(RegExp.prototype.toString.call(a), "regexp") : t.stylize("[Object]", "special") : (t.seen.push(a), m = E ? function(t, r, a, s, l) {
                    for (var c = [], d = 0, u = r.length; d < u; ++d) hasOwnProperty(r, String(d)) ? c.push(formatProperty(t, r, a, s, String(d), !0)) : c.push("");
                    return l.forEach(function(l) {
                        l.match(/^\d+$/) || c.push(formatProperty(t, r, a, s, l, !0))
                    }), c
                }(t, a, s, y, f) : f.map(function(r) {
                    return formatProperty(t, a, s, y, r, E)
                }), t.seen.pop(), l = C, c = j, d = 0, m.reduce(function(t, r) {
                    return d++, r.indexOf("\n") >= 0 && d++, t + r.replace(/\u001b\[\d\d?m/g, "").length + 1
                }, 0) > 60 ? c[0] + ("" === l ? "" : l + "\n ") + " " + m.join(",\n  ") + " " + c[1] : c[0] + l + " " + m.join(", ") + " " + c[1]) : j[0] + C + j[1]
            }

            function formatError(t) {
                return "[" + Error.prototype.toString.call(t) + "]"
            }

            function formatProperty(t, r, a, s, l, c) {
                var d, u, m;
                if ((m = Object.getOwnPropertyDescriptor(r, l) || {
                        value: r[l]
                    }).get ? u = m.set ? t.stylize("[Getter/Setter]", "special") : t.stylize("[Getter]", "special") : m.set && (u = t.stylize("[Setter]", "special")), hasOwnProperty(s, l) || (d = "[" + l + "]"), !u && (0 > t.seen.indexOf(m.value) ? (u = isNull(a) ? formatValue(t, m.value, null) : formatValue(t, m.value, a - 1)).indexOf("\n") > -1 && (u = c ? u.split("\n").map(function(t) {
                        return "  " + t
                    }).join("\n").slice(2) : "\n" + u.split("\n").map(function(t) {
                        return "   " + t
                    }).join("\n")) : u = t.stylize("[Circular]", "special")), isUndefined(d)) {
                    if (c && l.match(/^\d+$/)) return u;
                    (d = JSON.stringify("" + l)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (d = d.slice(1, -1), d = t.stylize(d, "name")) : (d = d.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), d = t.stylize(d, "string"))
                }
                return d + ": " + u
            }

            function isArray(t) {
                return Array.isArray(t)
            }

            function isBoolean(t) {
                return "boolean" == typeof t
            }

            function isNull(t) {
                return null === t
            }

            function isNumber(t) {
                return "number" == typeof t
            }

            function isString(t) {
                return "string" == typeof t
            }

            function isUndefined(t) {
                return void 0 === t
            }

            function isRegExp(t) {
                return isObject(t) && "[object RegExp]" === objectToString(t)
            }

            function isObject(t) {
                return "object" == typeof t && null !== t
            }

            function isDate(t) {
                return isObject(t) && "[object Date]" === objectToString(t)
            }

            function isError(t) {
                return isObject(t) && ("[object Error]" === objectToString(t) || t instanceof Error)
            }

            function isFunction(t) {
                return "function" == typeof t
            }

            function objectToString(t) {
                return Object.prototype.toString.call(t)
            }

            function pad(t) {
                return t < 10 ? "0" + t.toString(10) : t.toString(10)
            }
            r.debuglog = function(t) {
                if (!d[t = t.toUpperCase()]) {
                    if (u.test(t)) {
                        var a = s.pid;
                        d[t] = function() {
                            var s = r.format.apply(r, arguments);
                            console.error("%s %d: %s", t, a, s)
                        }
                    } else d[t] = function() {}
                }
                return d[t]
            }, r.inspect = inspect, inspect.colors = {
                bold: [1, 22],
                italic: [3, 23],
                underline: [4, 24],
                inverse: [7, 27],
                white: [37, 39],
                grey: [90, 39],
                black: [30, 39],
                blue: [34, 39],
                cyan: [36, 39],
                green: [32, 39],
                magenta: [35, 39],
                red: [31, 39],
                yellow: [33, 39]
            }, inspect.styles = {
                special: "cyan",
                number: "yellow",
                boolean: "yellow",
                undefined: "grey",
                null: "bold",
                string: "green",
                date: "magenta",
                regexp: "red"
            }, r.types = a(33605), r.isArray = isArray, r.isBoolean = isBoolean, r.isNull = isNull, r.isNullOrUndefined = function(t) {
                return null == t
            }, r.isNumber = isNumber, r.isString = isString, r.isSymbol = function(t) {
                return "symbol" == typeof t
            }, r.isUndefined = isUndefined, r.isRegExp = isRegExp, r.types.isRegExp = isRegExp, r.isObject = isObject, r.isDate = isDate, r.types.isDate = isDate, r.isError = isError, r.types.isNativeError = isError, r.isFunction = isFunction, r.isPrimitive = function(t) {
                return null === t || "boolean" == typeof t || "number" == typeof t || "string" == typeof t || "symbol" == typeof t || void 0 === t
            }, r.isBuffer = a(23899);
            var p = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

            function hasOwnProperty(t, r) {
                return Object.prototype.hasOwnProperty.call(t, r)
            }
            r.log = function() {
                var t, a;
                console.log("%s - %s", (a = [pad((t = new Date).getHours()), pad(t.getMinutes()), pad(t.getSeconds())].join(":"), [t.getDate(), p[t.getMonth()], a].join(" ")), r.format.apply(r, arguments))
            }, r.inherits = a(38633), r._extend = function(t, r) {
                if (!r || !isObject(r)) return t;
                for (var a = Object.keys(r), s = a.length; s--;) t[a[s]] = r[a[s]];
                return t
            };
            var h = "undefined" != typeof Symbol ? Symbol("util.promisify.custom") : void 0;

            function callbackifyOnRejected(t, r) {
                if (!t) {
                    var a = Error("Promise was rejected with a falsy value");
                    a.reason = t, t = a
                }
                return r(t)
            }
            r.promisify = function(t) {
                if ("function" != typeof t) throw TypeError('The "original" argument must be of type Function');
                if (h && t[h]) {
                    var fn = t[h];
                    if ("function" != typeof fn) throw TypeError('The "util.promisify.custom" argument must be of type Function');
                    return Object.defineProperty(fn, h, {
                        value: fn,
                        enumerable: !1,
                        writable: !1,
                        configurable: !0
                    }), fn
                }

                function fn() {
                    for (var r, a, s = new Promise(function(t, s) {
                            r = t, a = s
                        }), l = [], c = 0; c < arguments.length; c++) l.push(arguments[c]);
                    l.push(function(t, s) {
                        t ? a(t) : r(s)
                    });
                    try {
                        t.apply(this, l)
                    } catch (t) {
                        a(t)
                    }
                    return s
                }
                return Object.setPrototypeOf(fn, Object.getPrototypeOf(t)), h && Object.defineProperty(fn, h, {
                    value: fn,
                    enumerable: !1,
                    writable: !1,
                    configurable: !0
                }), Object.defineProperties(fn, l(t))
            }, r.promisify.custom = h, r.callbackify = function(t) {
                if ("function" != typeof t) throw TypeError('The "original" argument must be of type Function');

                function callbackified() {
                    for (var r = [], a = 0; a < arguments.length; a++) r.push(arguments[a]);
                    var l = r.pop();
                    if ("function" != typeof l) throw TypeError("The last argument must be of type Function");
                    var c = this,
                        cb = function() {
                            return l.apply(c, arguments)
                        };
                    t.apply(this, r).then(function(t) {
                        s.nextTick(cb.bind(null, null, t))
                    }, function(t) {
                        s.nextTick(callbackifyOnRejected.bind(null, t, cb))
                    })
                }
                return Object.setPrototypeOf(callbackified, Object.getPrototypeOf(t)), Object.defineProperties(callbackified, l(t)), callbackified
            }
        },
        91192: function(t) {
            t.exports = {
                area: !0,
                base: !0,
                br: !0,
                col: !0,
                embed: !0,
                hr: !0,
                img: !0,
                input: !0,
                link: !0,
                meta: !0,
                param: !0,
                source: !0,
                track: !0,
                wbr: !0
            }
        },
        38834: function(t, r, a) {
            "use strict";
            var s = a(63557),
                l = a(13281),
                c = a(39401),
                d = a(32645),
                u = a(53920),
                m = d("Object.prototype.toString"),
                p = a(41609)(),
                h = "undefined" == typeof globalThis ? a.g : globalThis,
                f = l(),
                y = d("String.prototype.slice"),
                b = Object.getPrototypeOf,
                C = d("Array.prototype.indexOf", !0) || function(t, r) {
                    for (var a = 0; a < t.length; a += 1)
                        if (t[a] === r) return a;
                    return -1
                },
                E = {
                    __proto__: null
                };
            p && u && b ? s(f, function(t) {
                var r = new h[t];
                if (Symbol.toStringTag in r) {
                    var a = b(r),
                        s = u(a, Symbol.toStringTag);
                    s || (s = u(b(a), Symbol.toStringTag)), E["$" + t] = c(s.get)
                }
            }) : s(f, function(t) {
                var r = new h[t];
                E["$" + t] = c(r.slice)
            });
            var tryTypedArrays = function(t) {
                    var r = !1;
                    return s(E, function(a, s) {
                        if (!r) try {
                            "$" + a(t) === s && (r = y(s, 1))
                        } catch (t) {}
                    }), r
                },
                trySlices = function(t) {
                    var r = !1;
                    return s(E, function(a, s) {
                        if (!r) try {
                            a(t), r = y(s, 1)
                        } catch (t) {}
                    }), r
                };
            t.exports = function(t) {
                if (!t || "object" != typeof t) return !1;
                if (!p) {
                    var r = y(m(t), 8, -1);
                    return C(f, r) > -1 ? r : "Object" === r && trySlices(t)
                }
                return u ? tryTypedArrays(t) : null
            }
        },
        13281: function(t, r, a) {
            "use strict";
            var s = ["BigInt64Array", "BigUint64Array", "Float32Array", "Float64Array", "Int16Array", "Int32Array", "Int8Array", "Uint16Array", "Uint32Array", "Uint8Array", "Uint8ClampedArray"],
                l = "undefined" == typeof globalThis ? a.g : globalThis;
            t.exports = function() {
                for (var t = [], r = 0; r < s.length; r++) "function" == typeof l[s[r]] && (t[t.length] = s[r]);
                return t
            }
        },
        40135: function(t, r, a) {
            "use strict";
            a.d(r, {
                bU: function() {
                    return R
                },
                fC: function() {
                    return P
                }
            });
            var s = a(84477),
                l = a(97352),
                c = a(12527),
                d = a(8e4),
                u = a(89849),
                m = a(58020),
                p = a(96648),
                h = a(36221),
                f = a(26815);
            let y = "Switch",
                [b, C] = (0, u.b)(y),
                [E, j] = b(y),
                I = (0, l.forwardRef)((t, r) => {
                    let {
                        __scopeSwitch: a,
                        name: u,
                        checked: p,
                        defaultChecked: h,
                        required: y,
                        disabled: b,
                        value: C = "on",
                        onCheckedChange: j,
                        ...I
                    } = t, [O, P] = (0, l.useState)(null), R = (0, d.e)(r, t => P(t)), F = (0, l.useRef)(!1), W = !O || !!O.closest("form"), [M = !1, D] = (0, m.T)({
                        prop: p,
                        defaultProp: h,
                        onChange: j
                    });
                    return (0, l.createElement)(E, {
                        scope: a,
                        checked: M,
                        disabled: b
                    }, (0, l.createElement)(f.WV.button, (0, s.Z)({
                        type: "button",
                        role: "switch",
                        "aria-checked": M,
                        "aria-required": y,
                        "data-state": $6be4966fd9bbc698$var$getState(M),
                        "data-disabled": b ? "" : void 0,
                        disabled: b,
                        value: C
                    }, I, {
                        ref: R,
                        onClick: (0, c.M)(t.onClick, t => {
                            D(t => !t), W && (F.current = t.isPropagationStopped(), F.current || t.stopPropagation())
                        })
                    })), W && (0, l.createElement)($6be4966fd9bbc698$var$BubbleInput, {
                        control: O,
                        bubbles: !F.current,
                        name: u,
                        value: C,
                        checked: M,
                        required: y,
                        disabled: b,
                        style: {
                            transform: "translateX(-100%)"
                        }
                    }))
                }),
                O = (0, l.forwardRef)((t, r) => {
                    let {
                        __scopeSwitch: a,
                        ...c
                    } = t, d = j("SwitchThumb", a);
                    return (0, l.createElement)(f.WV.span, (0, s.Z)({
                        "data-state": $6be4966fd9bbc698$var$getState(d.checked),
                        "data-disabled": d.disabled ? "" : void 0
                    }, c, {
                        ref: r
                    }))
                }),
                $6be4966fd9bbc698$var$BubbleInput = t => {
                    let {
                        control: r,
                        checked: a,
                        bubbles: c = !0,
                        ...d
                    } = t, u = (0, l.useRef)(null), m = (0, p.D)(a), f = (0, h.t)(r);
                    return (0, l.useEffect)(() => {
                        let t = u.current,
                            r = window.HTMLInputElement.prototype,
                            s = Object.getOwnPropertyDescriptor(r, "checked"),
                            l = s.set;
                        if (m !== a && l) {
                            let r = new Event("click", {
                                bubbles: c
                            });
                            l.call(t, a), t.dispatchEvent(r)
                        }
                    }, [m, a, c]), (0, l.createElement)("input", (0, s.Z)({
                        type: "checkbox",
                        "aria-hidden": !0,
                        defaultChecked: a
                    }, d, {
                        tabIndex: -1,
                        ref: u,
                        style: { ...t.style,
                            ...f,
                            position: "absolute",
                            pointerEvents: "none",
                            opacity: 0,
                            margin: 0
                        }
                    }))
                };

            function $6be4966fd9bbc698$var$getState(t) {
                return t ? "checked" : "unchecked"
            }
            let P = I,
                R = O
        },
        95569: function(t, r, a) {
            "use strict";
            var s = a(23517);
            r.Z = s
        },
        35746: function(t, r, a) {
            "use strict";

            function _assertThisInitialized(t) {
                if (void 0 === t) throw ReferenceError("this hasn't been initialised - super() hasn't been called");
                return t
            }
            a.d(r, {
                Z: function() {
                    return _assertThisInitialized
                }
            })
        },
        71311: function(t, r, a) {
            "use strict";
            var s, l;
            a.d(r, {
                Y: function() {
                    return Logger
                }
            }), (l = s || (s = {}))[l.DEBUG = 0] = "DEBUG", l[l.INFO = 1] = "INFO", l[l.WARN = 2] = "WARN", l[l.ERROR = 3] = "ERROR", l[l.MUTE = 99] = "MUTE";
            let Logger = class Logger {
                constructor(t, r) {
                    this.name = t, void 0 === r ? this.level = s.WARN : this.level = r
                }
                getNameArray(t) {
                    return Array.isArray(t) ? t : [t]
                }
                createLogger(t, r) {
                    return new Logger([...this.getNameArray(this.name), ...this.getNameArray(t)], null != r ? r : this.level)
                }
                get logLevel() {
                    return s[this.level]
                }
                setLogLevel(t) {
                    if (t in s && "string" == typeof t) this.level = s[t];
                    else if (t in s && "number" == typeof t) this.level = t;
                    else throw Error(`Invalid log level: ${t}`)
                }
                formatMessage(t, r) {
                    r instanceof Error ? r = r.stack : r instanceof Object && Object.prototype.hasOwnProperty.call(r, "stack") ? r = r.stack : r instanceof Object && (r = JSON.stringify(r));
                    let a = (Array.isArray(this.name) ? this.name : [this.name]).map(t => `[${t}]`);
                    return `${a.join("")} [${s[t]}]: ${r}`
                }
                log(t, r, ...a) {
                    if (t < this.level || t === s.MUTE) return;
                    let l = this.formatMessage(t, r);
                    switch (t) {
                        case s.WARN:
                            console.warn(l, ...a);
                            break;
                        case s.ERROR:
                            console.error(l, ...a);
                            break;
                        default:
                            console.log(l, ...a)
                    }
                }
                debug(t, ...r) {
                    this.log(s.DEBUG, t, ...r)
                }
                info(t, ...r) {
                    this.log(s.INFO, t, ...r)
                }
                warn(t, ...r) {
                    this.log(s.WARN, t, ...r)
                }
                error(t, ...r) {
                    this.log(s.ERROR, t, ...r)
                }
            }
        },
        70769: function(t, r, a) {
            "use strict";
            var s, l;
            a.d(r, {
                l: function() {
                    return ChainRpcProviders
                },
                r: function() {
                    return s
                }
            }), (l = s || (s = {})).EVM = "evm", l.SOLANA = "solana", l.STARKNET = "starknet", "function" == typeof SuppressedError && SuppressedError;
            let ChainRpcProviders = class ChainRpcProviders {
                static get client() {
                    return ChainRpcProviders.instance || (ChainRpcProviders.instance = new ChainRpcProviders), ChainRpcProviders.instance
                }
                constructor() {
                    this.getProvidersMethods = {}
                }
                static getProviders(t) {
                    return Object.values(s).forEach(r => {
                        var a, s;
                        if (!ChainRpcProviders.providers[r]) {
                            let l = null === (s = (a = ChainRpcProviders.client.getProvidersMethods)[r]) || void 0 === s ? void 0 : s.call(a, t);
                            l && Object.assign(ChainRpcProviders.providers, {
                                [r]: l
                            })
                        }
                    }), ChainRpcProviders.providers
                }
                static registerChainProviders(t, r) {
                    var a, s, l, c;
                    return a = this, s = void 0, l = void 0, c = function*() {
                        ChainRpcProviders.client.getProvidersMethods[t] || Object.assign(ChainRpcProviders.client.getProvidersMethods, {
                            [t]: r
                        })
                    }, new(l || (l = Promise))(function(t, r) {
                        function fulfilled(t) {
                            try {
                                step(c.next(t))
                            } catch (t) {
                                r(t)
                            }
                        }

                        function rejected(t) {
                            try {
                                step(c.throw(t))
                            } catch (t) {
                                r(t)
                            }
                        }

                        function step(r) {
                            var a;
                            r.done ? t(r.value) : ((a = r.value) instanceof l ? a : new l(function(t) {
                                t(a)
                            })).then(fulfilled, rejected)
                        }
                        step((c = c.apply(a, s || [])).next())
                    })
                }
                static getEvmProviderByChainId(t, r) {
                    var a;
                    let s = ChainRpcProviders.getProviders(t),
                        l = null === (a = s.evm) || void 0 === a ? void 0 : a.find(t => t.chainId === r);
                    return l
                }
            };
            ChainRpcProviders.providers = {}, ChainRpcProviders.wipeInstance = () => {
                ChainRpcProviders.instance = void 0, ChainRpcProviders.providers = {}
            }, ChainRpcProviders.getSolanaRpcProviderByChainId = (t, r) => {
                var a;
                let s = ChainRpcProviders.getProviders(t),
                    l = null === (a = s.solana) || void 0 === a ? void 0 : a.find(t => t.chainId === r);
                return l
            }, ChainRpcProviders.getStarknetRpcProviderByChainId = (t, r) => {
                var a;
                let s = ChainRpcProviders.getProviders(t),
                    l = null === (a = s.starknet) || void 0 === a ? void 0 : a.find(t => t.chainId === r);
                return l
            }
        },
        37943: function(t, r, a) {
            "use strict";
            var s, l, c, d, u, m, p, h, f, y, b, C, E, j, I, O, P, R, F, W, M, D, L, U, B, $, K, G, J, Y, Q, ee, et, en, er, ea, ei, eo, es, el, ec, ed, eu, em, ep, eh, ef, ey, eg, ev, eb, ew, e_, ek, ex, eC, eS, eE, ej, eI, eT, eO, eN, eP, eA, eR, eF, eW, eM, eD, eL, ez;

            function _tslib_awaiter(t, r, a, s) {
                return new(a || (a = Promise))(function(l, c) {
                    function fulfilled(t) {
                        try {
                            step(s.next(t))
                        } catch (t) {
                            c(t)
                        }
                    }

                    function rejected(t) {
                        try {
                            step(s.throw(t))
                        } catch (t) {
                            c(t)
                        }
                    }

                    function step(t) {
                        var r;
                        t.done ? l(t.value) : ((r = t.value) instanceof a ? r : new a(function(t) {
                            t(r)
                        })).then(fulfilled, rejected)
                    }
                    step((s = s.apply(t, r || [])).next())
                })
            }
            a.d(r, {
                FAV: function() {
                    return l
                },
                lfg: function() {
                    return c
                },
                AIv: function() {
                    return y
                },
                VKt: function() {
                    return Configuration
                },
                s3P: function() {
                    return DynamicJwtFromJSON
                },
                p1P: function() {
                    return C
                },
                lkn: function() {
                    return p
                },
                wgS: function() {
                    return Q
                },
                JXN: function() {
                    return ee
                },
                ml9: function() {
                    return u
                },
                Pzx: function() {
                    return SDKApi
                },
                Fv5: function() {
                    return D
                },
                VbR: function() {
                    return L
                },
                Cu6: function() {
                    return F
                },
                VzA: function() {
                    return W
                },
                QlJ: function() {
                    return eo
                },
                i6m: function() {
                    return VerifyRequestFromJSON
                },
                KOz: function() {
                    return m
                },
                hnE: function() {
                    return h
                }
            });
            let eU = "https://app.dynamicauth.com/api/v0".replace(/\/+$/, ""),
                isBlob = t => "undefined" != typeof Blob && t instanceof Blob;
            let runtime_BaseAPI = class runtime_BaseAPI {
                constructor(t = new Configuration) {
                    this.configuration = t, this.fetchApi = (t, r) => _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = {
                            url: t,
                            init: r
                        };
                        for (let t of this.middleware) t.pre && (a = (yield t.pre(Object.assign({
                            fetch: this.fetchApi
                        }, a))) || a);
                        let s = yield(this.configuration.fetchApi || fetch)(a.url, a.init);
                        for (let t of this.middleware) t.post && (s = (yield t.post({
                            fetch: this.fetchApi,
                            url: a.url,
                            init: a.init,
                            response: s.clone()
                        })) || s);
                        return s
                    }), this.middleware = t.middleware
                }
                withMiddleware(...t) {
                    let r = this.clone();
                    return r.middleware = r.middleware.concat(...t), r
                }
                withPreMiddleware(...t) {
                    let r = t.map(t => ({
                        pre: t
                    }));
                    return this.withMiddleware(...r)
                }
                withPostMiddleware(...t) {
                    let r = t.map(t => ({
                        post: t
                    }));
                    return this.withMiddleware(...r)
                }
                request(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let {
                            url: a,
                            init: s
                        } = this.createFetchParams(t, r), l = yield this.fetchApi(a, s);
                        if (l.status >= 200 && l.status < 300) return l;
                        throw l
                    })
                }
                createFetchParams(t, r) {
                    let a = this.configuration.basePath + t.path;
                    void 0 !== t.query && 0 !== Object.keys(t.query).length && (a += "?" + this.configuration.queryParamsStringify(t.query));
                    let s = "undefined" != typeof FormData && t.body instanceof FormData || t.body instanceof URLSearchParams || isBlob(t.body) ? t.body : JSON.stringify(t.body),
                        l = Object.assign({}, this.configuration.headers, t.headers),
                        c = Object.assign({
                            method: t.method,
                            headers: l,
                            body: s,
                            credentials: this.configuration.credentials
                        }, r);
                    return {
                        url: a,
                        init: c
                    }
                }
                clone() {
                    let t = this.constructor,
                        r = new t(this.configuration);
                    return r.middleware = this.middleware.slice(), r
                }
            };
            let runtime_RequiredError = class runtime_RequiredError extends Error {
                constructor(t, r) {
                    super(r), this.field = t, this.name = "RequiredError"
                }
            };
            let Configuration = class Configuration {
                constructor(t = {}) {
                    this.configuration = t
                }
                get basePath() {
                    return null != this.configuration.basePath ? this.configuration.basePath : eU
                }
                get fetchApi() {
                    return this.configuration.fetchApi
                }
                get middleware() {
                    return this.configuration.middleware || []
                }
                get queryParamsStringify() {
                    return this.configuration.queryParamsStringify || function querystring(t, r = "") {
                        return Object.keys(t).map(a => {
                            let s = r + (r.length ? `[${a}]` : a),
                                l = t[a];
                            if (l instanceof Array) {
                                let t = l.map(t => encodeURIComponent(String(t))).join(`&${encodeURIComponent(s)}=`);
                                return `${encodeURIComponent(s)}=${t}`
                            }
                            return l instanceof Date ? `${encodeURIComponent(s)}=${encodeURIComponent(l.toISOString())}` : l instanceof Object ? querystring(l, s) : `${encodeURIComponent(s)}=${encodeURIComponent(String(l))}`
                        }).filter(t => t.length > 0).join("&")
                    }
                }
                get username() {
                    return this.configuration.username
                }
                get password() {
                    return this.configuration.password
                }
                get apiKey() {
                    let t = this.configuration.apiKey;
                    if (t) return "function" == typeof t ? t : () => t
                }
                get accessToken() {
                    let t = this.configuration.accessToken;
                    if (t) return "function" == typeof t ? t : () => _tslib_awaiter(this, void 0, void 0, function*() {
                        return t
                    })
                }
                get headers() {
                    return this.configuration.headers
                }
                get credentials() {
                    return this.configuration.credentials
                }
            };

            function runtime_exists(t, r) {
                let a = t[r];
                return null != a
            }
            let runtime_JSONApiResponse = class runtime_JSONApiResponse {
                constructor(t, r = t => t) {
                    this.raw = t, this.transformer = r
                }
                value() {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        return this.transformer((yield this.raw.json()))
                    })
                }
            };
            let runtime_VoidApiResponse = class runtime_VoidApiResponse {
                constructor(t) {
                    this.raw = t
                }
                value() {
                    return _tslib_awaiter(this, void 0, void 0, function*() {})
                }
            };
            let TextApiResponse = class TextApiResponse {
                constructor(t) {
                    this.raw = t
                }
                value() {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        return yield this.raw.text()
                    })
                }
            };

            function AuthenticatorTransportProtocolToJSON(t) {
                return t
            }

            function ChainEnum_ChainEnumToJSON(t) {
                return t
            }

            function EmbeddedWalletSecurityMethodFromJSON(t) {
                return t
            }

            function PublishEventsEventsToJSON(t) {
                return void 0 === t ? void 0 : null === t ? null : {
                    anonymousId: t.anonymousId,
                    event: t.event,
                    properties: t.properties,
                    type: t.type
                }
            }

            function NetworkConfigurationFromJSON(t) {
                var r, a, s, l;
                return null == (r = t) ? r : {
                    lcdUrl: runtime_exists(r, "lcdUrl") ? r.lcdUrl : void 0,
                    chainName: runtime_exists(r, "chainName") ? r.chainName : void 0,
                    name: r.name,
                    shortName: r.shortName,
                    chain: r.chain,
                    chainId: r.chainId,
                    nameService: runtime_exists(r, "nameService") ? null == (s = r.nameService) ? s : {
                        registry: runtime_exists(s, "registry") ? s.registry : void 0
                    } : void 0,
                    networkId: r.networkId,
                    iconUrls: r.iconUrls,
                    nativeCurrency: null == (l = r.nativeCurrency) ? l : {
                        decimals: l.decimals,
                        name: l.name,
                        symbol: l.symbol,
                        denom: runtime_exists(l, "denom") ? l.denom : void 0
                    },
                    rpcUrls: r.rpcUrls,
                    privateCustomerRpcUrls: runtime_exists(r, "privateCustomerRpcUrls") ? r.privateCustomerRpcUrls : void 0,
                    blockExplorerUrls: r.blockExplorerUrls,
                    vanityName: runtime_exists(r, "vanityName") ? r.vanityName : void 0
                }
            }

            function NetworkConfigurationResponseFromJSON(t) {
                return null == t ? t : {
                    chainName: runtime_exists(t, "chainName") ? t.chainName : void 0,
                    networks: runtime_exists(t, "networks") ? t.networks.map(NetworkConfigurationFromJSON) : void 0
                }
            }

            function NetworkFromJSON(t) {
                return null == t ? t : {
                    networkId: t.networkId,
                    chainName: t.chainName,
                    enabled: t.enabled,
                    rpcUrl: runtime_exists(t, "rpcUrl") ? t.rpcUrl : void 0
                }
            }

            function ProjectSettingsChainsFromJSON(t) {
                return null == t ? t : {
                    name: t.name,
                    enabled: t.enabled,
                    networks: runtime_exists(t, "networks") ? t.networks.map(NetworkFromJSON) : void 0
                }
            }

            function ProjectSettingsKyc_ProjectSettingsKycFromJSON(t) {
                return null == t ? t : {
                    name: t.name,
                    required: t.required,
                    enabled: t.enabled,
                    unique: t.unique,
                    verify: t.verify
                }
            }

            function ChainConfigurationFromJSON(t) {
                return null == t ? t : {
                    name: t.name,
                    enabled: t.enabled,
                    primary: t.primary
                }
            }

            function DurationFromJSONTyped(t, r) {
                return null == t ? t : {
                    amount: t.amount,
                    unit: t.unit
                }
            }

            function SupportedSecurityMethodFromJSONTyped(t, r) {
                return null == t ? t : {
                    isDefault: t.isDefault,
                    isEnabled: t.isEnabled,
                    isPermanentAuthenticator: t.isPermanentAuthenticator,
                    listPosition: t.listPosition
                }
            }

            function SocialSignInProviderFromJSON(t) {
                var r, a;
                return null == (r = t) ? r : {
                    provider: r.provider,
                    enabled: runtime_exists(r, "enabled") ? r.enabled : void 0
                }
            }

            function SdkViewSection_SdkViewSectionFromJSON(t) {
                var r, a;
                return null == (r = t) ? r : {
                    type: r.type,
                    label: runtime_exists(r, "label") ? r.label : void 0,
                    numOfItemsToDisplay: runtime_exists(r, "numOfItemsToDisplay") ? r.numOfItemsToDisplay : void 0,
                    defaultItem: runtime_exists(r, "defaultItem") ? r.defaultItem : void 0,
                    alignment: runtime_exists(r, "alignment") ? r.alignment : void 0
                }
            }

            function SdkView_SdkViewFromJSON(t) {
                var r, a;
                return null == (r = t) ? r : {
                    type: r.type,
                    sections: runtime_exists(r, "sections") ? r.sections.map(SdkViewSection_SdkViewSectionFromJSON) : void 0
                }
            }

            function Provider_ProviderFromJSON(t) {
                var r, a, s, l;
                return null == (r = t) ? r : {
                    id: runtime_exists(r, "id") ? r.id : void 0,
                    provider: r.provider,
                    enabledAt: runtime_exists(r, "enabledAt") ? null === r.enabledAt ? null : new Date(r.enabledAt) : void 0,
                    clientId: runtime_exists(r, "clientId") ? r.clientId : void 0,
                    clientSecret: runtime_exists(r, "clientSecret") ? r.clientSecret : void 0,
                    providerProjectId: runtime_exists(r, "providerProjectId") ? r.providerProjectId : void 0,
                    authorizationUrl: runtime_exists(r, "authorizationUrl") ? r.authorizationUrl : void 0,
                    redirectUrl: runtime_exists(r, "redirectUrl") ? r.redirectUrl : void 0,
                    defaultChainId: runtime_exists(r, "defaultChainId") ? r.defaultChainId : void 0,
                    defaultChain: runtime_exists(r, "defaultChain") ? r.defaultChain : void 0,
                    keyExportUrl: runtime_exists(r, "keyExportUrl") ? r.keyExportUrl : void 0,
                    termsAcceptedByUser: runtime_exists(r, "termsAcceptedByUser") ? null == (l = r.termsAcceptedByUser) ? l : {
                        termsUrl: l.termsUrl,
                        email: l.email,
                        userId: l.userId,
                        createdAt: new Date(l.createdAt)
                    } : void 0,
                    appleKeyId: runtime_exists(r, "appleKeyId") ? r.appleKeyId : void 0,
                    appleTeamId: runtime_exists(r, "appleTeamId") ? r.appleTeamId : void 0
                }
            }

            function NameServiceDataFromJSONTyped(t, r) {
                return null == t ? t : {
                    avatar: runtime_exists(t, "avatar") ? t.avatar : void 0,
                    name: runtime_exists(t, "name") ? t.name : void 0
                }
            }

            function WalletAdditionalAddress_WalletAdditionalAddressFromJSON(t) {
                var r, a;
                return null == (r = t) ? r : {
                    address: r.address,
                    publicKey: runtime_exists(r, "publicKey") ? r.publicKey : void 0,
                    type: r.type
                }
            }

            function WalletAdditionalAddress_WalletAdditionalAddressToJSON(t) {
                if (void 0 !== t) return null === t ? null : {
                    address: t.address,
                    publicKey: t.publicKey,
                    type: t.type
                }
            }

            function JwtVerifiedCredential_JwtVerifiedCredentialFromJSON(t) {
                return function(t, r) {
                    var a, s, l, c;
                    if (null == t) return t;
                    return {
                        address: runtime_exists(t, "address") ? t.address : void 0,
                        chain: runtime_exists(t, "chain") ? t.chain : void 0,
                        refId: runtime_exists(t, "refId") ? t.refId : void 0,
                        signerRefId: runtime_exists(t, "signerRefId") ? t.signerRefId : void 0,
                        email: runtime_exists(t, "email") ? t.email : void 0,
                        id: t.id,
                        nameService: runtime_exists(t, "name_service") ? NameServiceDataFromJSONTyped(t.name_service) : void 0,
                        publicIdentifier: runtime_exists(t, "public_identifier") ? t.public_identifier : void 0,
                        walletName: runtime_exists(t, "wallet_name") ? t.wallet_name : void 0,
                        walletProvider: runtime_exists(t, "wallet_provider") ? t.wallet_provider : void 0,
                        walletProperties: runtime_exists(t, "wallet_properties") ? null == (l = t.wallet_properties) ? l : {
                            turnkeySubOrganizationId: runtime_exists(l, "turnkeySubOrganizationId") ? l.turnkeySubOrganizationId : void 0,
                            turnkeyPrivateKeyId: runtime_exists(l, "turnkeyPrivateKeyId") ? l.turnkeyPrivateKeyId : void 0,
                            turnkeyHDWalletId: runtime_exists(l, "turnkeyHDWalletId") ? l.turnkeyHDWalletId : void 0,
                            isAuthenticatorAttached: runtime_exists(l, "isAuthenticatorAttached") ? l.isAuthenticatorAttached : void 0,
                            hardwareWallet: runtime_exists(l, "hardwareWallet") ? l.hardwareWallet : void 0,
                            backup: runtime_exists(l, "backup") ? l.backup : void 0,
                            password: runtime_exists(l, "password") ? l.password : void 0,
                            claimed: runtime_exists(l, "claimed") ? l.claimed : void 0
                        } : void 0,
                        format: t.format,
                        oauthProvider: runtime_exists(t, "oauth_provider") ? t.oauth_provider : void 0,
                        oauthUsername: runtime_exists(t, "oauth_username") ? t.oauth_username : void 0,
                        oauthDisplayName: runtime_exists(t, "oauth_display_name") ? t.oauth_display_name : void 0,
                        oauthAccountId: runtime_exists(t, "oauth_account_id") ? t.oauth_account_id : void 0,
                        phoneNumber: runtime_exists(t, "phoneNumber") ? t.phoneNumber : void 0,
                        phoneCountryCode: runtime_exists(t, "phoneCountryCode") ? t.phoneCountryCode : void 0,
                        oauthAccountPhotos: runtime_exists(t, "oauth_account_photos") ? t.oauth_account_photos : void 0,
                        oauthEmails: runtime_exists(t, "oauth_emails") ? t.oauth_emails : void 0,
                        oauthMetadata: runtime_exists(t, "oauth_metadata") ? t.oauth_metadata : void 0,
                        previousUsers: runtime_exists(t, "previous_users") ? t.previous_users : void 0,
                        embeddedWalletId: runtime_exists(t, "embedded_wallet_id") ? t.embedded_wallet_id : void 0,
                        walletAdditionalAddresses: runtime_exists(t, "wallet_additional_addresses") ? t.wallet_additional_addresses.map(WalletAdditionalAddress_WalletAdditionalAddressFromJSON) : void 0
                    }
                }(t)
            }

            function PasskeyRegistrationCredentialToJSON(t) {
                return void 0 === t ? void 0 : null === t ? null : {
                    attestationObject: t.attestationObject,
                    clientDataJson: t.clientDataJson,
                    credentialId: t.credentialId,
                    transports: t.transports.map(AuthenticatorTransportProtocolToJSON)
                }
            }

            function CreateEmbeddedWalletParamsToJSON(t) {
                if (void 0 !== t) return null === t ? null : {
                    chains: void 0 === t.chains ? void 0 : t.chains.map(ChainEnum_ChainEnumToJSON),
                    chain: ChainEnum_ChainEnumToJSON(t.chain),
                    embeddedWalletProvider: t.embeddedWalletProvider,
                    embeddedWalletSpecificOpts: function(t) {
                        if (void 0 !== t) return null === t ? null : Object.assign({}, void 0 === t ? void 0 : null === t ? null : {
                            attestation: PasskeyRegistrationCredentialToJSON(t.attestation),
                            challenge: t.challenge
                        })
                    }(t.embeddedWalletSpecificOpts),
                    isAuthenticatorAttached: t.isAuthenticatorAttached
                }
            }

            function CurrencyFromJSON(t) {
                var r, a;
                return null == (r = t) ? r : {
                    name: r.name,
                    symbol: r.symbol,
                    type: r.type,
                    code: r.code,
                    value: r.value
                }
            }

            function EmailVerificationCreateResponseFromJSONTyped(t, r) {
                return null == t ? t : {
                    verificationUUID: t.verificationUUID,
                    email: t.email
                }
            }

            function EmailVerificationVerifyRequestToJSON(t) {
                return void 0 === t ? void 0 : null === t ? null : {
                    verificationUUID: t.verificationUUID,
                    verificationToken: t.verificationToken,
                    captchaToken: t.captchaToken
                }
            }

            function EmbeddedWalletSecretFromJSONTyped(t, r) {
                return null == t ? t : {
                    walletId: t.walletId,
                    secret: t.secret
                }
            }

            function UserPasskeyFromJSON(t) {
                var r, a, s;
                return null == (r = t) ? r : {
                    id: r.id,
                    alias: runtime_exists(r, "alias") ? r.alias : void 0,
                    userAgent: runtime_exists(r, "userAgent") ? r.userAgent : void 0,
                    origin: runtime_exists(r, "origin") ? r.origin : void 0,
                    credentialId: r.credentialId,
                    createdAt: new Date(r.createdAt),
                    updatedAt: runtime_exists(r, "updatedAt") ? new Date(r.updatedAt) : void 0,
                    storage: runtime_exists(r, "storage") ? null == (s = r.storage) ? s : {
                        name: s.name,
                        icon: s.icon,
                        updatedAt: runtime_exists(s, "updatedAt") ? new Date(s.updatedAt) : void 0
                    } : void 0
                }
            }

            function JwksKeyFromJSON(t) {
                return null == t ? t : {
                    kid: runtime_exists(t, "kid") ? t.kid : void 0,
                    alg: runtime_exists(t, "alg") ? t.alg : void 0,
                    kty: runtime_exists(t, "kty") ? t.kty : void 0,
                    use: runtime_exists(t, "use") ? t.use : void 0,
                    e: runtime_exists(t, "e") ? t.e : void 0,
                    n: runtime_exists(t, "n") ? t.n : void 0
                }
            }

            function OauthRequestToJSON(t) {
                return void 0 === t ? void 0 : null === t ? null : {
                    code: t.code,
                    codeVerifier: t.codeVerifier,
                    state: t.state,
                    captchaToken: t.captchaToken
                }
            }

            function SmsVerificationCreateResponseFromJSONTyped(t, r) {
                return null == t ? t : {
                    verificationUUID: t.verificationUUID,
                    phoneNumber: t.phoneNumber,
                    phoneCountryCode: t.phoneCountryCode
                }
            }

            function SmsVerificationVerifyRequestToJSON(t) {
                return void 0 === t ? void 0 : null === t ? null : {
                    verificationUUID: t.verificationUUID,
                    verificationToken: t.verificationToken,
                    captchaToken: t.captchaToken
                }
            }

            function OnrampConfigurationFromJSON(t) {
                var r, a, s;
                return null == (r = t) ? r : {
                    provider: runtime_exists(r, "provider") ? r.provider : void 0,
                    name: runtime_exists(r, "name") ? r.name : void 0,
                    iconUrl: runtime_exists(r, "iconUrl") ? r.iconUrl : void 0,
                    url: runtime_exists(r, "url") ? r.url : void 0
                }
            }

            function SdkUserFromJSONTyped(t, r) {
                return null == t ? t : {
                    id: t.id,
                    projectEnvironmentId: t.projectEnvironmentId,
                    verifiedCredentials: t.verifiedCredentials.map(JwtVerifiedCredential_JwtVerifiedCredentialFromJSON),
                    alias: runtime_exists(t, "alias") ? t.alias : void 0,
                    country: runtime_exists(t, "country") ? t.country : void 0,
                    email: runtime_exists(t, "email") ? t.email : void 0,
                    firstName: runtime_exists(t, "firstName") ? t.firstName : void 0,
                    jobTitle: runtime_exists(t, "jobTitle") ? t.jobTitle : void 0,
                    lastName: runtime_exists(t, "lastName") ? t.lastName : void 0,
                    phoneNumber: runtime_exists(t, "phoneNumber") ? t.phoneNumber : void 0,
                    policiesConsent: runtime_exists(t, "policiesConsent") ? t.policiesConsent : void 0,
                    tShirtSize: runtime_exists(t, "tShirtSize") ? t.tShirtSize : void 0,
                    team: runtime_exists(t, "team") ? t.team : void 0,
                    username: runtime_exists(t, "username") ? t.username : void 0,
                    firstVisit: runtime_exists(t, "firstVisit") ? new Date(t.firstVisit) : void 0,
                    lastVisit: runtime_exists(t, "lastVisit") ? new Date(t.lastVisit) : void 0,
                    newUser: runtime_exists(t, "newUser") ? t.newUser : void 0,
                    metadata: runtime_exists(t, "metadata") ? t.metadata : void 0,
                    btcWallet: runtime_exists(t, "btcWallet") ? t.btcWallet : void 0,
                    kdaWallet: runtime_exists(t, "kdaWallet") ? t.kdaWallet : void 0,
                    ltcWallet: runtime_exists(t, "ltcWallet") ? t.ltcWallet : void 0,
                    ckbWallet: runtime_exists(t, "ckbWallet") ? t.ckbWallet : void 0,
                    kasWallet: runtime_exists(t, "kasWallet") ? t.kasWallet : void 0,
                    dogeWallet: runtime_exists(t, "dogeWallet") ? t.dogeWallet : void 0,
                    emailNotification: runtime_exists(t, "emailNotification") ? t.emailNotification : void 0,
                    discordNotification: runtime_exists(t, "discordNotification") ? t.discordNotification : void 0,
                    newsletterNotification: runtime_exists(t, "newsletterNotification") ? t.newsletterNotification : void 0,
                    lists: runtime_exists(t, "lists") ? t.lists : void 0,
                    scope: runtime_exists(t, "scope") ? t.scope : void 0,
                    missingFields: runtime_exists(t, "missingFields") ? t.missingFields.map(ProjectSettingsKyc_ProjectSettingsKycFromJSON) : void 0
                }
            }

            function UpdateSelfResponseFromJSONTyped(t, r) {
                return null == t ? t : {
                    user: SdkUserFromJSONTyped(t.user),
                    nextView: t.nextView,
                    emailVerification: runtime_exists(t, "emailVerification") ? EmailVerificationCreateResponseFromJSONTyped(t.emailVerification) : void 0,
                    jwt: t.jwt,
                    minifiedJwt: t.minifiedJwt
                }
            }

            function VerifyRequestFromJSON(t) {
                return function(t, r) {
                    var a, s, l, c, d;
                    if (null == t) return t;
                    return {
                        oauth: runtime_exists(t, "oauth") ? null == (l = t.oauth) ? l : {
                            provider: runtime_exists(l, "provider") ? l.provider : void 0,
                            accessToken: runtime_exists(l, "accessToken") ? l.accessToken : void 0,
                            didToken: runtime_exists(l, "didToken") ? l.didToken : void 0
                        } : void 0,
                        signedMessage: t.signedMessage,
                        messageToSign: t.messageToSign,
                        publicWalletAddress: t.publicWalletAddress,
                        chain: t.chain,
                        walletName: t.walletName,
                        walletProvider: t.walletProvider,
                        skipEmptyAccountCheck: runtime_exists(t, "skipEmptyAccountCheck") ? t.skipEmptyAccountCheck : void 0,
                        captchaToken: runtime_exists(t, "captchaToken") ? t.captchaToken : void 0,
                        network: runtime_exists(t, "network") ? t.network : void 0,
                        additionalWalletAddresses: runtime_exists(t, "additionalWalletAddresses") ? t.additionalWalletAddresses.map(WalletAdditionalAddress_WalletAdditionalAddressFromJSON) : void 0,
                        backup: runtime_exists(t, "backup") ? t.backup : void 0,
                        password: runtime_exists(t, "password") ? t.password : void 0
                    }
                }(t)
            }

            function VerifyRequestToJSON(t) {
                if (void 0 !== t) return null === t ? null : {
                    oauth: function(t) {
                        if (void 0 !== t) return null === t ? null : {
                            provider: t.provider,
                            accessToken: t.accessToken,
                            didToken: t.didToken
                        }
                    }(t.oauth),
                    signedMessage: t.signedMessage,
                    messageToSign: t.messageToSign,
                    publicWalletAddress: t.publicWalletAddress,
                    chain: ChainEnum_ChainEnumToJSON(t.chain),
                    walletName: t.walletName,
                    walletProvider: t.walletProvider,
                    skipEmptyAccountCheck: t.skipEmptyAccountCheck,
                    captchaToken: t.captchaToken,
                    network: t.network,
                    additionalWalletAddresses: void 0 === t.additionalWalletAddresses ? void 0 : t.additionalWalletAddresses.map(WalletAdditionalAddress_WalletAdditionalAddressToJSON),
                    backup: t.backup,
                    password: t.password
                }
            }

            function VerifyResponseFromJSONTyped(t, r) {
                return null == t ? t : {
                    jwt: t.jwt,
                    user: SdkUserFromJSONTyped(t.user),
                    minifiedJwt: t.minifiedJwt
                }
            }(el = s || (s = {})).Scope = "scope", el.SiteAccess = "siteAccess", (ec = l || (l = {})).Only = "connect-only", ec.AndSign = "connect-and-sign", (ed = c || (c = {})).Internal = "AUTHENTICATOR_TRANSPORT_INTERNAL", ed.Usb = "AUTHENTICATOR_TRANSPORT_USB", ed.Nfc = "AUTHENTICATOR_TRANSPORT_NFC", ed.Ble = "AUTHENTICATOR_TRANSPORT_BLE", ed.Hybrid = "AUTHENTICATOR_TRANSPORT_HYBRID", (eu = d || (d = {})).Blockchain = "blockchain", eu.Email = "email", eu.Oauth = "oauth", eu.Passkey = "passkey", eu.PhoneNumber = "phoneNumber", (em = u || (u = {})).EmailOnly = "emailOnly", em.MagicLink = "magicLink", em.Apple = "apple", em.Bitbucket = "bitbucket", em.Coinbasesocial = "coinbasesocial", em.Discord = "discord", em.Facebook = "facebook", em.Github = "github", em.Gitlab = "gitlab", em.Google = "google", em.Instagram = "instagram", em.Linkedin = "linkedin", em.Microsoft = "microsoft", em.Twitch = "twitch", em.Twitter = "twitter", em.Blocto = "blocto", em.Banxa = "banxa", em.Dynamic = "dynamic", em.Alchemy = "alchemy", em.Zerodev = "zerodev", em.Turnkey = "turnkey", em.CoinbaseWaas = "coinbaseWaas", em.Sms = "sms", (ep = m || (m = {})).Ordinals = "ordinals", ep.Payment = "payment", (p || (p = {})).Ledger = "ledger", (eh = h || (h = {})).BrowserExtension = "browserExtension", eh.CustodialService = "custodialService", eh.WalletConnect = "walletConnect", eh.QrCode = "qrCode", eh.DeepLink = "deepLink", eh.EmbeddedWallet = "embeddedWallet", eh.SmartContractWallet = "smartContractWallet", (ef = f || (f = {})).Free = "free", ef.Advanced = "advanced", ef.Enterprise = "enterprise", (ey = y || (y = {})).Eth = "ETH", ey.Evm = "EVM", ey.Flow = "FLOW", ey.Sol = "SOL", ey.Algo = "ALGO", ey.Stark = "STARK", ey.Cosmos = "COSMOS", ey.Btc = "BTC", (eg = b || (b = {})).Ok = "OK", eg.Blocked = "BLOCKED", eg.Failed = "FAILED", (ev = C || (C = {})).Turnkey = "turnkey", ev.Turnkeyhd = "turnkeyhd", (eb = E || (E = {})).Email = "email", eb.Id = "id", (ew = j || (j = {})).Fiat = "fiat", ew.Crypto = "crypto", (e_ = I || (I = {})).Days = "days", e_.Hours = "hours", e_.Minutes = "minutes", (O || (O = {})).Mpc = "mpc", (ek = P || (P = {})).Passkey = "passkey", ek.Passphrase = "passphrase", (ex = R || (R = {})).Sandbox = "sandbox", ex.Live = "live", (eC = F || (F = {})).Dynamic = "dynamic", eC.MagicLink = "magicLink", eC.Blocto = "blocto", eC.Turnkey = "turnkey", (eS = W || (W = {})).Apple = "apple", eS.Bitbucket = "bitbucket", eS.Coinbasesocial = "coinbasesocial", eS.Discord = "discord", eS.Facebook = "facebook", eS.Github = "github", eS.Gitlab = "gitlab", eS.Google = "google", eS.Instagram = "instagram", eS.Linkedin = "linkedin", eS.Microsoft = "microsoft", eS.Twitch = "twitch", eS.Twitter = "twitter", (eE = M || (M = {})).Center = "center", eE.Left = "left", eE.Right = "right", (ej = D || (D = {})).Email = "email", ej.Separator = "separator", ej.Social = "social", ej.Text = "text", ej.Wallet = "wallet", (L || (L = {})).Login = "login", (eI = U || (U = {})).All = "all", eI.Id = "id", eI.WalletPublicKey = "walletPublicKey", eI.Email = "email", eI.Alias = "alias", eI.FirstName = "firstName", eI.LastName = "lastName", eI.PhoneNumber = "phoneNumber", eI.JobTitle = "jobTitle", eI.Wallet = "wallet", eI.Username = "username", (B || (B = {})).Csv = "csv", ($ || ($ = {})).Users = "users", (eT = K || (K = {})).Completed = "completed", eT.Failed = "failed", eT.Pending = "pending", (eO = G || (G = {})).Nft = "nft", eO.Token = "token", (eN = J || (J = {})).Healthy = "healthy", eN.Unhealthy = "unhealthy", (eP = Y || (Y = {})).Pending = "pending", eP.Rejected = "rejected", eP.Accepted = "accepted", (eA = Q || (Q = {})).Done = "done", eA.VerifyEmail = "verify-email", eA.VerifiedAndTransferred = "verified-and-transferred", (eR = ee || (ee = {})).Pending = "pending", eR.Completed = "completed", (eF = et || (et = {})).Yesterday = "yesterday", eF.NextTwoWeeks = "nextTwoWeeks", eF.NextTwoMonths = "nextTwoMonths", eF.JustBrowsing = "justBrowsing", (en || (en = {})).Track = "track", (eW = er || (er = {})).Owner = "owner", eW.Admin = "admin", eW.Viewer = "viewer", (eM = ea || (ea = {})).ConnectAndSign = "connect_and_sign", eM.MultiWallet = "multi_wallet", eM.ApiTokens = "api_tokens", eM.InfoCapture = "info_capture", eM.AccessList = "access_list", eM.Chainalysis = "chainalysis", eM.AnalyticsUsers = "analytics_users", eM.AnalyticsVisits = "analytics_visits", eM.Captcha = "captcha", eM.SigninWithEmail = "signin_with_email", eM.Gating = "gating", eM.AccountAbstraction = "account_abstraction", eM.Webhooks = "webhooks", (eD = ei || (ei = {})).ConnectOnly = "connect_only", eD.Design = "design", eD.ApiKeys = "api_keys", eD.VisitManagement = "visit_management", eD.SettingsGeneral = "settings_general", eD.SettingsSecurity = "settings_security", eD.SettingsPrivacy = "settings_privacy", eD.AdminOrgs = "admin_orgs", eD.AdminBilling = "admin_billing", eD.AdminMembers = "admin_members", eD.UserManagement = "user_management", (eL = eo || (eo = {})).EmailAlreadyExists = "email_already_exists", eL.AllowlistAlreadyExists = "allowlist_already_exists", eL.AllowlistEntryAlreadyExists = "allowlist_entry_already_exists", eL.ReassignWalletError = "reassign_wallet_error", eL.ReassignWalletConfirm = "reassign_wallet_confirm", eL.MembersCannotDeleteThemself = "members_cannot_delete_themself", eL.UsernameAlreadyExists = "username_already_exists", eL.WrongEmailVerificationToken = "wrong_email_verification_token", eL.WrongSmsVerificationToken = "wrong_sms_verification_token", eL.InvalidEmailVerification = "invalid_email_verification", eL.InvalidSmsVerification = "invalid_sms_verification", eL.InvalidVerification = "invalid_verification", eL.TooManySmsVerificationAttempts = "too_many_sms_verification_attempts", eL.TooManyEmailVerificationAttempts = "too_many_email_verification_attempts", eL.TooManyVerificationAttempts = "too_many_verification_attempts", eL.OrganizationNameAlreadyExists = "organization_name_already_exists", eL.ProjectNameAlreadyExists = "project_name_already_exists", eL.WalletNotDeployed = "wallet_not_deployed", eL.EmailVerificationRequired = "email_verification_required", eL.InviteAddressRequired = "invite_address_required", eL.ProviderNotAvailable = "provider_not_available", eL.ForbiddenUnlinkRequest = "forbidden_unlink_request", eL.InvalidUnlinkRequest = "invalid_unlink_request", eL.TooManyApiTokens = "too_many_api_tokens", eL.LockTimeout = "lock_timeout", eL.LockTooManyAttempts = "lock_too_many_attempts", eL.NftTokenGatingNotSupportedForChain = "nft_token_gating_not_supported_for_chain", eL.EmptyChainName = "empty_chain_name", eL.NoEnabledEmailProvider = "no_enabled_email_provider", eL.NoEnabledSmsProvider = "no_enabled_sms_provider", eL.InvalidKeyExportUrl = "invalid_key_export_url", eL.InvalidDynamicProps = "invalid_dynamic_props", eL.TooManyOrganizationsForUser = "too_many_organizations_for_user", eL.TooManyProjectsForOrganization = "too_many_projects_for_organization", eL.EmailAssociatedWithDifferentProvider = "email_associated_with_different_provider", eL.UserHasAlreadyAccountWithEmail = "user_has_already_account_with_email", eL.UserHasAlreadyAccountWithPhoneNumber = "user_has_already_account_with_phone_number", eL.OtherVerifyFailure = "other_verify_failure", eL.EmailTiedToEmbeddedWallet = "email_tied_to_embedded_wallet", eL.InvalidInvite = "invalid_invite", eL.SocialAccountAlreadyExists = "social_account_already_exists", eL.InvalidEmailAddress = "invalid_email_address", eL.ConflictingEmbeddedWalletProviders = "conflicting_embedded_wallet_providers", eL.InvalidUser = "invalid_user", eL.InvalidCorsOrigins = "invalid_cors_origins", eL.InvalidPrivateKeyFormat = "invalid_private_key_format", eL.InvalidEmbeddedWalletSettings = "invalid_embedded_wallet_settings", eL.WalletNotSupportPasskey = "wallet_not_support_passkey", eL.RecoveryEmailUnavailableOrInvalid = "recovery_email_unavailable_or_invalid", eL.ConnectError = "connect_error", eL.InvalidWalletName = "invalid_wallet_name", eL.InvalidWalletAddress = "invalid_wallet_address", eL.EmailRecoveryDisabled = "email_recovery_disabled", eL.NoCompatibleWalletServiceEnabled = "no_compatible_wallet_service_enabled", eL.MissingAaProjectId = "missing_aa_project_id", eL.LinkedEmbeddedWallet = "linked_embedded_wallet", (ez = es || (es = {})).All = "all", ez.Id = "id", ez.WalletPublicKey = "walletPublicKey";
            let SDKApi = class SDKApi extends runtime_BaseAPI {
                claimEmbeddedWalletPasscodeRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling claimEmbeddedWalletPasscode.");
                        let a = {};
                        if (this.configuration && this.configuration.accessToken) {
                            let t = this.configuration.accessToken,
                                r = yield t("bearerAuth", []);
                            r && (a.Authorization = `Bearer ${r}`)
                        }
                        let s = yield this.request({
                            path: "/sdk/{environmentId}/users/embeddedWallets/passcode".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "DELETE",
                            headers: a,
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(s)
                    })
                }
                claimEmbeddedWalletPasscode(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.claimEmbeddedWalletPasscodeRaw(t, r)
                    })
                }
                completePasskeyRecoveryRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        var a;
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling completePasskeyRecovery.");
                        if (null === t.completePasskeyRecoveryRequest || void 0 === t.completePasskeyRecoveryRequest) throw new runtime_RequiredError("completePasskeyRecoveryRequest", "Required parameter requestParameters.completePasskeyRecoveryRequest was null or undefined when calling completePasskeyRecovery.");
                        let s = {};
                        if (s["Content-Type"] = "application/json", this.configuration && this.configuration.accessToken) {
                            let t = this.configuration.accessToken,
                                r = yield t("bearerAuth", []);
                            r && (s.Authorization = `Bearer ${r}`)
                        }
                        let l = yield this.request({
                            path: "/sdk/{environmentId}/users/embeddedWallets/passkeyRecovery".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "PUT",
                            headers: s,
                            query: {},
                            body: void 0 === (a = t.completePasskeyRecoveryRequest) ? void 0 : null === a ? null : {
                                walletId: a.walletId,
                                attestation: PasskeyRegistrationCredentialToJSON(a.attestation),
                                challenge: a.challenge
                            }
                        }, r);
                        return new runtime_JSONApiResponse(l, t => VerifyResponseFromJSONTyped(t))
                    })
                }
                completePasskeyRecovery(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.completePasskeyRecoveryRaw(t, r);
                        return yield a.value()
                    })
                }
                createEmailVerificationRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        var a;
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling createEmailVerification.");
                        if (null === t.emailVerificationCreateRequest || void 0 === t.emailVerificationCreateRequest) throw new runtime_RequiredError("emailVerificationCreateRequest", "Required parameter requestParameters.emailVerificationCreateRequest was null or undefined when calling createEmailVerification.");
                        let s = {};
                        s["Content-Type"] = "application/json";
                        let l = yield this.request({
                            path: "/sdk/{environmentId}/emailVerifications/create".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "POST",
                            headers: s,
                            query: {},
                            body: void 0 === (a = t.emailVerificationCreateRequest) ? void 0 : null === a ? null : {
                                email: a.email,
                                captchaToken: a.captchaToken
                            }
                        }, r);
                        return new runtime_JSONApiResponse(l, t => EmailVerificationCreateResponseFromJSONTyped(t))
                    })
                }
                createEmailVerification(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.createEmailVerificationRaw(t, r);
                        return yield a.value()
                    })
                }
                createEmailVerificationOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling createEmailVerificationOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/emailVerifications/create".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                createEmailVerificationOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.createEmailVerificationOptionsRaw(t, r)
                    })
                }
                createEmbeddedWalletsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        var a;
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling createEmbeddedWallets.");
                        if (null === t.createEmbeddedWalletsRequest || void 0 === t.createEmbeddedWalletsRequest) throw new runtime_RequiredError("createEmbeddedWalletsRequest", "Required parameter requestParameters.createEmbeddedWalletsRequest was null or undefined when calling createEmbeddedWallets.");
                        let s = {};
                        if (s["Content-Type"] = "application/json", this.configuration && this.configuration.accessToken) {
                            let t = this.configuration.accessToken,
                                r = yield t("bearerAuth", []);
                            r && (s.Authorization = `Bearer ${r}`)
                        }
                        let l = yield this.request({
                            path: "/sdk/{environmentId}/users/embeddedWallets".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "POST",
                            headers: s,
                            query: {},
                            body: void 0 === (a = t.createEmbeddedWalletsRequest) ? void 0 : null === a ? null : {
                                embeddedWallets: a.embeddedWallets.map(CreateEmbeddedWalletParamsToJSON)
                            }
                        }, r);
                        return new runtime_JSONApiResponse(l, t => VerifyResponseFromJSONTyped(t))
                    })
                }
                createEmbeddedWallets(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.createEmbeddedWalletsRaw(t, r);
                        return yield a.value()
                    })
                }
                createEmbeddedWalletsOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling createEmbeddedWalletsOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/users/embeddedWallets".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                createEmbeddedWalletsOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.createEmbeddedWalletsOptionsRaw(t, r)
                    })
                }
                createSmsVerificationRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        var a;
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling createSmsVerification.");
                        if (null === t.smsVerificationCreateRequest || void 0 === t.smsVerificationCreateRequest) throw new runtime_RequiredError("smsVerificationCreateRequest", "Required parameter requestParameters.smsVerificationCreateRequest was null or undefined when calling createSmsVerification.");
                        let s = {};
                        s["Content-Type"] = "application/json";
                        let l = yield this.request({
                            path: "/sdk/{environmentId}/smsVerifications/create".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "POST",
                            headers: s,
                            query: {},
                            body: void 0 === (a = t.smsVerificationCreateRequest) ? void 0 : null === a ? null : {
                                phoneCountryCode: a.phoneCountryCode,
                                phoneNumber: a.phoneNumber,
                                captchaToken: a.captchaToken
                            }
                        }, r);
                        return new runtime_JSONApiResponse(l, t => SmsVerificationCreateResponseFromJSONTyped(t))
                    })
                }
                createSmsVerification(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.createSmsVerificationRaw(t, r);
                        return yield a.value()
                    })
                }
                createVisitRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling createVisit.");
                        if (null === t.connectRequest || void 0 === t.connectRequest) throw new runtime_RequiredError("connectRequest", "Required parameter requestParameters.connectRequest was null or undefined when calling createVisit.");
                        let a = {};
                        a["Content-Type"] = "application/json";
                        let s = yield this.request({
                            path: "/sdk/{environmentId}/connect".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "POST",
                            headers: a,
                            query: {},
                            body: function(t) {
                                if (void 0 !== t) return null === t ? null : {
                                    address: t.address,
                                    chain: ChainEnum_ChainEnumToJSON(t.chain),
                                    provider: t.provider,
                                    walletName: t.walletName,
                                    authMode: t.authMode
                                }
                            }(t.connectRequest)
                        }, r);
                        return new runtime_VoidApiResponse(s)
                    })
                }
                createVisit(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.createVisitRaw(t, r)
                    })
                }
                emailAuthOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling emailAuthOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/users/embeddedWallets/emailAuth".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                emailAuthOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.emailAuthOptionsRaw(t, r)
                    })
                }
                emailProviderOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling emailProviderOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/emailProvider".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                emailProviderOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.emailProviderOptionsRaw(t, r)
                    })
                }
                embeddedWalletExportRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling embeddedWalletExport.");
                        if (null === t.walletId || void 0 === t.walletId) throw new runtime_RequiredError("walletId", "Required parameter requestParameters.walletId was null or undefined when calling embeddedWalletExport.");
                        if (null === t.activityId || void 0 === t.activityId) throw new runtime_RequiredError("activityId", "Required parameter requestParameters.activityId was null or undefined when calling embeddedWalletExport.");
                        let a = {};
                        if (this.configuration && this.configuration.accessToken) {
                            let t = this.configuration.accessToken,
                                r = yield t("bearerAuth", []);
                            r && (a.Authorization = `Bearer ${r}`)
                        }
                        let s = yield this.request({
                            path: "/sdk/{environmentId}/users/embeddedWallets/{walletId}/activities/{activityId}/export".replace("{environmentId}", encodeURIComponent(String(t.environmentId))).replace("{walletId}", encodeURIComponent(String(t.walletId))).replace("{activityId}", encodeURIComponent(String(t.activityId))),
                            method: "GET",
                            headers: a,
                            query: {}
                        }, r);
                        return new runtime_JSONApiResponse(s, t => null == t ? t : {
                            exportBundle: t.exportBundle
                        })
                    })
                }
                embeddedWalletExport(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.embeddedWalletExportRaw(t, r);
                        return yield a.value()
                    })
                }
                embeddedWalletExportOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling embeddedWalletExportOptions.");
                        if (null === t.walletId || void 0 === t.walletId) throw new runtime_RequiredError("walletId", "Required parameter requestParameters.walletId was null or undefined when calling embeddedWalletExportOptions.");
                        if (null === t.activityId || void 0 === t.activityId) throw new runtime_RequiredError("activityId", "Required parameter requestParameters.activityId was null or undefined when calling embeddedWalletExportOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/users/embeddedWallets/{walletId}/activities/{activityId}/export".replace("{environmentId}", encodeURIComponent(String(t.environmentId))).replace("{walletId}", encodeURIComponent(String(t.walletId))).replace("{activityId}", encodeURIComponent(String(t.activityId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                embeddedWalletExportOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.embeddedWalletExportOptionsRaw(t, r)
                    })
                }
                eventsOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling eventsOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/events".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                eventsOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.eventsOptionsRaw(t, r)
                    })
                }
                getAuthTokenRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling getAuthToken.");
                        let a = {};
                        void 0 !== t.type && (a.type = t.type);
                        let s = {};
                        if (this.configuration && this.configuration.accessToken) {
                            let t = this.configuration.accessToken,
                                r = yield t("bearerAuth", []);
                            r && (s.Authorization = `Bearer ${r}`)
                        }
                        let l = yield this.request({
                            path: "/sdk/{environmentId}/users/embeddedWallets/authToken".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "GET",
                            headers: s,
                            query: a
                        }, r);
                        return new runtime_JSONApiResponse(l, t => null == t ? t : {
                            token: t.token
                        })
                    })
                }
                getAuthToken(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.getAuthTokenRaw(t, r);
                        return yield a.value()
                    })
                }
                getAuthTokenOptsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling getAuthTokenOpts.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/users/embeddedWallets/authToken".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                getAuthTokenOpts(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.getAuthTokenOptsRaw(t, r)
                    })
                }
                getEmailProviderRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling getEmailProvider.");
                        if (null === t.email || void 0 === t.email) throw new runtime_RequiredError("email", "Required parameter requestParameters.email was null or undefined when calling getEmailProvider.");
                        let a = {};
                        void 0 !== t.email && (a.email = t.email);
                        let s = yield this.request({
                            path: "/sdk/{environmentId}/emailProvider".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "GET",
                            headers: {},
                            query: a
                        }, r);
                        return new runtime_JSONApiResponse(s, t => {
                            var r, a, s;
                            return null == (r = t) ? r : {
                                emailProvider: r.emailProvider
                            }
                        })
                    })
                }
                getEmailProvider(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.getEmailProviderRaw(t, r);
                        return yield a.value()
                    })
                }
                getEmbeddedWalletBackupOptionRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling getEmbeddedWalletBackupOption.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/users/embeddedWallets/backup".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                getEmbeddedWalletBackupOption(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.getEmbeddedWalletBackupOptionRaw(t, r)
                    })
                }
                getEmbeddedWalletBackupsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling getEmbeddedWalletBackups.");
                        let a = {};
                        if (this.configuration && this.configuration.accessToken) {
                            let t = this.configuration.accessToken,
                                r = yield t("bearerAuth", []);
                            r && (a.Authorization = `Bearer ${r}`)
                        }
                        let s = yield this.request({
                            path: "/sdk/{environmentId}/users/embeddedWallets/backup".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "GET",
                            headers: a,
                            query: {}
                        }, r);
                        return new runtime_JSONApiResponse(s, t => EmbeddedWalletSecretFromJSONTyped(t))
                    })
                }
                getEmbeddedWalletBackups(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.getEmbeddedWalletBackupsRaw(t, r);
                        return yield a.value()
                    })
                }
                getEmbeddedWalletPasscodeRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling getEmbeddedWalletPasscode.");
                        let a = {};
                        if (this.configuration && this.configuration.accessToken) {
                            let t = this.configuration.accessToken,
                                r = yield t("bearerAuth", []);
                            r && (a.Authorization = `Bearer ${r}`)
                        }
                        let s = yield this.request({
                            path: "/sdk/{environmentId}/users/embeddedWallets/passcode".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "GET",
                            headers: a,
                            query: {}
                        }, r);
                        return new runtime_JSONApiResponse(s, t => EmbeddedWalletSecretFromJSONTyped(t))
                    })
                }
                getEmbeddedWalletPasscode(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.getEmbeddedWalletPasscodeRaw(t, r);
                        return yield a.value()
                    })
                }
                getEmbeddedWalletPasscodeOptionRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling getEmbeddedWalletPasscodeOption.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/users/embeddedWallets/passcode".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                getEmbeddedWalletPasscodeOption(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.getEmbeddedWalletPasscodeOptionRaw(t, r)
                    })
                }
                getEnvironmentSettingsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling getEnvironmentSettings.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/settings".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "GET",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_JSONApiResponse(a, t => (function(t, r) {
                            var a, s, l, c, d, u, m, p, h, f;
                            if (null == t) return t;
                            return {
                                chains: t.chains.map(ProjectSettingsChainsFromJSON),
                                kyc: t.kyc.map(ProjectSettingsKyc_ProjectSettingsKycFromJSON),
                                design: null == (l = t.design) ? l : {
                                    modal: runtime_exists(l, "modal") ? null == (d = l.modal) ? d : {
                                        border: runtime_exists(d, "border") ? d.border : void 0,
                                        brand: runtime_exists(d, "brand") ? d.brand : void 0,
                                        primaryColor: runtime_exists(d, "primaryColor") ? d.primaryColor : void 0,
                                        radius: runtime_exists(d, "radius") ? d.radius : void 0,
                                        theme: runtime_exists(d, "theme") ? d.theme : void 0,
                                        view: runtime_exists(d, "view") ? d.view : void 0,
                                        template: runtime_exists(d, "template") ? d.template : void 0,
                                        displayOrder: runtime_exists(d, "displayOrder") ? d.displayOrder : void 0,
                                        emailOnly: runtime_exists(d, "emailOnly") ? d.emailOnly : void 0,
                                        showWalletsButton: runtime_exists(d, "showWalletsButton") ? d.showWalletsButton : void 0,
                                        emailSubmitButtonInsideInput: runtime_exists(d, "emailSubmitButtonInsideInput") ? d.emailSubmitButtonInsideInput : void 0,
                                        splitEmailAndSocial: runtime_exists(d, "splitEmailAndSocial") ? d.splitEmailAndSocial : void 0,
                                        socialAboveEmail: runtime_exists(d, "socialAboveEmail") ? d.socialAboveEmail : void 0
                                    } : void 0,
                                    button: runtime_exists(l, "button") ? null == (u = l.button) ? u : {
                                        background: runtime_exists(u, "background") ? u.background : void 0,
                                        fontColor: runtime_exists(u, "fontColor") ? u.fontColor : void 0,
                                        paddingHeight: runtime_exists(u, "paddingHeight") ? u.paddingHeight : void 0,
                                        paddingWidth: runtime_exists(u, "paddingWidth") ? u.paddingWidth : void 0,
                                        radius: runtime_exists(u, "radius") ? u.radius : void 0
                                    } : void 0,
                                    widget: runtime_exists(l, "widget") ? null == (m = l.widget) ? m : {
                                        backgroundColor: runtime_exists(m, "backgroundColor") ? m.backgroundColor : void 0,
                                        border: runtime_exists(m, "border") ? m.border : void 0,
                                        radius: runtime_exists(m, "radius") ? m.radius : void 0,
                                        textColor: runtime_exists(m, "textColor") ? m.textColor : void 0,
                                        theme: runtime_exists(m, "theme") ? m.theme : void 0
                                    } : void 0
                                },
                                general: null == (a = t.general) ? a : {
                                    displayName: runtime_exists(a, "displayName") ? a.displayName : void 0,
                                    supportEmail: runtime_exists(a, "supportEmail") ? a.supportEmail : void 0,
                                    supportText: runtime_exists(a, "supportText") ? a.supportText : void 0,
                                    appLogo: runtime_exists(a, "appLogo") ? a.appLogo : void 0,
                                    imageUserNotInAccessList: runtime_exists(a, "imageUserNotInAccessList") ? a.imageUserNotInAccessList : void 0,
                                    imageUserInAccessList: runtime_exists(a, "imageUserInAccessList") ? a.imageUserInAccessList : void 0,
                                    supportUrls: runtime_exists(a, "supportUrls") ? a.supportUrls : void 0,
                                    collectUserDataWelcomeHeader: runtime_exists(a, "collectUserDataWelcomeHeader") ? a.collectUserDataWelcomeHeader : void 0,
                                    collectUserDataWelcomeMessage: runtime_exists(a, "collectUserDataWelcomeMessage") ? a.collectUserDataWelcomeMessage : void 0,
                                    skipOptionalKYCFieldDuringOnboarding: runtime_exists(a, "skipOptionalKYCFieldDuringOnboarding") ? a.skipOptionalKYCFieldDuringOnboarding : void 0,
                                    emailCompanyName: runtime_exists(a, "emailCompanyName") ? a.emailCompanyName : void 0
                                },
                                privacy: null == (s = t.privacy) ? s : {
                                    collectIp: runtime_exists(s, "collectIp") ? s.collectIp : void 0
                                },
                                providers: runtime_exists(t, "providers") ? t.providers.map(Provider_ProviderFromJSON) : void 0,
                                sdk: function(t, r) {
                                    var a, s, l, c, d, u, m, p, h, f;
                                    if (null == t) return t;
                                    return {
                                        emailSignIn: runtime_exists(t, "emailSignIn") ? null == (s = t.emailSignIn) ? s : {
                                            signInProvider: runtime_exists(s, "signInProvider") ? s.signInProvider : void 0
                                        } : void 0,
                                        socialSignIn: runtime_exists(t, "socialSignIn") ? null == (d = t.socialSignIn) ? d : {
                                            signInProvider: runtime_exists(d, "signInProvider") ? d.signInProvider : void 0,
                                            providers: runtime_exists(d, "providers") ? d.providers.map(SocialSignInProviderFromJSON) : void 0
                                        } : void 0,
                                        multiWallet: runtime_exists(t, "multiWallet") ? t.multiWallet : void 0,
                                        multiWalletUnlinkDisabled: runtime_exists(t, "multiWalletUnlinkDisabled") ? t.multiWalletUnlinkDisabled : void 0,
                                        confirmWalletTransfers: runtime_exists(t, "confirmWalletTransfers") ? t.confirmWalletTransfers : void 0,
                                        onrampFunding: runtime_exists(t, "onrampFunding") ? t.onrampFunding : void 0,
                                        passkeyEmbeddedWalletEnabled: runtime_exists(t, "passkeyEmbeddedWalletEnabled") ? t.passkeyEmbeddedWalletEnabled : void 0,
                                        automaticEmbeddedWalletCreation: runtime_exists(t, "automaticEmbeddedWalletCreation") ? t.automaticEmbeddedWalletCreation : void 0,
                                        passkeyEmbeddedWalletRecoveryEnabled: runtime_exists(t, "passkeyEmbeddedWalletRecoveryEnabled") ? t.passkeyEmbeddedWalletRecoveryEnabled : void 0,
                                        embeddedWalletSecurityMethods: runtime_exists(t, "embeddedWalletSecurityMethods") ? t.embeddedWalletSecurityMethods.map(EmbeddedWalletSecurityMethodFromJSON) : void 0,
                                        embeddedWallets: runtime_exists(t, "embeddedWallets") ? null == (p = t.embeddedWallets) ? p : {
                                            automaticEmbeddedWalletCreation: runtime_exists(p, "automaticEmbeddedWalletCreation") ? p.automaticEmbeddedWalletCreation : void 0,
                                            emailRecoveryEnabled: runtime_exists(p, "emailRecoveryEnabled") ? p.emailRecoveryEnabled : void 0,
                                            forceAuthenticatorAtSignup: runtime_exists(p, "forceAuthenticatorAtSignup") ? p.forceAuthenticatorAtSignup : void 0,
                                            allowSkippingAuthenticatorAtSignup: runtime_exists(p, "allowSkippingAuthenticatorAtSignup") ? p.allowSkippingAuthenticatorAtSignup : void 0,
                                            sessionKeyDuration: runtime_exists(p, "sessionKeyDuration") ? DurationFromJSONTyped(p.sessionKeyDuration) : void 0,
                                            supportedSecurityMethods: runtime_exists(p, "supportedSecurityMethods") ? null == (f = p.supportedSecurityMethods) ? f : {
                                                passkey: runtime_exists(f, "passkey") ? SupportedSecurityMethodFromJSONTyped(f.passkey) : void 0,
                                                email: runtime_exists(f, "email") ? SupportedSecurityMethodFromJSONTyped(f.email) : void 0
                                            } : void 0,
                                            chainConfigurations: runtime_exists(p, "chainConfigurations") ? p.chainConfigurations.map(ChainConfigurationFromJSON) : void 0
                                        } : void 0,
                                        walletConnect: runtime_exists(t, "walletConnect") ? null == (a = t.walletConnect) ? a : {
                                            projectId: runtime_exists(a, "projectId") ? a.projectId : void 0,
                                            v2Enabled: runtime_exists(a, "v2Enabled") ? a.v2Enabled : void 0
                                        } : void 0,
                                        confirmEmailProviderForVerify: runtime_exists(t, "confirmEmailProviderForVerify") ? t.confirmEmailProviderForVerify : void 0,
                                        displayDynamicMessaging: runtime_exists(t, "displayDynamicMessaging") ? t.displayDynamicMessaging : void 0,
                                        hideNetworkInDynamicWidget: runtime_exists(t, "hideNetworkInDynamicWidget") ? t.hideNetworkInDynamicWidget : void 0,
                                        preventOrphanedAccounts: runtime_exists(t, "preventOrphanedAccounts") ? t.preventOrphanedAccounts : void 0,
                                        views: runtime_exists(t, "views") ? t.views.map(SdkView_SdkViewFromJSON) : void 0
                                    }
                                }(t.sdk),
                                security: null == (p = t.security) ? p : {
                                    jwtDuration: runtime_exists(p, "jwtDuration") ? DurationFromJSONTyped(p.jwtDuration) : void 0,
                                    hCaptcha: runtime_exists(p, "hCaptcha") ? null == (f = p.hCaptcha) ? f : {
                                        enabled: runtime_exists(f, "enabled") ? f.enabled : void 0,
                                        secretKey: runtime_exists(f, "secretKey") ? f.secretKey : void 0,
                                        siteKey: runtime_exists(f, "siteKey") ? f.siteKey : void 0
                                    } : void 0
                                },
                                networks: runtime_exists(t, "networks") ? t.networks.map(NetworkConfigurationResponseFromJSON) : void 0
                            }
                        })(t))
                    })
                }
                getEnvironmentSettings(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.getEnvironmentSettingsRaw(t, r);
                        return yield a.value()
                    })
                }
                getExchangeRatesRaw(t) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let r = yield this.request({
                            path: "/exchangeRates",
                            method: "GET",
                            headers: {},
                            query: {}
                        }, t);
                        return new runtime_JSONApiResponse(r, t => t.map(CurrencyFromJSON))
                    })
                }
                getExchangeRates(t) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let r = yield this.getExchangeRatesRaw(t);
                        return yield r.value()
                    })
                }
                getExchangeRatesOptionsRaw(t) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let r = yield this.request({
                            path: "/exchangeRates",
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, t);
                        return new runtime_VoidApiResponse(r)
                    })
                }
                getExchangeRatesOptions(t) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.getExchangeRatesOptionsRaw(t)
                    })
                }
                getHealthcheckRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling getHealthcheck.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/healthcheck".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "GET",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_JSONApiResponse(a, t => {
                            var r, a;
                            return null == (r = t) ? r : {
                                status: r.status
                            }
                        })
                    })
                }
                getHealthcheck(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.getHealthcheckRaw(t, r);
                        return yield a.value()
                    })
                }
                getHealthcheckOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling getHealthcheckOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/healthcheck".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                getHealthcheckOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.getHealthcheckOptionsRaw(t, r)
                    })
                }
                getJwksByEnvironmentIdRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling getJwksByEnvironmentId.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/.well-known/jwks".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "GET",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_JSONApiResponse(a, t => null == t ? t : {
                            keys: t.keys.map(JwksKeyFromJSON)
                        })
                    })
                }
                getJwksByEnvironmentId(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.getJwksByEnvironmentIdRaw(t, r);
                        return yield a.value()
                    })
                }
                getNetworksConfigurationByEnvIdRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling getNetworksConfigurationByEnvId.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/networks".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "GET",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_JSONApiResponse(a, t => t.map(NetworkConfigurationResponseFromJSON))
                    })
                }
                getNetworksConfigurationByEnvId(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.getNetworksConfigurationByEnvIdRaw(t, r);
                        return yield a.value()
                    })
                }
                getNonceRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling getNonce.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/nonce".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "GET",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_JSONApiResponse(a, t => null == t ? t : {
                            nonce: runtime_exists(t, "nonce") ? t.nonce : void 0
                        })
                    })
                }
                getNonce(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.getNonceRaw(t, r);
                        return yield a.value()
                    })
                }
                getSupportedOnrampsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling getSupportedOnramps.");
                        if (null === t.walletAddress || void 0 === t.walletAddress) throw new runtime_RequiredError("walletAddress", "Required parameter requestParameters.walletAddress was null or undefined when calling getSupportedOnramps.");
                        if (null === t.chain || void 0 === t.chain) throw new runtime_RequiredError("chain", "Required parameter requestParameters.chain was null or undefined when calling getSupportedOnramps.");
                        let a = {};
                        void 0 !== t.walletAddress && (a.walletAddress = t.walletAddress), void 0 !== t.chain && (a.chain = t.chain), void 0 !== t.networkId && (a.networkId = t.networkId), void 0 !== t.token && (a.token = t.token);
                        let s = yield this.request({
                            path: "/sdk/{environmentId}/onramps".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "GET",
                            headers: {},
                            query: a
                        }, r);
                        return new runtime_JSONApiResponse(s, t => null == t ? t : {
                            onramps: runtime_exists(t, "onramps") ? t.onramps.map(OnrampConfigurationFromJSON) : void 0
                        })
                    })
                }
                getSupportedOnramps(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.getSupportedOnrampsRaw(t, r);
                        return yield a.value()
                    })
                }
                getUserPasskeysRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling getUserPasskeys.");
                        let a = {};
                        if (this.configuration && this.configuration.accessToken) {
                            let t = this.configuration.accessToken,
                                r = yield t("bearerAuth", []);
                            r && (a.Authorization = `Bearer ${r}`)
                        }
                        let s = yield this.request({
                            path: "/sdk/{environmentId}/users/passkeys".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "GET",
                            headers: a,
                            query: {}
                        }, r);
                        return new runtime_JSONApiResponse(s, t => null == t ? t : {
                            passkeys: t.passkeys.map(UserPasskeyFromJSON),
                            count: t.count
                        })
                    })
                }
                getUserPasskeys(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.getUserPasskeysRaw(t, r);
                        return yield a.value()
                    })
                }
                initEmailAuthRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        var a;
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling initEmailAuth.");
                        if (null === t.initEmailAuthRequest || void 0 === t.initEmailAuthRequest) throw new runtime_RequiredError("initEmailAuthRequest", "Required parameter requestParameters.initEmailAuthRequest was null or undefined when calling initEmailAuth.");
                        let s = {};
                        if (s["Content-Type"] = "application/json", this.configuration && this.configuration.accessToken) {
                            let t = this.configuration.accessToken,
                                r = yield t("bearerAuth", []);
                            r && (s.Authorization = `Bearer ${r}`)
                        }
                        let l = yield this.request({
                            path: "/sdk/{environmentId}/users/embeddedWallets/emailAuth".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "POST",
                            headers: s,
                            query: {},
                            body: void 0 === (a = t.initEmailAuthRequest) ? void 0 : null === a ? null : {
                                walletId: a.walletId,
                                turnkeyEmailAuthTargetPublicKey: a.turnkeyEmailAuthTargetPublicKey
                            }
                        }, r);
                        return new runtime_JSONApiResponse(l, t => null == t ? t : {
                            turnkeyUserId: t.turnkeyUserId,
                            turnkeyApiKeyId: t.turnkeyApiKeyId
                        })
                    })
                }
                initEmailAuth(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.initEmailAuthRaw(t, r);
                        return yield a.value()
                    })
                }
                initPasskeyRecoveryRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        var a;
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling initPasskeyRecovery.");
                        if (null === t.initPasskeyRecoveryRequest || void 0 === t.initPasskeyRecoveryRequest) throw new runtime_RequiredError("initPasskeyRecoveryRequest", "Required parameter requestParameters.initPasskeyRecoveryRequest was null or undefined when calling initPasskeyRecovery.");
                        let s = {};
                        if (s["Content-Type"] = "application/json", this.configuration && this.configuration.accessToken) {
                            let t = this.configuration.accessToken,
                                r = yield t("bearerAuth", []);
                            r && (s.Authorization = `Bearer ${r}`)
                        }
                        let l = yield this.request({
                            path: "/sdk/{environmentId}/users/embeddedWallets/passkeyRecovery".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "POST",
                            headers: s,
                            query: {},
                            body: void 0 === (a = t.initPasskeyRecoveryRequest) ? void 0 : null === a ? null : {
                                walletId: a.walletId,
                                turnkeyRecoveryTargetPublicKey: a.turnkeyRecoveryTargetPublicKey
                            }
                        }, r);
                        return new runtime_JSONApiResponse(l, t => null == t ? t : {
                            turnkeyRecoveryUserId: t.turnkeyRecoveryUserId
                        })
                    })
                }
                initPasskeyRecovery(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.initPasskeyRecoveryRaw(t, r);
                        return yield a.value()
                    })
                }
                jwksOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling jwksOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/.well-known/jwks".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                jwksOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.jwksOptionsRaw(t, r)
                    })
                }
                logDynamicSdkSettingsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        var a;
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling logDynamicSdkSettings.");
                        if (null === t.sdkSettingsRequest || void 0 === t.sdkSettingsRequest) throw new runtime_RequiredError("sdkSettingsRequest", "Required parameter requestParameters.sdkSettingsRequest was null or undefined when calling logDynamicSdkSettings.");
                        let s = {};
                        s["Content-Type"] = "application/json";
                        let l = yield this.request({
                            path: "/sdk/{environmentId}/sdkSettings".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "POST",
                            headers: s,
                            query: {},
                            body: void 0 === (a = t.sdkSettingsRequest) ? void 0 : null === a ? null : {
                                dynamicContextProps: a.dynamicContextProps,
                                dynamicWagmiSettings: a.dynamicWagmiSettings,
                                frameworkSettings: function(t) {
                                    var r, a;
                                    if (void 0 !== t) return null === t ? null : {
                                        react: void 0 === (r = t.react) ? void 0 : null === r ? null : {
                                            version: r.version
                                        },
                                        nextjs: void 0 === (a = t.nextjs) ? void 0 : null === a ? null : {
                                            version: a.version
                                        }
                                    }
                                }(a.frameworkSettings)
                            }
                        }, r);
                        return new runtime_VoidApiResponse(l)
                    })
                }
                logDynamicSdkSettings(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.logDynamicSdkSettingsRaw(t, r)
                    })
                }
                mergeUsersRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling mergeUsers.");
                        let a = {};
                        if (this.configuration && this.configuration.accessToken) {
                            let t = this.configuration.accessToken,
                                r = yield t("bearerAuth", []);
                            r && (a.Authorization = `Bearer ${r}`)
                        }
                        let s = yield this.request({
                            path: "/sdk/{environmentId}/users/merge".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "POST",
                            headers: a,
                            query: {}
                        }, r);
                        return new runtime_JSONApiResponse(s, t => VerifyResponseFromJSONTyped(t))
                    })
                }
                mergeUsers(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.mergeUsersRaw(t, r);
                        return yield a.value()
                    })
                }
                mergeUsersOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling mergeUsersOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/users/merge".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                mergeUsersOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.mergeUsersOptionsRaw(t, r)
                    })
                }
                networksOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling networksOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/networks".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                networksOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.networksOptionsRaw(t, r)
                    })
                }
                nonceOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling nonceOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/nonce".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                nonceOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.nonceOptionsRaw(t, r)
                    })
                }
                oauthAuthorizeHtmlRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling oauthAuthorizeHtml.");
                        if (null === t.providerType || void 0 === t.providerType) throw new runtime_RequiredError("providerType", "Required parameter requestParameters.providerType was null or undefined when calling oauthAuthorizeHtml.");
                        let a = {};
                        void 0 !== t.scope && (a.scope = t.scope), void 0 !== t.state && (a.state = t.state), void 0 !== t.redirectUri && (a.redirect_uri = t.redirectUri);
                        let s = yield this.request({
                            path: "/sdk/{environmentId}/providers/{providerType}/authorizeHtml".replace("{environmentId}", encodeURIComponent(String(t.environmentId))).replace("{providerType}", encodeURIComponent(String(t.providerType))),
                            method: "GET",
                            headers: {},
                            query: a
                        }, r);
                        return new TextApiResponse(s)
                    })
                }
                oauthAuthorizeHtml(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.oauthAuthorizeHtmlRaw(t, r);
                        return yield a.value()
                    })
                }
                oauthAuthorizeHtmlOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling oauthAuthorizeHtmlOptions.");
                        if (null === t.providerType || void 0 === t.providerType) throw new runtime_RequiredError("providerType", "Required parameter requestParameters.providerType was null or undefined when calling oauthAuthorizeHtmlOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/providers/{providerType}/authorizeHtml".replace("{environmentId}", encodeURIComponent(String(t.environmentId))).replace("{providerType}", encodeURIComponent(String(t.providerType))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                oauthAuthorizeHtmlOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.oauthAuthorizeHtmlOptionsRaw(t, r)
                    })
                }
                oauthLoginRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling oauthLogin.");
                        if (null === t.providerType || void 0 === t.providerType) throw new runtime_RequiredError("providerType", "Required parameter requestParameters.providerType was null or undefined when calling oauthLogin.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/providers/{providerType}/login".replace("{environmentId}", encodeURIComponent(String(t.environmentId))).replace("{providerType}", encodeURIComponent(String(t.providerType))),
                            method: "GET",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                oauthLogin(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.oauthLoginRaw(t, r)
                    })
                }
                oauthLoginOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling oauthLoginOptions.");
                        if (null === t.providerType || void 0 === t.providerType) throw new runtime_RequiredError("providerType", "Required parameter requestParameters.providerType was null or undefined when calling oauthLoginOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/providers/{providerType}/login".replace("{environmentId}", encodeURIComponent(String(t.environmentId))).replace("{providerType}", encodeURIComponent(String(t.providerType))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                oauthLoginOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.oauthLoginOptionsRaw(t, r)
                    })
                }
                oauthLoginUrlRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling oauthLoginUrl.");
                        if (null === t.providerType || void 0 === t.providerType) throw new runtime_RequiredError("providerType", "Required parameter requestParameters.providerType was null or undefined when calling oauthLoginUrl.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/providers/{providerType}/loginUrl".replace("{environmentId}", encodeURIComponent(String(t.environmentId))).replace("{providerType}", encodeURIComponent(String(t.providerType))),
                            method: "GET",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_JSONApiResponse(a, t => null == t ? t : {
                            url: t.url
                        })
                    })
                }
                oauthLoginUrl(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.oauthLoginUrlRaw(t, r);
                        return yield a.value()
                    })
                }
                oauthLoginUrlOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling oauthLoginUrlOptions.");
                        if (null === t.providerType || void 0 === t.providerType) throw new runtime_RequiredError("providerType", "Required parameter requestParameters.providerType was null or undefined when calling oauthLoginUrlOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/providers/{providerType}/loginUrl".replace("{environmentId}", encodeURIComponent(String(t.environmentId))).replace("{providerType}", encodeURIComponent(String(t.providerType))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                oauthLoginUrlOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.oauthLoginUrlOptionsRaw(t, r)
                    })
                }
                oauthRedirectRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a;
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling oauthRedirect.");
                        if (null === t.providerType || void 0 === t.providerType) throw new runtime_RequiredError("providerType", "Required parameter requestParameters.providerType was null or undefined when calling oauthRedirect.");
                        ! function(t) {
                            for (let r of t)
                                if ("multipart/form-data" === r.contentType) return !0
                        }([{
                            contentType: "application/x-www-form-urlencoded"
                        }]), a = new URLSearchParams, void 0 !== t.code && a.append("code", t.code), void 0 !== t.state && a.append("state", t.state), void 0 !== t.idToken && a.append("id_token", t.idToken), void 0 !== t.error && a.append("error", t.error);
                        let s = yield this.request({
                            path: "/sdk/{environmentId}/providers/{providerType}/redirect".replace("{environmentId}", encodeURIComponent(String(t.environmentId))).replace("{providerType}", encodeURIComponent(String(t.providerType))),
                            method: "POST",
                            headers: {},
                            query: {},
                            body: a
                        }, r);
                        return new TextApiResponse(s)
                    })
                }
                oauthRedirect(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.oauthRedirectRaw(t, r);
                        return yield a.value()
                    })
                }
                oauthRedirectCodeRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling oauthRedirectCode.");
                        if (null === t.providerType || void 0 === t.providerType) throw new runtime_RequiredError("providerType", "Required parameter requestParameters.providerType was null or undefined when calling oauthRedirectCode.");
                        let a = {};
                        void 0 !== t.code && (a.code = t.code), void 0 !== t.scope && (a.scope = t.scope), void 0 !== t.state && (a.state = t.state), void 0 !== t.authuser && (a.authuser = t.authuser), void 0 !== t.prompt && (a.prompt = t.prompt), void 0 !== t.error && (a.error = t.error);
                        let s = yield this.request({
                            path: "/sdk/{environmentId}/providers/{providerType}/redirect".replace("{environmentId}", encodeURIComponent(String(t.environmentId))).replace("{providerType}", encodeURIComponent(String(t.providerType))),
                            method: "GET",
                            headers: {},
                            query: a
                        }, r);
                        return new TextApiResponse(s)
                    })
                }
                oauthRedirectCode(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.oauthRedirectCodeRaw(t, r);
                        return yield a.value()
                    })
                }
                oauthRedirectOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling oauthRedirectOptions.");
                        if (null === t.providerType || void 0 === t.providerType) throw new runtime_RequiredError("providerType", "Required parameter requestParameters.providerType was null or undefined when calling oauthRedirectOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/providers/{providerType}/redirect".replace("{environmentId}", encodeURIComponent(String(t.environmentId))).replace("{providerType}", encodeURIComponent(String(t.providerType))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                oauthRedirectOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.oauthRedirectOptionsRaw(t, r)
                    })
                }
                oauthResultRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        var a;
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling oauthResult.");
                        if (null === t.providerType || void 0 === t.providerType) throw new runtime_RequiredError("providerType", "Required parameter requestParameters.providerType was null or undefined when calling oauthResult.");
                        if (null === t.oauthResultRequest || void 0 === t.oauthResultRequest) throw new runtime_RequiredError("oauthResultRequest", "Required parameter requestParameters.oauthResultRequest was null or undefined when calling oauthResult.");
                        let s = {};
                        s["Content-Type"] = "application/json";
                        let l = yield this.request({
                            path: "/sdk/{environmentId}/providers/{providerType}/oauthResult".replace("{environmentId}", encodeURIComponent(String(t.environmentId))).replace("{providerType}", encodeURIComponent(String(t.providerType))),
                            method: "POST",
                            headers: s,
                            query: {},
                            body: void 0 === (a = t.oauthResultRequest) ? void 0 : null === a ? null : {
                                state: a.state
                            }
                        }, r);
                        return new runtime_JSONApiResponse(l, t => {
                            var r, a;
                            return null == (r = t) ? r : {
                                code: runtime_exists(r, "code") ? r.code : void 0,
                                error: runtime_exists(r, "error") ? r.error : void 0,
                                status: r.status
                            }
                        })
                    })
                }
                oauthResult(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.oauthResultRaw(t, r);
                        return yield a.value()
                    })
                }
                oauthResultOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling oauthResultOptions.");
                        if (null === t.providerType || void 0 === t.providerType) throw new runtime_RequiredError("providerType", "Required parameter requestParameters.providerType was null or undefined when calling oauthResultOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/providers/{providerType}/oauthResult".replace("{environmentId}", encodeURIComponent(String(t.environmentId))).replace("{providerType}", encodeURIComponent(String(t.providerType))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                oauthResultOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.oauthResultOptionsRaw(t, r)
                    })
                }
                oauthSignInRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling oauthSignIn.");
                        if (null === t.providerType || void 0 === t.providerType) throw new runtime_RequiredError("providerType", "Required parameter requestParameters.providerType was null or undefined when calling oauthSignIn.");
                        if (null === t.oauthRequest || void 0 === t.oauthRequest) throw new runtime_RequiredError("oauthRequest", "Required parameter requestParameters.oauthRequest was null or undefined when calling oauthSignIn.");
                        let a = {};
                        a["Content-Type"] = "application/json";
                        let s = yield this.request({
                            path: "/sdk/{environmentId}/providers/{providerType}/signIn".replace("{environmentId}", encodeURIComponent(String(t.environmentId))).replace("{providerType}", encodeURIComponent(String(t.providerType))),
                            method: "POST",
                            headers: a,
                            query: {},
                            body: OauthRequestToJSON(t.oauthRequest)
                        }, r);
                        return new runtime_JSONApiResponse(s, t => VerifyResponseFromJSONTyped(t))
                    })
                }
                oauthSignIn(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.oauthSignInRaw(t, r);
                        return yield a.value()
                    })
                }
                oauthSignInOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling oauthSignInOptions.");
                        if (null === t.providerType || void 0 === t.providerType) throw new runtime_RequiredError("providerType", "Required parameter requestParameters.providerType was null or undefined when calling oauthSignInOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/providers/{providerType}/signIn".replace("{environmentId}", encodeURIComponent(String(t.environmentId))).replace("{providerType}", encodeURIComponent(String(t.providerType))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                oauthSignInOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.oauthSignInOptionsRaw(t, r)
                    })
                }
                oauthVerifyRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling oauthVerify.");
                        if (null === t.providerType || void 0 === t.providerType) throw new runtime_RequiredError("providerType", "Required parameter requestParameters.providerType was null or undefined when calling oauthVerify.");
                        if (null === t.oauthRequest || void 0 === t.oauthRequest) throw new runtime_RequiredError("oauthRequest", "Required parameter requestParameters.oauthRequest was null or undefined when calling oauthVerify.");
                        let a = {};
                        a["Content-Type"] = "application/json";
                        let s = yield this.request({
                            path: "/sdk/{environmentId}/providers/{providerType}/verify".replace("{environmentId}", encodeURIComponent(String(t.environmentId))).replace("{providerType}", encodeURIComponent(String(t.providerType))),
                            method: "POST",
                            headers: a,
                            query: {},
                            body: OauthRequestToJSON(t.oauthRequest)
                        }, r);
                        return new runtime_JSONApiResponse(s, t => VerifyResponseFromJSONTyped(t))
                    })
                }
                oauthVerify(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.oauthVerifyRaw(t, r);
                        return yield a.value()
                    })
                }
                oauthVerifyOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling oauthVerifyOptions.");
                        if (null === t.providerType || void 0 === t.providerType) throw new runtime_RequiredError("providerType", "Required parameter requestParameters.providerType was null or undefined when calling oauthVerifyOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/providers/{providerType}/verify".replace("{environmentId}", encodeURIComponent(String(t.environmentId))).replace("{providerType}", encodeURIComponent(String(t.providerType))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                oauthVerifyOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.oauthVerifyOptionsRaw(t, r)
                    })
                }
                onrampsOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling onrampsOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/onramps".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                onrampsOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.onrampsOptionsRaw(t, r)
                    })
                }
                optionsConnectRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling optionsConnect.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/connect".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                optionsConnect(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.optionsConnectRaw(t, r)
                    })
                }
                passkeyRecoveryOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling passkeyRecoveryOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/users/embeddedWallets/passkeyRecovery".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                passkeyRecoveryOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.passkeyRecoveryOptionsRaw(t, r)
                    })
                }
                prefetchRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        var a;
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling prefetch.");
                        if (null === t.prefetchRequest || void 0 === t.prefetchRequest) throw new runtime_RequiredError("prefetchRequest", "Required parameter requestParameters.prefetchRequest was null or undefined when calling prefetch.");
                        let s = {};
                        s["Content-Type"] = "application/json";
                        let l = yield this.request({
                            path: "/sdk/{environmentId}/prefetch".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "POST",
                            headers: s,
                            query: {},
                            body: void 0 === (a = t.prefetchRequest) ? void 0 : null === a ? null : {
                                chain: ChainEnum_ChainEnumToJSON(a.chain),
                                publicWalletAddress: a.publicWalletAddress
                            }
                        }, r);
                        return new runtime_VoidApiResponse(l)
                    })
                }
                prefetch(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.prefetchRaw(t, r)
                    })
                }
                publishEventRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        var a;
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling publishEvent.");
                        if (null === t.publishEvents || void 0 === t.publishEvents) throw new runtime_RequiredError("publishEvents", "Required parameter requestParameters.publishEvents was null or undefined when calling publishEvent.");
                        let s = {};
                        s["Content-Type"] = "application/json";
                        let l = yield this.request({
                            path: "/sdk/{environmentId}/events".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "POST",
                            headers: s,
                            query: {},
                            body: void 0 === (a = t.publishEvents) ? void 0 : null === a ? null : {
                                events: a.events.map(PublishEventsEventsToJSON)
                            }
                        }, r);
                        return new runtime_VoidApiResponse(l)
                    })
                }
                publishEvent(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.publishEventRaw(t, r)
                    })
                }
                refreshAuthRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling refreshAuth.");
                        let a = {};
                        if (this.configuration && this.configuration.accessToken) {
                            let t = this.configuration.accessToken,
                                r = yield t("bearerAuth", []);
                            r && (a.Authorization = `Bearer ${r}`)
                        }
                        let s = yield this.request({
                            path: "/sdk/{environmentId}/refresh".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "POST",
                            headers: a,
                            query: {}
                        }, r);
                        return new runtime_JSONApiResponse(s, t => VerifyResponseFromJSONTyped(t))
                    })
                }
                refreshAuth(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.refreshAuthRaw(t, r);
                        return yield a.value()
                    })
                }
                refreshOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling refreshOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/refresh".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                refreshOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.refreshOptionsRaw(t, r)
                    })
                }
                retryEmailVerificationRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        var a;
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling retryEmailVerification.");
                        if (null === t.emailVerificationRetryRequest || void 0 === t.emailVerificationRetryRequest) throw new runtime_RequiredError("emailVerificationRetryRequest", "Required parameter requestParameters.emailVerificationRetryRequest was null or undefined when calling retryEmailVerification.");
                        let s = {};
                        s["Content-Type"] = "application/json";
                        let l = yield this.request({
                            path: "/sdk/{environmentId}/emailVerifications/retry".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "POST",
                            headers: s,
                            query: {},
                            body: void 0 === (a = t.emailVerificationRetryRequest) ? void 0 : null === a ? null : {
                                verificationUUID: a.verificationUUID,
                                email: a.email,
                                captchaToken: a.captchaToken
                            }
                        }, r);
                        return new runtime_JSONApiResponse(l, t => EmailVerificationCreateResponseFromJSONTyped(t))
                    })
                }
                retryEmailVerification(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.retryEmailVerificationRaw(t, r);
                        return yield a.value()
                    })
                }
                retryEmailVerificationOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling retryEmailVerificationOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/emailVerifications/retry".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                retryEmailVerificationOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.retryEmailVerificationOptionsRaw(t, r)
                    })
                }
                retrySmsVerificationRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        var a;
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling retrySmsVerification.");
                        if (null === t.smsVerificationRetryRequest || void 0 === t.smsVerificationRetryRequest) throw new runtime_RequiredError("smsVerificationRetryRequest", "Required parameter requestParameters.smsVerificationRetryRequest was null or undefined when calling retrySmsVerification.");
                        let s = {};
                        s["Content-Type"] = "application/json";
                        let l = yield this.request({
                            path: "/sdk/{environmentId}/smsVerifications/retry".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "POST",
                            headers: s,
                            query: {},
                            body: void 0 === (a = t.smsVerificationRetryRequest) ? void 0 : null === a ? null : {
                                verificationUUID: a.verificationUUID,
                                phoneCountryCode: a.phoneCountryCode,
                                phoneNumber: a.phoneNumber,
                                captchaToken: a.captchaToken
                            }
                        }, r);
                        return new runtime_JSONApiResponse(l, t => SmsVerificationCreateResponseFromJSONTyped(t))
                    })
                }
                retrySmsVerification(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.retrySmsVerificationRaw(t, r);
                        return yield a.value()
                    })
                }
                retrySmsVerificationOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling retrySmsVerificationOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/smsVerifications/retry".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                retrySmsVerificationOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.retrySmsVerificationOptionsRaw(t, r)
                    })
                }
                revokeSessionRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling revokeSession.");
                        let a = {};
                        if (this.configuration && this.configuration.accessToken) {
                            let t = this.configuration.accessToken,
                                r = yield t("bearerAuth", []);
                            r && (a.Authorization = `Bearer ${r}`)
                        }
                        let s = yield this.request({
                            path: "/sdk/{environmentId}/revoke".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "POST",
                            headers: a,
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(s)
                    })
                }
                revokeSession(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.revokeSessionRaw(t, r)
                    })
                }
                revokeSessionOptionRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling revokeSessionOption.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/revoke".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                revokeSessionOption(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.revokeSessionOptionRaw(t, r)
                    })
                }
                sdkSettingsOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling sdkSettingsOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/sdkSettings".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                sdkSettingsOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.sdkSettingsOptionsRaw(t, r)
                    })
                }
                settingsOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling settingsOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/settings".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                settingsOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.settingsOptionsRaw(t, r)
                    })
                }
                signInWithEmailVerificationRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling signInWithEmailVerification.");
                        if (null === t.emailVerificationVerifyRequest || void 0 === t.emailVerificationVerifyRequest) throw new runtime_RequiredError("emailVerificationVerifyRequest", "Required parameter requestParameters.emailVerificationVerifyRequest was null or undefined when calling signInWithEmailVerification.");
                        let a = {};
                        a["Content-Type"] = "application/json";
                        let s = yield this.request({
                            path: "/sdk/{environmentId}/emailVerifications/signin".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "POST",
                            headers: a,
                            query: {},
                            body: EmailVerificationVerifyRequestToJSON(t.emailVerificationVerifyRequest)
                        }, r);
                        return new runtime_JSONApiResponse(s, t => VerifyResponseFromJSONTyped(t))
                    })
                }
                signInWithEmailVerification(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.signInWithEmailVerificationRaw(t, r);
                        return yield a.value()
                    })
                }
                signInWithEmailVerificationOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling signInWithEmailVerificationOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/emailVerifications/signin".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                signInWithEmailVerificationOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.signInWithEmailVerificationOptionsRaw(t, r)
                    })
                }
                signInWithSmsVerificationRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling signInWithSmsVerification.");
                        if (null === t.smsVerificationVerifyRequest || void 0 === t.smsVerificationVerifyRequest) throw new runtime_RequiredError("smsVerificationVerifyRequest", "Required parameter requestParameters.smsVerificationVerifyRequest was null or undefined when calling signInWithSmsVerification.");
                        let a = {};
                        a["Content-Type"] = "application/json";
                        let s = yield this.request({
                            path: "/sdk/{environmentId}/smsVerifications/signin".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "POST",
                            headers: a,
                            query: {},
                            body: SmsVerificationVerifyRequestToJSON(t.smsVerificationVerifyRequest)
                        }, r);
                        return new runtime_JSONApiResponse(s, t => VerifyResponseFromJSONTyped(t))
                    })
                }
                signInWithSmsVerification(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.signInWithSmsVerificationRaw(t, r);
                        return yield a.value()
                    })
                }
                signInWithSmsVerificationOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling signInWithSmsVerificationOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/smsVerifications/signin".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                signInWithSmsVerificationOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.signInWithSmsVerificationOptionsRaw(t, r)
                    })
                }
                updatePasskeyRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        var a;
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling updatePasskey.");
                        if (null === t.updateUserPasskeyRequest || void 0 === t.updateUserPasskeyRequest) throw new runtime_RequiredError("updateUserPasskeyRequest", "Required parameter requestParameters.updateUserPasskeyRequest was null or undefined when calling updatePasskey.");
                        let s = {};
                        if (s["Content-Type"] = "application/json", this.configuration && this.configuration.accessToken) {
                            let t = this.configuration.accessToken,
                                r = yield t("bearerAuth", []);
                            r && (s.Authorization = `Bearer ${r}`)
                        }
                        let l = yield this.request({
                            path: "/sdk/{environmentId}/users/passkeys".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "PUT",
                            headers: s,
                            query: {},
                            body: void 0 === (a = t.updateUserPasskeyRequest) ? void 0 : null === a ? null : {
                                id: a.id,
                                alias: a.alias
                            }
                        }, r);
                        return new runtime_JSONApiResponse(l, t => UserPasskeyFromJSON(t))
                    })
                }
                updatePasskey(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.updatePasskeyRaw(t, r);
                        return yield a.value()
                    })
                }
                updateSelfRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        var a;
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling updateSelf.");
                        if (null === t.userFields || void 0 === t.userFields) throw new runtime_RequiredError("userFields", "Required parameter requestParameters.userFields was null or undefined when calling updateSelf.");
                        let s = {};
                        if (s["Content-Type"] = "application/json", this.configuration && this.configuration.accessToken) {
                            let t = this.configuration.accessToken,
                                r = yield t("bearerAuth", []);
                            r && (s.Authorization = `Bearer ${r}`)
                        }
                        let l = yield this.request({
                            path: "/sdk/{environmentId}/users".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "PUT",
                            headers: s,
                            query: {},
                            body: void 0 === (a = t.userFields) ? void 0 : null === a ? null : {
                                email: a.email,
                                alias: a.alias,
                                firstName: a.firstName,
                                lastName: a.lastName,
                                jobTitle: a.jobTitle,
                                phoneNumber: a.phoneNumber,
                                tShirtSize: a.tShirtSize,
                                team: a.team,
                                policiesConsent: a.policiesConsent,
                                country: a.country,
                                username: a.username,
                                captchaToken: a.captchaToken,
                                metadata: a.metadata,
                                btcWallet: a.btcWallet,
                                kdaWallet: a.kdaWallet,
                                ltcWallet: a.ltcWallet,
                                ckbWallet: a.ckbWallet,
                                kasWallet: a.kasWallet,
                                dogeWallet: a.dogeWallet,
                                emailNotification: a.emailNotification,
                                discordNotification: a.discordNotification,
                                newsletterNotification: a.newsletterNotification
                            }
                        }, r);
                        return new runtime_JSONApiResponse(l, t => UpdateSelfResponseFromJSONTyped(t))
                    })
                }
                updateSelf(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.updateSelfRaw(t, r);
                        return yield a.value()
                    })
                }
                userPasskeysOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling userPasskeysOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/users/passkeys".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                userPasskeysOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.userPasskeysOptionsRaw(t, r)
                    })
                }
                usersOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling usersOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/users".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                usersOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.usersOptionsRaw(t, r)
                    })
                }
                verifyRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling verify.");
                        if (null === t.verifyRequest || void 0 === t.verifyRequest) throw new runtime_RequiredError("verifyRequest", "Required parameter requestParameters.verifyRequest was null or undefined when calling verify.");
                        let a = {};
                        a["Content-Type"] = "application/json";
                        let s = yield this.request({
                            path: "/sdk/{environmentId}/verify".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "POST",
                            headers: a,
                            query: {},
                            body: VerifyRequestToJSON(t.verifyRequest)
                        }, r);
                        return new runtime_JSONApiResponse(s, t => VerifyResponseFromJSONTyped(t))
                    })
                }
                verify(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.verifyRaw(t, r);
                        return yield a.value()
                    })
                }
                verifyEmailVerificationRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling verifyEmailVerification.");
                        if (null === t.emailVerificationVerifyRequest || void 0 === t.emailVerificationVerifyRequest) throw new runtime_RequiredError("emailVerificationVerifyRequest", "Required parameter requestParameters.emailVerificationVerifyRequest was null or undefined when calling verifyEmailVerification.");
                        let a = {};
                        if (a["Content-Type"] = "application/json", this.configuration && this.configuration.accessToken) {
                            let t = this.configuration.accessToken,
                                r = yield t("bearerAuth", []);
                            r && (a.Authorization = `Bearer ${r}`)
                        }
                        let s = yield this.request({
                            path: "/sdk/{environmentId}/emailVerifications/verify".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "POST",
                            headers: a,
                            query: {},
                            body: EmailVerificationVerifyRequestToJSON(t.emailVerificationVerifyRequest)
                        }, r);
                        return new runtime_JSONApiResponse(s, t => UpdateSelfResponseFromJSONTyped(t))
                    })
                }
                verifyEmailVerification(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.verifyEmailVerificationRaw(t, r);
                        return yield a.value()
                    })
                }
                verifyEmailVerificationOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling verifyEmailVerificationOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/emailVerifications/verify".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                verifyEmailVerificationOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.verifyEmailVerificationOptionsRaw(t, r)
                    })
                }
                verifyLinkRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling verifyLink.");
                        if (null === t.verifyRequest || void 0 === t.verifyRequest) throw new runtime_RequiredError("verifyRequest", "Required parameter requestParameters.verifyRequest was null or undefined when calling verifyLink.");
                        let a = {};
                        if (a["Content-Type"] = "application/json", this.configuration && this.configuration.accessToken) {
                            let t = this.configuration.accessToken,
                                r = yield t("bearerAuth", []);
                            r && (a.Authorization = `Bearer ${r}`)
                        }
                        let s = yield this.request({
                            path: "/sdk/{environmentId}/verify/link".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "POST",
                            headers: a,
                            query: {},
                            body: VerifyRequestToJSON(t.verifyRequest)
                        }, r);
                        return new runtime_JSONApiResponse(s, t => VerifyResponseFromJSONTyped(t))
                    })
                }
                verifyLink(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.verifyLinkRaw(t, r);
                        return yield a.value()
                    })
                }
                verifyLinkOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling verifyLinkOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/verify/link".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                verifyLinkOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.verifyLinkOptionsRaw(t, r)
                    })
                }
                verifyOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling verifyOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/verify".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                verifyOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.verifyOptionsRaw(t, r)
                    })
                }
                verifyPrefetchRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling verifyPrefetch.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/prefetch".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                verifyPrefetch(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.verifyPrefetchRaw(t, r)
                    })
                }
                verifySmsVerificationRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling verifySmsVerification.");
                        if (null === t.smsVerificationVerifyRequest || void 0 === t.smsVerificationVerifyRequest) throw new runtime_RequiredError("smsVerificationVerifyRequest", "Required parameter requestParameters.smsVerificationVerifyRequest was null or undefined when calling verifySmsVerification.");
                        let a = {};
                        if (a["Content-Type"] = "application/json", this.configuration && this.configuration.accessToken) {
                            let t = this.configuration.accessToken,
                                r = yield t("bearerAuth", []);
                            r && (a.Authorization = `Bearer ${r}`)
                        }
                        let s = yield this.request({
                            path: "/sdk/{environmentId}/smsVerifications/verify".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "POST",
                            headers: a,
                            query: {},
                            body: SmsVerificationVerifyRequestToJSON(t.smsVerificationVerifyRequest)
                        }, r);
                        return new runtime_JSONApiResponse(s, t => UpdateSelfResponseFromJSONTyped(t))
                    })
                }
                verifySmsVerification(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.verifySmsVerificationRaw(t, r);
                        return yield a.value()
                    })
                }
                verifySmsVerificationOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling verifySmsVerificationOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/smsVerifications/verify".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                verifySmsVerificationOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.verifySmsVerificationOptionsRaw(t, r)
                    })
                }
                verifyTransferRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling verifyTransfer.");
                        if (null === t.verifyRequest || void 0 === t.verifyRequest) throw new runtime_RequiredError("verifyRequest", "Required parameter requestParameters.verifyRequest was null or undefined when calling verifyTransfer.");
                        let a = {};
                        if (a["Content-Type"] = "application/json", this.configuration && this.configuration.accessToken) {
                            let t = this.configuration.accessToken,
                                r = yield t("bearerAuth", []);
                            r && (a.Authorization = `Bearer ${r}`)
                        }
                        let s = yield this.request({
                            path: "/sdk/{environmentId}/verify/transfer".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "POST",
                            headers: a,
                            query: {},
                            body: VerifyRequestToJSON(t.verifyRequest)
                        }, r);
                        return new runtime_JSONApiResponse(s, t => VerifyResponseFromJSONTyped(t))
                    })
                }
                verifyTransfer(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.verifyTransferRaw(t, r);
                        return yield a.value()
                    })
                }
                verifyTransferOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling verifyTransferOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/verify/transfer".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                verifyTransferOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.verifyTransferOptionsRaw(t, r)
                    })
                }
                verifyUnlinkRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        var a;
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling verifyUnlink.");
                        if (null === t.verifyUnlinkRequest || void 0 === t.verifyUnlinkRequest) throw new runtime_RequiredError("verifyUnlinkRequest", "Required parameter requestParameters.verifyUnlinkRequest was null or undefined when calling verifyUnlink.");
                        let s = {};
                        if (s["Content-Type"] = "application/json", this.configuration && this.configuration.accessToken) {
                            let t = this.configuration.accessToken,
                                r = yield t("bearerAuth", []);
                            r && (s.Authorization = `Bearer ${r}`)
                        }
                        let l = yield this.request({
                            path: "/sdk/{environmentId}/verify/unlink".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "POST",
                            headers: s,
                            query: {},
                            body: void 0 === (a = t.verifyUnlinkRequest) ? void 0 : null === a ? null : {
                                walletId: a.walletId,
                                verifiedCrentialId: a.verifiedCrentialId,
                                primaryWalletId: a.primaryWalletId
                            }
                        }, r);
                        return new runtime_JSONApiResponse(l, t => VerifyResponseFromJSONTyped(t))
                    })
                }
                verifyUnlink(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        let a = yield this.verifyUnlinkRaw(t, r);
                        return yield a.value()
                    })
                }
                verifyUnlinkOptionsRaw(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        if (null === t.environmentId || void 0 === t.environmentId) throw new runtime_RequiredError("environmentId", "Required parameter requestParameters.environmentId was null or undefined when calling verifyUnlinkOptions.");
                        let a = yield this.request({
                            path: "/sdk/{environmentId}/verify/unlink".replace("{environmentId}", encodeURIComponent(String(t.environmentId))),
                            method: "OPTIONS",
                            headers: {},
                            query: {}
                        }, r);
                        return new runtime_VoidApiResponse(a)
                    })
                }
                verifyUnlinkOptions(t, r) {
                    return _tslib_awaiter(this, void 0, void 0, function*() {
                        yield this.verifyUnlinkOptionsRaw(t, r)
                    })
                }
            };

            function JwtBlockchainAccountFromJSON(t) {
                var r, a, s;
                return null == (r = t) ? r : {
                    address: r.address,
                    chain: r.chain,
                    id: r.id,
                    nameService: runtime_exists(r, "name_service") ? NameServiceDataFromJSONTyped(r.name_service) : void 0,
                    walletName: r.wallet_name,
                    walletProvider: r.wallet_provider
                }
            }

            function DynamicJwtFromJSON(t) {
                var r, a, s;
                return null == t ? t : {
                    kid: runtime_exists(t, "kid") ? t.kid : void 0,
                    aud: t.aud,
                    iss: t.iss,
                    sub: t.sub,
                    exp: runtime_exists(t, "exp") ? t.exp : void 0,
                    iat: runtime_exists(t, "iat") ? t.iat : void 0,
                    sid: t.sid,
                    alias: runtime_exists(t, "alias") ? t.alias : void 0,
                    blockchainAccounts: runtime_exists(t, "blockchain_accounts") ? t.blockchain_accounts.map(JwtBlockchainAccountFromJSON) : void 0,
                    country: runtime_exists(t, "country") ? t.country : void 0,
                    email: runtime_exists(t, "email") ? t.email : void 0,
                    environmentId: t.environment_id,
                    familyName: runtime_exists(t, "family_name") ? t.family_name : void 0,
                    givenName: runtime_exists(t, "given_name") ? t.given_name : void 0,
                    jobTitle: runtime_exists(t, "job_title") ? t.job_title : void 0,
                    lastAuthenticatedAccountId: runtime_exists(t, "last_authenticated_account_id") ? t.last_authenticated_account_id : void 0,
                    lists: runtime_exists(t, "lists") ? t.lists : void 0,
                    phoneNumber: runtime_exists(t, "phone_number") ? t.phone_number : void 0,
                    missingFields: t.missing_fields.map(ProjectSettingsKyc_ProjectSettingsKycFromJSON),
                    scope: runtime_exists(t, "scope") ? t.scope : void 0,
                    tShirtSize: runtime_exists(t, "t_shirt_size") ? t.t_shirt_size : void 0,
                    team: runtime_exists(t, "team") ? t.team : void 0,
                    username: runtime_exists(t, "username") ? t.username : void 0,
                    policiesConsent: runtime_exists(t, "policies_consent") ? t.policies_consent : void 0,
                    verifiedAccount: runtime_exists(t, "verified_account") ? JwtBlockchainAccountFromJSON(t.verified_account) : void 0,
                    verifiedCredentials: t.verified_credentials.map(JwtVerifiedCredential_JwtVerifiedCredentialFromJSON),
                    lastVerifiedCredentialId: t.last_verified_credential_id,
                    firstVisit: runtime_exists(t, "first_visit") ? new Date(t.first_visit) : void 0,
                    lastVisit: runtime_exists(t, "last_visit") ? new Date(t.last_visit) : void 0,
                    newUser: runtime_exists(t, "new_user") ? t.new_user : void 0,
                    btcWallet: runtime_exists(t, "btc_wallet") ? t.btc_wallet : void 0,
                    kdaWallet: runtime_exists(t, "kda_wallet") ? t.kda_wallet : void 0,
                    ltcWallet: runtime_exists(t, "ltc_wallet") ? t.ltc_wallet : void 0,
                    ckbWallet: runtime_exists(t, "ckb_wallet") ? t.ckb_wallet : void 0,
                    kasWallet: runtime_exists(t, "kas_wallet") ? t.kas_wallet : void 0,
                    dogeWallet: runtime_exists(t, "doge_wallet") ? t.doge_wallet : void 0,
                    emailNotification: runtime_exists(t, "email_notification") ? t.email_notification : void 0,
                    discordNotification: runtime_exists(t, "discord_notification") ? t.discord_notification : void 0,
                    newsletterNotification: runtime_exists(t, "newsletter_notification") ? t.newsletter_notification : void 0,
                    metadata: runtime_exists(t, "metadata") ? t.metadata : void 0,
                    memberEnvironmentIds: runtime_exists(t, "member_environment_ids") ? t.member_environment_ids : void 0,
                    info: runtime_exists(t, "info") ? null == (r = t.info) ? r : {
                        alias: runtime_exists(r, "alias") ? r.alias : void 0,
                        chain: runtime_exists(r, "chain") ? r.chain : void 0,
                        email: runtime_exists(r, "email") ? r.email : void 0,
                        ens: runtime_exists(r, "ens") ? NameServiceDataFromJSONTyped(r.ens) : void 0,
                        environmentId: r.environmentId,
                        firstName: runtime_exists(r, "firstName") ? r.firstName : void 0,
                        jobTitle: runtime_exists(r, "jobTitle") ? r.jobTitle : void 0,
                        lastName: runtime_exists(r, "lastName") ? r.lastName : void 0,
                        lists: runtime_exists(r, "lists") ? r.lists : void 0,
                        phoneNumber: runtime_exists(r, "phoneNumber") ? r.phoneNumber : void 0,
                        tShirtSize: runtime_exists(r, "tShirtSize") ? r.tShirtSize : void 0,
                        userId: runtime_exists(r, "userId") ? r.userId : void 0,
                        username: runtime_exists(r, "username") ? r.username : void 0,
                        wallet: runtime_exists(r, "wallet") ? r.wallet : void 0,
                        walletPublicKey: runtime_exists(r, "walletPublicKey") ? r.walletPublicKey : void 0
                    } : void 0
                }
            }
        },
        13866: function(t, r, a) {
            "use strict";
            let s, l, c, d;
            a.d(r, {
                EI: function() {
                    return DynamicContextProvider
                },
                dn: function() {
                    return SortWallets
                },
                SX: function() {
                    return useDynamicContext
                },
                wC: function() {
                    return useUserWallets
                }
            });
            var u, m, p, h, f, y, b, C, E, j, I, O, P, R, F, W, M, D, L, U, B, $, K, G, J, Y, Q, ee, et, en, er, ea, ei, eo, es, el, ec, ed, eu, em, ep, eh, ef, ey, eg, ev, eb, ew, e_, ek, ex, eC, eS, eE, ej, eI, eT, eO, eN, eP, eA, eR, eF, eW, eM, eD, eL, ez, eU, eq, eB, eV, eH, e$, eK, eG, eZ, eJ, eY, eQ, eX, e0, e1, e2, e3, e5, e4 = {};

            function defaultSetTimout() {
                throw Error("setTimeout has not been defined")
            }

            function defaultClearTimeout() {
                throw Error("clearTimeout has not been defined")
            }
            a.r(e4), a.d(e4, {
                AppleDarkSocialIcon: function() {
                    return t2
                },
                AppleSocialIcon: function() {
                    return t1
                },
                BitbucketIcon: function() {
                    return tL
                },
                CoinbaseSocialIcon: function() {
                    return t3
                },
                DiscordIcon: function() {
                    return tz
                },
                FacebookIcon: function() {
                    return tU
                },
                GithubDarkIcon: function() {
                    return tB
                },
                GithubIcon: function() {
                    return tq
                },
                GitlabIcon: function() {
                    return tV
                },
                GoogleIcon: function() {
                    return tH
                },
                HelpdeskIcon: function() {
                    return t$
                },
                InstagramIcon: function() {
                    return t5
                },
                LinkedinIcon: function() {
                    return tK
                },
                MicrosoftIcon: function() {
                    return tG
                },
                OnePasswordDarkIcon: function() {
                    return t7
                },
                OnePasswordIcon: function() {
                    return t6
                },
                SlackIcon: function() {
                    return tZ
                },
                TelegramIcon: function() {
                    return tJ
                },
                TwitchDarkIcon: function() {
                    return tQ
                },
                TwitchIcon: function() {
                    return tY
                },
                TwitterDarkIcon: function() {
                    return t0
                },
                TwitterIcon: function() {
                    return tX
                },
                YouTubeIcon: function() {
                    return t4
                }
            });
            var e6 = defaultSetTimout,
                e7 = defaultClearTimeout;

            function runTimeout(t) {
                if (e6 === setTimeout) return setTimeout(t, 0);
                if ((e6 === defaultSetTimout || !e6) && setTimeout) return e6 = setTimeout, setTimeout(t, 0);
                try {
                    return e6(t, 0)
                } catch (r) {
                    try {
                        return e6.call(null, t, 0)
                    } catch (r) {
                        return e6.call(this, t, 0)
                    }
                }
            }
            "function" == typeof globalThis.setTimeout && (e6 = setTimeout), "function" == typeof globalThis.clearTimeout && (e7 = clearTimeout);
            var e8 = [],
                e9 = !1,
                te = -1;

            function cleanUpNextTick() {
                e9 && h && (e9 = !1, h.length ? e8 = h.concat(e8) : te = -1, e8.length && drainQueue())
            }

            function drainQueue() {
                if (!e9) {
                    var t = runTimeout(cleanUpNextTick);
                    e9 = !0;
                    for (var r = e8.length; r;) {
                        for (h = e8, e8 = []; ++te < r;) h && h[te].run();
                        te = -1, r = e8.length
                    }
                    h = null, e9 = !1,
                        function(t) {
                            if (e7 === clearTimeout) return clearTimeout(t);
                            if ((e7 === defaultClearTimeout || !e7) && clearTimeout) return e7 = clearTimeout, clearTimeout(t);
                            try {
                                e7(t)
                            } catch (r) {
                                try {
                                    return e7.call(null, t)
                                } catch (r) {
                                    return e7.call(this, t)
                                }
                            }
                        }(t)
                }
            }

            function Item(t, r) {
                this.fun = t, this.array = r
            }

            function noop() {}
            Item.prototype.run = function() {
                this.fun.apply(null, this.array)
            };
            var tt = globalThis.performance || {},
                tn = tt.now || tt.mozNow || tt.msNow || tt.oNow || tt.webkitNow || function() {
                    return new Date().getTime()
                },
                tr = new Date,
                ta = {
                    nextTick: function(t) {
                        var r = Array(arguments.length - 1);
                        if (arguments.length > 1)
                            for (var a = 1; a < arguments.length; a++) r[a - 1] = arguments[a];
                        e8.push(new(Item(t, r))), 1 !== e8.length || e9 || runTimeout(drainQueue)
                    },
                    title: "browser",
                    browser: !0,
                    env: {},
                    argv: [],
                    version: "",
                    versions: {},
                    on: noop,
                    addListener: noop,
                    once: noop,
                    off: noop,
                    removeListener: noop,
                    removeAllListeners: noop,
                    emit: noop,
                    binding: function(t) {
                        throw Error("process.binding is not supported")
                    },
                    cwd: function() {
                        return "/"
                    },
                    chdir: function(t) {
                        throw Error("process.chdir is not supported")
                    },
                    umask: function() {
                        return 0
                    },
                    hrtime: function(t) {
                        var r = .001 * tn.call(tt),
                            a = Math.floor(r),
                            s = Math.floor(r % 1 * 1e9);
                        return t && (a -= t[0], (s -= t[1]) < 0 && (a--, s += 1e9)), [a, s]
                    },
                    platform: "browser",
                    release: {},
                    config: {},
                    uptime: function() {
                        return (new Date().getTime() - tr.getTime()) / 1e3
                    }
                };
            let ti = {};
            Object.keys(ti).forEach(t => {
                let r = t.split("."),
                    a = ta;
                for (let s = 0; s < r.length; s++) {
                    let l = r[s];
                    s === r.length - 1 ? a[l] = ti[t] : a = a[l] || (a[l] = {})
                }
            });
            var to = a(9389);
            "undefined" == typeof window || (window.global = globalThis, window.process || void 0 !== to || Object.assign(window, {
                process: ta
            }));
            let ts = {
                "@dynamic-labs/sdk-api": "0.0.363",
                "@hcaptcha/react-hcaptcha": "1.4.4",
                "country-list": "2.3.0",
                formik: "2.2.9",
                i18next: "^23.4.6",
                qrcode: "1.5.1",
                "react-focus-lock": "2.9.2",
                "react-i18next": "^13.2.0",
                yup: "0.32.11"
            }["@dynamic-labs/sdk-api"];
            var tl = a(47969),
                tc = a(84310),
                td = a(32663),
                tu = a(37943);
            let getApiProviders = t => Object.values(tu.ml9).reduce((r, a) => {
                    let s = t.find(t => t.provider === a);
                    return s && (r[a] = s), r
                }, {}),
                tm = [],
                tp = {
                    disabledConfirmationOnce: () => {
                        throw Error("disabledConfirmationOnce, not implemented")
                    },
                    sendTransaction: () => {
                        throw Error("requestSendTransactionConfirmation not implemented")
                    },
                    signMessage: () => {
                        throw Error("signMessage not implemented")
                    }
                },
                getSupportedWallets = t => {
                    let {
                        appLogoUrl: r = "",
                        appName: a = "",
                        chainRpcProviders: s,
                        deepLinkPreference: l,
                        flowNetwork: c,
                        isWalletConnectV2Enabled: d = !1,
                        mobileExperience: u = "in-app-browser",
                        networkConfigurations: m = {
                            cosmos: [],
                            evm: [],
                            solana: [],
                            starknet: []
                        },
                        settings: p,
                        skipMemo: h = !1,
                        walletConnectProjectId: f = "",
                        walletConnectorsProp: y,
                        walletUiUtils: b,
                        walletBook: C,
                        walletConnectV1Bridge: E,
                        walletConnectPreferredChains: j
                    } = t;
                    if (!h && tm.length > 0) return tm;
                    let I = (null == m ? void 0 : m.evm) || [],
                        O = (null == m ? void 0 : m.solana) || [],
                        P = (null == m ? void 0 : m.cosmos) || [],
                        R = (null == m ? void 0 : m.starknet) || [],
                        F = getApiProviders(getEnabledProviders(p.providers)),
                        W = {
                            apiProviders: F,
                            appLogoUrl: r,
                            appName: a,
                            chainRpcProviders: s,
                            cosmosNetworks: P,
                            deepLinkPreference: l,
                            evmNetworks: I,
                            flowNetwork: c,
                            isWalletConnectV2Enabled: d,
                            mobileExperience: u,
                            projectId: f,
                            settings: p,
                            solNetworks: O,
                            starknetNetworks: R,
                            walletBook: C,
                            walletConnectPreferredChains: j,
                            walletConnectV1Bridge: E,
                            walletUiUtils: b || tp
                        },
                        M = y.map(t => t(W)).flat().map(t => new t(W)).filter(t => t.filter()).map(t => t.getMobileOrInstalledWallet()),
                        D = filterWalletsForPlatform(C, M);
                    return tm = applyLinksOverrides(C, D)
                },
                applyLinksOverrides = (t, r) => r.map(r => {
                    let a = (0, tc.MO)(t, r.key);
                    return void 0 !== a.switchNetworkOnlyFromWallet && (r.switchNetworkOnlyFromWallet = a.switchNetworkOnlyFromWallet), r
                }),
                filterWalletsForPlatform = (t, r) => r.filter(r => {
                    let a = (0, tc.MO)(t, r.key);
                    return !!(r.isInstalledOnBrowser() || (0, tl.MQ)(r)) || !a.showOnlyIfInstalled && (!(0, td.tq)() || handleMobileWalletFilter(t, r.key, a))
                }),
                handleMobileWalletFilter = (t, r, a) => {
                    if (!a.mobile) return !1;
                    let s = !!a.mobile.universal || !!a.mobile.native,
                        l = void 0 !== a.walletConnect;
                    if ((0, td.zc)() || (0, td.IN)()) {
                        let a = !!(0, tc.oq)(t, r).ios;
                        return l ? a && s : a
                    } {
                        let a = !!(0, tc.oq)(t, r).android;
                        return l ? a && s : a
                    }
                },
                th = {
                    "eip155:1": ["ETH", "EVM"],
                    "flow:mainnet": ["FLOW"]
                },
                getSupportedChainsForWalletConnector = (t, r) => {
                    var a;
                    let s = (0, tc.MO)(t, r.key),
                        l = new Set,
                        c = null !== (a = s.chains) && void 0 !== a ? a : [];
                    return c.forEach(t => {
                        let r = th[t];
                        null == r || r.forEach(t => {
                            l.add(t)
                        })
                    }), r.supportedChains.forEach(t => {
                        l.add(t)
                    }), [...l]
                },
                getEnabledWallets = t => {
                    let r = getSupportedWallets(t.getSupportedWalletOpts),
                        a = r.filter(r => t.enabledChains.some(a => getSupportedChainsForWalletConnector(t.getSupportedWalletOpts.walletBook, r).includes(a)) || "magiclink" === r.key);
                    return a
                },
                getEnabledProviders = t => {
                    var r;
                    return null !== (r = null == t ? void 0 : t.filter(t => !!t.enabledAt || t.provider === tu.ml9.MagicLink && !!t.providerProjectId || t.provider === tu.ml9.Turnkey)) && void 0 !== r ? r : []
                };
            var tf = a(70278);
            let generateMessageToSign = ({
                    blockchain: t,
                    domain: r,
                    chainId: a,
                    nonce: s,
                    uri: l,
                    publicKey: c,
                    issuedAt: d = new Date().toISOString(),
                    statement: u,
                    requestId: m,
                    resources: p
                }) => {
                    var h, f;
                    if ("STARK" === t) return JSON.stringify({
                        domain: r.substring(0, 31),
                        nonce: s
                    });
                    let y = null !== (f = null === (h = (0, tl.bt)(t)) || void 0 === h ? void 0 : h.blockchainName) && void 0 !== f ? f : "Ethereum",
                        b = `${r} wants you to sign in with your ${y} account:`,
                        C = getEip55Address(c, a),
                        E = [b, C].join("\n"),
                        j = `${[E,u].join(u?"\n\n":"\n")}
`,
                        I = [];
                    I.push(`URI: ${l}`), I.push("Version: 1"), a && I.push(`Chain ID: ${a}`), I.push(`Nonce: ${s}`), I.push(`Issued At: ${d}`), m && I.push(`Request ID: ${m}`), (null == p ? void 0 : p.length) && I.push(`Resources:${p.map(t=>"\n- "+t).join()}`);
                    let O = I.join("\n");
                    return [j, O].join("\n")
                },
                getEip55Address = (t, r) => {
                    try {
                        if (r) return (0, tf.K)(t)
                    } catch (r) {
                        tl.kg.debug(`Error getting checksum, returning default ${t}`)
                    }
                    return t
                };
            var ty = a(70769),
                tg = a(71311);
            let tv = new tg.Y("DynamicSDK");
            var tb = a(16356);
            let tw = "https://iconic.dynamic-static-assets.com/icons/sprite.svg",
                createIconic = t => {
                    let r = Object.assign(Object.assign({}, t), {
                            function: t => {
                                let a = `${tw}#${r.iconName}`;
                                return (0, tb.jsx)("img", Object.assign({
                                    "data-testid": `iconic-${r.iconName}`,
                                    src: a,
                                    alt: r.alt
                                }, t))
                            }
                        }),
                        a = r.function.bind(r);
                    return Object.assign(a, {
                        iconName: r.iconName,
                        sourcePath: r.sourcePath
                    }), a
                },
                t_ = createIconic({
                    alt: "Brave Browser",
                    iconName: "brave",
                    sourcePath: "icons/browsers/brave.svg"
                }),
                tk = createIconic({
                    alt: "Chrome Browser",
                    iconName: "chrome",
                    sourcePath: "icons/browsers/chrome.svg"
                }),
                tx = createIconic({
                    alt: "Edge Browser",
                    iconName: "edge",
                    sourcePath: "icons/browsers/edge.svg"
                }),
                tC = createIconic({
                    alt: "Firefox Browser",
                    iconName: "firefox",
                    sourcePath: "icons/browsers/firefox.svg"
                }),
                tS = createIconic({
                    alt: "Opera Browser",
                    iconName: "opera",
                    sourcePath: "icons/browsers/opera.svg"
                }),
                tE = createIconic({
                    alt: "Opera Browser",
                    iconName: "safari",
                    sourcePath: "icons/browsers/safari.svg"
                }),
                tj = createIconic({
                    alt: "Algorand Chain",
                    iconName: "algorand",
                    sourcePath: "icons/chains/algorand.svg"
                });
            createIconic({
                alt: "Arbitrum Chain",
                iconName: "arbitrum",
                sourcePath: "icons/chains/arbitrum.svg"
            }), createIconic({
                alt: "Aurora Chain",
                iconName: "aurora",
                sourcePath: "icons/chains/aurora.svg"
            }), createIconic({
                alt: "Base Chain",
                iconName: "base",
                sourcePath: "icons/chains/base.svg"
            });
            let tI = createIconic({
                alt: "Bitcoin Chain",
                iconName: "bitcoin",
                sourcePath: "icons/chains/bitcoin.svg"
            });
            createIconic({
                alt: "BNB Chain",
                iconName: "bnb",
                sourcePath: "icons/chains/bnb.svg"
            });
            let tT = createIconic({
                alt: "Cosmos Chain",
                iconName: "cosmos",
                sourcePath: "icons/chains/cosmos.svg"
            });
            createIconic({
                alt: "Osmosis Chain",
                iconName: "osmosis",
                sourcePath: "icons/chains/osmosis.svg"
            }), createIconic({
                alt: "Axelar Chain",
                iconName: "axelar",
                sourcePath: "icons/chains/axelar.svg"
            });
            let tO = createIconic({
                alt: "Ethereum Chain",
                iconName: "ethereum",
                sourcePath: "icons/chains/ethereum.svg"
            });
            createIconic({
                alt: "Goerli Chain",
                iconName: "goerli",
                sourcePath: "icons/chains/goerli.svg"
            }), createIconic({
                alt: "zkSync Era Chain",
                iconName: "zkSync",
                sourcePath: "icons/chains/zkSync.svg"
            });
            let tN = createIconic({
                alt: "Flow Chain",
                iconName: "flow",
                sourcePath: "icons/chains/flow.svg"
            });
            createIconic({
                alt: "Gnosis Chain",
                iconName: "gnosis",
                sourcePath: "icons/chains/gnosis.svg"
            }), createIconic({
                alt: "Optimism Chain",
                iconName: "optimism",
                sourcePath: "icons/chains/optimism.svg"
            }), createIconic({
                alt: "Palm Chain",
                iconName: "palm",
                sourcePath: "icons/chains/palm.svg"
            }), createIconic({
                alt: "Polygon Chain",
                iconName: "polygon",
                sourcePath: "icons/chains/polygon.svg"
            });
            let tP = createIconic({
                    alt: "Solana Chain",
                    iconName: "solana",
                    sourcePath: "icons/chains/solana.svg"
                }),
                tA = createIconic({
                    alt: "Starknet Chain",
                    iconName: "starknet",
                    sourcePath: "icons/chains/starknet.svg"
                });
            createIconic({
                alt: "1inch Wallet",
                iconName: "1inch.svg",
                sourcePath: "icons/wallets/1inch.svg"
            }), createIconic({
                alt: "Argent X Wallet",
                iconName: "argentx",
                sourcePath: "icons/wallets/argentx.svg"
            }), createIconic({
                alt: "Argent Mobile",
                iconName: "argentmobile",
                sourcePath: "icons/wallets/argent-mobile.svg"
            }), createIconic({
                alt: "Argent Web Wallet",
                iconName: "argentwebwallet",
                sourcePath: "icons/wallets/argent-web-wallet.svg"
            }), createIconic({
                alt: "Backpack Wallet",
                iconName: "backpack",
                sourcePath: "icons/wallets/backpack.svg"
            }), createIconic({
                alt: "Binance Wallet",
                iconName: "binance.svg",
                sourcePath: "icons/wallets/binance.svg"
            }), createIconic({
                alt: "BitPay Wallet",
                iconName: "bitpay.svg",
                sourcePath: "icons/wallets/bitpay.svg"
            }), createIconic({
                alt: "Blocto Wallet",
                iconName: "blocto",
                sourcePath: "icons/wallets/blocto.svg"
            }), createIconic({
                alt: "Braavos Wallet",
                iconName: "braavos",
                sourcePath: "icons/wallets/braavos.svg"
            }), createIconic({
                alt: "Coin98 Wallet",
                iconName: "coin98.svg",
                sourcePath: "icons/wallets/coin98.svg"
            });
            let tR = createIconic({
                alt: "Coinbase Wallet",
                iconName: "coinbase",
                sourcePath: "icons/wallets/coinbase.svg"
            });
            createIconic({
                alt: "Crypto Wallet",
                iconName: "crypto.svg",
                sourcePath: "icons/wallets/crypto.svg"
            }), createIconic({
                alt: "Dapper Wallet",
                iconName: "dapper",
                sourcePath: "icons/wallets/dapper.svg"
            }), createIconic({
                alt: "Dawn Wallet",
                iconName: "dawn",
                sourcePath: "icons/wallets/dawn.svg"
            }), createIconic({
                alt: "Default Wallet",
                iconName: "defaultwallet",
                sourcePath: "icons/wallets/default.svg"
            }), createIconic({
                alt: "Dapper Wallet",
                iconName: "emailsign.svg",
                sourcePath: "icons/wallets/emailsign.svg"
            });
            let tF = createIconic({
                alt: "Sign in with Email",
                iconName: "signinwithemail",
                sourcePath: "icons/wallets/signinwithemail.svg"
            });
            createIconic({
                alt: "Exodus Wallet",
                iconName: "exodus",
                sourcePath: "icons/wallets/exodus.svg"
            }), createIconic({
                alt: "Fireblocks Wallet",
                iconName: "fireblocks.svg",
                sourcePath: "icons/wallets/fireblocks.svg"
            }), createIconic({
                alt: "Fortmatic Wallet",
                iconName: "fortmatic",
                sourcePath: "icons/wallets/fortmatic.svg"
            }), createIconic({
                alt: "Frame Wallet",
                iconName: "frame",
                sourcePath: "icons/wallets/frame.svg"
            }), createIconic({
                alt: "Gamestop Wallet",
                iconName: "gamestop",
                sourcePath: "icons/wallets/gamestop.svg"
            }), createIconic({
                alt: "Glow Wallet",
                iconName: "glow",
                sourcePath: "icons/wallets/glow.svg"
            }), createIconic({
                alt: "ImToken Wallet",
                iconName: "imtoken.svg",
                sourcePath: "icons/wallets/imtoken.svg"
            }), createIconic({
                alt: "Injected Wallet",
                iconName: "injectedwallet",
                sourcePath: "icons/wallets/injectedwallet.svg"
            }), createIconic({
                alt: "Keplr Wallet",
                iconName: "keplr",
                sourcePath: "icons/wallets/keplr.svg"
            }), createIconic({
                alt: "Ledger Wallet",
                iconName: "ledger",
                sourcePath: "icons/wallets/ledger.svg"
            }), createIconic({
                alt: "Lilico Wallet",
                iconName: "lilico",
                sourcePath: "icons/wallets/lilico.svg"
            }), createIconic({
                alt: "Linen Wallet",
                iconName: "linen.svg",
                sourcePath: "icons/wallets/linen.svg"
            }), createIconic({
                alt: "Matic Wallet",
                iconName: "matic",
                sourcePath: "icons/wallets/matic.svg"
            }), createIconic({
                alt: "MetaMask Wallet",
                iconName: "metamask",
                sourcePath: "icons/wallets/metamask.svg"
            }), createIconic({
                alt: "Missing Wallet",
                iconName: "missing",
                sourcePath: "icons/wallets/missing.svg"
            }), createIconic({
                alt: "MyAlgo Wallet",
                iconName: "myalgo",
                sourcePath: "icons/wallets/myalgo.svg"
            }), createIconic({
                alt: "Omni Wallet",
                iconName: "omni",
                sourcePath: "icons/wallets/omni.svg"
            }), createIconic({
                alt: "OpeanSea Wallet",
                iconName: "opeansea",
                sourcePath: "icons/wallets/opensea.svg"
            }), createIconic({
                alt: "Pera Wallet",
                iconName: "pera",
                sourcePath: "icons/wallets/pera.svg"
            }), createIconic({
                alt: "Phantom Wallet",
                iconName: "phantom",
                sourcePath: "icons/wallets/phantom.svg"
            }), createIconic({
                alt: "Rainbow Wallet",
                iconName: "rainbow",
                sourcePath: "icons/wallets/rainbow.svg"
            }), createIconic({
                alt: "Safe Wallet",
                iconName: "safe",
                sourcePath: "icons/wallets/safe.svg"
            }), createIconic({
                alt: "Sequence Wallet",
                iconName: "sequence",
                sourcePath: "icons/wallets/sequence.svg"
            }), createIconic({
                alt: "Slope Wallet",
                iconName: "slope",
                sourcePath: "icons/wallets/slope.svg"
            }), createIconic({
                alt: "Solflare Wallet",
                iconName: "solflare",
                sourcePath: "icons/wallets/solflare.svg"
            }), createIconic({
                alt: "Spot Wallet",
                iconName: "spot",
                sourcePath: "icons/wallets/spot.svg"
            }), createIconic({
                alt: "Stroke Wallet",
                iconName: "stroke",
                sourcePath: "icons/wallets/stroke.svg"
            }), createIconic({
                alt: "Taho Wallet",
                iconName: "tallycash",
                sourcePath: "icons/wallets/tallycash.svg"
            }), createIconic({
                alt: "Terra Wallet",
                iconName: "terra",
                sourcePath: "icons/wallets/terra.svg"
            }), createIconic({
                alt: "Torus Wallet",
                iconName: "torus",
                sourcePath: "icons/wallets/torus.svg"
            }), createIconic({
                alt: "Trust Wallet",
                iconName: "trust",
                sourcePath: "icons/wallets/trust.svg"
            }), createIconic({
                alt: "Unstoppable Wallet",
                iconName: "unstoppable",
                sourcePath: "icons/wallets/unstoppable.svg"
            }), createIconic({
                alt: "Venly Wallet",
                iconName: "venly",
                sourcePath: "icons/wallets/venly.svg"
            });
            let tW = createIconic({
                alt: "Wallet Connect Wallet",
                iconName: "walletconnect",
                sourcePath: "icons/wallets/walletconnect.svg"
            });
            createIconic({
                alt: "Magic Link Wallet",
                iconName: "magiclink",
                sourcePath: "icons/wallets/magic-link.svg"
            }), createIconic({
                alt: "Turnkey",
                iconName: "turnkey",
                sourcePath: "icons/wallets/embedded-wallet.svg"
            }), createIconic({
                alt: "Zengo Wallet",
                iconName: "zengo",
                sourcePath: "icons/wallets/zengo.svg"
            }), createIconic({
                alt: "Superb Wallet",
                iconName: "superb",
                sourcePath: "icons/wallets/superb.svg"
            }), createIconic({
                alt: "ZeroDev",
                iconName: "zerodev",
                sourcePath: "icons/wallets/embedded-wallet.svg"
            }), createIconic({
                alt: "Smart Wallet",
                iconName: "smartwallet",
                sourcePath: "icons/wallets/smart-wallet.svg"
            }), createIconic({
                alt: "Magic Eden",
                iconName: "magiceden",
                sourcePath: "icons/wallets/magiceden.svg"
            }), createIconic({
                alt: "Xverse",
                iconName: "xverse",
                sourcePath: "icons/wallets/xverse.svg"
            }), createIconic({
                alt: "Unisat",
                iconName: "unisat",
                sourcePath: "icons/wallets/unisat.svg"
            }), createIconic({
                alt: "Leather",
                iconName: "leather",
                sourcePath: "icons/wallets/leather.svg"
            }), createIconic({
                alt: "OKX",
                iconName: "okx",
                sourcePath: "icons/wallets/okx.svg"
            }), createIconic({
                alt: "Coinbase WaaS",
                iconName: "coinbasewaas",
                sourcePath: "icons/wallets/embedded-wallet.svg"
            });
            let tM = createIconic({
                    alt: "Apple",
                    iconName: "apple",
                    sourcePath: "icons/mobile/apple.svg"
                }),
                tD = createIconic({
                    alt: "Android",
                    iconName: "android",
                    sourcePath: "icons/mobile/android.svg"
                }),
                tL = createIconic({
                    alt: "Bitbucket",
                    iconName: "bitbucket",
                    sourcePath: "icons/social/bitbucket.svg"
                }),
                tz = createIconic({
                    alt: "Discord",
                    iconName: "discord",
                    sourcePath: "icons/social/discord.svg"
                }),
                tU = createIconic({
                    alt: "Facebook",
                    iconName: "facebook",
                    sourcePath: "icons/social/facebook.svg"
                }),
                tq = createIconic({
                    alt: "Github",
                    iconName: "github",
                    sourcePath: "icons/social/github.svg"
                }),
                tB = createIconic({
                    alt: "Github",
                    iconName: "github-dark",
                    sourcePath: "icons/social/github-dark.svg"
                }),
                tV = createIconic({
                    alt: "Gitlab",
                    iconName: "gitlab",
                    sourcePath: "icons/social/gitlab.svg"
                }),
                tH = createIconic({
                    alt: "Google",
                    iconName: "google",
                    sourcePath: "icons/social/google.svg"
                }),
                t$ = createIconic({
                    alt: "Helpdesk",
                    iconName: "helpdesk",
                    sourcePath: "icons/social/helpdesk.svg"
                }),
                tK = createIconic({
                    alt: "Linkedin",
                    iconName: "linkedin",
                    sourcePath: "icons/social/linkedin.svg"
                }),
                tG = createIconic({
                    alt: "Microsoft",
                    iconName: "microsoft",
                    sourcePath: "icons/social/microsoft.svg"
                }),
                tZ = createIconic({
                    alt: "Slack",
                    iconName: "slack",
                    sourcePath: "icons/social/slack.svg"
                }),
                tJ = createIconic({
                    alt: "Telegram",
                    iconName: "telegram",
                    sourcePath: "icons/social/telegram.svg"
                }),
                tY = createIconic({
                    alt: "Twitch",
                    iconName: "twitch",
                    sourcePath: "icons/social/twitch.svg"
                }),
                tQ = createIconic({
                    alt: "Twitch",
                    iconName: "twitch-dark",
                    sourcePath: "icons/social/twitch-dark.svg"
                }),
                tX = createIconic({
                    alt: "Twitter",
                    iconName: "twitter",
                    sourcePath: "icons/social/twitter.svg"
                }),
                t0 = createIconic({
                    alt: "Twitter",
                    iconName: "twitter-dark",
                    sourcePath: "icons/social/twitter-dark.svg"
                }),
                t1 = createIconic({
                    alt: "Apple",
                    iconName: "apple",
                    sourcePath: "icons/social/apple.svg"
                }),
                t2 = createIconic({
                    alt: "Apple",
                    iconName: "apple-dark",
                    sourcePath: "icons/social/apple-dark.svg"
                }),
                t3 = createIconic({
                    alt: "Coinbase",
                    iconName: "coinbasesocial",
                    sourcePath: "icons/social/coinbasesocial.svg"
                }),
                t5 = createIconic({
                    alt: "Instagram",
                    iconName: "instagram",
                    sourcePath: "icons/social/instagram.svg"
                }),
                t4 = createIconic({
                    alt: "YouTube",
                    iconName: "youtube",
                    sourcePath: "icons/social/youtube.svg"
                }),
                t6 = createIconic({
                    alt: "onePassword",
                    iconName: "one-password",
                    sourcePath: "icons/social/onePassword.svg"
                }),
                t7 = createIconic({
                    alt: "onePassword-dark",
                    iconName: "one-password-dark",
                    sourcePath: "icons/social/onePassword-dark.svg"
                }),
                t8 = createIconic({
                    alt: "Captcha Wave",
                    iconName: "captcha-wave",
                    sourcePath: "icons/misc/captcha-wave.svg"
                }),
                t9 = createIconic({
                    alt: "User Profile",
                    iconName: "user-profile",
                    sourcePath: "icons/misc/user-profile.svg"
                });
            createIconic({
                alt: "Arrow Send",
                iconName: "arrow-send",
                sourcePath: "icons/misc/arrow-send.svg"
            }), "function" == typeof SuppressedError && SuppressedError;
            let ne = new tg.Y("iconic"),
                getSocialIcon = (t, r = "light") => {
                    let a = Object.fromEntries(Object.values(e4).map(t => [t.iconName, t]));
                    if ("dark" === r) {
                        let r = a[`${t.toLowerCase()}-dark`];
                        if (r) return r
                    }
                    let s = a[t.toLowerCase()];
                    if (s) return s;
                    throw Error(`Icon ${t}, not found`)
                },
                findSocialIcon = (t, r = "light") => {
                    try {
                        return getSocialIcon(t, r)
                    } catch (t) {
                        return ne.error(t), null
                    }
                },
                SocialIcon = t => {
                    var {
                        name: r,
                        variant: a
                    } = t, s = function(t, r) {
                        var a = {};
                        for (var s in t) Object.prototype.hasOwnProperty.call(t, s) && 0 > r.indexOf(s) && (a[s] = t[s]);
                        if (null != t && "function" == typeof Object.getOwnPropertySymbols)
                            for (var l = 0, s = Object.getOwnPropertySymbols(t); l < s.length; l++) 0 > r.indexOf(s[l]) && Object.prototype.propertyIsEnumerable.call(t, s[l]) && (a[s[l]] = t[s[l]]);
                        return a
                    }(t, ["name", "variant"]);
                    let l = findSocialIcon(r, a);
                    return l ? (0, tb.jsx)(l, Object.assign({}, s)) : null
                };
            var nt = a(97352),
                nn = a(95569);
            let nr = new nn.Z,
                useInternalDynamicEvents = (t, r) => {
                    let a = (0, nt.useRef)(r);
                    a.current = r, (0, nt.useEffect)(() => {
                        let callback = (...t) => a.current(...t);
                        return nr.on(t, callback), () => {
                            nr.off(t, callback)
                        }
                    }, [t])
                },
                na = (0, nt.createContext)(void 0),
                ViewContextProvider = ({
                    children: t,
                    initialView: r = {
                        props: {
                            isWalletConnectList: !0
                        },
                        type: "wallet-list"
                    }
                }) => {
                    let [a, s] = (0, nt.useState)(null), l = a || r, c = (0, nt.useCallback)(() => {
                        s(null)
                    }, []), d = (0, nt.useCallback)((t, r) => {
                        s({
                            props: r,
                            type: t
                        })
                    }, []);
                    useInternalDynamicEvents("logout", () => c());
                    let u = (0, nt.useMemo)(() => ({
                        goToInitialView: c,
                        setView: d,
                        view: l
                    }), [c, d, l]);
                    return (0, tb.jsx)(na.Provider, {
                        value: u,
                        children: t
                    })
                },
                ViewContext_useViewContext = () => {
                    let t = (0, nt.useContext)(na);
                    if (void 0 === t) throw Error("usage of useViewContext not wrapped in `ViewContextProvider`.");
                    return t
                },
                createWallet = (t, r) => {
                    var a;
                    let s = (0, tc.IP)(t, r.key);
                    return {
                        chainGroup: null == s ? void 0 : s.chainGroup,
                        group: (null == s ? void 0 : s.chainGroup) || (null == s ? void 0 : s.walletGroup),
                        injectedConfig: null == s ? void 0 : s.injectedConfig,
                        isInstalledOnBrowser: null !== (a = r.isInstalledOnBrowser()) && void 0 !== a && a,
                        key: r.key,
                        name: r.name,
                        walletConnector: r,
                        walletGroup: null == s ? void 0 : s.walletGroup
                    }
                },
                convertHexToRGBA = (t, r = 1) => {
                    let a = parseInt(t.slice(1, 3), 16),
                        s = parseInt(t.slice(3, 5), 16),
                        l = parseInt(t.slice(5, 7), 16);
                    return "rgba(" + a + ", " + s + ", " + l + ", " + r + ")"
                },
                ni = "#363A46";
            convertHexToRGBA(ni, .65), convertHexToRGBA(ni, .4);
            let no = "#F5F8FF";
            convertHexToRGBA(no, .95), convertHexToRGBA(no, .55), convertHexToRGBA(no, .4);
            let ns = {
                    ALGO: "algorand",
                    BTC: "bip122",
                    COSMOS: "cosmos",
                    ETH: "eip155",
                    EVM: "eip155",
                    FLOW: "flow",
                    SOL: "solana",
                    STARK: "starknet"
                },
                nl = {
                    algorand: tu.AIv.Algo,
                    bip122: tu.AIv.Btc,
                    cosmos: tu.AIv.Cosmos,
                    eip155: tu.AIv.Evm,
                    flow: tu.AIv.Flow,
                    solana: tu.AIv.Sol,
                    starknet: tu.AIv.Stark
                },
                nc = "dynamic_authentication_token",
                nd = "dynamic_authenticated_user",
                nu = "dynamic_last_used_wallet",
                nm = "dynamic_primary_wallet_id",
                np = "dynamic_wallet_picker_search",
                nh = "dynamic_newtoweb3_wallet_extension_installed",
                nf = "dynamic_connected_wallets",
                ny = "dynamic_multi_wallet_enabled",
                ng = "dynamic_context_session_settings",
                nv = "dynamic_wagmi_session_settings",
                nb = "dynamic_embedded_wallet_session_settings",
                nw = "dynamic_embedded_secure_banner",
                n_ = {
                    [nc]: [nd],
                    [nd]: [nc]
                };
            let LocalStorage = class LocalStorage {
                static getDynamicLSKey(t) {
                    return `${t}${LocalStorage.getSuffix()}`
                }
                static validateRequest(t, r) {
                    if (t === nc && !r) throw Error("You cannot access AUTH_TOKEN through localStorage. Use getAuthToken/ storeAuthToken helper functions instead")
                }
                static setSuffix(t) {
                    if (!LocalStorage.__suffix__) {
                        let r = t && `_${t}` || "";
                        LocalStorage.__suffix__ = r
                    }
                }
                static getFromLS(t, r = !1) {
                    if ("undefined" == typeof window) return;
                    LocalStorage.validateRequest(t, r);
                    let a = window.localStorage.getItem(LocalStorage.getDynamicLSKey(t));
                    if (a) try {
                        return JSON.parse(a)
                    } catch (r) {
                        tv.debug(`Error while parsing ${t} from local storage`, {
                            value: a
                        }), [t].concat(n_[t] || []).forEach(t => LocalStorage.removeFromLS(t)), nr.emit("triggerLogout")
                    }
                }
                static removeFromLS(t) {
                    if ("undefined" != typeof window) return window.localStorage.removeItem(LocalStorage.getDynamicLSKey(t))
                }
                static setToLS(t, r, a = !1) {
                    "undefined" != typeof window && (LocalStorage.validateRequest(t, a), window.localStorage.setItem(LocalStorage.getDynamicLSKey(t), JSON.stringify(r)))
                }
                static getKeys() {
                    return "undefined" == typeof window ? [] : Object.keys(window.localStorage)
                }
            };
            LocalStorage.getSuffix = () => LocalStorage.__suffix__ || "";
            var nk = a(61880);
            let nx = ["XS", "S", "M", "L", "XL", "2XL"],
                nC = (0, nk.Yu)(),
                nS = ["Brunei DS", "Cambodia", "Indonesia", "Laos", "Malaysia", "Myanmar", "Philippines", "Singapore", "Thailand", "Vietnam"],
                nE = {
                    primary_chain: "evm",
                    wallets: {
                        algorand: "myalgo",
                        bitcoin: "xverse",
                        cosmos: "keplr",
                        evm: "metamask",
                        flow: "blocto",
                        solana: "phantom"
                    }
                },
                nj = {
                    starknet: "STARK"
                },
                getEnabledChains = t => t.filter(({
                    enabled: t
                }) => t).map(({
                    name: t
                }) => {
                    var r, a;
                    return null !== (r = nj[t]) && void 0 !== r ? r : null === (a = (0, tl.bt)(t)) || void 0 === a ? void 0 : a.symbol
                }).filter(t => !!t),
                getWallets = t => {
                    var r, a, s, l;
                    return getEnabledWallets({
                        enabledChains: getEnabledChains(t.getSupportedWalletOpts.settings.chains),
                        getSupportedWalletOpts: Object.assign(Object.assign({}, t.getSupportedWalletOpts), {
                            chainRpcProviders: ty.l,
                            isWalletConnectV2Enabled: !t.getSupportedWalletOpts.walletConnectV1Bridge && null !== (r = t.getSupportedWalletOpts.settings.sdk.walletConnect) && void 0 !== r && !!r.v2Enabled && null !== (a = t.getSupportedWalletOpts.settings.sdk.walletConnect) && void 0 !== a && !!a.projectId && (null === (s = t.getSupportedWalletOpts.settings.sdk.walletConnect) || void 0 === s ? void 0 : s.v2Enabled),
                            walletConnectProjectId: null === (l = t.getSupportedWalletOpts.settings.sdk.walletConnect) || void 0 === l ? void 0 : l.projectId
                        })
                    }).map(r => {
                        var a;
                        return null === (a = t.walletConnectorExtensions) || void 0 === a || a.forEach(t => r.extend(t)), createWallet(t.getSupportedWalletOpts.walletBook, r)
                    })
                },
                decodeJwt = t => {
                    var r;
                    if (t) try {
                        let a = null === (r = t.split(".")[1]) || void 0 === r ? void 0 : r.replace(/-/g, "+").replace(/_/g, "/"),
                            s = a && decodeURIComponent(atob(a).split("").map(t => `%${`00${t.charCodeAt(0).toString(16)}`.slice(-2)}`).join("")),
                            l = JSON.parse(s),
                            c = (0, tu.s3P)(l);
                        return c
                    } catch (t) {
                        tv.error(t);
                        return
                    }
                },
                isAuthTokenExpired = t => {
                    let r = decodeJwt(t);
                    if (!r || !r.exp) return !0;
                    let a = new Date(1e3 * r.exp).getTime(),
                        s = new Date().getTime();
                    return s >= a
                },
                initExpirationTime = t => {
                    let r = decodeJwt(getAuthToken());
                    if (!r) return clearTimeout(s);
                    let a = null == r ? void 0 : r.exp;
                    if (!a) return clearTimeout(s), t();
                    let l = new Date(1e3 * a).getTime(),
                        c = new Date().getTime();
                    if (c >= l) return clearTimeout(s), t();
                    s = setTimeout(t, Math.min(l - c, 2147483647))
                },
                getInitialView = ({
                    connectedWallets: t,
                    isBridgeFlow: r,
                    isFullyConnected: a,
                    isAuthenticated: s,
                    isMultiWalletEnabled: l
                }) => a || s ? {
                    type: l ? "multi-wallet-wallet-list" : "wallet-list"
                } : r && !t.length ? {
                    type: "bridge-welcome"
                } : {
                    type: "login-with-email-or-wallet"
                },
                setDynamicContextSessionSettings = () => {
                    setSessionSettings(ng), l = setTimeout(isDynamicContextSessionSettingExpired, 864e5)
                },
                setWagmiSessionSettings = () => {
                    setSessionSettings(nv), c = setTimeout(isWagmiSessionSettingExpired, 864e5)
                },
                setSessionSettings = t => {
                    let r = new Date().getTime();
                    LocalStorage.setToLS(t, r.toString())
                },
                isDynamicContextSessionSettingExpired = () => isSettingExpired(ng, l),
                isWagmiSessionSettingExpired = () => isSettingExpired(nv, c),
                isSettingExpired = (t, r) => {
                    let a = LocalStorage.getFromLS(t);
                    if (!a) return !0;
                    let s = parseInt(a),
                        l = new Date().getTime();
                    return l - s > 864e5 && (clearTimeout(r), LocalStorage.removeFromLS(t), !0)
                },
                getAuthToken = () => {
                    if ("undefined" == typeof window) return;
                    let t = LocalStorage.getFromLS(nc, !0);
                    if (!(!t || isAuthTokenExpired(t))) return t
                };

            function _tslib_rest(t, r) {
                var a = {};
                for (var s in t) Object.prototype.hasOwnProperty.call(t, s) && 0 > r.indexOf(s) && (a[s] = t[s]);
                if (null != t && "function" == typeof Object.getOwnPropertySymbols)
                    for (var l = 0, s = Object.getOwnPropertySymbols(t); l < s.length; l++) 0 > r.indexOf(s[l]) && Object.prototype.propertyIsEnumerable.call(t, s[l]) && (a[s[l]] = t[s[l]]);
                return a
            }

            function _tslib_awaiter(t, r, a, s) {
                return new(a || (a = Promise))(function(l, c) {
                    function fulfilled(t) {
                        try {
                            step(s.next(t))
                        } catch (t) {
                            c(t)
                        }
                    }

                    function rejected(t) {
                        try {
                            step(s.throw(t))
                        } catch (t) {
                            c(t)
                        }
                    }

                    function step(t) {
                        var r;
                        t.done ? l(t.value) : ((r = t.value) instanceof a ? r : new a(function(t) {
                            t(r)
                        })).then(fulfilled, rejected)
                    }
                    step((s = s.apply(t, r || [])).next())
                })
            }
            "function" == typeof SuppressedError && SuppressedError, a(91192), Object.create(null);
            let nI = {};

            function utils_warnOnce() {
                for (var t = arguments.length, r = Array(t), a = 0; a < t; a++) r[a] = arguments[a];
                "string" == typeof r[0] && nI[r[0]] || ("string" == typeof r[0] && (nI[r[0]] = new Date), function() {
                    if (console && console.warn) {
                        for (var t = arguments.length, r = Array(t), a = 0; a < t; a++) r[a] = arguments[a];
                        "string" == typeof r[0] && (r[0] = `react-i18next:: ${r[0]}`), console.warn(...r)
                    }
                }(...r))
            }
            let loadedClb = (t, r) => () => {
                if (t.isInitialized) r();
                else {
                    let initialized = () => {
                        setTimeout(() => {
                            t.off("initialized", initialized)
                        }, 0), r()
                    };
                    t.on("initialized", initialized)
                }
            };

            function loadNamespaces(t, r, a) {
                t.loadNamespaces(r, loadedClb(t, a))
            }

            function loadLanguages(t, r, a, s) {
                "string" == typeof a && (a = [a]), a.forEach(r => {
                    0 > t.options.ns.indexOf(r) && t.options.ns.push(r)
                }), t.loadLanguages(r, loadedClb(t, s))
            }
            let nT = /&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34|nbsp|#160|copy|#169|reg|#174|hellip|#8230|#x2F|#47);/g,
                nO = {
                    "&amp;": "&",
                    "&#38;": "&",
                    "&lt;": "<",
                    "&#60;": "<",
                    "&gt;": ">",
                    "&#62;": ">",
                    "&apos;": "'",
                    "&#39;": "'",
                    "&quot;": '"',
                    "&#34;": '"',
                    "&nbsp;": " ",
                    "&#160;": " ",
                    "&copy;": "\xa9",
                    "&#169;": "\xa9",
                    "&reg;": "\xae",
                    "&#174;": "\xae",
                    "&hellip;": "…",
                    "&#8230;": "…",
                    "&#x2F;": "/",
                    "&#47;": "/"
                },
                unescapeHtmlEntity = t => nO[t],
                nN = {
                    bindI18n: "languageChanged",
                    bindI18nStore: "",
                    transEmptyNodeValue: "",
                    transSupportBasicHtmlNodes: !0,
                    transWrapTextNodes: "",
                    transKeepBasicHtmlNodesFor: ["br", "strong", "i", "p"],
                    useSuspense: !0,
                    unescape: t => t.replace(nT, unescapeHtmlEntity)
                },
                nP = {
                    type: "3rdParty",
                    init(t) {
                        ! function() {
                            let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                            nN = { ...nN,
                                ...t
                            }
                        }(t.options.react), d = t
                    }
                },
                nA = (0, nt.createContext)();
            let ReportNamespaces = class ReportNamespaces {
                constructor() {
                    this.usedNamespaces = {}
                }
                addUsedNamespaces(t) {
                    t.forEach(t => {
                        this.usedNamespaces[t] || (this.usedNamespaces[t] = !0)
                    })
                }
                getUsedNamespaces() {
                    return Object.keys(this.usedNamespaces)
                }
            };
            let usePrevious = (t, r) => {
                let a = (0, nt.useRef)();
                return (0, nt.useEffect)(() => {
                    a.current = r ? a.current : t
                }, [t, r]), a.current
            };

            function useTranslation_useTranslation(t) {
                let r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
                    {
                        i18n: a
                    } = r,
                    {
                        i18n: s,
                        defaultNS: l
                    } = (0, nt.useContext)(nA) || {},
                    c = a || s || d;
                if (c && !c.reportNamespaces && (c.reportNamespaces = new ReportNamespaces), !c) {
                    utils_warnOnce("You will need to pass in an i18next instance by using initReactI18next");
                    let notReadyT = (t, r) => "string" == typeof r ? r : r && "object" == typeof r && "string" == typeof r.defaultValue ? r.defaultValue : Array.isArray(t) ? t[t.length - 1] : t,
                        t = [notReadyT, {}, !1];
                    return t.t = notReadyT, t.i18n = {}, t.ready = !1, t
                }
                c.options.react && void 0 !== c.options.react.wait && utils_warnOnce("It seems you are still using the old wait option, you may migrate to the new useSuspense behaviour.");
                let u = { ...nN,
                        ...c.options.react,
                        ...r
                    },
                    {
                        useSuspense: m,
                        keyPrefix: p
                    } = u,
                    h = t || l || c.options && c.options.defaultNS;
                h = "string" == typeof h ? [h] : h || ["translation"], c.reportNamespaces.addUsedNamespaces && c.reportNamespaces.addUsedNamespaces(h);
                let f = (c.isInitialized || c.initializedStoreOnce) && h.every(t => (function(t, r) {
                    let a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                    if (!r.languages || !r.languages.length) return utils_warnOnce("i18n.languages were undefined or empty", r.languages), !0;
                    let s = void 0 !== r.options.ignoreJSONStructure;
                    return s ? r.hasLoadedNamespace(t, {
                        lng: a.lng,
                        precheck: (r, s) => {
                            if (a.bindI18n && a.bindI18n.indexOf("languageChanging") > -1 && r.services.backendConnector.backend && r.isLanguageChangingTo && !s(r.isLanguageChangingTo, t)) return !1
                        }
                    }) : function(t, r) {
                        let a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
                            s = r.languages[0],
                            l = !!r.options && r.options.fallbackLng,
                            c = r.languages[r.languages.length - 1];
                        if ("cimode" === s.toLowerCase()) return !0;
                        let loadNotPending = (t, a) => {
                            let s = r.services.backendConnector.state[`${t}|${a}`];
                            return -1 === s || 2 === s
                        };
                        return (!(a.bindI18n && a.bindI18n.indexOf("languageChanging") > -1) || !r.services.backendConnector.backend || !r.isLanguageChangingTo || !!loadNotPending(r.isLanguageChangingTo, t)) && !!(r.hasResourceBundle(s, t) || !r.services.backendConnector.backend || r.options.resources && !r.options.partialBundledLanguages || loadNotPending(s, t) && (!l || loadNotPending(c, t)))
                    }(t, r, a)
                })(t, c, u));

                function getT() {
                    return c.getFixedT(r.lng || null, "fallback" === u.nsMode ? h : h[0], p)
                }
                let [y, b] = (0, nt.useState)(getT), C = h.join();
                r.lng && (C = `${r.lng}${C}`);
                let E = usePrevious(C),
                    j = (0, nt.useRef)(!0);
                (0, nt.useEffect)(() => {
                    let {
                        bindI18n: t,
                        bindI18nStore: a
                    } = u;

                    function boundReset() {
                        j.current && b(getT)
                    }
                    return j.current = !0, f || m || (r.lng ? loadLanguages(c, r.lng, h, () => {
                        j.current && b(getT)
                    }) : loadNamespaces(c, h, () => {
                        j.current && b(getT)
                    })), f && E && E !== C && j.current && b(getT), t && c && c.on(t, boundReset), a && c && c.store.on(a, boundReset), () => {
                        j.current = !1, t && c && t.split(" ").forEach(t => c.off(t, boundReset)), a && c && a.split(" ").forEach(t => c.store.off(t, boundReset))
                    }
                }, [c, C]);
                let I = (0, nt.useRef)(!0);
                (0, nt.useEffect)(() => {
                    j.current && !I.current && b(getT), I.current = !1
                }, [c, p]);
                let O = [y, c, f];
                if (O.t = y, O.i18n = c, O.ready = f, f || !f && !m) return O;
                throw new Promise(t => {
                    r.lng ? loadLanguages(c, r.lng, h, () => t()) : loadNamespaces(c, h, () => t())
                })
            }

            function I18nextProvider(t) {
                let {
                    i18n: r,
                    defaultNS: a,
                    children: s
                } = t, l = (0, nt.useMemo)(() => ({
                    i18n: r,
                    defaultNS: a
                }), [r, a]);
                return (0, nt.createElement)(nA.Provider, {
                    value: l
                }, s)
            }
            let usePreventPageScroll = t => {
                    let disableScroll = () => {
                            var t;
                            let r = document.querySelector("html"),
                                a = document.querySelector("body");
                            if (!r || !a) return;
                            let s = null === (t = null == window ? void 0 : window.screen) || void 0 === t ? void 0 : t.height,
                                l = a.scrollHeight > s;
                            l && 0 !== s && (r.classList.add("dynamic-no-scroll"), a.classList.add("dynamic-no-scroll"), (0, td.gn)() && (r.classList.add("dynamic-no-scroll--ios"), a.classList.add("dynamic-no-scroll--ios")))
                        },
                        enableScroll = t => {
                            let r = document.querySelector("html"),
                                a = document.querySelector("body");
                            r && a && (r.classList.remove("dynamic-no-scroll"), a.classList.remove("dynamic-no-scroll"), (0, td.gn)() && (r.classList.remove("dynamic-no-scroll--ios"), a.classList.remove("dynamic-no-scroll--ios"), window.scrollTo(t.x, t.y)))
                        };
                    (0, nt.useEffect)(() => {
                        if (!t) return;
                        let r = {
                            x: window.scrollX,
                            y: window.scrollY
                        };
                        return disableScroll(), () => {
                            enableScroll(r)
                        }
                    }, [t])
                },
                nR = "dynamic-captcha-token",
                nF = (0, nt.createContext)(void 0),
                CaptchaContextProvider = ({
                    children: t
                }) => {
                    let {
                        setView: r
                    } = ViewContext_useViewContext(), [a, s] = (0, nt.useState)(void 0), [l, c] = (0, nt.useState)(), d = (0, nt.useCallback)(t => localStorage.setItem(nR, t), []), u = (0, nt.useCallback)(({
                        authMethod: t,
                        onCaptchaSuccess: a
                    }) => {
                        c({
                            authMethod: t,
                            onCaptchaSuccess: a
                        }), r("captcha")
                    }, [r, c]), m = (0, nt.useCallback)(() => {
                        var t;
                        return null !== (t = null != a ? a : localStorage.getItem(nR)) && void 0 !== t ? t : void 0
                    }, [a]), p = (0, nt.useMemo)(() => ({
                        captchaAuthState: l,
                        captchaToken: a,
                        engageCaptcha: u,
                        getCaptchaToken: m,
                        setCaptchaAuthState: c,
                        setCaptchaToken: s,
                        setCaptchaTokenInLS: d
                    }), [l, a, u, c, d, m]);
                    return (0, tb.jsx)(nF.Provider, {
                        value: p,
                        children: t
                    })
                },
                CaptchaContext_useCaptchaContext = () => {
                    let t = (0, nt.useContext)(nF);
                    if (void 0 === t) throw Error("usage of useCaptchaContext not wrapped in `CaptchaContextProvider`.");
                    return t
                },
                nW = {
                    "-32000": "Message signature denied",
                    "-32002": "Please unlock your wallet extension and try again.",
                    "-32602": "Invalid parameters. Please try again.",
                    "-32603": "There was an internal error. Please try again.",
                    0: "Message signature denied.",
                    4001: "Message signature denied.",
                    5001: "Message signature denied.",
                    5002: "Message signature denied.",
                    account_already_linked_to_different_profile: "This social account is already linked to a different profile.",
                    connection_rejected: "Connection rejected. Please try again.",
                    metamask_timeout: "Whoops. Looks like something went wrong. Please try again.",
                    "missing-nonce": "Something went wrong. Please try again.",
                    "missing-public-address": "Connection cancelled. Please try again",
                    oauth_window_blocked: "To connect to your social account, enable popups in your browser and then try again.",
                    oauth_window_timeout: "Session time out. Please try again.",
                    too_many_email_verification_attempts: "Too many email verification attempts, please try again later",
                    "user-cancelled": "",
                    wallet_not_deployed: "Your smart wallet has not been deployed.",
                    wrong_email_verification_token: "The code you entered is incorrect. Please try again."
                },
                nM = (0, nt.createContext)(void 0),
                ErrorContext_ErrorContextProvider = ({
                    children: t
                }) => {
                    let [r, a] = (0, nt.useState)(void 0), s = (0, nt.useCallback)(t => {
                        var r;
                        a(null !== (r = nW[t]) && void 0 !== r ? r : "Something went wrong. Please try again.")
                    }, []);
                    return (0, tb.jsx)(nM.Provider, {
                        value: {
                            error: r,
                            setError: a,
                            setErrorMessage: s
                        },
                        children: t
                    })
                },
                ErrorContext_useErrorContext = () => {
                    let t = (0, nt.useContext)(nM);
                    if (void 0 === t) throw Error("usage of useErrorContext not wrapped in `ErrorContextProvider`.");
                    return t
                },
                getWalletConnectorNetworks = t => t && (t.evmNetworks || t.starknetNetworks) || [],
                isSupportedNetwork = ({
                    walletConnector: t,
                    network: r
                }) => {
                    let a = getWalletConnectorNetworks(t);
                    if (!a.length) return !0;
                    let s = a.some(({
                        chainId: t
                    }) => String(t) === String(r));
                    return s
                },
                nD = (0, nt.createContext)(void 0),
                AccessDeniedContextProvider = ({
                    children: t
                }) => {
                    let [r, a] = (0, nt.useState)(""), [s, l] = (0, nt.useState)(void 0), c = (0, nt.useMemo)(() => ({
                        deniedAddress: r,
                        deniedOauthProvider: s,
                        setDeniedAddress: a,
                        setDeniedOauthProvider: l
                    }), [r, s]);
                    return (0, tb.jsx)(nD.Provider, {
                        value: c,
                        children: t
                    })
                },
                useAccessDeniedContext = () => {
                    let t = (0, nt.useContext)(nD);
                    if (void 0 === t) throw Error("usage of useAccessDeniedContext not wrapped in `AccessDeniedContextProvider`.");
                    return t
                },
                nL = (0, nt.createContext)(void 0),
                AccountExistsContextProvider = ({
                    children: t
                }) => {
                    let [r, a] = (0, nt.useState)(), s = (0, nt.useMemo)(() => ({
                        existentAccountData: r,
                        setExistentAccountData: a
                    }), [r, a]);
                    return (0, tb.jsx)(nL.Provider, {
                        value: s,
                        children: t
                    })
                },
                useAccountExistsContext = () => {
                    let t = (0, nt.useContext)(nL);
                    if (void 0 === t) throw Error("usage of useAccountExistsContext not wrapped in `AccountExistsContextProvider`.");
                    return t
                };
            let ApiEndpoint = class ApiEndpoint {};
            ApiEndpoint.getBaseUrl = () => {
                if (!ApiEndpoint.__defined__) throw Error("ApiEndpoint Base URL has not been initialized");
                return ApiEndpoint.__baseUrl__
            }, ApiEndpoint.setBaseUrl = t => {
                if (ApiEndpoint.__defined__) {
                    if (ApiEndpoint.__baseUrl__ !== t) throw Error(`ApiEndpoint baseUrl is already set to ${ApiEndpoint.__baseUrl__}, cannot change it to ${t}`)
                } else ApiEndpoint.__baseUrl__ = t, ApiEndpoint.__defined__ = !0;
                Object.freeze(ApiEndpoint)
            };
            let isConnectOnly = (t, r) => "connect-only" === r && !(void 0 !== t),
                nz = (0, nt.createContext)(void 0),
                EmailVerificationContextProvider = ({
                    children: t
                }) => {
                    let [r, a] = (0, nt.useState)(void 0), [s, l] = (0, nt.useState)(void 0), c = (0, nt.useMemo)(() => ({
                        email: r,
                        setEmail: a,
                        setVerificationUUID: l,
                        verificationUUID: s
                    }), [r, s]);
                    return (0, tb.jsx)(nz.Provider, {
                        value: c,
                        children: t
                    })
                },
                useEmailVerificationContext = () => {
                    let t = (0, nt.useContext)(nz);
                    if (void 0 === t) throw Error("usage of useEmailVerificationContext not wrapped in `EmailVerificationContextProvider`.");
                    return t
                };
            var nU = a(64353);
            let getValueByKey = (t, r) => t[r],
                nq = {
                    border: "rounded",
                    brandStyle: "subtle",
                    customColor: "",
                    template: "default",
                    themes: {
                        auto: {
                            colors: {
                                accent_1: "#2C303A",
                                accent_2: "#3C414D",
                                accent_3: "#4C525F",
                                background: "#15181F",
                                border: "1px solid #2C303A",
                                error_1: "rgba(255, 106, 106, 0.2)",
                                error_2: "#FF6A6A",
                                footer: "#2C303A",
                                primary: "#15181F",
                                secondary: "#2C303A",
                                ternary: "#2660FF",
                                textPrimary: "#FFF",
                                textSecondary: "#ACACB9"
                            },
                            name: "auto"
                        },
                        dark: {
                            colors: {
                                accent_1: "#2C303A",
                                accent_2: "#3C414D",
                                accent_3: "#4C525F",
                                background: "#15181F",
                                border: "1px solid #2C303A",
                                error_1: "rgba(255, 106, 106, 0.2)",
                                error_2: "#FF6A6A",
                                footer: "#2C303A",
                                primary: "#15181F",
                                secondary: "#2C303A",
                                ternary: "#2660FF",
                                textPrimary: "#FFF",
                                textSecondary: "#ACACB9"
                            },
                            name: "dark"
                        },
                        light: {
                            colors: {
                                accent_1: "#FFF",
                                accent_2: "#F0F3FF",
                                accent_3: "#E9EDFC",
                                background: "#FFFFFF",
                                border: "1px solid #E9EDFC",
                                error_1: "rgba(255, 70, 70, 0.1)",
                                error_2: "#FF4646",
                                footer: "#F7F9FE",
                                primary: "#F7F7F9",
                                secondary: "#FFFFFF",
                                ternary: "#2660FF",
                                textPrimary: "#404040",
                                textSecondary: "#80858B"
                            },
                            name: "light"
                        }
                    },
                    view: "extended",
                    walletColor: {
                        color: "#1648F9",
                        gradient: "90deg, #1648F9 0%, #4B73FF 100%"
                    }
                },
                getThemeConfig = (t, r) => {
                    let {
                        border: a,
                        brand: s,
                        view: l,
                        primaryColor: c
                    } = t || {}, d = r || (null == t ? void 0 : t.theme) || "light", u = (null == t ? void 0 : t.template) || "default";
                    return Object.assign(Object.assign({}, nq), {
                        border: a || nq.border,
                        brandStyle: s || nq.brandStyle,
                        customColor: c || nq.customColor,
                        template: u,
                        theme: getValueByKey(nq.themes, d),
                        view: l || nq.view
                    })
                },
                findOrCreateLinkTag = () => {
                    let t = document.querySelector('[data-source="dynamic-theme-cdn"]');
                    if (t) return t;
                    let r = document.createElement("link");
                    return document.head.append(r), r.dataset.source = "dynamic-theme-cdn", r.rel = "stylesheet", r
                },
                findOrCreateStyleTag = () => {
                    let t = document.querySelector('[data-source="dynamic-theme"]');
                    if (t) return t;
                    let r = document.createElement("style");
                    return document.head.append(r), r.dataset.source = "dynamic-theme", r
                },
                buildStylesheet = t => {
                    let {
                        customColor: r,
                        brandStyle: a
                    } = t;
                    return `@layer dynamic-project-environment-theme {
  #dynamic-widget, #dynamic-modal, .dynamic-shadow-dom {
    ${[["--dynamic-brand-primary-color",r],["--dynamic-badge-dot-background",r],["--dynamic-footer-background-color","bold"===a?r:void 0],["--dynamic-footer-icon-color","subtle"===a?r:void 0]].filter(([,t])=>void 0!==t&&""!==t).map(([t,r])=>`${t}: ${r};`).join("\n    ")}
  }
}`
                },
                nB = (0, nt.createContext)(void 0),
                ThemeContext_ThemeContextProvider = ({
                    customerTheme: t,
                    designSettings: r,
                    children: a
                }) => {
                    let [s, l] = (0, nt.useState)(t || getThemeConfig(null == r ? void 0 : r.modal)), [c, d] = (0, nt.useState)(), [u, m] = (0, nt.useState)(), p = (0, nt.useCallback)((t, r) => {
                        var a;
                        let c = null === (a = nq.themes) || void 0 === a ? void 0 : a[t],
                            d = Object.assign(Object.assign({}, s), {
                                theme: Object.assign(Object.assign({}, c), {
                                    colors: Object.assign(Object.assign({}, c.colors), {
                                        ternary: null != r ? r : c.colors.ternary
                                    })
                                })
                            });
                        l(d)
                    }, [s, l]), h = (0, nt.useCallback)(t => {
                        l(Object.assign(Object.assign({}, s), {
                            template: t
                        }))
                    }, [s, l]), f = (0, nt.useCallback)(t => {
                        l(Object.assign(Object.assign({}, s), {
                            border: t
                        }))
                    }, [s, l]), y = (0, nt.useCallback)(t => {
                        l(Object.assign(Object.assign({}, s), {
                            view: t
                        }))
                    }, [s, l]), b = (0, nt.useCallback)(t => {
                        l(Object.assign(Object.assign({}, s), {
                            customColor: t
                        }))
                    }, [s, l]), C = (0, nt.useCallback)(t => {
                        l(Object.assign(Object.assign({}, s), {
                            brandStyle: t
                        }))
                    }, [s, l]);
                    (0, nt.useEffect)(() => {
                        d(findOrCreateLinkTag()), m(findOrCreateStyleTag())
                    }, []), (0, nt.useEffect)(() => {
                        let a = t || getThemeConfig(null == r ? void 0 : r.modal);
                        return l(a)
                    }, [t, null == r ? void 0 : r.modal]), (0, nt.useEffect)(() => {
                        if (!c || !u) return;
                        let t = "default" === s.template ? "" : `https://app.dynamic.xyz/assets/templates/${s.template}.css`;
                        c.href !== t && (c.href = t);
                        let r = buildStylesheet(s);
                        u.innerHTML !== r && (u.innerHTML = r)
                    }, [c, u, s]), (0, nt.useEffect)(() => {
                        document.body.dataset.dynamicTheme = s.theme.name, document.body.dataset.dynamicThemeBrand = s.brandStyle
                    }, [s.theme.name, s.brandStyle]);
                    let E = (0, nt.useMemo)(() => ({
                        changeBorder: f,
                        changeBrandStyle: C,
                        changePrimaryColor: b,
                        changeTemplate: h,
                        changeTheme: p,
                        changeView: y,
                        theme: s
                    }), [s, f, C, h, p, b, y]);
                    return (0, tb.jsx)(nB.Provider, {
                        value: E,
                        children: a
                    })
                },
                ThemeContext_useThemeContext = () => {
                    let t = (0, nt.useContext)(nB);
                    if (void 0 === t) throw Error("useThemeContext must be used within a ThemeContextProvider");
                    return t
                };
            (u = f || (f = {})).ACCOUNT_ALREADY_LINKED = "account_already_linked", u.ACCOUNT_ALREADY_LINKED_TO_DIFFERENT_PROFILE = "account_already_linked_to_different_profile", u.INVALID_PROVIDER = "invalid_provider", u.NO_ACCOUNT_LINKED = "no_account_linked", u.NO_AUTH_CODE = "no_auth_code", u.NO_OAUTH_URL = "no_oauth_url", u.NO_PROVIDER = "no_provider", u.OAUTH_ERROR = "oauth_error", u.OAUTH_WINDOW_BLOCKED = "oauth_window_blocked", u.OAUTH_WINDOW_CLOSED = "oauth_window_closed", u.OAUTH_WINDOW_TIMEOUT = "oauth_window_timeout", u.PROVIDER_NOT_ENABLED = "provider_not_enabled", u.SESSION_TIMEOUT = "session_timeout", u.SIGNIN_ERROR = "signin_error", u.SOCIAL_LINKING_NOT_ENABLED = "social_linking_not_enabled", u.UNLINK_ERROR = "unlink_error", u.VERIFICATION_ERROR = "verification_error", u.GENERAL_ERROR = "general_error";
            try {
                y = Map
            } catch (t) {}
            try {
                b = Set
            } catch (t) {}

            function clone(t) {
                return function baseClone(t, r, a) {
                    if (!t || "object" != typeof t || "function" == typeof t) return t;
                    if (t.nodeType && "cloneNode" in t) return t.cloneNode(!0);
                    if (t instanceof Date) return new Date(t.getTime());
                    if (t instanceof RegExp) return new RegExp(t);
                    if (Array.isArray(t)) return t.map(clone);
                    if (y && t instanceof y) return new Map(Array.from(t.entries()));
                    if (b && t instanceof b) return new Set(Array.from(t.values()));
                    if (t instanceof Object) {
                        r.push(t);
                        var s = Object.create(t);
                        for (var l in a.push(s), t) {
                            var c = r.findIndex(function(r) {
                                return r === t[l]
                            });
                            s[l] = c > -1 ? a[c] : baseClone(t[l], r, a)
                        }
                        return s
                    }
                    return t
                }(t, [], [])
            }
            let nV = Object.prototype.toString,
                nH = Error.prototype.toString,
                n$ = RegExp.prototype.toString,
                nK = "undefined" != typeof Symbol ? Symbol.prototype.toString : () => "",
                nG = /^Symbol\((.*)\)(.*)$/;

            function printSimpleValue(t, r = !1) {
                if (null == t || !0 === t || !1 === t) return "" + t;
                let a = typeof t;
                if ("number" === a) return t != +t ? "NaN" : 0 === t && 1 / t < 0 ? "-0" : "" + t;
                if ("string" === a) return r ? `"${t}"` : t;
                if ("function" === a) return "[Function " + (t.name || "anonymous") + "]";
                if ("symbol" === a) return nK.call(t).replace(nG, "Symbol($1)");
                let s = nV.call(t).slice(8, -1);
                return "Date" === s ? isNaN(t.getTime()) ? "" + t : t.toISOString(t) : "Error" === s || t instanceof Error ? "[" + nH.call(t) + "]" : "RegExp" === s ? n$.call(t) : null
            }

            function printValue(t, r) {
                let a = printSimpleValue(t, r);
                return null !== a ? a : JSON.stringify(t, function(t, a) {
                    let s = printSimpleValue(this[t], r);
                    return null !== s ? s : a
                }, 2)
            }
            let nZ = {
                    default: "${path} is invalid",
                    required: "${path} is a required field",
                    oneOf: "${path} must be one of the following values: ${values}",
                    notOneOf: "${path} must not be one of the following values: ${values}",
                    notType: ({
                        path: t,
                        type: r,
                        value: a,
                        originalValue: s
                    }) => {
                        let l = null != s && s !== a,
                            c = `${t} must be a \`${r}\` type, but the final value was: \`${printValue(a,!0)}\`` + (l ? ` (cast from the value \`${printValue(s,!0)}\`).` : ".");
                        return null === a && (c += '\n If "null" is intended as an empty value be sure to mark the schema as `.nullable()`'), c
                    },
                    defined: "${path} must be defined"
                },
                nJ = {
                    length: "${path} must be exactly ${length} characters",
                    min: "${path} must be at least ${min} characters",
                    max: "${path} must be at most ${max} characters",
                    matches: '${path} must match the following: "${regex}"',
                    email: "${path} must be a valid email",
                    url: "${path} must be a valid URL",
                    uuid: "${path} must be a valid UUID",
                    trim: "${path} must be a trimmed string",
                    lowercase: "${path} must be a lowercase string",
                    uppercase: "${path} must be a upper case string"
                },
                nY = {
                    min: "${path} field must be later than ${min}",
                    max: "${path} field must be at earlier than ${max}"
                },
                nQ = {
                    isValue: "${path} field must be ${value}"
                },
                nX = {
                    noUnknown: "${path} field has unspecified keys: ${unknown}"
                };
            Object.assign(Object.create(null), {
                mixed: nZ,
                string: nJ,
                number: {
                    min: "${path} must be greater than or equal to ${min}",
                    max: "${path} must be less than or equal to ${max}",
                    lessThan: "${path} must be less than ${less}",
                    moreThan: "${path} must be greater than ${more}",
                    positive: "${path} must be a positive number",
                    negative: "${path} must be a negative number",
                    integer: "${path} must be an integer"
                },
                date: nY,
                object: nX,
                array: {
                    min: "${path} field must have at least ${min} items",
                    max: "${path} field must have less than or equal to ${max} items",
                    length: "${path} must have ${length} items"
                },
                boolean: nQ
            });
            var n0 = Object.prototype.hasOwnProperty,
                _baseHas = function(t, r) {
                    return null != t && n0.call(t, r)
                },
                n1 = a(8399),
                lodash_es_has = function(t, r) {
                    return null != t && (0, n1.Z)(t, r, _baseHas)
                },
                util_isSchema = t => t && t.__isYupSchema__,
                n2 = class {
                    constructor(t, r) {
                        if (this.fn = void 0, this.refs = t, this.refs = t, "function" == typeof r) {
                            this.fn = r;
                            return
                        }
                        if (!lodash_es_has(r, "is")) throw TypeError("`is:` is required for `when()` conditions");
                        if (!r.then && !r.otherwise) throw TypeError("either `then:` or `otherwise:` is required for `when()` conditions");
                        let {
                            is: a,
                            then: s,
                            otherwise: l
                        } = r, c = "function" == typeof a ? a : (...t) => t.every(t => t === a);
                        this.fn = function(...t) {
                            let r = t.pop(),
                                a = t.pop(),
                                d = c(...t) ? s : l;
                            if (d) return "function" == typeof d ? d(a) : a.concat(d.resolve(r))
                        }
                    }
                    resolve(t, r) {
                        let a = this.refs.map(t => t.getValue(null == r ? void 0 : r.value, null == r ? void 0 : r.parent, null == r ? void 0 : r.context)),
                            s = this.fn.apply(t, a.concat(t, r));
                        if (void 0 === s || s === t) return t;
                        if (!util_isSchema(s)) throw TypeError("conditions must return a schema object");
                        return s.resolve(r)
                    }
                };

            function toArray(t) {
                return null == t ? [] : [].concat(t)
            }

            function ValidationError_extends() {
                return (ValidationError_extends = Object.assign || function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            let n3 = /\$\{\s*(\w+)\s*\}/g;
            let ValidationError = class ValidationError extends Error {
                static formatError(t, r) {
                    let a = r.label || r.path || "this";
                    return (a !== r.path && (r = ValidationError_extends({}, r, {
                        path: a
                    })), "string" == typeof t) ? t.replace(n3, (t, a) => printValue(r[a])) : "function" == typeof t ? t(r) : t
                }
                static isError(t) {
                    return t && "ValidationError" === t.name
                }
                constructor(t, r, a, s) {
                    super(), this.value = void 0, this.path = void 0, this.type = void 0, this.errors = void 0, this.params = void 0, this.inner = void 0, this.name = "ValidationError", this.value = r, this.path = a, this.type = s, this.errors = [], this.inner = [], toArray(t).forEach(t => {
                        ValidationError.isError(t) ? (this.errors.push(...t.errors), this.inner = this.inner.concat(t.inner.length ? t.inner : t)) : this.errors.push(t)
                    }), this.message = this.errors.length > 1 ? `${this.errors.length} errors occurred` : this.errors[0], Error.captureStackTrace && Error.captureStackTrace(this, ValidationError)
                }
            };
            let runTests_once = t => {
                let r = !1;
                return (...a) => {
                    r || (r = !0, t(...a))
                }
            };

            function runTests(t, r) {
                let {
                    endEarly: a,
                    tests: s,
                    args: l,
                    value: c,
                    errors: d,
                    sort: u,
                    path: m
                } = t, p = runTests_once(r), h = s.length, f = [];
                if (d = d || [], !h) return d.length ? p(new ValidationError(d, c, m)) : p(null, c);
                for (let t = 0; t < s.length; t++) {
                    let r = s[t];
                    r(l, function(t) {
                        if (t) {
                            if (!ValidationError.isError(t)) return p(t, c);
                            if (a) return t.value = c, p(t, c);
                            f.push(t)
                        }
                        if (--h <= 0) {
                            if (f.length && (u && f.sort(u), d.length && f.push(...d), d = f), d.length) {
                                p(new ValidationError(d, c, m), c);
                                return
                            }
                            p(null, c)
                        }
                    })
                }
            }
            var n5 = a(58249),
                n4 = a(72326),
                n6 = a(16651),
                lodash_es_mapValues = function(t, r) {
                    var a = {};
                    return r = (0, n6.Z)(r, 3), (0, n4.Z)(t, function(t, s, l) {
                        (0, n5.Z)(a, s, r(t, s, l))
                    }), a
                },
                n7 = a(25859);
            let n8 = {
                context: "$",
                value: "."
            };
            let Reference = class Reference {
                constructor(t, r = {}) {
                    if (this.key = void 0, this.isContext = void 0, this.isValue = void 0, this.isSibling = void 0, this.path = void 0, this.getter = void 0, this.map = void 0, "string" != typeof t) throw TypeError("ref must be a string, got: " + t);
                    if (this.key = t.trim(), "" === t) throw TypeError("ref must be a non-empty string");
                    this.isContext = this.key[0] === n8.context, this.isValue = this.key[0] === n8.value, this.isSibling = !this.isContext && !this.isValue;
                    let a = this.isContext ? n8.context : this.isValue ? n8.value : "";
                    this.path = this.key.slice(a.length), this.getter = this.path && (0, n7.getter)(this.path, !0), this.map = r.map
                }
                getValue(t, r, a) {
                    let s = this.isContext ? a : this.isValue ? t : r;
                    return this.getter && (s = this.getter(s || {})), this.map && (s = this.map(s)), s
                }
                cast(t, r) {
                    return this.getValue(t, null == r ? void 0 : r.parent, null == r ? void 0 : r.context)
                }
                resolve() {
                    return this
                }
                describe() {
                    return {
                        type: "ref",
                        key: this.key
                    }
                }
                toString() {
                    return `Ref(${this.key})`
                }
                static isRef(t) {
                    return t && t.__isYupRef
                }
            };

            function createValidation_extends() {
                return (createValidation_extends = Object.assign || function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }

            function createValidation(t) {
                function validate(r, a) {
                    let s, {
                            value: l,
                            path: c = "",
                            label: d,
                            options: u,
                            originalValue: m,
                            sync: p
                        } = r,
                        h = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) r.indexOf(a = c[s]) >= 0 || (l[a] = t[a]);
                            return l
                        }(r, ["value", "path", "label", "options", "originalValue", "sync"]),
                        {
                            name: f,
                            test: y,
                            params: b,
                            message: C
                        } = t,
                        {
                            parent: E,
                            context: j
                        } = u;

                    function resolve(t) {
                        return Reference.isRef(t) ? t.getValue(l, E, j) : t
                    }

                    function createError(t = {}) {
                        let r = lodash_es_mapValues(createValidation_extends({
                                value: l,
                                originalValue: m,
                                label: d,
                                path: t.path || c
                            }, b, t.params), resolve),
                            a = new ValidationError(ValidationError.formatError(t.message || C, r), l, r.path, t.type || f);
                        return a.params = r, a
                    }
                    let I = createValidation_extends({
                        path: c,
                        parent: E,
                        type: f,
                        createError,
                        resolve,
                        options: u,
                        originalValue: m
                    }, h);
                    if (!p) {
                        try {
                            Promise.resolve(y.call(I, l, I)).then(t => {
                                ValidationError.isError(t) ? a(t) : t ? a(null, t) : a(createError())
                            }).catch(a)
                        } catch (t) {
                            a(t)
                        }
                        return
                    }
                    try {
                        var O;
                        if (s = y.call(I, l, I), "function" == typeof(null == (O = s) ? void 0 : O.then)) throw Error(`Validation test of type: "${I.type}" returned a Promise during a synchronous validate. This test will finish after the validate call has returned`)
                    } catch (t) {
                        a(t);
                        return
                    }
                    ValidationError.isError(s) ? a(s) : s ? a(null, s) : a(createError())
                }
                return validate.OPTIONS = t, validate
            }
            Reference.prototype.__isYupRef = !0;
            let trim = t => t.substr(0, t.length - 1).substr(1);
            let ReferenceSet = class ReferenceSet {
                constructor() {
                    this.list = void 0, this.refs = void 0, this.list = new Set, this.refs = new Map
                }
                get size() {
                    return this.list.size + this.refs.size
                }
                describe() {
                    let t = [];
                    for (let r of this.list) t.push(r);
                    for (let [, r] of this.refs) t.push(r.describe());
                    return t
                }
                toArray() {
                    return Array.from(this.list).concat(Array.from(this.refs.values()))
                }
                resolveAll(t) {
                    return this.toArray().reduce((r, a) => r.concat(Reference.isRef(a) ? t(a) : a), [])
                }
                add(t) {
                    Reference.isRef(t) ? this.refs.set(t.key, t) : this.list.add(t)
                }
                delete(t) {
                    Reference.isRef(t) ? this.refs.delete(t.key) : this.list.delete(t)
                }
                clone() {
                    let t = new ReferenceSet;
                    return t.list = new Set(this.list), t.refs = new Map(this.refs), t
                }
                merge(t, r) {
                    let a = this.clone();
                    return t.list.forEach(t => a.add(t)), t.refs.forEach(t => a.add(t)), r.list.forEach(t => a.delete(t)), r.refs.forEach(t => a.delete(t)), a
                }
            };

            function schema_extends() {
                return (schema_extends = Object.assign || function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            let BaseSchema = class BaseSchema {
                constructor(t) {
                    this.deps = [], this.tests = void 0, this.transforms = void 0, this.conditions = [], this._mutate = void 0, this._typeError = void 0, this._whitelist = new ReferenceSet, this._blacklist = new ReferenceSet, this.exclusiveTests = Object.create(null), this.spec = void 0, this.tests = [], this.transforms = [], this.withMutation(() => {
                        this.typeError(nZ.notType)
                    }), this.type = (null == t ? void 0 : t.type) || "mixed", this.spec = schema_extends({
                        strip: !1,
                        strict: !1,
                        abortEarly: !0,
                        recursive: !0,
                        nullable: !1,
                        presence: "optional"
                    }, null == t ? void 0 : t.spec)
                }
                get _type() {
                    return this.type
                }
                _typeCheck(t) {
                    return !0
                }
                clone(t) {
                    if (this._mutate) return t && Object.assign(this.spec, t), this;
                    let r = Object.create(Object.getPrototypeOf(this));
                    return r.type = this.type, r._typeError = this._typeError, r._whitelistError = this._whitelistError, r._blacklistError = this._blacklistError, r._whitelist = this._whitelist.clone(), r._blacklist = this._blacklist.clone(), r.exclusiveTests = schema_extends({}, this.exclusiveTests), r.deps = [...this.deps], r.conditions = [...this.conditions], r.tests = [...this.tests], r.transforms = [...this.transforms], r.spec = clone(schema_extends({}, this.spec, t)), r
                }
                label(t) {
                    let r = this.clone();
                    return r.spec.label = t, r
                }
                meta(...t) {
                    if (0 === t.length) return this.spec.meta;
                    let r = this.clone();
                    return r.spec.meta = Object.assign(r.spec.meta || {}, t[0]), r
                }
                withMutation(t) {
                    let r = this._mutate;
                    this._mutate = !0;
                    let a = t(this);
                    return this._mutate = r, a
                }
                concat(t) {
                    if (!t || t === this) return this;
                    if (t.type !== this.type && "mixed" !== this.type) throw TypeError(`You cannot \`concat()\` schema's of different types: ${this.type} and ${t.type}`);
                    let r = t.clone(),
                        a = schema_extends({}, this.spec, r.spec);
                    return r.spec = a, r._typeError || (r._typeError = this._typeError), r._whitelistError || (r._whitelistError = this._whitelistError), r._blacklistError || (r._blacklistError = this._blacklistError), r._whitelist = this._whitelist.merge(t._whitelist, t._blacklist), r._blacklist = this._blacklist.merge(t._blacklist, t._whitelist), r.tests = this.tests, r.exclusiveTests = this.exclusiveTests, r.withMutation(r => {
                        t.tests.forEach(t => {
                            r.test(t.OPTIONS)
                        })
                    }), r.transforms = [...this.transforms, ...r.transforms], r
                }
                isType(t) {
                    return !!this.spec.nullable && null === t || this._typeCheck(t)
                }
                resolve(t) {
                    let r = this;
                    if (r.conditions.length) {
                        let a = r.conditions;
                        (r = r.clone()).conditions = [], r = (r = a.reduce((r, a) => a.resolve(r, t), r)).resolve(t)
                    }
                    return r
                }
                cast(t, r = {}) {
                    let a = this.resolve(schema_extends({
                            value: t
                        }, r)),
                        s = a._cast(t, r);
                    if (void 0 !== t && !1 !== r.assert && !0 !== a.isType(s)) {
                        let l = printValue(t),
                            c = printValue(s);
                        throw TypeError(`The value of ${r.path||"field"} could not be cast to a value that satisfies the schema type: "${a._type}". 

attempted value: ${l} 
` + (c !== l ? `result of cast: ${c}` : ""))
                    }
                    return s
                }
                _cast(t, r) {
                    let a = void 0 === t ? t : this.transforms.reduce((r, a) => a.call(this, r, t, this), t);
                    return void 0 === a && (a = this.getDefault()), a
                }
                _validate(t, r = {}, a) {
                    let {
                        sync: s,
                        path: l,
                        from: c = [],
                        originalValue: d = t,
                        strict: u = this.spec.strict,
                        abortEarly: m = this.spec.abortEarly
                    } = r, p = t;
                    u || (p = this._cast(p, schema_extends({
                        assert: !1
                    }, r)));
                    let h = {
                            value: p,
                            path: l,
                            options: r,
                            originalValue: d,
                            schema: this,
                            label: this.spec.label,
                            sync: s,
                            from: c
                        },
                        f = [];
                    this._typeError && f.push(this._typeError);
                    let y = [];
                    this._whitelistError && y.push(this._whitelistError), this._blacklistError && y.push(this._blacklistError), runTests({
                        args: h,
                        value: p,
                        path: l,
                        sync: s,
                        tests: f,
                        endEarly: m
                    }, t => {
                        if (t) return void a(t, p);
                        runTests({
                            tests: this.tests.concat(y),
                            args: h,
                            path: l,
                            sync: s,
                            value: p,
                            endEarly: m
                        }, a)
                    })
                }
                validate(t, r, a) {
                    let s = this.resolve(schema_extends({}, r, {
                        value: t
                    }));
                    return "function" == typeof a ? s._validate(t, r, a) : new Promise((a, l) => s._validate(t, r, (t, r) => {
                        t ? l(t) : a(r)
                    }))
                }
                validateSync(t, r) {
                    let a;
                    return this.resolve(schema_extends({}, r, {
                        value: t
                    }))._validate(t, schema_extends({}, r, {
                        sync: !0
                    }), (t, r) => {
                        if (t) throw t;
                        a = r
                    }), a
                }
                isValid(t, r) {
                    return this.validate(t, r).then(() => !0, t => {
                        if (ValidationError.isError(t)) return !1;
                        throw t
                    })
                }
                isValidSync(t, r) {
                    try {
                        return this.validateSync(t, r), !0
                    } catch (t) {
                        if (ValidationError.isError(t)) return !1;
                        throw t
                    }
                }
                _getDefault() {
                    let t = this.spec.default;
                    return null == t ? t : "function" == typeof t ? t.call(this) : clone(t)
                }
                getDefault(t) {
                    return this.resolve(t || {})._getDefault()
                }
                default (t) {
                    return 0 == arguments.length ? this._getDefault() : this.clone({
                        default: t
                    })
                }
                strict(t = !0) {
                    let r = this.clone();
                    return r.spec.strict = t, r
                }
                _isPresent(t) {
                    return null != t
                }
                defined(t = nZ.defined) {
                    return this.test({
                        message: t,
                        name: "defined",
                        exclusive: !0,
                        test: t => void 0 !== t
                    })
                }
                required(t = nZ.required) {
                    return this.clone({
                        presence: "required"
                    }).withMutation(r => r.test({
                        message: t,
                        name: "required",
                        exclusive: !0,
                        test(t) {
                            return this.schema._isPresent(t)
                        }
                    }))
                }
                notRequired() {
                    let t = this.clone({
                        presence: "optional"
                    });
                    return t.tests = t.tests.filter(t => "required" !== t.OPTIONS.name), t
                }
                nullable(t = !0) {
                    return this.clone({
                        nullable: !1 !== t
                    })
                }
                transform(t) {
                    let r = this.clone();
                    return r.transforms.push(t), r
                }
                test(...t) {
                    let r;
                    if (void 0 === (r = 1 === t.length ? "function" == typeof t[0] ? {
                            test: t[0]
                        } : t[0] : 2 === t.length ? {
                            name: t[0],
                            test: t[1]
                        } : {
                            name: t[0],
                            message: t[1],
                            test: t[2]
                        }).message && (r.message = nZ.default), "function" != typeof r.test) throw TypeError("`test` is a required parameters");
                    let a = this.clone(),
                        s = createValidation(r),
                        l = r.exclusive || r.name && !0 === a.exclusiveTests[r.name];
                    if (r.exclusive && !r.name) throw TypeError("Exclusive tests must provide a unique `name` identifying the test");
                    return r.name && (a.exclusiveTests[r.name] = !!r.exclusive), a.tests = a.tests.filter(t => t.OPTIONS.name !== r.name || !l && t.OPTIONS.test !== s.OPTIONS.test), a.tests.push(s), a
                }
                when(t, r) {
                    Array.isArray(t) || "string" == typeof t || (r = t, t = ".");
                    let a = this.clone(),
                        s = toArray(t).map(t => new Reference(t));
                    return s.forEach(t => {
                        t.isSibling && a.deps.push(t.key)
                    }), a.conditions.push(new n2(s, r)), a
                }
                typeError(t) {
                    let r = this.clone();
                    return r._typeError = createValidation({
                        message: t,
                        name: "typeError",
                        test(t) {
                            return !!(void 0 === t || this.schema.isType(t)) || this.createError({
                                params: {
                                    type: this.schema._type
                                }
                            })
                        }
                    }), r
                }
                oneOf(t, r = nZ.oneOf) {
                    let a = this.clone();
                    return t.forEach(t => {
                        a._whitelist.add(t), a._blacklist.delete(t)
                    }), a._whitelistError = createValidation({
                        message: r,
                        name: "oneOf",
                        test(t) {
                            if (void 0 === t) return !0;
                            let r = this.schema._whitelist,
                                a = r.resolveAll(this.resolve);
                            return !!a.includes(t) || this.createError({
                                params: {
                                    values: r.toArray().join(", "),
                                    resolved: a
                                }
                            })
                        }
                    }), a
                }
                notOneOf(t, r = nZ.notOneOf) {
                    let a = this.clone();
                    return t.forEach(t => {
                        a._blacklist.add(t), a._whitelist.delete(t)
                    }), a._blacklistError = createValidation({
                        message: r,
                        name: "notOneOf",
                        test(t) {
                            let r = this.schema._blacklist,
                                a = r.resolveAll(this.resolve);
                            return !a.includes(t) || this.createError({
                                params: {
                                    values: r.toArray().join(", "),
                                    resolved: a
                                }
                            })
                        }
                    }), a
                }
                strip(t = !0) {
                    let r = this.clone();
                    return r.spec.strip = t, r
                }
                describe() {
                    let t = this.clone(),
                        {
                            label: r,
                            meta: a
                        } = t.spec,
                        s = {
                            meta: a,
                            label: r,
                            type: t.type,
                            oneOf: t._whitelist.describe(),
                            notOneOf: t._blacklist.describe(),
                            tests: t.tests.map(t => ({
                                name: t.OPTIONS.name,
                                params: t.OPTIONS.params
                            })).filter((t, r, a) => a.findIndex(r => r.name === t.name) === r)
                        };
                    return s
                }
            };
            for (let t of (BaseSchema.prototype.__isYupSchema__ = !0, ["validate", "validateSync"])) BaseSchema.prototype[`${t}At`] = function(r, a, s = {}) {
                let {
                    parent: l,
                    parentPath: c,
                    schema: d
                } = function(t, r, a, s = a) {
                    let l, c, d;
                    return r ? ((0, n7.forEach)(r, (u, m, p) => {
                        let h = m ? trim(u) : u;
                        if ((t = t.resolve({
                                context: s,
                                parent: l,
                                value: a
                            })).innerType) {
                            let s = p ? parseInt(h, 10) : 0;
                            if (a && s >= a.length) throw Error(`Yup.reach cannot resolve an array item at index: ${u}, in the path: ${r}. because there is no value at that index. `);
                            l = a, a = a && a[s], t = t.innerType
                        }
                        if (!p) {
                            if (!t.fields || !t.fields[h]) throw Error(`The schema does not contain the path: ${r}. (failed at: ${d} which is a type: "${t._type}")`);
                            l = a, a = a && a[h], t = t.fields[h]
                        }
                        c = h, d = m ? "[" + u + "]" : "." + u
                    }), {
                        schema: t,
                        parent: l,
                        parentPath: c
                    }) : {
                        parent: l,
                        parentPath: r,
                        schema: t
                    }
                }(this, r, a, s.context);
                return d[t](l && l[c], schema_extends({}, s, {
                    parent: l,
                    path: r
                }))
            };
            for (let t of ["equals", "is"]) BaseSchema.prototype[t] = BaseSchema.prototype.oneOf;
            for (let t of ["not", "nope"]) BaseSchema.prototype[t] = BaseSchema.prototype.notOneOf;
            BaseSchema.prototype.optional = BaseSchema.prototype.notRequired, BaseSchema.prototype;
            var util_isAbsent = t => null == t;

            function boolean_create() {
                return new BooleanSchema
            }
            let BooleanSchema = class BooleanSchema extends BaseSchema {
                constructor() {
                    super({
                        type: "boolean"
                    }), this.withMutation(() => {
                        this.transform(function(t) {
                            if (!this.isType(t)) {
                                if (/^(true|1)$/i.test(String(t))) return !0;
                                if (/^(false|0)$/i.test(String(t))) return !1
                            }
                            return t
                        })
                    })
                }
                _typeCheck(t) {
                    return t instanceof Boolean && (t = t.valueOf()), "boolean" == typeof t
                }
                isTrue(t = nQ.isValue) {
                    return this.test({
                        message: t,
                        name: "is-value",
                        exclusive: !0,
                        params: {
                            value: "true"
                        },
                        test: t => util_isAbsent(t) || !0 === t
                    })
                }
                isFalse(t = nQ.isValue) {
                    return this.test({
                        message: t,
                        name: "is-value",
                        exclusive: !0,
                        params: {
                            value: "false"
                        },
                        test: t => util_isAbsent(t) || !1 === t
                    })
                }
            };
            boolean_create.prototype = BooleanSchema.prototype;
            let n9 = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i,
                re = /^((https?|ftp):)?\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i,
                rt = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,
                isTrimmed = t => util_isAbsent(t) || t === t.trim(),
                rn = ({}).toString();

            function string_create() {
                return new StringSchema
            }
            let StringSchema = class StringSchema extends BaseSchema {
                constructor() {
                    super({
                        type: "string"
                    }), this.withMutation(() => {
                        this.transform(function(t) {
                            if (this.isType(t) || Array.isArray(t)) return t;
                            let r = null != t && t.toString ? t.toString() : t;
                            return r === rn ? t : r
                        })
                    })
                }
                _typeCheck(t) {
                    return t instanceof String && (t = t.valueOf()), "string" == typeof t
                }
                _isPresent(t) {
                    return super._isPresent(t) && !!t.length
                }
                length(t, r = nJ.length) {
                    return this.test({
                        message: r,
                        name: "length",
                        exclusive: !0,
                        params: {
                            length: t
                        },
                        test(r) {
                            return util_isAbsent(r) || r.length === this.resolve(t)
                        }
                    })
                }
                min(t, r = nJ.min) {
                    return this.test({
                        message: r,
                        name: "min",
                        exclusive: !0,
                        params: {
                            min: t
                        },
                        test(r) {
                            return util_isAbsent(r) || r.length >= this.resolve(t)
                        }
                    })
                }
                max(t, r = nJ.max) {
                    return this.test({
                        name: "max",
                        exclusive: !0,
                        message: r,
                        params: {
                            max: t
                        },
                        test(r) {
                            return util_isAbsent(r) || r.length <= this.resolve(t)
                        }
                    })
                }
                matches(t, r) {
                    let a, s, l = !1;
                    return r && ("object" == typeof r ? {
                        excludeEmptyString: l = !1,
                        message: a,
                        name: s
                    } = r : a = r), this.test({
                        name: s || "matches",
                        message: a || nJ.matches,
                        params: {
                            regex: t
                        },
                        test: r => util_isAbsent(r) || "" === r && l || -1 !== r.search(t)
                    })
                }
                email(t = nJ.email) {
                    return this.matches(n9, {
                        name: "email",
                        message: t,
                        excludeEmptyString: !0
                    })
                }
                url(t = nJ.url) {
                    return this.matches(re, {
                        name: "url",
                        message: t,
                        excludeEmptyString: !0
                    })
                }
                uuid(t = nJ.uuid) {
                    return this.matches(rt, {
                        name: "uuid",
                        message: t,
                        excludeEmptyString: !1
                    })
                }
                ensure() {
                    return this.default("").transform(t => null === t ? "" : t)
                }
                trim(t = nJ.trim) {
                    return this.transform(t => null != t ? t.trim() : t).test({
                        message: t,
                        name: "trim",
                        test: isTrimmed
                    })
                }
                lowercase(t = nJ.lowercase) {
                    return this.transform(t => util_isAbsent(t) ? t : t.toLowerCase()).test({
                        message: t,
                        name: "string_case",
                        exclusive: !0,
                        test: t => util_isAbsent(t) || t === t.toLowerCase()
                    })
                }
                uppercase(t = nJ.uppercase) {
                    return this.transform(t => util_isAbsent(t) ? t : t.toUpperCase()).test({
                        message: t,
                        name: "string_case",
                        exclusive: !0,
                        test: t => util_isAbsent(t) || t === t.toUpperCase()
                    })
                }
            };
            string_create.prototype = StringSchema.prototype;
            var rr = /^(\d{4}|[+\-]\d{6})(?:-?(\d{2})(?:-?(\d{2}))?)?(?:[ T]?(\d{2}):?(\d{2})(?::?(\d{2})(?:[,\.](\d{1,}))?)?(?:(Z)|([+\-])(\d{2})(?::?(\d{2}))?)?)?$/;
            let ra = new Date(""),
                isDate = t => "[object Date]" === Object.prototype.toString.call(t);

            function date_create() {
                return new DateSchema
            }
            let DateSchema = class DateSchema extends BaseSchema {
                constructor() {
                    super({
                        type: "date"
                    }), this.withMutation(() => {
                        this.transform(function(t) {
                            return this.isType(t) ? t : isNaN(t = function(t) {
                                var r, a, s = [1, 4, 5, 6, 7, 10, 11],
                                    l = 0;
                                if (a = rr.exec(t)) {
                                    for (var c, d = 0; c = s[d]; ++d) a[c] = +a[c] || 0;
                                    a[2] = (+a[2] || 1) - 1, a[3] = +a[3] || 1, a[7] = a[7] ? String(a[7]).substr(0, 3) : 0, (void 0 === a[8] || "" === a[8]) && (void 0 === a[9] || "" === a[9]) ? r = +new Date(a[1], a[2], a[3], a[4], a[5], a[6], a[7]) : ("Z" !== a[8] && void 0 !== a[9] && (l = 60 * a[10] + a[11], "+" === a[9] && (l = 0 - l)), r = Date.UTC(a[1], a[2], a[3], a[4], a[5] + l, a[6], a[7]))
                                } else r = Date.parse ? Date.parse(t) : NaN;
                                return r
                            }(t)) ? ra : new Date(t)
                        })
                    })
                }
                _typeCheck(t) {
                    return isDate(t) && !isNaN(t.getTime())
                }
                prepareParam(t, r) {
                    let a;
                    if (Reference.isRef(t)) a = t;
                    else {
                        let s = this.cast(t);
                        if (!this._typeCheck(s)) throw TypeError(`\`${r}\` must be a Date or a value that can be \`cast()\` to a Date`);
                        a = s
                    }
                    return a
                }
                min(t, r = nY.min) {
                    let a = this.prepareParam(t, "min");
                    return this.test({
                        message: r,
                        name: "min",
                        exclusive: !0,
                        params: {
                            min: t
                        },
                        test(t) {
                            return util_isAbsent(t) || t >= this.resolve(a)
                        }
                    })
                }
                max(t, r = nY.max) {
                    let a = this.prepareParam(t, "max");
                    return this.test({
                        message: r,
                        name: "max",
                        exclusive: !0,
                        params: {
                            max: t
                        },
                        test(t) {
                            return util_isAbsent(t) || t <= this.resolve(a)
                        }
                    })
                }
            };
            DateSchema.INVALID_DATE = ra, date_create.prototype = DateSchema.prototype, date_create.INVALID_DATE = ra;
            var ri = a(30012),
                ro = (0, ri.Z)(function(t, r, a) {
                    return t + (a ? "_" : "") + r.toLowerCase()
                }),
                rs = a(4305),
                rl = a(64814),
                rc = (0, ri.Z)(function(t, r, a) {
                    var s;
                    return r = r.toLowerCase(), t + (a ? (s = r, (0, rl.Z)((0, rs.Z)(s).toLowerCase())) : r)
                }),
                lodash_es_mapKeys = function(t, r) {
                    var a = {};
                    return r = (0, n6.Z)(r, 3), (0, n4.Z)(t, function(t, s, l) {
                        (0, n5.Z)(a, r(t, s, l), t)
                    }), a
                },
                rd = a(59004),
                ru = a.n(rd);

            function findIndex(t, r) {
                let a = 1 / 0;
                return t.some((t, s) => {
                    var l;
                    if ((null == (l = r.path) ? void 0 : l.indexOf(t)) !== -1) return a = s, !0
                }), a
            }

            function sortByKeyOrder(t) {
                return (r, a) => findIndex(t, r) - findIndex(t, a)
            }

            function object_extends() {
                return (object_extends = Object.assign || function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            let isObject = t => "[object Object]" === Object.prototype.toString.call(t),
                rm = sortByKeyOrder([]);
            let ObjectSchema = class ObjectSchema extends BaseSchema {
                constructor(t) {
                    super({
                        type: "object"
                    }), this.fields = Object.create(null), this._sortErrors = rm, this._nodes = [], this._excludedEdges = [], this.withMutation(() => {
                        this.transform(function(t) {
                            if ("string" == typeof t) try {
                                t = JSON.parse(t)
                            } catch (r) {
                                t = null
                            }
                            return this.isType(t) ? t : null
                        }), t && this.shape(t)
                    })
                }
                _typeCheck(t) {
                    return isObject(t) || "function" == typeof t
                }
                _cast(t, r = {}) {
                    var a;
                    let s = super._cast(t, r);
                    if (void 0 === s) return this.getDefault();
                    if (!this._typeCheck(s)) return s;
                    let l = this.fields,
                        c = null != (a = r.stripUnknown) ? a : this.spec.noUnknown,
                        d = this._nodes.concat(Object.keys(s).filter(t => -1 === this._nodes.indexOf(t))),
                        u = {},
                        m = object_extends({}, r, {
                            parent: u,
                            __validating: r.__validating || !1
                        }),
                        p = !1;
                    for (let t of d) {
                        let a = l[t],
                            d = lodash_es_has(s, t);
                        if (a) {
                            let l;
                            let c = s[t];
                            m.path = (r.path ? `${r.path}.` : "") + t;
                            let d = "spec" in (a = a.resolve({
                                    value: c,
                                    context: r.context,
                                    parent: u
                                })) ? a.spec : void 0,
                                h = null == d ? void 0 : d.strict;
                            if (null == d ? void 0 : d.strip) {
                                p = p || t in s;
                                continue
                            }
                            void 0 !== (l = r.__validating && h ? s[t] : a.cast(s[t], m)) && (u[t] = l)
                        } else d && !c && (u[t] = s[t]);
                        u[t] !== s[t] && (p = !0)
                    }
                    return p ? u : s
                }
                _validate(t, r = {}, a) {
                    let s = [],
                        {
                            sync: l,
                            from: c = [],
                            originalValue: d = t,
                            abortEarly: u = this.spec.abortEarly,
                            recursive: m = this.spec.recursive
                        } = r;
                    c = [{
                        schema: this,
                        value: d
                    }, ...c], r.__validating = !0, r.originalValue = d, r.from = c, super._validate(t, r, (t, p) => {
                        if (t) {
                            if (!ValidationError.isError(t) || u) return void a(t, p);
                            s.push(t)
                        }
                        if (!m || !isObject(p)) {
                            a(s[0] || null, p);
                            return
                        }
                        d = d || p, runTests({
                            sync: l,
                            tests: this._nodes.map(t => (a, s) => {
                                let l = -1 === t.indexOf(".") ? (r.path ? `${r.path}.` : "") + t : `${r.path||""}["${t}"]`,
                                    u = this.fields[t];
                                if (u && "validate" in u) {
                                    u.validate(p[t], object_extends({}, r, {
                                        path: l,
                                        from: c,
                                        strict: !0,
                                        parent: p,
                                        originalValue: d[t]
                                    }), s);
                                    return
                                }
                                s(null)
                            }),
                            value: p,
                            errors: s,
                            endEarly: u,
                            sort: this._sortErrors,
                            path: r.path
                        }, a)
                    })
                }
                clone(t) {
                    let r = super.clone(t);
                    return r.fields = object_extends({}, this.fields), r._nodes = this._nodes, r._excludedEdges = this._excludedEdges, r._sortErrors = this._sortErrors, r
                }
                concat(t) {
                    let r = super.concat(t),
                        a = r.fields;
                    for (let [t, r] of Object.entries(this.fields)) {
                        let s = a[t];
                        void 0 === s ? a[t] = r : s instanceof BaseSchema && r instanceof BaseSchema && (a[t] = r.concat(s))
                    }
                    return r.withMutation(() => r.shape(a, this._excludedEdges))
                }
                getDefaultFromShape() {
                    let t = {};
                    return this._nodes.forEach(r => {
                        let a = this.fields[r];
                        t[r] = "default" in a ? a.getDefault() : void 0
                    }), t
                }
                _getDefault() {
                    return "default" in this.spec ? super._getDefault() : this._nodes.length ? this.getDefaultFromShape() : void 0
                }
                shape(t, r = []) {
                    let a = this.clone(),
                        s = Object.assign(a.fields, t);
                    return a.fields = s, a._sortErrors = sortByKeyOrder(Object.keys(s)), r.length && (Array.isArray(r[0]) || (r = [r]), a._excludedEdges = [...a._excludedEdges, ...r]), a._nodes = function(t, r = []) {
                        let a = [],
                            s = new Set,
                            l = new Set(r.map(([t, r]) => `${t}-${r}`));

                        function addNode(t, r) {
                            let c = (0, n7.split)(t)[0];
                            s.add(c), l.has(`${r}-${c}`) || a.push([r, c])
                        }
                        for (let r in t)
                            if (lodash_es_has(t, r)) {
                                let a = t[r];
                                s.add(r), Reference.isRef(a) && a.isSibling ? addNode(a.path, r) : util_isSchema(a) && "deps" in a && a.deps.forEach(t => addNode(t, r))
                            }
                        return ru().array(Array.from(s), a).reverse()
                    }(s, a._excludedEdges), a
                }
                pick(t) {
                    let r = {};
                    for (let a of t) this.fields[a] && (r[a] = this.fields[a]);
                    return this.clone().withMutation(t => (t.fields = {}, t.shape(r)))
                }
                omit(t) {
                    let r = this.clone(),
                        a = r.fields;
                    for (let s of (r.fields = {}, t)) delete a[s];
                    return r.withMutation(() => r.shape(a))
                }
                from(t, r, a) {
                    let s = (0, n7.getter)(t, !0);
                    return this.transform(l => {
                        if (null == l) return l;
                        let c = l;
                        return lodash_es_has(l, t) && (c = object_extends({}, l), a || delete c[t], c[r] = s(l)), c
                    })
                }
                noUnknown(t = !0, r = nX.noUnknown) {
                    "string" == typeof t && (r = t, t = !0);
                    let a = this.test({
                        name: "noUnknown",
                        exclusive: !0,
                        message: r,
                        test(r) {
                            let a;
                            if (null == r) return !0;
                            let s = (a = Object.keys(this.schema.fields), Object.keys(r).filter(t => -1 === a.indexOf(t)));
                            return !t || 0 === s.length || this.createError({
                                params: {
                                    unknown: s.join(", ")
                                }
                            })
                        }
                    });
                    return a.spec.noUnknown = t, a
                }
                unknown(t = !0, r = nX.noUnknown) {
                    return this.noUnknown(!t, r)
                }
                transformKeys(t) {
                    return this.transform(r => r && lodash_es_mapKeys(r, (r, a) => t(a)))
                }
                camelCase() {
                    return this.transformKeys(rc)
                }
                snakeCase() {
                    return this.transformKeys(ro)
                }
                constantCase() {
                    return this.transformKeys(t => ro(t).toUpperCase())
                }
                describe() {
                    let t = super.describe();
                    return t.fields = lodash_es_mapValues(this.fields, t => t.describe()), t
                }
            };

            function object_create(t) {
                return new ObjectSchema(t)
            }
            object_create.prototype = ObjectSchema.prototype;
            let rp = (0, nt.createContext)(void 0),
                FooterAnimationContext_FooterAnimationContextProvider = ({
                    children: t
                }) => {
                    let {
                        view: r
                    } = ViewContext_useViewContext(), [a, s] = (0, nt.useState)(!1);
                    (0, nt.useEffect)(() => {
                        s(!1)
                    }, [r]);
                    let l = (0, nt.useMemo)(() => ({
                        isFooterExpanded: a,
                        setIsFooterExpanded: s
                    }), [a]);
                    return (0, tb.jsx)(rp.Provider, {
                        value: l,
                        children: (0, tb.jsx)("div", {
                            children: t
                        })
                    })
                },
                useFooterAnimationContext = () => {
                    let t = (0, nt.useContext)(rp);
                    if (!t) throw Error("Can only call useFooterAnimationContext inside FooterAnimationContextProvider");
                    return t
                },
                sdkApi = t => {
                    let r = {
                        basePath: ApiEndpoint.getBaseUrl(),
                        headers: {
                            "Content-Type": "application/json"
                        }
                    };
                    return t && (r.headers.Authorization = `Bearer ${t}`), r.headers["x-dyn-version"] = "WalletKit/1.1.5", r.headers["x-dyn-api-version"] = `API/${ts}`, new tu.Pzx(new tu.VKt(r))
                },
                fetchNonce = t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    try {
                        let r = yield sdkApi().getNonce({
                            environmentId: t
                        });
                        return r.nonce
                    } catch (t) {
                        return
                    }
                }),
                getEmailProvider = ({
                    email: t,
                    environmentId: r
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    try {
                        let a = yield sdkApi().getEmailProvider({
                            email: t,
                            environmentId: r
                        });
                        return a
                    } catch (r) {
                        let t = yield r.json();
                        throw tv.error(t.error), new td.EH(t.code)
                    }
                }),
                createEmailVerification = ({
                    email: t,
                    environmentId: r,
                    captchaToken: a
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    try {
                        let s = yield sdkApi().createEmailVerification({
                            emailVerificationCreateRequest: {
                                captchaToken: a,
                                email: t
                            },
                            environmentId: r
                        });
                        return s
                    } catch (r) {
                        let t = yield r.json();
                        throw tv.error(t.error), new td.NP(t.code)
                    }
                }),
                signInWithEmailVerification = ({
                    verificationToken: t,
                    verificationUUID: r,
                    environmentId: a,
                    captchaToken: s
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    try {
                        let l = yield sdkApi().signInWithEmailVerification({
                            emailVerificationVerifyRequest: {
                                captchaToken: s,
                                verificationToken: t,
                                verificationUUID: r
                            },
                            environmentId: a
                        });
                        return l
                    } catch (r) {
                        let t = yield r.json();
                        if (tv.error(t.error), "missing_from_list" === t.error.code) throw new td.U8({
                            email: t.payload.email
                        });
                        if ("email_associated_with_different_provider" === t.code) throw new td.uk(t.error, t.payload);
                        throw new td.NP(t.code)
                    }
                }),
                retryEmailVerification = ({
                    email: t,
                    environmentId: r,
                    verificationUUID: a
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    try {
                        let s = yield sdkApi().retryEmailVerification({
                            emailVerificationRetryRequest: {
                                email: t,
                                verificationUUID: a
                            },
                            environmentId: r
                        });
                        return s
                    } catch (r) {
                        let t = yield r.json();
                        throw tv.error(t.error), new td.NP(t.code)
                    }
                }),
                verifyEmail = ({
                    verificationToken: t,
                    verificationUUID: r,
                    environmentId: a
                }, s) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    try {
                        let l = yield sdkApi(s).verifyEmailVerification({
                            emailVerificationVerifyRequest: {
                                verificationToken: t,
                                verificationUUID: r
                            },
                            environmentId: a
                        });
                        return l
                    } catch (r) {
                        let t = yield r.json();
                        if (tv.error(t.error), t.code === tu.QlJ.UserHasAlreadyAccountWithEmail) throw new td.In(t.error);
                        throw new td.NP(t.code)
                    }
                }),
                revokeSession = ({
                    environmentId: t,
                    sessionId: r
                }, a) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    try {
                        yield sdkApi(a).revokeSession({
                            environmentId: t
                        })
                    } catch (r) {
                        let t = yield r.json();
                        tv.error(Error(t.error.message))
                    }
                }),
                linkWallet = (t, {
                    messageToSign: r,
                    network: a,
                    signedMessage: s,
                    publicWalletAddress: l,
                    chain: c,
                    walletName: d,
                    walletProvider: u,
                    additionalWalletAddresses: m
                }, p) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    let h = (0, tu.i6m)({
                        additionalWalletAddresses: m,
                        chain: c,
                        messageToSign: r,
                        network: a,
                        publicWalletAddress: l,
                        signedMessage: s,
                        walletName: d,
                        walletProvider: u
                    });
                    try {
                        let {
                            jwt: r
                        } = yield sdkApi(p).verifyLink({
                            environmentId: t,
                            verifyRequest: h
                        });
                        return r
                    } catch (r) {
                        tv.error(r);
                        let t = yield r.json();
                        if ("reassign_wallet_confirm" === t.code || "reassign_wallet_error" === t.code) throw new td.Fr(t.code);
                        return
                    }
                }),
                unlinkWallet = ({
                    environmentId: t,
                    primaryWalletId: r,
                    walletId: a
                }, s) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    try {
                        let {
                            jwt: l
                        } = yield sdkApi(s).verifyUnlink({
                            environmentId: t,
                            verifyUnlinkRequest: {
                                primaryWalletId: r,
                                walletId: a
                            }
                        });
                        return l
                    } catch (t) {
                        return
                    }
                }),
                transferWallet = (t, {
                    network: r,
                    messageToSign: a,
                    signedMessage: s,
                    publicWalletAddress: l,
                    chain: c,
                    walletName: d,
                    walletProvider: u,
                    skipEmptyAccountCheck: m = !1
                }, p) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    try {
                        let {
                            jwt: h
                        } = yield sdkApi(p).verifyTransfer({
                            environmentId: t,
                            verifyRequest: {
                                chain: c,
                                messageToSign: a,
                                network: r,
                                publicWalletAddress: l,
                                signedMessage: s,
                                skipEmptyAccountCheck: m,
                                walletName: d,
                                walletProvider: u
                            }
                        });
                        return h
                    } catch (t) {
                        return
                    }
                }),
                mapChainToChainEnum = t => {
                    let r = Object.values(tu.AIv).find(r => r === t);
                    if (!r) throw new td.kW(`Invalid chain ${t}`);
                    return r
                },
                mapProviderToProviderEnum = t => {
                    let r = Object.values(tu.hnE).find(r => r === t);
                    if (!r) throw new td.kW(`Invalid provider ${t}`);
                    return r
                },
                mapAuthModeTypeToEnum = t => {
                    let r = Object.values(tu.FAV).find(r => r === t);
                    if (!r) throw new td.kW(`Invalid authMode ${t}`);
                    return r
                },
                createVisit = ({
                    authMode: t,
                    chain: r,
                    environmentId: a,
                    walletProvider: s,
                    publicWalletAddress: l,
                    walletName: c
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    try {
                        let d = {
                            address: l,
                            authMode: mapAuthModeTypeToEnum(t),
                            chain: mapChainToChainEnum(r),
                            provider: mapProviderToProviderEnum(s),
                            walletName: c
                        };
                        yield sdkApi().createVisit({
                            connectRequest: d,
                            environmentId: a
                        })
                    } catch (t) {
                        tv.error(t)
                    }
                }),
                verifyWallet = (t, {
                    messageToSign: r,
                    signedMessage: a,
                    publicWalletAddress: s,
                    chain: l,
                    walletName: c,
                    walletProvider: d,
                    captchaToken: u,
                    network: m,
                    oauth: p,
                    additionalWalletAddresses: h
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    let f = (0, tu.i6m)({
                        additionalWalletAddresses: h,
                        captchaToken: u,
                        chain: l,
                        messageToSign: r,
                        network: m,
                        oauth: p,
                        publicWalletAddress: s,
                        signedMessage: a,
                        walletName: c,
                        walletProvider: d
                    });
                    try {
                        let {
                            jwt: r
                        } = yield sdkApi().verify({
                            environmentId: t,
                            verifyRequest: f
                        });
                        return r
                    } catch (r) {
                        tv.error(r);
                        let t = yield r.json();
                        if ("wallet_not_deployed" === t.code) throw new td.Pu;
                        if ("chainalysis_blocked_wallet" === t.error.code) throw new td.aH(t.payload.walletPublicKey);
                        if ("gate_blocked" === t.error.code) throw new td.bR(t.payload.walletPublicKey);
                        if ("missing_from_list" === t.error.code) throw new td.U8({
                            walletPublicKey: t.payload.walletPublicKey
                        });
                        if ("email_associated_with_different_provider" === t.code) throw new td.uk(t.error, t.payload);
                        return
                    }
                }),
                fetchProjectSettings = t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    try {
                        let r = yield sdkApi().getEnvironmentSettings({
                            environmentId: t
                        });
                        return r
                    } catch (t) {
                        tv.error(t);
                        return
                    }
                }),
                updateUserProfileFields = (t, r, a) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    try {
                        if (!t) throw new td.kW("User not authenticated");
                        let s = yield sdkApi(t).updateSelf({
                            environmentId: r,
                            userFields: a
                        });
                        return s
                    } catch (t) {
                        if (tv.error(t), t instanceof Response) {
                            let r = yield t.json();
                            if ("email_already_exists" === r.code) throw new td.l7;
                            if ("username_already_exists" === r.code) throw new td.a$
                        }
                        throw t
                    }
                }),
                verifyOAuth = (t, r, {
                    code: a,
                    codeVerifier: s,
                    state: l
                }, c) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    try {
                        let {
                            jwt: d
                        } = yield sdkApi(c).oauthVerify({
                            environmentId: t,
                            oauthRequest: {
                                code: a,
                                codeVerifier: s,
                                state: l
                            },
                            providerType: r
                        });
                        return d
                    } catch (r) {
                        tv.error(r);
                        let t = yield r.json();
                        if ("social_account_already_exists" === t.code) throw new td.qi;
                        return
                    }
                }),
                signInOAuth = (t, r, {
                    code: a,
                    codeVerifier: s,
                    state: l,
                    captchaToken: c
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    try {
                        let {
                            jwt: d
                        } = yield sdkApi().oauthSignIn({
                            environmentId: t,
                            oauthRequest: {
                                captchaToken: c,
                                code: a,
                                codeVerifier: s,
                                state: l
                            },
                            providerType: r
                        });
                        return d
                    } catch (r) {
                        tv.error(r);
                        let t = yield r.json();
                        if ("gate_blocked" === t.error.code) throw new td.bR(t.payload.walletPublicKey);
                        if ("missing_from_list" === t.error.code) throw new td.U8({
                            walletPublicKey: t.payload.walletPublicKey
                        });
                        if ("email_associated_with_different_provider" === t.code) throw new td.uk(t.error, t.payload);
                        return
                    }
                }),
                getOAuthResult = (t, r, {
                    state: a
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    try {
                        let s = yield sdkApi().oauthResult({
                            environmentId: t,
                            oauthResultRequest: {
                                state: a
                            },
                            providerType: r
                        });
                        return s
                    } catch (t) {
                        tv.error(t);
                        return
                    }
                }),
                getOnrampProviders = ({
                    chain: t,
                    environmentId: r,
                    networkId: a,
                    token: s,
                    walletAddress: l
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    let {
                        onramps: c
                    } = yield sdkApi().getSupportedOnramps({
                        chain: t,
                        environmentId: r,
                        networkId: a ? String(a) : void 0,
                        token: s,
                        walletAddress: l
                    });
                    if (!c || 0 === c.length) throw Error("No onramps");
                    return c
                }),
                sendDynamicProps = (t, r) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    try {
                        let {
                            dynamicContextProps: a,
                            dynamicWagmiSettings: s,
                            frameworkSettings: l
                        } = r;
                        a && (yield sendDynamicContextSettings(t, {
                            dynamicContextProps: a,
                            frameworkSettings: l
                        }, isDynamicContextSessionSettingExpired, setDynamicContextSessionSettings)), s && (yield sendDynamicContextSettings(t, {
                            dynamicWagmiSettings: s
                        }, isWagmiSessionSettingExpired, setWagmiSessionSettings))
                    } catch (t) {
                        tv.warn("Error caught when sending sdkSettings to api. Please notify Dynamic, and send the DynamicContextProvider settings you currently have configured", {
                            error: t
                        })
                    }
                }),
                sendDynamicContextSettings = (t, r, a, s) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    a() && (yield sdkApi().logDynamicSdkSettings({
                        environmentId: t,
                        sdkSettingsRequest: r
                    }), s())
                }),
                mergeUserAccounts = (t, r) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    try {
                        let {
                            jwt: a
                        } = yield sdkApi(t).mergeUsers({
                            environmentId: r
                        });
                        return a
                    } catch (t) {
                        throw tv.error(t), t
                    }
                }),
                createTurnkeyEmbeddedWallet = ({
                    attestation: t,
                    challenge: r,
                    environmentId: a,
                    userJwt: s,
                    chains: l = [tu.AIv.Evm]
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    let c = [{
                        chains: l,
                        embeddedWalletProvider: tu.p1P.Turnkeyhd,
                        isAuthenticatorAttached: !1
                    }];
                    return t && r && (c[0] = Object.assign(Object.assign({}, c[0]), {
                        embeddedWalletSpecificOpts: {
                            attestation: t,
                            challenge: r
                        },
                        isAuthenticatorAttached: !0
                    })), sdkApi(s).createEmbeddedWallets({
                        createEmbeddedWalletsRequest: {
                            embeddedWallets: c
                        },
                        environmentId: a
                    })
                }),
                initEmbeddedWalletSession = ({
                    authenticatorType: t,
                    walletId: r,
                    publicKey: a,
                    environmentId: s,
                    userJwt: l
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    return "passkey" === t ? sdkApi(l).initPasskeyRecovery({
                        environmentId: s,
                        initPasskeyRecoveryRequest: {
                            turnkeyRecoveryTargetPublicKey: a,
                            walletId: r
                        }
                    }) : sdkApi(l).initEmailAuth({
                        environmentId: s,
                        initEmailAuthRequest: {
                            turnkeyEmailAuthTargetPublicKey: a,
                            walletId: r
                        }
                    })
                }),
                completePasskeyRecovery = ({
                    walletId: t,
                    attestation: r,
                    challenge: a,
                    environmentId: s,
                    userJwt: l
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    return sdkApi(l).completePasskeyRecovery({
                        completePasskeyRecoveryRequest: {
                            attestation: r,
                            challenge: a,
                            walletId: t
                        },
                        environmentId: s
                    })
                }),
                getUserPasskeys = ({
                    userJwt: t,
                    environmentId: r
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    try {
                        let a = yield sdkApi(t).getUserPasskeys({
                            environmentId: r
                        });
                        return a
                    } catch (t) {
                        return tv.error(t), {
                            count: 0,
                            passkeys: []
                        }
                    }
                }),
                updateUserPasskey = ({
                    userJwt: t,
                    environmentId: r,
                    id: a,
                    alias: s
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    try {
                        let l = yield sdkApi(t).updatePasskey({
                            environmentId: r,
                            updateUserPasskeyRequest: {
                                alias: s,
                                id: a
                            }
                        });
                        return l
                    } catch (t) {
                        tv.error(t);
                        return
                    }
                }),
                exportEmbeddedWallet = ({
                    userJwt: t,
                    environmentId: r,
                    walletId: a,
                    activityId: s
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    try {
                        let l = yield sdkApi(t).embeddedWalletExport({
                            activityId: s,
                            environmentId: r,
                            walletId: a
                        });
                        return l
                    } catch (t) {
                        return tv.error(t), {
                            exportBundle: ""
                        }
                    }
                }),
                lastAuthenticatedAccount = t => t.verifiedCredentials.find(r => r.id === t.lastVerifiedCredentialId),
                createUserProfile = t => {
                    var r;
                    let a = lastAuthenticatedAccount(t),
                        s = {
                            alias: t.alias,
                            btcWallet: t.btcWallet,
                            ckbWallet: t.ckbWallet,
                            country: t.country,
                            discordNotification: t.discordNotification,
                            dogeWallet: t.dogeWallet,
                            email: t.email,
                            emailNotification: t.emailNotification,
                            firstName: t.givenName,
                            jobTitle: t.jobTitle,
                            kasWallet: t.kasWallet,
                            kdaWallet: t.kdaWallet,
                            lastName: t.familyName,
                            ltcWallet: t.ltcWallet,
                            newsletterNotification: t.newsletterNotification,
                            phoneNumber: t.phoneNumber,
                            policiesConsent: t.policiesConsent,
                            tShirtSize: t.tShirtSize,
                            team: t.team,
                            username: t.username
                        },
                        l = Object.assign({
                            chain: null == a ? void 0 : a.chain,
                            ens: null == a ? void 0 : a.nameService,
                            environmentId: t.environmentId,
                            isAuthenticatedWithAWallet: (null === (r = lastAuthenticatedAccount(t)) || void 0 === r ? void 0 : r.format) === "blockchain",
                            lastVerifiedCredentialId: t.lastVerifiedCredentialId,
                            lists: t.lists,
                            metadata: t.metadata,
                            newUser: t.newUser,
                            scope: t.scope,
                            sessionId: t.sid,
                            userId: t.sub,
                            verifiedCredentials: t.verifiedCredentials || [],
                            wallet: null == a ? void 0 : a.walletName
                        }, s);
                    return l
                },
                storeAuthToken = t => {
                    LocalStorage.setToLS(nc, t, !0)
                },
                rh = (0, nt.createContext)(void 0),
                UserWalletsProvider = ({
                    children: t
                }) => {
                    let [r, a] = (0, nt.useState)([]);
                    return (0, tb.jsx)(rh.Provider, {
                        value: {
                            registerUserWallet: t => a(r => [...r, t]),
                            removeUserWallet: t => a(r => r.filter(({
                                id: r
                            }) => t !== r)),
                            setUserWallets: a,
                            updateUserWallet: (t, r) => a(a => {
                                let s = a.findIndex(({
                                    id: r
                                }) => t === r);
                                for (let t in "id" in r && delete r.id, r)(void 0 === r[t] || null === r[t]) && delete r[t];
                                return a[s] = Object.assign(Object.assign({}, a[s]), r), [...a]
                            }),
                            userWallets: r
                        },
                        children: t
                    })
                },
                useInternalUserWallets = () => {
                    let t = (0, nt.useContext)(rh);
                    if (!t) throw Error("Can only call useInternalUserWallets inside UserWalletsProvider");
                    return t
                },
                useUserWallets = () => {
                    let t = (0, nt.useContext)(rh);
                    if (!t) throw Error("Can only call useUserWallets inside UserWalletsProvider");
                    return t.userWallets
                },
                isClassNamesObjectArg = t => "object" == typeof t,
                isString = t => "string" == typeof t,
                classNames_classNames = (...t) => {
                    let r = t.reduce((t, r) => {
                        if (isString(r)) return [...t, r];
                        if (isClassNamesObjectArg(r)) {
                            let a = Object.keys(r),
                                s = a.map(t => r[t] ? t : null).filter(isString);
                            return [...t, ...s]
                        }
                        return t
                    }, []);
                    return r.join(" ")
                },
                animationFrameTimeout = (t, r) => {
                    let a = performance.now(),
                        s = {
                            id: -1
                        },
                        tick = () => {
                            s.id = requestAnimationFrame(s => {
                                s - a > r ? t() : tick()
                            })
                        };
                    return tick(), s
                },
                clearAnimationFrameTimeout = t => {
                    t.id && cancelAnimationFrame(t.id)
                },
                useIsFirstRender = () => {
                    let t = (0, nt.useRef)(!0);
                    return (0, nt.useEffect)(() => {
                        t.current && (t.current = !1)
                    }, []), t.current
                },
                useUpdateEffect = (t, r) => {
                    let a = useIsFirstRender();
                    (0, nt.useEffect)(() => {
                        if (!a) return t()
                    }, r)
                },
                useTransitionEvents = (t, r) => {
                    let a = {
                        ENTERED: null == r ? void 0 : r.onEntered,
                        ENTERING: null == r ? void 0 : r.onEntering,
                        EXITING: null == r ? void 0 : r.onExiting,
                        UNMOUNT: null == r ? void 0 : r.onUnmount
                    };
                    return useUpdateEffect(() => {
                        var r;
                        return null === (r = a[t]) || void 0 === r || r.call(a), () => {
                            var r;
                            "EXITING" === t && (null === (r = a.UNMOUNT) || void 0 === r || r.call(a))
                        }
                    }, [t])
                },
                useTransition = t => {
                    var {
                        isShown: r,
                        inDuration: a,
                        outDuration: s,
                        duration: l = 100,
                        delay: c,
                        inDelay: d,
                        outDelay: u,
                        animateOnMount: m = !0
                    } = t, p = _tslib_rest(t, ["isShown", "inDuration", "outDuration", "duration", "delay", "inDelay", "outDelay", "animateOnMount"]);
                    let h = m ? "UNMOUNT" : "ENTERED",
                        f = (0, nt.useRef)({
                            id: -1
                        }),
                        y = (0, nt.useRef)({
                            id: -1
                        }),
                        [b, C] = (0, nt.useState)(h),
                        [E, j] = (0, nt.useState)(!m),
                        [I, O] = (0, nt.useState)(l),
                        performTransition = (t, r) => {
                            r ? y.current = animationFrameTimeout(t, r) : t()
                        },
                        P = (0, nt.useCallback)(() => {
                            let t = a || l;
                            O(t), j(!0), C("ENTERING"), f.current = animationFrameTimeout(() => {
                                C("ENTERED")
                            }, t)
                        }, [l, a]),
                        R = (0, nt.useCallback)(() => {
                            let t = s || l;
                            O(t), C("EXITING"), f.current = animationFrameTimeout(() => {
                                j(!1), C("UNMOUNT")
                            }, t)
                        }, [l, s]);
                    return (0, nt.useEffect)(() => {
                        if (r && "ENTERED" !== b) {
                            let t = d || c;
                            performTransition(P, t)
                        } else if (!r && "UNMOUNT" !== b) {
                            let t = u || c;
                            performTransition(R, t)
                        }
                        return () => {
                            clearAnimationFrameTimeout(f.current), clearAnimationFrameTimeout(y.current)
                        }
                    }, [d, u, P, R, r, c, b]), useTransitionEvents(b, p), {
                        currentDuration: I,
                        mount: E,
                        stage: b
                    }
                },
                getZoomTransitionDefaultStyles = t => ({
                    transition: `transform ${t}ms linear, opacity ${t}ms linear`
                }),
                rf = {
                    ENTERED: {
                        opacity: "1",
                        transform: "scale(1)"
                    },
                    ENTERING: {
                        opacity: "0",
                        transform: "scale(0.9)"
                    },
                    EXITING: {
                        opacity: "0",
                        transform: "scale(1.1)"
                    }
                };
            nt.memo(t => {
                var {
                    children: r
                } = t, a = _tslib_rest(t, ["children"]);
                let {
                    mount: s,
                    stage: l,
                    currentDuration: c
                } = useTransition(a), d = getZoomTransitionDefaultStyles(c), u = rf[l];
                return s ? (0, tb.jsx)("div", {
                    className: classNames_classNames(a.className, "zoom-transition__root"),
                    style: Object.assign(Object.assign({}, d), u),
                    children: r
                }) : null
            });
            let getSlideInUpTransitionDefaultStyles = (t, r = "linear") => ({
                    transition: `transform ${t}ms ${r}, opacity ${t}ms ${r}`
                }),
                ry = {
                    ENTERED: {
                        transform: "translateY(0)"
                    },
                    ENTERING: {
                        transform: "translateY(0.625rem)"
                    },
                    EXITING: {
                        transform: "translateY(0.625rem)"
                    }
                },
                rg = nt.memo(t => {
                    var {
                        children: r
                    } = t, a = _tslib_rest(t, ["children"]);
                    let {
                        mount: s,
                        stage: l,
                        currentDuration: c
                    } = useTransition(a), d = getSlideInUpTransitionDefaultStyles(c), u = ry[l];
                    return s ? (0, tb.jsx)("div", {
                        style: Object.assign(Object.assign({}, d), u),
                        children: r
                    }) : null
                }),
                getOpacityTransitionDefaultStyles = t => ({
                    transition: `opacity ${t}ms linear`
                }),
                rv = {
                    ENTERED: {
                        opacity: 1
                    },
                    ENTERING: {
                        opacity: 0
                    },
                    EXITING: {
                        opacity: 0
                    },
                    UNMOUNT: {
                        opacity: 0
                    }
                },
                rb = nt.memo(t => {
                    var {
                        children: r,
                        style: a
                    } = t, s = _tslib_rest(t, ["children", "style"]);
                    let {
                        mount: l,
                        stage: c,
                        currentDuration: d
                    } = useTransition(s), u = getOpacityTransitionDefaultStyles(d), m = rv[c];
                    return l ? (0, tb.jsx)("div", {
                        style: Object.assign(Object.assign(Object.assign({}, u), m), a),
                        children: r
                    }) : null
                });
            var rw = ["title", "titleId"];

            function error_extends() {
                return (error_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgError = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, rw);
                return nt.createElement("svg", error_extends({
                    width: 20,
                    height: 20,
                    viewBox: "0 0 20 20",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, C || (C = nt.createElement("path", {
                    d: "M9.99 0C4.47 0 0 4.48 0 10s4.47 10 9.99 10C15.52 20 20 15.52 20 10S15.52 0 9.99 0ZM10 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8Zm-1-5h2v2H9v-2Zm0-8h2v6H9V5Z",
                    fill: "currentcolor"
                })))
            };
            let Icon_Icon = ({
                    children: t,
                    className: r = "",
                    color: a,
                    size: s
                }) => {
                    let l = classNames_classNames(r, a ? ({
                        "brand-primary": "icon--color-brand-primary",
                        "success-1": "icon--color-success-1",
                        "text-error": "icon--color-text-error",
                        "text-primary": "icon--color-text-primary",
                        "text-secondary": "icon--color-text-secondary",
                        "text-tertiary": "icon--color-text-tertiary"
                    })[a] : "", s ? ({
                        large: "icon--size-large",
                        medium: "icon--size-medium",
                        mini: "icon--size-mini",
                        small: "icon--size-small",
                        xsmall: "icon--size-xsmall"
                    })[s] : "");
                    return (0, nt.cloneElement)(t, {
                        className: l
                    })
                },
                Typography_Typography = t => {
                    var {
                        as: r = "p",
                        variant: a,
                        weight: s,
                        color: l,
                        transform: c,
                        className: d = "",
                        truncate: u = !1
                    } = t, m = _tslib_rest(t, ["as", "variant", "weight", "color", "transform", "className", "truncate"]);
                    let p = classNames_classNames("typography", a ? ({
                        body_mini: "typography--body-mini",
                        body_normal: "typography--body-normal",
                        body_small: "typography--body-small",
                        button_primary: "typography--button-primary",
                        button_secondary: "typography--button-secondary",
                        button_tertiary: "typography--button-tertiary",
                        numbers_big: "typography--numbers-big",
                        numbers_medium: "typography--numbers-medium",
                        title: "typography--title"
                    })[a] : "", s ? ({
                        bold: "typography--bold",
                        medium: "typography--medium",
                        regular: "typography--regular"
                    })[s] : "", l ? ({
                        "brand-primary": "typography--brand-primary",
                        "error-1": "typography--dynamic-error-1",
                        "error-2": "typography--dynamic-error-2",
                        "green-1": "typography--connection-green-1",
                        inherit: "typography--inherit",
                        link: "typography--link",
                        primary: "typography--primary",
                        secondary: "typography--secondary",
                        tertiary: "typography--tertiary",
                        tooltip: "typography--tooltip"
                    })[l] : "", c ? ({
                        uppercase: "typography--uppercase"
                    })[c] : "", {
                        "typography--truncate": u
                    }, d);
                    return (0, tb.jsx)(r, Object.assign({
                        className: p
                    }, m))
                },
                r_ = {
                    error: (0, tb.jsx)(SvgError, {})
                },
                Alert = ({
                    children: t,
                    icon: r,
                    variant: a = "error",
                    contentDataTestId: s
                }) => (0, tb.jsxs)("div", {
                    className: classNames_classNames("alert", {
                        "alert--error": "error" === a,
                        "alert--warning": "warning" === a
                    }),
                    children: [r && (0, tb.jsx)(Icon_Icon, {
                        size: "small",
                        className: "alert__icon",
                        children: "string" == typeof r ? r_[r] : r
                    }), (0, tb.jsx)(Typography_Typography, {
                        variant: "body_small",
                        "data-testid": s,
                        children: t
                    })]
                }),
                rk = (0, nt.forwardRef)((t, r) => {
                    var {
                        className: a = "",
                        color: s
                    } = t, l = _tslib_rest(t, ["className", "color"]);
                    return (0, tb.jsx)("button", Object.assign({}, l, {
                        className: classNames_classNames("icon-button", a),
                        ref: r
                    }))
                });
            rk.displayName = "IconButton";
            let rx = (0, nt.forwardRef)(({
                children: t,
                className: r,
                dataTestId: a
            }, s) => (0, tb.jsx)("div", {
                ref: s,
                "data-testid": a,
                className: classNames_classNames("inline-widget", r),
                children: t
            }));
            rx.displayName = "InlineWidget";
            let rC = {
                    "bottom-left": "popper-content__transform-origin-bottom-left",
                    "bottom-right": "popper-content__transform-origin-bottom-right",
                    "top-left": "popper-content__transform-origin-top-left",
                    "top-right": "popper-content__transform-origin-top-right"
                },
                rS = (0, nt.forwardRef)(({
                    children: t,
                    transformOrigin: r,
                    style: a,
                    className: s
                }, l) => (0, tb.jsx)("div", {
                    "data-testid": "popper-content",
                    ref: l,
                    className: classNames_classNames("popper-content", rC[r], s),
                    style: a,
                    children: t
                }));
            rS.displayName = "PopperContent";
            let rE = (0, nt.createContext)(void 0),
                PopperContext_PopperProvider = ({
                    children: t
                }) => {
                    let {
                        Provider: r
                    } = rE, a = (0, nt.useRef)(null);
                    return (0, tb.jsx)(r, {
                        value: {
                            containerRef: a
                        },
                        children: (0, tb.jsx)("div", {
                            ref: a,
                            style: {
                                position: "relative"
                            },
                            children: t
                        })
                    })
                },
                usePopper = () => {
                    let t = (0, nt.useContext)(rE);
                    if (!t) throw Error("To use popper, use the PopperProvider above in the dom hierarchy");
                    return t
                },
                getChildPosition = (t, r) => {
                    let a = t.getBoundingClientRect(),
                        s = r.getBoundingClientRect();
                    return {
                        left: s.x - a.x,
                        top: s.y - a.y
                    }
                },
                rj = (0, nt.forwardRef)(({
                    anchorRef: t,
                    anchorOrigin: r = "top-left",
                    transformOrigin: a = "top-left",
                    children: s,
                    style: l,
                    className: c
                }, d) => {
                    let {
                        containerRef: u
                    } = usePopper(), [m, p] = (0, nt.useState)(), h = u.current;
                    (0, nt.useEffect)(() => {
                        let r = u.current,
                            a = t.current;
                        r && a && p(getChildPosition(r, a))
                    }, [t, u, p]);
                    let f = (0, nt.useMemo)(() => {
                        var a;
                        let s = null === (a = t.current) || void 0 === a ? void 0 : a.getBoundingClientRect();
                        if (m && s) switch (r) {
                            case "top-left":
                                return m;
                            case "top-right":
                                return Object.assign(Object.assign({}, m), {
                                    left: m.left + s.width
                                });
                            case "bottom-left":
                                return Object.assign(Object.assign({}, m), {
                                    top: m.top + s.height
                                });
                            case "bottom-right":
                                return Object.assign(Object.assign({}, m), {
                                    left: m.left + s.width,
                                    top: m.top + s.height
                                });
                            default:
                                return
                        }
                    }, [m, t, r]);
                    return f && null !== h ? (0, nU.createPortal)((0, tb.jsx)(rS, {
                        ref: d,
                        transformOrigin: a,
                        style: Object.assign(Object.assign({}, f), l),
                        className: c,
                        children: s
                    }), h) : null
                });
            rj.displayName = "Popper";
            let isScrollable = t => {
                    let r = t.scrollHeight > t.clientHeight,
                        a = window.getComputedStyle(t).overflowY,
                        s = -1 !== a.indexOf("hidden");
                    return r && !s
                },
                watchToScrollInHierarchy = (t, r, a) => {
                    let s = [],
                        l = r;
                    for (; null !== l;) {
                        let r = l === t;
                        if (isScrollable(l) && (l.addEventListener("scroll", a), s.push(l)), l = l.parentElement, r) break
                    }
                    return () => s.forEach(t => t.removeEventListener("scroll", a))
                },
                useForwardedRef = t => {
                    let r = (0, nt.useRef)(null);
                    return (0, nt.useEffect)(() => {
                        t && ("function" == typeof t ? t(r.current) : t.current = r.current)
                    }, [t, r]), r
                },
                useOnClickOutside_useOnClickOutside = (t, r) => {
                    let a = (0, nt.useRef)(r);
                    a.current = r, (0, nt.useEffect)(() => {
                        let listener = r => {
                            r.stopPropagation();
                            let s = r.composedPath().shift();
                            !t.current || t.current.contains(r.currentTarget) || t.current.contains(s) || a.current(r)
                        };
                        return document.addEventListener("touchstart", listener), document.addEventListener("click", listener), () => {
                            document.removeEventListener("touchstart", listener), document.removeEventListener("click", listener)
                        }
                    }, [t])
                };
            var rI = a(89461),
                rT = a.n(rI),
                isMergeableObject = function(t) {
                    var r;
                    return !!t && "object" == typeof t && "[object RegExp]" !== (r = Object.prototype.toString.call(t)) && "[object Date]" !== r && t.$$typeof !== rO
                },
                rO = "function" == typeof Symbol && Symbol.for ? Symbol.for("react.element") : 60103;

            function cloneUnlessOtherwiseSpecified(t, r) {
                return !1 !== r.clone && r.isMergeableObject(t) ? deepmerge(Array.isArray(t) ? [] : {}, t, r) : t
            }

            function defaultArrayMerge(t, r, a) {
                return t.concat(r).map(function(t) {
                    return cloneUnlessOtherwiseSpecified(t, a)
                })
            }

            function deepmerge(t, r, a) {
                (a = a || {}).arrayMerge = a.arrayMerge || defaultArrayMerge, a.isMergeableObject = a.isMergeableObject || isMergeableObject;
                var s, l, c = Array.isArray(r);
                return c !== Array.isArray(t) ? cloneUnlessOtherwiseSpecified(r, a) : c ? a.arrayMerge(t, r, a) : (l = {}, (s = a).isMergeableObject(t) && Object.keys(t).forEach(function(r) {
                    l[r] = cloneUnlessOtherwiseSpecified(t[r], s)
                }), Object.keys(r).forEach(function(a) {
                    s.isMergeableObject(r[a]) && t[a] ? l[a] = deepmerge(t[a], r[a], s) : l[a] = cloneUnlessOtherwiseSpecified(r[a], s)
                }), l)
            }
            deepmerge.all = function(t, r) {
                if (!Array.isArray(t)) throw Error("first argument should be an array");
                return t.reduce(function(t, a) {
                    return deepmerge(t, a, r)
                }, {})
            };
            var rN = deepmerge,
                rP = a(57880),
                rA = a(20412),
                lodash_es_clone = function(t) {
                    return (0, rA.Z)(t, 4)
                },
                rR = a(28513),
                rF = a(68706),
                rW = a(49756),
                rM = a(49123),
                rD = a(37094),
                rL = a(14021),
                lodash_es_toPath = function(t) {
                    return (0, rW.Z)(t) ? (0, rR.Z)(t, rL.Z) : (0, rM.Z)(t) ? [t] : (0, rF.Z)((0, rD.Z)((0, rs.Z)(t)))
                },
                tiny_warning_esm = function(t, r) {};
            a(5154);
            var rz = a(94770);

            function formik_esm_extends() {
                return (formik_esm_extends = Object.assign || function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }

            function formik_esm_objectWithoutPropertiesLoose(t, r) {
                if (null == t) return {};
                var a, s, l = {},
                    c = Object.keys(t);
                for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                return l
            }

            function _assertThisInitialized(t) {
                if (void 0 === t) throw ReferenceError("this hasn't been initialised - super() hasn't been called");
                return t
            }
            var isEmptyArray = function(t) {
                    return Array.isArray(t) && 0 === t.length
                },
                isFunction = function(t) {
                    return "function" == typeof t
                },
                formik_esm_isObject = function(t) {
                    return null !== t && "object" == typeof t
                },
                formik_esm_isString = function(t) {
                    return "[object String]" === Object.prototype.toString.call(t)
                },
                isEmptyChildren = function(t) {
                    return 0 === nt.Children.count(t)
                },
                isPromise = function(t) {
                    return formik_esm_isObject(t) && isFunction(t.then)
                };

            function formik_esm_getIn(t, r, a, s) {
                void 0 === s && (s = 0);
                for (var l = lodash_es_toPath(r); t && s < l.length;) t = t[l[s++]];
                return void 0 === t ? a : t
            }

            function setIn(t, r, a) {
                for (var s = lodash_es_clone(t), l = s, c = 0, d = lodash_es_toPath(r); c < d.length - 1; c++) {
                    var u = d[c],
                        m = formik_esm_getIn(t, d.slice(0, c + 1));
                    if (m && (formik_esm_isObject(m) || Array.isArray(m))) l = l[u] = lodash_es_clone(m);
                    else {
                        var p = d[c + 1];
                        l = l[u] = String(Math.floor(Number(p))) === p && Number(p) >= 0 ? [] : {}
                    }
                }
                return (0 === c ? t : l)[d[c]] === a ? t : (void 0 === a ? delete l[d[c]] : l[d[c]] = a, 0 === c && void 0 === a && delete s[d[c]], s)
            }
            var rU = (0, nt.createContext)(void 0);
            rU.displayName = "FormikContext";
            var rq = rU.Provider;

            function useFormikContext() {
                var t = (0, nt.useContext)(rU);
                return t || tiny_warning_esm(!1), t
            }

            function formikReducer(t, r) {
                switch (r.type) {
                    case "SET_VALUES":
                        return formik_esm_extends({}, t, {
                            values: r.payload
                        });
                    case "SET_TOUCHED":
                        return formik_esm_extends({}, t, {
                            touched: r.payload
                        });
                    case "SET_ERRORS":
                        if (rT()(t.errors, r.payload)) return t;
                        return formik_esm_extends({}, t, {
                            errors: r.payload
                        });
                    case "SET_STATUS":
                        return formik_esm_extends({}, t, {
                            status: r.payload
                        });
                    case "SET_ISSUBMITTING":
                        return formik_esm_extends({}, t, {
                            isSubmitting: r.payload
                        });
                    case "SET_ISVALIDATING":
                        return formik_esm_extends({}, t, {
                            isValidating: r.payload
                        });
                    case "SET_FIELD_VALUE":
                        return formik_esm_extends({}, t, {
                            values: setIn(t.values, r.payload.field, r.payload.value)
                        });
                    case "SET_FIELD_TOUCHED":
                        return formik_esm_extends({}, t, {
                            touched: setIn(t.touched, r.payload.field, r.payload.value)
                        });
                    case "SET_FIELD_ERROR":
                        return formik_esm_extends({}, t, {
                            errors: setIn(t.errors, r.payload.field, r.payload.value)
                        });
                    case "RESET_FORM":
                        return formik_esm_extends({}, t, r.payload);
                    case "SET_FORMIK_STATE":
                        return r.payload(t);
                    case "SUBMIT_ATTEMPT":
                        return formik_esm_extends({}, t, {
                            touched: function setNestedObjectValues(t, r, a, s) {
                                void 0 === a && (a = new WeakMap), void 0 === s && (s = {});
                                for (var l = 0, c = Object.keys(t); l < c.length; l++) {
                                    var d = c[l],
                                        u = t[d];
                                    formik_esm_isObject(u) ? a.get(u) || (a.set(u, !0), s[d] = Array.isArray(u) ? [] : {}, setNestedObjectValues(u, r, a, s[d])) : s[d] = r
                                }
                                return s
                            }(t.values, !0),
                            isSubmitting: !0,
                            submitCount: t.submitCount + 1
                        });
                    case "SUBMIT_FAILURE":
                    case "SUBMIT_SUCCESS":
                        return formik_esm_extends({}, t, {
                            isSubmitting: !1
                        });
                    default:
                        return t
                }
            }
            rU.Consumer;
            var rB = {},
                rV = {};

            function Formik(t) {
                var r, a, s, l, c, d, u, m, p, h, f, y, b, C, E, j, I, O, P, R, F, W, M, D, L, U, B, $, K, G, J, Y, Q, ee, et, en, er, ea, ei, eo, es, el, ec, ed, eu, em, ep, eh, ef, ey, eg, ev, eb, ew, e_ = (a = void 0 === (r = t.validateOnChange) || r, l = void 0 === (s = t.validateOnBlur) || s, d = void 0 !== (c = t.validateOnMount) && c, u = t.isInitialValid, p = void 0 !== (m = t.enableReinitialize) && m, h = t.onSubmit, f = formik_esm_objectWithoutPropertiesLoose(t, ["validateOnChange", "validateOnBlur", "validateOnMount", "isInitialValid", "enableReinitialize", "onSubmit"]), y = formik_esm_extends({
                        validateOnChange: a,
                        validateOnBlur: l,
                        validateOnMount: d,
                        onSubmit: h
                    }, f), b = (0, nt.useRef)(y.initialValues), C = (0, nt.useRef)(y.initialErrors || rB), E = (0, nt.useRef)(y.initialTouched || rV), j = (0, nt.useRef)(y.initialStatus), I = (0, nt.useRef)(!1), O = (0, nt.useRef)({}), (0, nt.useEffect)(function() {
                        return I.current = !0,
                            function() {
                                I.current = !1
                            }
                    }, []), R = (P = (0, nt.useReducer)(formikReducer, {
                        values: y.initialValues,
                        errors: y.initialErrors || rB,
                        touched: y.initialTouched || rV,
                        status: y.initialStatus,
                        isSubmitting: !1,
                        isValidating: !1,
                        submitCount: 0
                    }))[0], F = P[1], W = (0, nt.useCallback)(function(t, r) {
                        return new Promise(function(a, s) {
                            var l = y.validate(t, r);
                            null == l ? a(rB) : isPromise(l) ? l.then(function(t) {
                                a(t || rB)
                            }, function(t) {
                                s(t)
                            }) : a(l)
                        })
                    }, [y.validate]), M = (0, nt.useCallback)(function(t, r) {
                        var a, s, l, c = y.validationSchema,
                            d = isFunction(c) ? c(r) : c,
                            u = r && d.validateAt ? d.validateAt(r, t) : (void 0 === a && (a = !1), void 0 === s && (s = {}), l = function prepareDataForValidation(t) {
                                var r = Array.isArray(t) ? [] : {};
                                for (var a in t)
                                    if (Object.prototype.hasOwnProperty.call(t, a)) {
                                        var s = String(a);
                                        !0 === Array.isArray(t[s]) ? r[s] = t[s].map(function(t) {
                                            return !0 === Array.isArray(t) || (0, rP.Z)(t) ? prepareDataForValidation(t) : "" !== t ? t : void 0
                                        }) : (0, rP.Z)(t[s]) ? r[s] = prepareDataForValidation(t[s]) : r[s] = "" !== t[s] ? t[s] : void 0
                                    }
                                return r
                            }(t), d[a ? "validateSync" : "validate"](l, {
                                abortEarly: !1,
                                context: s
                            }));
                        return new Promise(function(t, r) {
                            u.then(function() {
                                t(rB)
                            }, function(a) {
                                "ValidationError" === a.name ? t(function(t) {
                                    var r = {};
                                    if (t.inner) {
                                        if (0 === t.inner.length) return setIn(r, t.path, t.message);
                                        for (var a = t.inner, s = Array.isArray(a), l = 0, a = s ? a : a[Symbol.iterator]();;) {
                                            if (s) {
                                                if (l >= a.length) break;
                                                c = a[l++]
                                            } else {
                                                if ((l = a.next()).done) break;
                                                c = l.value
                                            }
                                            var c, d = c;
                                            formik_esm_getIn(r, d.path) || (r = setIn(r, d.path, d.message))
                                        }
                                    }
                                    return r
                                }(a)) : r(a)
                            })
                        })
                    }, [y.validationSchema]), D = (0, nt.useCallback)(function(t, r) {
                        return new Promise(function(a) {
                            return a(O.current[t].validate(r))
                        })
                    }, []), L = (0, nt.useCallback)(function(t) {
                        var r = Object.keys(O.current).filter(function(t) {
                            return isFunction(O.current[t].validate)
                        });
                        return Promise.all(r.length > 0 ? r.map(function(r) {
                            return D(r, formik_esm_getIn(t, r))
                        }) : [Promise.resolve("DO_NOT_DELETE_YOU_WILL_BE_FIRED")]).then(function(t) {
                            return t.reduce(function(t, a, s) {
                                return "DO_NOT_DELETE_YOU_WILL_BE_FIRED" === a || a && (t = setIn(t, r[s], a)), t
                            }, {})
                        })
                    }, [D]), U = (0, nt.useCallback)(function(t) {
                        return Promise.all([L(t), y.validationSchema ? M(t) : {}, y.validate ? W(t) : {}]).then(function(t) {
                            var r = t[0],
                                a = t[1],
                                s = t[2];
                            return rN.all([r, a, s], {
                                arrayMerge: arrayMerge
                            })
                        })
                    }, [y.validate, y.validationSchema, L, W, M]), B = useEventCallback(function(t) {
                        return void 0 === t && (t = R.values), F({
                            type: "SET_ISVALIDATING",
                            payload: !0
                        }), U(t).then(function(t) {
                            return I.current && (F({
                                type: "SET_ISVALIDATING",
                                payload: !1
                            }), F({
                                type: "SET_ERRORS",
                                payload: t
                            })), t
                        })
                    }), (0, nt.useEffect)(function() {
                        d && !0 === I.current && rT()(b.current, y.initialValues) && B(b.current)
                    }, [d, B]), $ = (0, nt.useCallback)(function(t) {
                        var r = t && t.values ? t.values : b.current,
                            a = t && t.errors ? t.errors : C.current ? C.current : y.initialErrors || {},
                            s = t && t.touched ? t.touched : E.current ? E.current : y.initialTouched || {},
                            l = t && t.status ? t.status : j.current ? j.current : y.initialStatus;
                        b.current = r, C.current = a, E.current = s, j.current = l;
                        var dispatchFn = function() {
                            F({
                                type: "RESET_FORM",
                                payload: {
                                    isSubmitting: !!t && !!t.isSubmitting,
                                    errors: a,
                                    touched: s,
                                    status: l,
                                    values: r,
                                    isValidating: !!t && !!t.isValidating,
                                    submitCount: t && t.submitCount && "number" == typeof t.submitCount ? t.submitCount : 0
                                }
                            })
                        };
                        if (y.onReset) {
                            var c = y.onReset(R.values, ep);
                            isPromise(c) ? c.then(dispatchFn) : dispatchFn()
                        } else dispatchFn()
                    }, [y.initialErrors, y.initialStatus, y.initialTouched]), (0, nt.useEffect)(function() {
                        !0 === I.current && !rT()(b.current, y.initialValues) && (p && (b.current = y.initialValues, $()), d && B(b.current))
                    }, [p, y.initialValues, $, d, B]), (0, nt.useEffect)(function() {
                        p && !0 === I.current && !rT()(C.current, y.initialErrors) && (C.current = y.initialErrors || rB, F({
                            type: "SET_ERRORS",
                            payload: y.initialErrors || rB
                        }))
                    }, [p, y.initialErrors]), (0, nt.useEffect)(function() {
                        p && !0 === I.current && !rT()(E.current, y.initialTouched) && (E.current = y.initialTouched || rV, F({
                            type: "SET_TOUCHED",
                            payload: y.initialTouched || rV
                        }))
                    }, [p, y.initialTouched]), (0, nt.useEffect)(function() {
                        p && !0 === I.current && !rT()(j.current, y.initialStatus) && (j.current = y.initialStatus, F({
                            type: "SET_STATUS",
                            payload: y.initialStatus
                        }))
                    }, [p, y.initialStatus, y.initialTouched]), K = useEventCallback(function(t) {
                        if (O.current[t] && isFunction(O.current[t].validate)) {
                            var r = formik_esm_getIn(R.values, t),
                                a = O.current[t].validate(r);
                            return isPromise(a) ? (F({
                                type: "SET_ISVALIDATING",
                                payload: !0
                            }), a.then(function(t) {
                                return t
                            }).then(function(r) {
                                F({
                                    type: "SET_FIELD_ERROR",
                                    payload: {
                                        field: t,
                                        value: r
                                    }
                                }), F({
                                    type: "SET_ISVALIDATING",
                                    payload: !1
                                })
                            })) : (F({
                                type: "SET_FIELD_ERROR",
                                payload: {
                                    field: t,
                                    value: a
                                }
                            }), Promise.resolve(a))
                        }
                        return y.validationSchema ? (F({
                            type: "SET_ISVALIDATING",
                            payload: !0
                        }), M(R.values, t).then(function(t) {
                            return t
                        }).then(function(r) {
                            F({
                                type: "SET_FIELD_ERROR",
                                payload: {
                                    field: t,
                                    value: r[t]
                                }
                            }), F({
                                type: "SET_ISVALIDATING",
                                payload: !1
                            })
                        })) : Promise.resolve()
                    }), G = (0, nt.useCallback)(function(t, r) {
                        var a = r.validate;
                        O.current[t] = {
                            validate: a
                        }
                    }, []), J = (0, nt.useCallback)(function(t) {
                        delete O.current[t]
                    }, []), Y = useEventCallback(function(t, r) {
                        return F({
                            type: "SET_TOUCHED",
                            payload: t
                        }), (void 0 === r ? l : r) ? B(R.values) : Promise.resolve()
                    }), Q = (0, nt.useCallback)(function(t) {
                        F({
                            type: "SET_ERRORS",
                            payload: t
                        })
                    }, []), ee = useEventCallback(function(t, r) {
                        var s = isFunction(t) ? t(R.values) : t;
                        return F({
                            type: "SET_VALUES",
                            payload: s
                        }), (void 0 === r ? a : r) ? B(s) : Promise.resolve()
                    }), et = (0, nt.useCallback)(function(t, r) {
                        F({
                            type: "SET_FIELD_ERROR",
                            payload: {
                                field: t,
                                value: r
                            }
                        })
                    }, []), en = useEventCallback(function(t, r, s) {
                        return F({
                            type: "SET_FIELD_VALUE",
                            payload: {
                                field: t,
                                value: r
                            }
                        }), (void 0 === s ? a : s) ? B(setIn(R.values, t, r)) : Promise.resolve()
                    }), er = (0, nt.useCallback)(function(t, r) {
                        var a, s = r,
                            l = t;
                        if (!formik_esm_isString(t)) {
                            t.persist && t.persist();
                            var c = t.target ? t.target : t.currentTarget,
                                d = c.type,
                                u = c.name,
                                m = c.id,
                                p = c.value,
                                h = c.checked,
                                f = (c.outerHTML, c.options),
                                y = c.multiple;
                            s = r || u || m, l = /number|range/.test(d) ? isNaN(a = parseFloat(p)) ? "" : a : /checkbox/.test(d) ? function(t, r, a) {
                                if ("boolean" == typeof t) return !!r;
                                var s = [],
                                    l = !1,
                                    c = -1;
                                if (Array.isArray(t)) s = t, l = (c = t.indexOf(a)) >= 0;
                                else if (!a || "true" == a || "false" == a) return !!r;
                                return r && a && !l ? s.concat(a) : l ? s.slice(0, c).concat(s.slice(c + 1)) : s
                            }(formik_esm_getIn(R.values, s), h, p) : f && y ? Array.from(f).filter(function(t) {
                                return t.selected
                            }).map(function(t) {
                                return t.value
                            }) : p
                        }
                        s && en(s, l)
                    }, [en, R.values]), ea = useEventCallback(function(t) {
                        if (formik_esm_isString(t)) return function(r) {
                            return er(r, t)
                        };
                        er(t)
                    }), ei = useEventCallback(function(t, r, a) {
                        return void 0 === r && (r = !0), F({
                            type: "SET_FIELD_TOUCHED",
                            payload: {
                                field: t,
                                value: r
                            }
                        }), (void 0 === a ? l : a) ? B(R.values) : Promise.resolve()
                    }), eo = (0, nt.useCallback)(function(t, r) {
                        t.persist && t.persist();
                        var a = t.target,
                            s = a.name,
                            l = a.id;
                        a.outerHTML, ei(r || s || l, !0)
                    }, [ei]), es = useEventCallback(function(t) {
                        if (formik_esm_isString(t)) return function(r) {
                            return eo(r, t)
                        };
                        eo(t)
                    }), el = (0, nt.useCallback)(function(t) {
                        isFunction(t) ? F({
                            type: "SET_FORMIK_STATE",
                            payload: t
                        }) : F({
                            type: "SET_FORMIK_STATE",
                            payload: function() {
                                return t
                            }
                        })
                    }, []), ec = (0, nt.useCallback)(function(t) {
                        F({
                            type: "SET_STATUS",
                            payload: t
                        })
                    }, []), ed = (0, nt.useCallback)(function(t) {
                        F({
                            type: "SET_ISSUBMITTING",
                            payload: t
                        })
                    }, []), eu = useEventCallback(function() {
                        return F({
                            type: "SUBMIT_ATTEMPT"
                        }), B().then(function(t) {
                            var r, a = t instanceof Error;
                            if (!a && 0 === Object.keys(t).length) {
                                try {
                                    if (r = eh(), void 0 === r) return
                                } catch (t) {
                                    throw t
                                }
                                return Promise.resolve(r).then(function(t) {
                                    return I.current && F({
                                        type: "SUBMIT_SUCCESS"
                                    }), t
                                }).catch(function(t) {
                                    if (I.current) throw F({
                                        type: "SUBMIT_FAILURE"
                                    }), t
                                })
                            }
                            if (I.current && (F({
                                    type: "SUBMIT_FAILURE"
                                }), a)) throw t
                        })
                    }), em = useEventCallback(function(t) {
                        t && t.preventDefault && isFunction(t.preventDefault) && t.preventDefault(), t && t.stopPropagation && isFunction(t.stopPropagation) && t.stopPropagation(), eu().catch(function(t) {
                            console.warn("Warning: An unhandled error was caught from submitForm()", t)
                        })
                    }), ep = {
                        resetForm: $,
                        validateForm: B,
                        validateField: K,
                        setErrors: Q,
                        setFieldError: et,
                        setFieldTouched: ei,
                        setFieldValue: en,
                        setStatus: ec,
                        setSubmitting: ed,
                        setTouched: Y,
                        setValues: ee,
                        setFormikState: el,
                        submitForm: eu
                    }, eh = useEventCallback(function() {
                        return h(R.values, ep)
                    }), ef = useEventCallback(function(t) {
                        t && t.preventDefault && isFunction(t.preventDefault) && t.preventDefault(), t && t.stopPropagation && isFunction(t.stopPropagation) && t.stopPropagation(), $()
                    }), ey = (0, nt.useCallback)(function(t) {
                        return {
                            value: formik_esm_getIn(R.values, t),
                            error: formik_esm_getIn(R.errors, t),
                            touched: !!formik_esm_getIn(R.touched, t),
                            initialValue: formik_esm_getIn(b.current, t),
                            initialTouched: !!formik_esm_getIn(E.current, t),
                            initialError: formik_esm_getIn(C.current, t)
                        }
                    }, [R.errors, R.touched, R.values]), eg = (0, nt.useCallback)(function(t) {
                        return {
                            setValue: function(r, a) {
                                return en(t, r, a)
                            },
                            setTouched: function(r, a) {
                                return ei(t, r, a)
                            },
                            setError: function(r) {
                                return et(t, r)
                            }
                        }
                    }, [en, ei, et]), ev = (0, nt.useCallback)(function(t) {
                        var r = formik_esm_isObject(t),
                            a = r ? t.name : t,
                            s = formik_esm_getIn(R.values, a),
                            l = {
                                name: a,
                                value: s,
                                onChange: ea,
                                onBlur: es
                            };
                        if (r) {
                            var c = t.type,
                                d = t.value,
                                u = t.as,
                                m = t.multiple;
                            "checkbox" === c ? void 0 === d ? l.checked = !!s : (l.checked = !!(Array.isArray(s) && ~s.indexOf(d)), l.value = d) : "radio" === c ? (l.checked = s === d, l.value = d) : "select" === u && m && (l.value = l.value || [], l.multiple = !0)
                        }
                        return l
                    }, [es, ea, R.values]), eb = (0, nt.useMemo)(function() {
                        return !rT()(b.current, R.values)
                    }, [b.current, R.values]), ew = (0, nt.useMemo)(function() {
                        return void 0 !== u ? eb ? R.errors && 0 === Object.keys(R.errors).length : !1 !== u && isFunction(u) ? u(y) : u : R.errors && 0 === Object.keys(R.errors).length
                    }, [u, eb, R.errors, y]), formik_esm_extends({}, R, {
                        initialValues: b.current,
                        initialErrors: C.current,
                        initialTouched: E.current,
                        initialStatus: j.current,
                        handleBlur: es,
                        handleChange: ea,
                        handleReset: ef,
                        handleSubmit: em,
                        resetForm: $,
                        setErrors: Q,
                        setFormikState: el,
                        setFieldTouched: ei,
                        setFieldValue: en,
                        setFieldError: et,
                        setStatus: ec,
                        setSubmitting: ed,
                        setTouched: Y,
                        setValues: ee,
                        submitForm: eu,
                        validateForm: B,
                        validateField: K,
                        isValid: ew,
                        dirty: eb,
                        unregisterField: J,
                        registerField: G,
                        getFieldProps: ev,
                        getFieldMeta: ey,
                        getFieldHelpers: eg,
                        validateOnBlur: l,
                        validateOnChange: a,
                        validateOnMount: d
                    })),
                    ek = t.component,
                    ex = t.children,
                    eC = t.render,
                    eS = t.innerRef;
                return (0, nt.useImperativeHandle)(eS, function() {
                    return e_
                }), (0, nt.createElement)(rq, {
                    value: e_
                }, ek ? (0, nt.createElement)(ek, e_) : eC ? eC(e_) : ex ? isFunction(ex) ? ex(e_) : isEmptyChildren(ex) ? null : nt.Children.only(ex) : null)
            }

            function arrayMerge(t, r, a) {
                var s = t.slice();
                return r.forEach(function(r, l) {
                    if (void 0 === s[l]) {
                        var c = !1 !== a.clone && a.isMergeableObject(r);
                        s[l] = c ? rN(Array.isArray(r) ? [] : {}, r, a) : r
                    } else a.isMergeableObject(r) ? s[l] = rN(t[l], r, a) : -1 === t.indexOf(r) && s.push(r)
                }), s
            }
            var rH = "undefined" != typeof window && void 0 !== window.document && void 0 !== window.document.createElement ? nt.useLayoutEffect : nt.useEffect;

            function useEventCallback(t) {
                var r = (0, nt.useRef)(t);
                return rH(function() {
                    r.current = t
                }), (0, nt.useCallback)(function() {
                    for (var t = arguments.length, a = Array(t), s = 0; s < t; s++) a[s] = arguments[s];
                    return r.current.apply(void 0, a)
                }, [])
            }

            function Field(t) {
                var r = t.validate,
                    a = t.name,
                    s = t.render,
                    l = t.children,
                    c = t.as,
                    d = t.component,
                    u = formik_esm_objectWithoutPropertiesLoose(t, ["validate", "name", "render", "children", "as", "component"]),
                    m = formik_esm_objectWithoutPropertiesLoose(useFormikContext(), ["validate", "validationSchema"]),
                    p = m.registerField,
                    h = m.unregisterField;
                (0, nt.useEffect)(function() {
                    return p(a, {
                            validate: r
                        }),
                        function() {
                            h(a)
                        }
                }, [p, h, a, r]);
                var f = m.getFieldProps(formik_esm_extends({
                        name: a
                    }, u)),
                    y = m.getFieldMeta(a),
                    b = {
                        field: f,
                        form: m
                    };
                if (s) return s(formik_esm_extends({}, b, {
                    meta: y
                }));
                if (isFunction(l)) return l(formik_esm_extends({}, b, {
                    meta: y
                }));
                if (d) {
                    if ("string" == typeof d) {
                        var C = u.innerRef,
                            E = formik_esm_objectWithoutPropertiesLoose(u, ["innerRef"]);
                        return (0, nt.createElement)(d, formik_esm_extends({
                            ref: C
                        }, f, E), l)
                    }
                    return (0, nt.createElement)(d, formik_esm_extends({
                        field: f,
                        form: m
                    }, u), l)
                }
                var j = c || "input";
                if ("string" == typeof j) {
                    var I = u.innerRef,
                        O = formik_esm_objectWithoutPropertiesLoose(u, ["innerRef"]);
                    return (0, nt.createElement)(j, formik_esm_extends({
                        ref: I
                    }, f, O), l)
                }
                return (0, nt.createElement)(j, formik_esm_extends({}, f, u), l)
            }
            var r$ = (0, nt.forwardRef)(function(t, r) {
                var a = t.action,
                    s = formik_esm_objectWithoutPropertiesLoose(t, ["action"]),
                    l = useFormikContext(),
                    c = l.handleReset,
                    d = l.handleSubmit;
                return (0, nt.createElement)("form", Object.assign({
                    onSubmit: d,
                    ref: r,
                    onReset: c,
                    action: null != a ? a : "#"
                }, s))
            });
            r$.displayName = "Form";
            var move = function(t, r, a) {
                    var s = copyArrayLike(t),
                        l = s[r];
                    return s.splice(r, 1), s.splice(a, 0, l), s
                },
                swap = function(t, r, a) {
                    var s = copyArrayLike(t),
                        l = s[r];
                    return s[r] = s[a], s[a] = l, s
                },
                insert = function(t, r, a) {
                    var s = copyArrayLike(t);
                    return s.splice(r, 0, a), s
                },
                replace = function(t, r, a) {
                    var s = copyArrayLike(t);
                    return s[r] = a, s
                },
                copyArrayLike = function(t) {
                    if (!t) return [];
                    if (Array.isArray(t)) return [].concat(t);
                    var r = Object.keys(t).map(function(t) {
                        return parseInt(t)
                    }).reduce(function(t, r) {
                        return r > t ? r : t
                    }, 0);
                    return Array.from(formik_esm_extends({}, t, {
                        length: r + 1
                    }))
                };
            (function(t) {
                function FieldArrayInner(r) {
                    var a;
                    return (a = t.call(this, r) || this).updateArrayField = function(t, r, s) {
                        var l = a.props,
                            c = l.name;
                        (0, l.formik.setFormikState)(function(a) {
                            var l = "function" == typeof s ? s : t,
                                d = "function" == typeof r ? r : t,
                                u = setIn(a.values, c, t(formik_esm_getIn(a.values, c))),
                                m = s ? l(formik_esm_getIn(a.errors, c)) : void 0,
                                p = r ? d(formik_esm_getIn(a.touched, c)) : void 0;
                            return isEmptyArray(m) && (m = void 0), isEmptyArray(p) && (p = void 0), formik_esm_extends({}, a, {
                                values: u,
                                errors: s ? setIn(a.errors, c, m) : a.errors,
                                touched: r ? setIn(a.touched, c, p) : a.touched
                            })
                        })
                    }, a.push = function(t) {
                        return a.updateArrayField(function(r) {
                            return [].concat(copyArrayLike(r), [(0, rz.Z)(t)])
                        }, !1, !1)
                    }, a.handlePush = function(t) {
                        return function() {
                            return a.push(t)
                        }
                    }, a.swap = function(t, r) {
                        return a.updateArrayField(function(a) {
                            return swap(a, t, r)
                        }, !0, !0)
                    }, a.handleSwap = function(t, r) {
                        return function() {
                            return a.swap(t, r)
                        }
                    }, a.move = function(t, r) {
                        return a.updateArrayField(function(a) {
                            return move(a, t, r)
                        }, !0, !0)
                    }, a.handleMove = function(t, r) {
                        return function() {
                            return a.move(t, r)
                        }
                    }, a.insert = function(t, r) {
                        return a.updateArrayField(function(a) {
                            return insert(a, t, r)
                        }, function(r) {
                            return insert(r, t, null)
                        }, function(r) {
                            return insert(r, t, null)
                        })
                    }, a.handleInsert = function(t, r) {
                        return function() {
                            return a.insert(t, r)
                        }
                    }, a.replace = function(t, r) {
                        return a.updateArrayField(function(a) {
                            return replace(a, t, r)
                        }, !1, !1)
                    }, a.handleReplace = function(t, r) {
                        return function() {
                            return a.replace(t, r)
                        }
                    }, a.unshift = function(t) {
                        var r = -1;
                        return a.updateArrayField(function(a) {
                            var s = a ? [t].concat(a) : [t];
                            return r < 0 && (r = s.length), s
                        }, function(t) {
                            var a = t ? [null].concat(t) : [null];
                            return r < 0 && (r = a.length), a
                        }, function(t) {
                            var a = t ? [null].concat(t) : [null];
                            return r < 0 && (r = a.length), a
                        }), r
                    }, a.handleUnshift = function(t) {
                        return function() {
                            return a.unshift(t)
                        }
                    }, a.handleRemove = function(t) {
                        return function() {
                            return a.remove(t)
                        }
                    }, a.handlePop = function() {
                        return function() {
                            return a.pop()
                        }
                    }, a.remove = a.remove.bind(_assertThisInitialized(a)), a.pop = a.pop.bind(_assertThisInitialized(a)), a
                }
                FieldArrayInner.prototype = Object.create(t.prototype), FieldArrayInner.prototype.constructor = FieldArrayInner, FieldArrayInner.__proto__ = t;
                var r = FieldArrayInner.prototype;
                return r.componentDidUpdate = function(t) {
                    this.props.validateOnChange && this.props.formik.validateOnChange && !rT()(formik_esm_getIn(t.formik.values, t.name), formik_esm_getIn(this.props.formik.values, this.props.name)) && this.props.formik.validateForm(this.props.formik.values)
                }, r.remove = function(t) {
                    var r;
                    return this.updateArrayField(function(a) {
                        var s = a ? copyArrayLike(a) : [];
                        return r || (r = s[t]), isFunction(s.splice) && s.splice(t, 1), s
                    }, !0, !0), r
                }, r.pop = function() {
                    var t;
                    return this.updateArrayField(function(r) {
                        return t || (t = r && r.pop && r.pop()), r
                    }, !0, !0), t
                }, r.render = function() {
                    var t = {
                            push: this.push,
                            pop: this.pop,
                            swap: this.swap,
                            move: this.move,
                            insert: this.insert,
                            replace: this.replace,
                            unshift: this.unshift,
                            remove: this.remove,
                            handlePush: this.handlePush,
                            handlePop: this.handlePop,
                            handleSwap: this.handleSwap,
                            handleMove: this.handleMove,
                            handleInsert: this.handleInsert,
                            handleReplace: this.handleReplace,
                            handleUnshift: this.handleUnshift,
                            handleRemove: this.handleRemove
                        },
                        r = this.props,
                        a = r.component,
                        s = r.render,
                        l = r.children,
                        c = r.name,
                        d = formik_esm_objectWithoutPropertiesLoose(r.formik, ["validate", "validationSchema"]),
                        u = formik_esm_extends({}, t, {
                            form: d,
                            name: c
                        });
                    return a ? (0, nt.createElement)(a, u) : s ? s(u) : l ? "function" == typeof l ? l(u) : isEmptyChildren(l) ? null : nt.Children.only(l) : null
                }, FieldArrayInner
            })(nt.Component).defaultProps = {
                validateOnChange: !0
            };
            let rK = {
                type: "logger",
                log(t) {
                    this.output("log", t)
                },
                warn(t) {
                    this.output("warn", t)
                },
                error(t) {
                    this.output("error", t)
                },
                output(t, r) {
                    console && console[t] && console[t].apply(console, r)
                }
            };
            let Logger = class Logger {
                constructor(t) {
                    let r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                    this.init(t, r)
                }
                init(t) {
                    let r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                    this.prefix = r.prefix || "i18next:", this.logger = t || rK, this.options = r, this.debug = r.debug
                }
                log() {
                    for (var t = arguments.length, r = Array(t), a = 0; a < t; a++) r[a] = arguments[a];
                    return this.forward(r, "log", "", !0)
                }
                warn() {
                    for (var t = arguments.length, r = Array(t), a = 0; a < t; a++) r[a] = arguments[a];
                    return this.forward(r, "warn", "", !0)
                }
                error() {
                    for (var t = arguments.length, r = Array(t), a = 0; a < t; a++) r[a] = arguments[a];
                    return this.forward(r, "error", "")
                }
                deprecate() {
                    for (var t = arguments.length, r = Array(t), a = 0; a < t; a++) r[a] = arguments[a];
                    return this.forward(r, "warn", "WARNING DEPRECATED: ", !0)
                }
                forward(t, r, a, s) {
                    return s && !this.debug ? null : ("string" == typeof t[0] && (t[0] = `${a}${this.prefix} ${t[0]}`), this.logger[r](t))
                }
                create(t) {
                    return new Logger(this.logger, {
                        prefix: `${this.prefix}:${t}:`,
                        ...this.options
                    })
                }
                clone(t) {
                    return (t = t || this.options).prefix = t.prefix || this.prefix, new Logger(this.logger, t)
                }
            };
            var rG = new Logger;
            let EventEmitter = class EventEmitter {
                constructor() {
                    this.observers = {}
                }
                on(t, r) {
                    return t.split(" ").forEach(t => {
                        this.observers[t] = this.observers[t] || [], this.observers[t].push(r)
                    }), this
                }
                off(t, r) {
                    if (this.observers[t]) {
                        if (!r) {
                            delete this.observers[t];
                            return
                        }
                        this.observers[t] = this.observers[t].filter(t => t !== r)
                    }
                }
                emit(t) {
                    for (var r = arguments.length, a = Array(r > 1 ? r - 1 : 0), s = 1; s < r; s++) a[s - 1] = arguments[s];
                    if (this.observers[t]) {
                        let r = [].concat(this.observers[t]);
                        r.forEach(t => {
                            t(...a)
                        })
                    }
                    if (this.observers["*"]) {
                        let r = [].concat(this.observers["*"]);
                        r.forEach(r => {
                            r.apply(r, [t, ...a])
                        })
                    }
                }
            };

            function defer() {
                let t, r;
                let a = new Promise((a, s) => {
                    t = a, r = s
                });
                return a.resolve = t, a.reject = r, a
            }

            function makeString(t) {
                return null == t ? "" : "" + t
            }

            function getLastOfPath(t, r, a) {
                function cleanKey(t) {
                    return t && t.indexOf("###") > -1 ? t.replace(/###/g, ".") : t
                }

                function canNotTraverseDeeper() {
                    return !t || "string" == typeof t
                }
                let s = "string" != typeof r ? [].concat(r) : r.split(".");
                for (; s.length > 1;) {
                    if (canNotTraverseDeeper()) return {};
                    let r = cleanKey(s.shift());
                    !t[r] && a && (t[r] = new a), t = Object.prototype.hasOwnProperty.call(t, r) ? t[r] : {}
                }
                return canNotTraverseDeeper() ? {} : {
                    obj: t,
                    k: cleanKey(s.shift())
                }
            }

            function setPath(t, r, a) {
                let {
                    obj: s,
                    k: l
                } = getLastOfPath(t, r, Object);
                s[l] = a
            }

            function getPath(t, r) {
                let {
                    obj: a,
                    k: s
                } = getLastOfPath(t, r);
                if (a) return a[s]
            }

            function regexEscape(t) {
                return t.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&")
            }
            var rZ = {
                "&": "&amp;",
                "<": "&lt;",
                ">": "&gt;",
                '"': "&quot;",
                "'": "&#39;",
                "/": "&#x2F;"
            };

            function i18next_escape(t) {
                return "string" == typeof t ? t.replace(/[&<>"'\/]/g, t => rZ[t]) : t
            }
            let rJ = [" ", ",", "?", "!", ";"];

            function deepFind(t, r) {
                let a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : ".";
                if (!t) return;
                if (t[r]) return t[r];
                let s = r.split(a),
                    l = t;
                for (let t = 0; t < s.length; ++t) {
                    if (!l || "string" == typeof l[s[t]] && t + 1 < s.length) return;
                    if (void 0 === l[s[t]]) {
                        let c = 2,
                            d = s.slice(t, t + c).join(a),
                            u = l[d];
                        for (; void 0 === u && s.length > t + c;) c++, u = l[d = s.slice(t, t + c).join(a)];
                        if (void 0 === u) return;
                        if (null === u) return null;
                        if (r.endsWith(d)) {
                            if ("string" == typeof u) return u;
                            if (d && "string" == typeof u[d]) return u[d]
                        }
                        let m = s.slice(t + c).join(a);
                        if (m) return deepFind(u, m, a);
                        return
                    }
                    l = l[s[t]]
                }
                return l
            }

            function getCleanedCode(t) {
                return t && t.indexOf("_") > 0 ? t.replace("_", "-") : t
            }
            let ResourceStore = class ResourceStore extends EventEmitter {
                constructor(t) {
                    let r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {
                        ns: ["translation"],
                        defaultNS: "translation"
                    };
                    super(), this.data = t || {}, this.options = r, void 0 === this.options.keySeparator && (this.options.keySeparator = "."), void 0 === this.options.ignoreJSONStructure && (this.options.ignoreJSONStructure = !0)
                }
                addNamespaces(t) {
                    0 > this.options.ns.indexOf(t) && this.options.ns.push(t)
                }
                removeNamespaces(t) {
                    let r = this.options.ns.indexOf(t);
                    r > -1 && this.options.ns.splice(r, 1)
                }
                getResource(t, r, a) {
                    let s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {},
                        l = void 0 !== s.keySeparator ? s.keySeparator : this.options.keySeparator,
                        c = void 0 !== s.ignoreJSONStructure ? s.ignoreJSONStructure : this.options.ignoreJSONStructure,
                        d = [t, r];
                    a && "string" != typeof a && (d = d.concat(a)), a && "string" == typeof a && (d = d.concat(l ? a.split(l) : a)), t.indexOf(".") > -1 && (d = t.split("."));
                    let u = getPath(this.data, d);
                    return u || !c || "string" != typeof a ? u : deepFind(this.data && this.data[t] && this.data[t][r], a, l)
                }
                addResource(t, r, a, s) {
                    let l = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : {
                            silent: !1
                        },
                        c = void 0 !== l.keySeparator ? l.keySeparator : this.options.keySeparator,
                        d = [t, r];
                    a && (d = d.concat(c ? a.split(c) : a)), t.indexOf(".") > -1 && (d = t.split("."), s = r, r = d[1]), this.addNamespaces(r), setPath(this.data, d, s), l.silent || this.emit("added", t, r, a, s)
                }
                addResources(t, r, a) {
                    let s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {
                        silent: !1
                    };
                    for (let s in a)("string" == typeof a[s] || "[object Array]" === Object.prototype.toString.apply(a[s])) && this.addResource(t, r, s, a[s], {
                        silent: !0
                    });
                    s.silent || this.emit("added", t, r, a)
                }
                addResourceBundle(t, r, a, s, l) {
                    let c = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : {
                            silent: !1
                        },
                        d = [t, r];
                    t.indexOf(".") > -1 && (d = t.split("."), s = a, a = r, r = d[1]), this.addNamespaces(r);
                    let u = getPath(this.data, d) || {};
                    s ? function deepExtend(t, r, a) {
                        for (let s in r) "__proto__" !== s && "constructor" !== s && (s in t ? "string" == typeof t[s] || t[s] instanceof String || "string" == typeof r[s] || r[s] instanceof String ? a && (t[s] = r[s]) : deepExtend(t[s], r[s], a) : t[s] = r[s]);
                        return t
                    }(u, a, l) : u = { ...u,
                        ...a
                    }, setPath(this.data, d, u), c.silent || this.emit("added", t, r, a)
                }
                removeResourceBundle(t, r) {
                    this.hasResourceBundle(t, r) && delete this.data[t][r], this.removeNamespaces(r), this.emit("removed", t, r)
                }
                hasResourceBundle(t, r) {
                    return void 0 !== this.getResource(t, r)
                }
                getResourceBundle(t, r) {
                    return (r || (r = this.options.defaultNS), "v1" === this.options.compatibilityAPI) ? { ...this.getResource(t, r)
                    } : this.getResource(t, r)
                }
                getDataByLanguage(t) {
                    return this.data[t]
                }
                hasLanguageSomeTranslations(t) {
                    let r = this.getDataByLanguage(t),
                        a = r && Object.keys(r) || [];
                    return !!a.find(t => r[t] && Object.keys(r[t]).length > 0)
                }
                toJSON() {
                    return this.data
                }
            };
            var rY = {
                processors: {},
                addPostProcessor(t) {
                    this.processors[t.name] = t
                },
                handle(t, r, a, s, l) {
                    return t.forEach(t => {
                        this.processors[t] && (r = this.processors[t].process(r, a, s, l))
                    }), r
                }
            };
            let rQ = {};
            let Translator = class Translator extends EventEmitter {
                constructor(t) {
                    let r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                    super(),
                        function(t, r, a) {
                            t.forEach(t => {
                                r[t] && (a[t] = r[t])
                            })
                        }(["resourceStore", "languageUtils", "pluralResolver", "interpolator", "backendConnector", "i18nFormat", "utils"], t, this), this.options = r, void 0 === this.options.keySeparator && (this.options.keySeparator = "."), this.logger = rG.create("translator")
                }
                changeLanguage(t) {
                    t && (this.language = t)
                }
                exists(t) {
                    let r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {
                        interpolation: {}
                    };
                    if (null == t) return !1;
                    let a = this.resolve(t, r);
                    return a && void 0 !== a.res
                }
                extractFromKey(t, r) {
                    let a = void 0 !== r.nsSeparator ? r.nsSeparator : this.options.nsSeparator;
                    void 0 === a && (a = ":");
                    let s = void 0 !== r.keySeparator ? r.keySeparator : this.options.keySeparator,
                        l = r.ns || this.options.defaultNS || [],
                        c = a && t.indexOf(a) > -1,
                        d = !this.options.userDefinedKeySeparator && !r.keySeparator && !this.options.userDefinedNsSeparator && !r.nsSeparator && ! function(t, r, a) {
                            r = r || "", a = a || "";
                            let s = rJ.filter(t => 0 > r.indexOf(t) && 0 > a.indexOf(t));
                            if (0 === s.length) return !0;
                            let l = RegExp(`(${s.map(t=>"?"===t?"\\?":t).join("|")})`),
                                c = !l.test(t);
                            if (!c) {
                                let r = t.indexOf(a);
                                r > 0 && !l.test(t.substring(0, r)) && (c = !0)
                            }
                            return c
                        }(t, a, s);
                    if (c && !d) {
                        let r = t.match(this.interpolator.nestingRegexp);
                        if (r && r.length > 0) return {
                            key: t,
                            namespaces: l
                        };
                        let c = t.split(a);
                        (a !== s || a === s && this.options.ns.indexOf(c[0]) > -1) && (l = c.shift()), t = c.join(s)
                    }
                    return "string" == typeof l && (l = [l]), {
                        key: t,
                        namespaces: l
                    }
                }
                translate(t, r, a) {
                    if ("object" != typeof r && this.options.overloadTranslationOptionHandler && (r = this.options.overloadTranslationOptionHandler(arguments)), "object" == typeof r && (r = { ...r
                        }), r || (r = {}), null == t) return "";
                    Array.isArray(t) || (t = [String(t)]);
                    let s = void 0 !== r.returnDetails ? r.returnDetails : this.options.returnDetails,
                        l = void 0 !== r.keySeparator ? r.keySeparator : this.options.keySeparator,
                        {
                            key: c,
                            namespaces: d
                        } = this.extractFromKey(t[t.length - 1], r),
                        u = d[d.length - 1],
                        m = r.lng || this.language,
                        p = r.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
                    if (m && "cimode" === m.toLowerCase()) {
                        if (p) {
                            let t = r.nsSeparator || this.options.nsSeparator;
                            return s ? {
                                res: `${u}${t}${c}`,
                                usedKey: c,
                                exactUsedKey: c,
                                usedLng: m,
                                usedNS: u,
                                usedParams: this.getUsedParamsDetails(r)
                            } : `${u}${t}${c}`
                        }
                        return s ? {
                            res: c,
                            usedKey: c,
                            exactUsedKey: c,
                            usedLng: m,
                            usedNS: u,
                            usedParams: this.getUsedParamsDetails(r)
                        } : c
                    }
                    let h = this.resolve(t, r),
                        f = h && h.res,
                        y = h && h.usedKey || c,
                        b = h && h.exactUsedKey || c,
                        C = Object.prototype.toString.apply(f),
                        E = void 0 !== r.joinArrays ? r.joinArrays : this.options.joinArrays,
                        j = !this.i18nFormat || this.i18nFormat.handleAsObject,
                        I = "string" != typeof f && "boolean" != typeof f && "number" != typeof f;
                    if (j && f && I && 0 > ["[object Number]", "[object Function]", "[object RegExp]"].indexOf(C) && !("string" == typeof E && "[object Array]" === C)) {
                        if (!r.returnObjects && !this.options.returnObjects) {
                            this.options.returnedObjectHandler || this.logger.warn("accessing an object - but returnObjects options is not enabled!");
                            let t = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(y, f, { ...r,
                                ns: d
                            }) : `key '${c} (${this.language})' returned an object instead of string.`;
                            return s ? (h.res = t, h.usedParams = this.getUsedParamsDetails(r), h) : t
                        }
                        if (l) {
                            let t = "[object Array]" === C,
                                a = t ? [] : {},
                                s = t ? b : y;
                            for (let t in f)
                                if (Object.prototype.hasOwnProperty.call(f, t)) {
                                    let c = `${s}${l}${t}`;
                                    a[t] = this.translate(c, { ...r,
                                        joinArrays: !1,
                                        ns: d
                                    }), a[t] === c && (a[t] = f[t])
                                }
                            f = a
                        }
                    } else if (j && "string" == typeof E && "[object Array]" === C)(f = f.join(E)) && (f = this.extendTranslation(f, t, r, a));
                    else {
                        let s = !1,
                            d = !1,
                            p = void 0 !== r.count && "string" != typeof r.count,
                            y = Translator.hasDefaultValue(r),
                            b = p ? this.pluralResolver.getSuffix(m, r.count, r) : "",
                            C = r.ordinal && p ? this.pluralResolver.getSuffix(m, r.count, {
                                ordinal: !1
                            }) : "",
                            E = r[`defaultValue${b}`] || r[`defaultValue${C}`] || r.defaultValue;
                        !this.isValidLookup(f) && y && (s = !0, f = E), this.isValidLookup(f) || (d = !0, f = c);
                        let j = r.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey,
                            I = j && d ? void 0 : f,
                            O = y && E !== f && this.options.updateMissing;
                        if (d || s || O) {
                            if (this.logger.log(O ? "updateKey" : "missingKey", m, u, c, O ? E : f), l) {
                                let t = this.resolve(c, { ...r,
                                    keySeparator: !1
                                });
                                t && t.res && this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.")
                            }
                            let t = [],
                                a = this.languageUtils.getFallbackCodes(this.options.fallbackLng, r.lng || this.language);
                            if ("fallback" === this.options.saveMissingTo && a && a[0])
                                for (let r = 0; r < a.length; r++) t.push(a[r]);
                            else "all" === this.options.saveMissingTo ? t = this.languageUtils.toResolveHierarchy(r.lng || this.language) : t.push(r.lng || this.language);
                            let send = (t, a, s) => {
                                let l = y && s !== f ? s : I;
                                this.options.missingKeyHandler ? this.options.missingKeyHandler(t, u, a, l, O, r) : this.backendConnector && this.backendConnector.saveMissing && this.backendConnector.saveMissing(t, u, a, l, O, r), this.emit("missingKey", t, u, a, f)
                            };
                            this.options.saveMissing && (this.options.saveMissingPlurals && p ? t.forEach(t => {
                                this.pluralResolver.getSuffixes(t, r).forEach(a => {
                                    send([t], c + a, r[`defaultValue${a}`] || E)
                                })
                            }) : send(t, c, E))
                        }
                        f = this.extendTranslation(f, t, r, h, a), d && f === c && this.options.appendNamespaceToMissingKey && (f = `${u}:${c}`), (d || s) && this.options.parseMissingKeyHandler && (f = "v1" !== this.options.compatibilityAPI ? this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? `${u}:${c}` : c, s ? f : void 0) : this.options.parseMissingKeyHandler(f))
                    }
                    return s ? (h.res = f, h.usedParams = this.getUsedParamsDetails(r), h) : f
                }
                extendTranslation(t, r, a, s, l) {
                    var c = this;
                    if (this.i18nFormat && this.i18nFormat.parse) t = this.i18nFormat.parse(t, { ...this.options.interpolation.defaultVariables,
                        ...a
                    }, a.lng || this.language || s.usedLng, s.usedNS, s.usedKey, {
                        resolved: s
                    });
                    else if (!a.skipInterpolation) {
                        let d;
                        a.interpolation && this.interpolator.init({ ...a,
                            interpolation: { ...this.options.interpolation,
                                ...a.interpolation
                            }
                        });
                        let u = "string" == typeof t && (a && a.interpolation && void 0 !== a.interpolation.skipOnVariables ? a.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
                        if (u) {
                            let r = t.match(this.interpolator.nestingRegexp);
                            d = r && r.length
                        }
                        let m = a.replace && "string" != typeof a.replace ? a.replace : a;
                        if (this.options.interpolation.defaultVariables && (m = { ...this.options.interpolation.defaultVariables,
                                ...m
                            }), t = this.interpolator.interpolate(t, m, a.lng || this.language, a), u) {
                            let r = t.match(this.interpolator.nestingRegexp),
                                s = r && r.length;
                            d < s && (a.nest = !1)
                        }!a.lng && "v1" !== this.options.compatibilityAPI && s && s.res && (a.lng = s.usedLng), !1 !== a.nest && (t = this.interpolator.nest(t, function() {
                            for (var t = arguments.length, s = Array(t), d = 0; d < t; d++) s[d] = arguments[d];
                            return l && l[0] === s[0] && !a.context ? (c.logger.warn(`It seems you are nesting recursively key: ${s[0]} in key: ${r[0]}`), null) : c.translate(...s, r)
                        }, a)), a.interpolation && this.interpolator.reset()
                    }
                    let d = a.postProcess || this.options.postProcess,
                        u = "string" == typeof d ? [d] : d;
                    return null != t && u && u.length && !1 !== a.applyPostProcessor && (t = rY.handle(u, t, r, this.options && this.options.postProcessPassResolved ? {
                        i18nResolved: { ...s,
                            usedParams: this.getUsedParamsDetails(a)
                        },
                        ...a
                    } : a, this)), t
                }
                resolve(t) {
                    let r, a, s, l, c, d = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                    return "string" == typeof t && (t = [t]), t.forEach(t => {
                        if (this.isValidLookup(r)) return;
                        let u = this.extractFromKey(t, d),
                            m = u.key;
                        a = m;
                        let p = u.namespaces;
                        this.options.fallbackNS && (p = p.concat(this.options.fallbackNS));
                        let h = void 0 !== d.count && "string" != typeof d.count,
                            f = h && !d.ordinal && 0 === d.count && this.pluralResolver.shouldUseIntlApi(),
                            y = void 0 !== d.context && ("string" == typeof d.context || "number" == typeof d.context) && "" !== d.context,
                            b = d.lngs ? d.lngs : this.languageUtils.toResolveHierarchy(d.lng || this.language, d.fallbackLng);
                        p.forEach(t => {
                            this.isValidLookup(r) || (c = t, !rQ[`${b[0]}-${t}`] && this.utils && this.utils.hasLoadedNamespace && !this.utils.hasLoadedNamespace(c) && (rQ[`${b[0]}-${t}`] = !0, this.logger.warn(`key "${a}" for languages "${b.join(", ")}" won't get resolved as namespace "${c}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!")), b.forEach(a => {
                                let c;
                                if (this.isValidLookup(r)) return;
                                l = a;
                                let u = [m];
                                if (this.i18nFormat && this.i18nFormat.addLookupKeys) this.i18nFormat.addLookupKeys(u, m, a, t, d);
                                else {
                                    let t;
                                    h && (t = this.pluralResolver.getSuffix(a, d.count, d));
                                    let r = `${this.options.pluralSeparator}zero`,
                                        s = `${this.options.pluralSeparator}ordinal${this.options.pluralSeparator}`;
                                    if (h && (u.push(m + t), d.ordinal && 0 === t.indexOf(s) && u.push(m + t.replace(s, this.options.pluralSeparator)), f && u.push(m + r)), y) {
                                        let a = `${m}${this.options.contextSeparator}${d.context}`;
                                        u.push(a), h && (u.push(a + t), d.ordinal && 0 === t.indexOf(s) && u.push(a + t.replace(s, this.options.pluralSeparator)), f && u.push(a + r))
                                    }
                                }
                                for (; c = u.pop();) this.isValidLookup(r) || (s = c, r = this.getResource(a, t, c, d))
                            }))
                        })
                    }), {
                        res: r,
                        usedKey: a,
                        exactUsedKey: s,
                        usedLng: l,
                        usedNS: c
                    }
                }
                isValidLookup(t) {
                    return void 0 !== t && !(!this.options.returnNull && null === t) && !(!this.options.returnEmptyString && "" === t)
                }
                getResource(t, r, a) {
                    let s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
                    return this.i18nFormat && this.i18nFormat.getResource ? this.i18nFormat.getResource(t, r, a, s) : this.resourceStore.getResource(t, r, a, s)
                }
                getUsedParamsDetails() {
                    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                        r = t.replace && "string" != typeof t.replace,
                        a = r ? t.replace : t;
                    if (r && void 0 !== t.count && (a.count = t.count), this.options.interpolation.defaultVariables && (a = { ...this.options.interpolation.defaultVariables,
                            ...a
                        }), !r)
                        for (let t of (a = { ...a
                            }, ["defaultValue", "ordinal", "context", "replace", "lng", "lngs", "fallbackLng", "ns", "keySeparator", "nsSeparator", "returnObjects", "returnDetails", "joinArrays", "postProcess", "interpolation"])) delete a[t];
                    return a
                }
                static hasDefaultValue(t) {
                    let r = "defaultValue";
                    for (let a in t)
                        if (Object.prototype.hasOwnProperty.call(t, a) && r === a.substring(0, r.length) && void 0 !== t[a]) return !0;
                    return !1
                }
            };

            function i18next_capitalize(t) {
                return t.charAt(0).toUpperCase() + t.slice(1)
            }
            let LanguageUtil = class LanguageUtil {
                constructor(t) {
                    this.options = t, this.supportedLngs = this.options.supportedLngs || !1, this.logger = rG.create("languageUtils")
                }
                getScriptPartFromCode(t) {
                    if (!(t = getCleanedCode(t)) || 0 > t.indexOf("-")) return null;
                    let r = t.split("-");
                    return 2 === r.length ? null : (r.pop(), "x" === r[r.length - 1].toLowerCase()) ? null : this.formatLanguageCode(r.join("-"))
                }
                getLanguagePartFromCode(t) {
                    if (!(t = getCleanedCode(t)) || 0 > t.indexOf("-")) return t;
                    let r = t.split("-");
                    return this.formatLanguageCode(r[0])
                }
                formatLanguageCode(t) {
                    if ("string" == typeof t && t.indexOf("-") > -1) {
                        let r = ["hans", "hant", "latn", "cyrl", "cans", "mong", "arab"],
                            a = t.split("-");
                        return this.options.lowerCaseLng ? a = a.map(t => t.toLowerCase()) : 2 === a.length ? (a[0] = a[0].toLowerCase(), a[1] = a[1].toUpperCase(), r.indexOf(a[1].toLowerCase()) > -1 && (a[1] = i18next_capitalize(a[1].toLowerCase()))) : 3 === a.length && (a[0] = a[0].toLowerCase(), 2 === a[1].length && (a[1] = a[1].toUpperCase()), "sgn" !== a[0] && 2 === a[2].length && (a[2] = a[2].toUpperCase()), r.indexOf(a[1].toLowerCase()) > -1 && (a[1] = i18next_capitalize(a[1].toLowerCase())), r.indexOf(a[2].toLowerCase()) > -1 && (a[2] = i18next_capitalize(a[2].toLowerCase()))), a.join("-")
                    }
                    return this.options.cleanCode || this.options.lowerCaseLng ? t.toLowerCase() : t
                }
                isSupportedCode(t) {
                    return ("languageOnly" === this.options.load || this.options.nonExplicitSupportedLngs) && (t = this.getLanguagePartFromCode(t)), !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(t) > -1
                }
                getBestMatchFromCodes(t) {
                    let r;
                    return t ? (t.forEach(t => {
                        if (r) return;
                        let a = this.formatLanguageCode(t);
                        (!this.options.supportedLngs || this.isSupportedCode(a)) && (r = a)
                    }), !r && this.options.supportedLngs && t.forEach(t => {
                        if (r) return;
                        let a = this.getLanguagePartFromCode(t);
                        if (this.isSupportedCode(a)) return r = a;
                        r = this.options.supportedLngs.find(t => {
                            if (t === a || !(0 > t.indexOf("-") && 0 > a.indexOf("-")) && 0 === t.indexOf(a)) return t
                        })
                    }), r || (r = this.getFallbackCodes(this.options.fallbackLng)[0]), r) : null
                }
                getFallbackCodes(t, r) {
                    if (!t) return [];
                    if ("function" == typeof t && (t = t(r)), "string" == typeof t && (t = [t]), "[object Array]" === Object.prototype.toString.apply(t)) return t;
                    if (!r) return t.default || [];
                    let a = t[r];
                    return a || (a = t[this.getScriptPartFromCode(r)]), a || (a = t[this.formatLanguageCode(r)]), a || (a = t[this.getLanguagePartFromCode(r)]), a || (a = t.default), a || []
                }
                toResolveHierarchy(t, r) {
                    let a = this.getFallbackCodes(r || this.options.fallbackLng || [], t),
                        s = [],
                        addCode = t => {
                            t && (this.isSupportedCode(t) ? s.push(t) : this.logger.warn(`rejecting language code not found in supportedLngs: ${t}`))
                        };
                    return "string" == typeof t && (t.indexOf("-") > -1 || t.indexOf("_") > -1) ? ("languageOnly" !== this.options.load && addCode(this.formatLanguageCode(t)), "languageOnly" !== this.options.load && "currentOnly" !== this.options.load && addCode(this.getScriptPartFromCode(t)), "currentOnly" !== this.options.load && addCode(this.getLanguagePartFromCode(t))) : "string" == typeof t && addCode(this.formatLanguageCode(t)), a.forEach(t => {
                        0 > s.indexOf(t) && addCode(this.formatLanguageCode(t))
                    }), s
                }
            };
            let rX = [{
                    lngs: ["ach", "ak", "am", "arn", "br", "fil", "gun", "ln", "mfe", "mg", "mi", "oc", "pt", "pt-BR", "tg", "tl", "ti", "tr", "uz", "wa"],
                    nr: [1, 2],
                    fc: 1
                }, {
                    lngs: ["af", "an", "ast", "az", "bg", "bn", "ca", "da", "de", "dev", "el", "en", "eo", "es", "et", "eu", "fi", "fo", "fur", "fy", "gl", "gu", "ha", "hi", "hu", "hy", "ia", "it", "kk", "kn", "ku", "lb", "mai", "ml", "mn", "mr", "nah", "nap", "nb", "ne", "nl", "nn", "no", "nso", "pa", "pap", "pms", "ps", "pt-PT", "rm", "sco", "se", "si", "so", "son", "sq", "sv", "sw", "ta", "te", "tk", "ur", "yo"],
                    nr: [1, 2],
                    fc: 2
                }, {
                    lngs: ["ay", "bo", "cgg", "fa", "ht", "id", "ja", "jbo", "ka", "km", "ko", "ky", "lo", "ms", "sah", "su", "th", "tt", "ug", "vi", "wo", "zh"],
                    nr: [1],
                    fc: 3
                }, {
                    lngs: ["be", "bs", "cnr", "dz", "hr", "ru", "sr", "uk"],
                    nr: [1, 2, 5],
                    fc: 4
                }, {
                    lngs: ["ar"],
                    nr: [0, 1, 2, 3, 11, 100],
                    fc: 5
                }, {
                    lngs: ["cs", "sk"],
                    nr: [1, 2, 5],
                    fc: 6
                }, {
                    lngs: ["csb", "pl"],
                    nr: [1, 2, 5],
                    fc: 7
                }, {
                    lngs: ["cy"],
                    nr: [1, 2, 3, 8],
                    fc: 8
                }, {
                    lngs: ["fr"],
                    nr: [1, 2],
                    fc: 9
                }, {
                    lngs: ["ga"],
                    nr: [1, 2, 3, 7, 11],
                    fc: 10
                }, {
                    lngs: ["gd"],
                    nr: [1, 2, 3, 20],
                    fc: 11
                }, {
                    lngs: ["is"],
                    nr: [1, 2],
                    fc: 12
                }, {
                    lngs: ["jv"],
                    nr: [0, 1],
                    fc: 13
                }, {
                    lngs: ["kw"],
                    nr: [1, 2, 3, 4],
                    fc: 14
                }, {
                    lngs: ["lt"],
                    nr: [1, 2, 10],
                    fc: 15
                }, {
                    lngs: ["lv"],
                    nr: [1, 2, 0],
                    fc: 16
                }, {
                    lngs: ["mk"],
                    nr: [1, 2],
                    fc: 17
                }, {
                    lngs: ["mnk"],
                    nr: [0, 1, 2],
                    fc: 18
                }, {
                    lngs: ["mt"],
                    nr: [1, 2, 11, 20],
                    fc: 19
                }, {
                    lngs: ["or"],
                    nr: [2, 1],
                    fc: 2
                }, {
                    lngs: ["ro"],
                    nr: [1, 2, 20],
                    fc: 20
                }, {
                    lngs: ["sl"],
                    nr: [5, 1, 2, 3],
                    fc: 21
                }, {
                    lngs: ["he", "iw"],
                    nr: [1, 2, 20, 21],
                    fc: 22
                }],
                r0 = {
                    1: function(t) {
                        return Number(t > 1)
                    },
                    2: function(t) {
                        return Number(1 != t)
                    },
                    3: function(t) {
                        return 0
                    },
                    4: function(t) {
                        return Number(t % 10 == 1 && t % 100 != 11 ? 0 : t % 10 >= 2 && t % 10 <= 4 && (t % 100 < 10 || t % 100 >= 20) ? 1 : 2)
                    },
                    5: function(t) {
                        return Number(0 == t ? 0 : 1 == t ? 1 : 2 == t ? 2 : t % 100 >= 3 && t % 100 <= 10 ? 3 : t % 100 >= 11 ? 4 : 5)
                    },
                    6: function(t) {
                        return Number(1 == t ? 0 : t >= 2 && t <= 4 ? 1 : 2)
                    },
                    7: function(t) {
                        return Number(1 == t ? 0 : t % 10 >= 2 && t % 10 <= 4 && (t % 100 < 10 || t % 100 >= 20) ? 1 : 2)
                    },
                    8: function(t) {
                        return Number(1 == t ? 0 : 2 == t ? 1 : 8 != t && 11 != t ? 2 : 3)
                    },
                    9: function(t) {
                        return Number(t >= 2)
                    },
                    10: function(t) {
                        return Number(1 == t ? 0 : 2 == t ? 1 : t < 7 ? 2 : t < 11 ? 3 : 4)
                    },
                    11: function(t) {
                        return Number(1 == t || 11 == t ? 0 : 2 == t || 12 == t ? 1 : t > 2 && t < 20 ? 2 : 3)
                    },
                    12: function(t) {
                        return Number(t % 10 != 1 || t % 100 == 11)
                    },
                    13: function(t) {
                        return Number(0 !== t)
                    },
                    14: function(t) {
                        return Number(1 == t ? 0 : 2 == t ? 1 : 3 == t ? 2 : 3)
                    },
                    15: function(t) {
                        return Number(t % 10 == 1 && t % 100 != 11 ? 0 : t % 10 >= 2 && (t % 100 < 10 || t % 100 >= 20) ? 1 : 2)
                    },
                    16: function(t) {
                        return Number(t % 10 == 1 && t % 100 != 11 ? 0 : 0 !== t ? 1 : 2)
                    },
                    17: function(t) {
                        return Number(1 == t || t % 10 == 1 && t % 100 != 11 ? 0 : 1)
                    },
                    18: function(t) {
                        return Number(0 == t ? 0 : 1 == t ? 1 : 2)
                    },
                    19: function(t) {
                        return Number(1 == t ? 0 : 0 == t || t % 100 > 1 && t % 100 < 11 ? 1 : t % 100 > 10 && t % 100 < 20 ? 2 : 3)
                    },
                    20: function(t) {
                        return Number(1 == t ? 0 : 0 == t || t % 100 > 0 && t % 100 < 20 ? 1 : 2)
                    },
                    21: function(t) {
                        return Number(t % 100 == 1 ? 1 : t % 100 == 2 ? 2 : t % 100 == 3 || t % 100 == 4 ? 3 : 0)
                    },
                    22: function(t) {
                        return Number(1 == t ? 0 : 2 == t ? 1 : (t < 0 || t > 10) && t % 10 == 0 ? 2 : 3)
                    }
                },
                r1 = ["v1", "v2", "v3"],
                r2 = ["v4"],
                r3 = {
                    zero: 0,
                    one: 1,
                    two: 2,
                    few: 3,
                    many: 4,
                    other: 5
                };
            let PluralResolver = class PluralResolver {
                constructor(t) {
                    let r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                    this.languageUtils = t, this.options = r, this.logger = rG.create("pluralResolver"), (!this.options.compatibilityJSON || r2.includes(this.options.compatibilityJSON)) && ("undefined" == typeof Intl || !Intl.PluralRules) && (this.options.compatibilityJSON = "v3", this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.")), this.rules = function() {
                        let t = {};
                        return rX.forEach(r => {
                            r.lngs.forEach(a => {
                                t[a] = {
                                    numbers: r.nr,
                                    plurals: r0[r.fc]
                                }
                            })
                        }), t
                    }()
                }
                addRule(t, r) {
                    this.rules[t] = r
                }
                getRule(t) {
                    let r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                    if (this.shouldUseIntlApi()) try {
                        return new Intl.PluralRules(getCleanedCode(t), {
                            type: r.ordinal ? "ordinal" : "cardinal"
                        })
                    } catch (t) {
                        return
                    }
                    return this.rules[t] || this.rules[this.languageUtils.getLanguagePartFromCode(t)]
                }
                needsPlural(t) {
                    let r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
                        a = this.getRule(t, r);
                    return this.shouldUseIntlApi() ? a && a.resolvedOptions().pluralCategories.length > 1 : a && a.numbers.length > 1
                }
                getPluralFormsOfKey(t, r) {
                    let a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                    return this.getSuffixes(t, a).map(t => `${r}${t}`)
                }
                getSuffixes(t) {
                    let r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
                        a = this.getRule(t, r);
                    return a ? this.shouldUseIntlApi() ? a.resolvedOptions().pluralCategories.sort((t, r) => r3[t] - r3[r]).map(t => `${this.options.prepend}${r.ordinal?`ordinal${this.options.prepend}`:""}${t}`) : a.numbers.map(a => this.getSuffix(t, a, r)) : []
                }
                getSuffix(t, r) {
                    let a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
                        s = this.getRule(t, a);
                    return s ? this.shouldUseIntlApi() ? `${this.options.prepend}${a.ordinal?`ordinal${this.options.prepend}`:""}${s.select(r)}` : this.getSuffixRetroCompatible(s, r) : (this.logger.warn(`no plural rule found for: ${t}`), "")
                }
                getSuffixRetroCompatible(t, r) {
                    let a = t.noAbs ? t.plurals(r) : t.plurals(Math.abs(r)),
                        s = t.numbers[a];
                    this.options.simplifyPluralSuffix && 2 === t.numbers.length && 1 === t.numbers[0] && (2 === s ? s = "plural" : 1 === s && (s = ""));
                    let returnSuffix = () => this.options.prepend && s.toString() ? this.options.prepend + s.toString() : s.toString();
                    return "v1" === this.options.compatibilityJSON ? 1 === s ? "" : "number" == typeof s ? `_plural_${s.toString()}` : returnSuffix() : "v2" === this.options.compatibilityJSON || this.options.simplifyPluralSuffix && 2 === t.numbers.length && 1 === t.numbers[0] ? returnSuffix() : this.options.prepend && a.toString() ? this.options.prepend + a.toString() : a.toString()
                }
                shouldUseIntlApi() {
                    return !r1.includes(this.options.compatibilityJSON)
                }
            };

            function deepFindWithDefaults(t, r, a) {
                let s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : ".",
                    l = !(arguments.length > 4) || void 0 === arguments[4] || arguments[4],
                    c = function(t, r, a) {
                        let s = getPath(t, a);
                        return void 0 !== s ? s : getPath(r, a)
                    }(t, r, a);
                return !c && l && "string" == typeof a && void 0 === (c = deepFind(t, a, s)) && (c = deepFind(r, a, s)), c
            }
            let Interpolator = class Interpolator {
                constructor() {
                    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                    this.logger = rG.create("interpolator"), this.options = t, this.format = t.interpolation && t.interpolation.format || (t => t), this.init(t)
                }
                init() {
                    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                    t.interpolation || (t.interpolation = {
                        escapeValue: !0
                    });
                    let r = t.interpolation;
                    this.escape = void 0 !== r.escape ? r.escape : i18next_escape, this.escapeValue = void 0 === r.escapeValue || r.escapeValue, this.useRawValueToEscape = void 0 !== r.useRawValueToEscape && r.useRawValueToEscape, this.prefix = r.prefix ? regexEscape(r.prefix) : r.prefixEscaped || "{{", this.suffix = r.suffix ? regexEscape(r.suffix) : r.suffixEscaped || "}}", this.formatSeparator = r.formatSeparator ? r.formatSeparator : r.formatSeparator || ",", this.unescapePrefix = r.unescapeSuffix ? "" : r.unescapePrefix || "-", this.unescapeSuffix = this.unescapePrefix ? "" : r.unescapeSuffix || "", this.nestingPrefix = r.nestingPrefix ? regexEscape(r.nestingPrefix) : r.nestingPrefixEscaped || regexEscape("$t("), this.nestingSuffix = r.nestingSuffix ? regexEscape(r.nestingSuffix) : r.nestingSuffixEscaped || regexEscape(")"), this.nestingOptionsSeparator = r.nestingOptionsSeparator ? r.nestingOptionsSeparator : r.nestingOptionsSeparator || ",", this.maxReplaces = r.maxReplaces ? r.maxReplaces : 1e3, this.alwaysFormat = void 0 !== r.alwaysFormat && r.alwaysFormat, this.resetRegExp()
                }
                reset() {
                    this.options && this.init(this.options)
                }
                resetRegExp() {
                    let t = `${this.prefix}(.+?)${this.suffix}`;
                    this.regexp = RegExp(t, "g");
                    let r = `${this.prefix}${this.unescapePrefix}(.+?)${this.unescapeSuffix}${this.suffix}`;
                    this.regexpUnescape = RegExp(r, "g");
                    let a = `${this.nestingPrefix}(.+?)${this.nestingSuffix}`;
                    this.nestingRegexp = RegExp(a, "g")
                }
                interpolate(t, r, a, s) {
                    let l, c, d;
                    let u = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};

                    function regexSafe(t) {
                        return t.replace(/\$/g, "$$$$")
                    }
                    let handleFormat = t => {
                        if (0 > t.indexOf(this.formatSeparator)) {
                            let l = deepFindWithDefaults(r, u, t, this.options.keySeparator, this.options.ignoreJSONStructure);
                            return this.alwaysFormat ? this.format(l, void 0, a, { ...s,
                                ...r,
                                interpolationkey: t
                            }) : l
                        }
                        let l = t.split(this.formatSeparator),
                            c = l.shift().trim(),
                            d = l.join(this.formatSeparator).trim();
                        return this.format(deepFindWithDefaults(r, u, c, this.options.keySeparator, this.options.ignoreJSONStructure), d, a, { ...s,
                            ...r,
                            interpolationkey: c
                        })
                    };
                    this.resetRegExp();
                    let m = s && s.missingInterpolationHandler || this.options.missingInterpolationHandler,
                        p = s && s.interpolation && void 0 !== s.interpolation.skipOnVariables ? s.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables,
                        h = [{
                            regex: this.regexpUnescape,
                            safeValue: t => regexSafe(t)
                        }, {
                            regex: this.regexp,
                            safeValue: t => this.escapeValue ? regexSafe(this.escape(t)) : regexSafe(t)
                        }];
                    return h.forEach(r => {
                        for (d = 0; l = r.regex.exec(t);) {
                            let a = l[1].trim();
                            if (void 0 === (c = handleFormat(a))) {
                                if ("function" == typeof m) {
                                    let r = m(t, l, s);
                                    c = "string" == typeof r ? r : ""
                                } else if (s && Object.prototype.hasOwnProperty.call(s, a)) c = "";
                                else if (p) {
                                    c = l[0];
                                    continue
                                } else this.logger.warn(`missed to pass in variable ${a} for interpolating ${t}`), c = ""
                            } else "string" == typeof c || this.useRawValueToEscape || (c = makeString(c));
                            let u = r.safeValue(c);
                            if (t = t.replace(l[0], u), p ? (r.regex.lastIndex += c.length, r.regex.lastIndex -= l[0].length) : r.regex.lastIndex = 0, ++d >= this.maxReplaces) break
                        }
                    }), t
                }
                nest(t, r) {
                    let a, s, l, c = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};

                    function handleHasOptions(t, r) {
                        let a = this.nestingOptionsSeparator;
                        if (0 > t.indexOf(a)) return t;
                        let s = t.split(RegExp(`${a}[ ]*{`)),
                            c = `{${s[1]}`;
                        t = s[0], c = this.interpolate(c, l);
                        let d = c.match(/'/g),
                            u = c.match(/"/g);
                        (d && d.length % 2 == 0 && !u || u.length % 2 != 0) && (c = c.replace(/'/g, '"'));
                        try {
                            l = JSON.parse(c), r && (l = { ...r,
                                ...l
                            })
                        } catch (r) {
                            return this.logger.warn(`failed parsing options string in nesting for key ${t}`, r), `${t}${a}${c}`
                        }
                        return delete l.defaultValue, t
                    }
                    for (; a = this.nestingRegexp.exec(t);) {
                        let d = [];
                        (l = (l = { ...c
                        }).replace && "string" != typeof l.replace ? l.replace : l).applyPostProcessor = !1, delete l.defaultValue;
                        let u = !1;
                        if (-1 !== a[0].indexOf(this.formatSeparator) && !/{.*}/.test(a[1])) {
                            let t = a[1].split(this.formatSeparator).map(t => t.trim());
                            a[1] = t.shift(), d = t, u = !0
                        }
                        if ((s = r(handleHasOptions.call(this, a[1].trim(), l), l)) && a[0] === t && "string" != typeof s) return s;
                        "string" != typeof s && (s = makeString(s)), s || (this.logger.warn(`missed to resolve ${a[1]} for nesting ${t}`), s = ""), u && (s = d.reduce((t, r) => this.format(t, r, c.lng, { ...c,
                            interpolationkey: a[1].trim()
                        }), s.trim())), t = t.replace(a[0], s), this.regexp.lastIndex = 0
                    }
                    return t
                }
            };

            function createCachedFormatter(t) {
                let r = {};
                return function(a, s, l) {
                    let c = s + JSON.stringify(l),
                        d = r[c];
                    return d || (d = t(getCleanedCode(s), l), r[c] = d), d(a)
                }
            }
            let Formatter = class Formatter {
                constructor() {
                    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                    this.logger = rG.create("formatter"), this.options = t, this.formats = {
                        number: createCachedFormatter((t, r) => {
                            let a = new Intl.NumberFormat(t, { ...r
                            });
                            return t => a.format(t)
                        }),
                        currency: createCachedFormatter((t, r) => {
                            let a = new Intl.NumberFormat(t, { ...r,
                                style: "currency"
                            });
                            return t => a.format(t)
                        }),
                        datetime: createCachedFormatter((t, r) => {
                            let a = new Intl.DateTimeFormat(t, { ...r
                            });
                            return t => a.format(t)
                        }),
                        relativetime: createCachedFormatter((t, r) => {
                            let a = new Intl.RelativeTimeFormat(t, { ...r
                            });
                            return t => a.format(t, r.range || "day")
                        }),
                        list: createCachedFormatter((t, r) => {
                            let a = new Intl.ListFormat(t, { ...r
                            });
                            return t => a.format(t)
                        })
                    }, this.init(t)
                }
                init(t) {
                    let r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {
                            interpolation: {}
                        },
                        a = r.interpolation;
                    this.formatSeparator = a.formatSeparator ? a.formatSeparator : a.formatSeparator || ","
                }
                add(t, r) {
                    this.formats[t.toLowerCase().trim()] = r
                }
                addCached(t, r) {
                    this.formats[t.toLowerCase().trim()] = createCachedFormatter(r)
                }
                format(t, r, a) {
                    let s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {},
                        l = r.split(this.formatSeparator),
                        c = l.reduce((t, r) => {
                            let {
                                formatName: l,
                                formatOptions: c
                            } = function(t) {
                                let r = t.toLowerCase().trim(),
                                    a = {};
                                if (t.indexOf("(") > -1) {
                                    let s = t.split("(");
                                    r = s[0].toLowerCase().trim();
                                    let l = s[1].substring(0, s[1].length - 1);
                                    if ("currency" === r && 0 > l.indexOf(":")) a.currency || (a.currency = l.trim());
                                    else if ("relativetime" === r && 0 > l.indexOf(":")) a.range || (a.range = l.trim());
                                    else {
                                        let t = l.split(";");
                                        t.forEach(t => {
                                            if (!t) return;
                                            let [r, ...s] = t.split(":"), l = s.join(":").trim().replace(/^'+|'+$/g, "");
                                            a[r.trim()] || (a[r.trim()] = l), "false" === l && (a[r.trim()] = !1), "true" === l && (a[r.trim()] = !0), isNaN(l) || (a[r.trim()] = parseInt(l, 10))
                                        })
                                    }
                                }
                                return {
                                    formatName: r,
                                    formatOptions: a
                                }
                            }(r);
                            if (this.formats[l]) {
                                let r = t;
                                try {
                                    let d = s && s.formatParams && s.formatParams[s.interpolationkey] || {},
                                        u = d.locale || d.lng || s.locale || s.lng || a;
                                    r = this.formats[l](t, u, { ...c,
                                        ...s,
                                        ...d
                                    })
                                } catch (t) {
                                    this.logger.warn(t)
                                }
                                return r
                            }
                            return this.logger.warn(`there was no format function for ${l}`), t
                        }, t);
                    return c
                }
            };
            let Connector = class Connector extends EventEmitter {
                constructor(t, r, a) {
                    let s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
                    super(), this.backend = t, this.store = r, this.services = a, this.languageUtils = a.languageUtils, this.options = s, this.logger = rG.create("backendConnector"), this.waitingReads = [], this.maxParallelReads = s.maxParallelReads || 10, this.readingCalls = 0, this.maxRetries = s.maxRetries >= 0 ? s.maxRetries : 5, this.retryTimeout = s.retryTimeout >= 1 ? s.retryTimeout : 350, this.state = {}, this.queue = [], this.backend && this.backend.init && this.backend.init(a, s.backend, s)
                }
                queueLoad(t, r, a, s) {
                    let l = {},
                        c = {},
                        d = {},
                        u = {};
                    return t.forEach(t => {
                        let s = !0;
                        r.forEach(r => {
                            let d = `${t}|${r}`;
                            !a.reload && this.store.hasResourceBundle(t, r) ? this.state[d] = 2 : this.state[d] < 0 || (1 === this.state[d] ? void 0 === c[d] && (c[d] = !0) : (this.state[d] = 1, s = !1, void 0 === c[d] && (c[d] = !0), void 0 === l[d] && (l[d] = !0), void 0 === u[r] && (u[r] = !0)))
                        }), s || (d[t] = !0)
                    }), (Object.keys(l).length || Object.keys(c).length) && this.queue.push({
                        pending: c,
                        pendingCount: Object.keys(c).length,
                        loaded: {},
                        errors: [],
                        callback: s
                    }), {
                        toLoad: Object.keys(l),
                        pending: Object.keys(c),
                        toLoadLanguages: Object.keys(d),
                        toLoadNamespaces: Object.keys(u)
                    }
                }
                loaded(t, r, a) {
                    let s = t.split("|"),
                        l = s[0],
                        c = s[1];
                    r && this.emit("failedLoading", l, c, r), a && this.store.addResourceBundle(l, c, a), this.state[t] = r ? -1 : 2;
                    let d = {};
                    this.queue.forEach(a => {
                        (function(t, r, a, s) {
                            let {
                                obj: l,
                                k: c
                            } = getLastOfPath(t, r, Object);
                            l[c] = l[c] || [], s && (l[c] = l[c].concat(a)), s || l[c].push(a)
                        })(a.loaded, [l], c), void 0 !== a.pending[t] && (delete a.pending[t], a.pendingCount--), r && a.errors.push(r), 0 !== a.pendingCount || a.done || (Object.keys(a.loaded).forEach(t => {
                            d[t] || (d[t] = {});
                            let r = a.loaded[t];
                            r.length && r.forEach(r => {
                                void 0 === d[t][r] && (d[t][r] = !0)
                            })
                        }), a.done = !0, a.errors.length ? a.callback(a.errors) : a.callback())
                    }), this.emit("loaded", d), this.queue = this.queue.filter(t => !t.done)
                }
                read(t, r, a) {
                    let s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,
                        l = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : this.retryTimeout,
                        c = arguments.length > 5 ? arguments[5] : void 0;
                    if (!t.length) return c(null, {});
                    if (this.readingCalls >= this.maxParallelReads) {
                        this.waitingReads.push({
                            lng: t,
                            ns: r,
                            fcName: a,
                            tried: s,
                            wait: l,
                            callback: c
                        });
                        return
                    }
                    this.readingCalls++;
                    let resolver = (d, u) => {
                            if (this.readingCalls--, this.waitingReads.length > 0) {
                                let t = this.waitingReads.shift();
                                this.read(t.lng, t.ns, t.fcName, t.tried, t.wait, t.callback)
                            }
                            if (d && u && s < this.maxRetries) {
                                setTimeout(() => {
                                    this.read.call(this, t, r, a, s + 1, 2 * l, c)
                                }, l);
                                return
                            }
                            c(d, u)
                        },
                        d = this.backend[a].bind(this.backend);
                    if (2 === d.length) {
                        try {
                            let a = d(t, r);
                            a && "function" == typeof a.then ? a.then(t => resolver(null, t)).catch(resolver) : resolver(null, a)
                        } catch (t) {
                            resolver(t)
                        }
                        return
                    }
                    return d(t, r, resolver)
                }
                prepareLoading(t, r) {
                    let a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
                        s = arguments.length > 3 ? arguments[3] : void 0;
                    if (!this.backend) return this.logger.warn("No backend was added via i18next.use. Will not load resources."), s && s();
                    "string" == typeof t && (t = this.languageUtils.toResolveHierarchy(t)), "string" == typeof r && (r = [r]);
                    let l = this.queueLoad(t, r, a, s);
                    if (!l.toLoad.length) return l.pending.length || s(), null;
                    l.toLoad.forEach(t => {
                        this.loadOne(t)
                    })
                }
                load(t, r, a) {
                    this.prepareLoading(t, r, {}, a)
                }
                reload(t, r, a) {
                    this.prepareLoading(t, r, {
                        reload: !0
                    }, a)
                }
                loadOne(t) {
                    let r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "",
                        a = t.split("|"),
                        s = a[0],
                        l = a[1];
                    this.read(s, l, "read", void 0, void 0, (a, c) => {
                        a && this.logger.warn(`${r}loading namespace ${l} for language ${s} failed`, a), !a && c && this.logger.log(`${r}loaded namespace ${l} for language ${s}`, c), this.loaded(t, a, c)
                    })
                }
                saveMissing(t, r, a, s, l) {
                    let c = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : {},
                        d = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : () => {};
                    if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(r)) {
                        this.logger.warn(`did not save key "${a}" as the namespace "${r}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
                        return
                    }
                    if (null != a && "" !== a) {
                        if (this.backend && this.backend.create) {
                            let u = { ...c,
                                    isUpdate: l
                                },
                                m = this.backend.create.bind(this.backend);
                            if (m.length < 6) try {
                                let l;
                                (l = 5 === m.length ? m(t, r, a, s, u) : m(t, r, a, s)) && "function" == typeof l.then ? l.then(t => d(null, t)).catch(d) : d(null, l)
                            } catch (t) {
                                d(t)
                            } else m(t, r, a, s, d, u)
                        }
                        t && t[0] && this.store.addResource(t[0], r, a, s)
                    }
                }
            };

            function get() {
                return {
                    debug: !1,
                    initImmediate: !0,
                    ns: ["translation"],
                    defaultNS: ["translation"],
                    fallbackLng: ["dev"],
                    fallbackNS: !1,
                    supportedLngs: !1,
                    nonExplicitSupportedLngs: !1,
                    load: "all",
                    preload: !1,
                    simplifyPluralSuffix: !0,
                    keySeparator: ".",
                    nsSeparator: ":",
                    pluralSeparator: "_",
                    contextSeparator: "_",
                    partialBundledLanguages: !1,
                    saveMissing: !1,
                    updateMissing: !1,
                    saveMissingTo: "fallback",
                    saveMissingPlurals: !0,
                    missingKeyHandler: !1,
                    missingInterpolationHandler: !1,
                    postProcess: !1,
                    postProcessPassResolved: !1,
                    returnNull: !1,
                    returnEmptyString: !0,
                    returnObjects: !1,
                    joinArrays: !1,
                    returnedObjectHandler: !1,
                    parseMissingKeyHandler: !1,
                    appendNamespaceToMissingKey: !1,
                    appendNamespaceToCIMode: !1,
                    overloadTranslationOptionHandler: function(t) {
                        let r = {};
                        if ("object" == typeof t[1] && (r = t[1]), "string" == typeof t[1] && (r.defaultValue = t[1]), "string" == typeof t[2] && (r.tDescription = t[2]), "object" == typeof t[2] || "object" == typeof t[3]) {
                            let a = t[3] || t[2];
                            Object.keys(a).forEach(t => {
                                r[t] = a[t]
                            })
                        }
                        return r
                    },
                    interpolation: {
                        escapeValue: !0,
                        format: t => t,
                        prefix: "{{",
                        suffix: "}}",
                        formatSeparator: ",",
                        unescapePrefix: "-",
                        nestingPrefix: "$t(",
                        nestingSuffix: ")",
                        nestingOptionsSeparator: ",",
                        maxReplaces: 1e3,
                        skipOnVariables: !0
                    }
                }
            }

            function transformOptions(t) {
                return "string" == typeof t.ns && (t.ns = [t.ns]), "string" == typeof t.fallbackLng && (t.fallbackLng = [t.fallbackLng]), "string" == typeof t.fallbackNS && (t.fallbackNS = [t.fallbackNS]), t.supportedLngs && 0 > t.supportedLngs.indexOf("cimode") && (t.supportedLngs = t.supportedLngs.concat(["cimode"])), t
            }

            function i18next_noop() {}
            let I18n = class I18n extends EventEmitter {
                constructor() {
                    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                        r = arguments.length > 1 ? arguments[1] : void 0;
                    if (super(), this.options = transformOptions(t), this.services = {}, this.logger = rG, this.modules = {
                            external: []
                        }, ! function(t) {
                            let r = Object.getOwnPropertyNames(Object.getPrototypeOf(t));
                            r.forEach(r => {
                                "function" == typeof t[r] && (t[r] = t[r].bind(t))
                            })
                        }(this), r && !this.isInitialized && !t.isClone) {
                        if (!this.options.initImmediate) return this.init(t, r), this;
                        setTimeout(() => {
                            this.init(t, r)
                        }, 0)
                    }
                }
                init() {
                    var t = this;
                    let r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                        a = arguments.length > 1 ? arguments[1] : void 0;
                    "function" == typeof r && (a = r, r = {}), !r.defaultNS && !1 !== r.defaultNS && r.ns && ("string" == typeof r.ns ? r.defaultNS = r.ns : 0 > r.ns.indexOf("translation") && (r.defaultNS = r.ns[0]));
                    let s = get();

                    function createClassOnDemand(t) {
                        return t ? "function" == typeof t ? new t : t : null
                    }
                    if (this.options = { ...s,
                            ...this.options,
                            ...transformOptions(r)
                        }, "v1" !== this.options.compatibilityAPI && (this.options.interpolation = { ...s.interpolation,
                            ...this.options.interpolation
                        }), void 0 !== r.keySeparator && (this.options.userDefinedKeySeparator = r.keySeparator), void 0 !== r.nsSeparator && (this.options.userDefinedNsSeparator = r.nsSeparator), !this.options.isClone) {
                        let r;
                        this.modules.logger ? rG.init(createClassOnDemand(this.modules.logger), this.options) : rG.init(null, this.options), this.modules.formatter ? r = this.modules.formatter : "undefined" != typeof Intl && (r = Formatter);
                        let a = new LanguageUtil(this.options);
                        this.store = new ResourceStore(this.options.resources, this.options);
                        let l = this.services;
                        l.logger = rG, l.resourceStore = this.store, l.languageUtils = a, l.pluralResolver = new PluralResolver(a, {
                            prepend: this.options.pluralSeparator,
                            compatibilityJSON: this.options.compatibilityJSON,
                            simplifyPluralSuffix: this.options.simplifyPluralSuffix
                        }), r && (!this.options.interpolation.format || this.options.interpolation.format === s.interpolation.format) && (l.formatter = createClassOnDemand(r), l.formatter.init(l, this.options), this.options.interpolation.format = l.formatter.format.bind(l.formatter)), l.interpolator = new Interpolator(this.options), l.utils = {
                            hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
                        }, l.backendConnector = new Connector(createClassOnDemand(this.modules.backend), l.resourceStore, l, this.options), l.backendConnector.on("*", function(r) {
                            for (var a = arguments.length, s = Array(a > 1 ? a - 1 : 0), l = 1; l < a; l++) s[l - 1] = arguments[l];
                            t.emit(r, ...s)
                        }), this.modules.languageDetector && (l.languageDetector = createClassOnDemand(this.modules.languageDetector), l.languageDetector.init && l.languageDetector.init(l, this.options.detection, this.options)), this.modules.i18nFormat && (l.i18nFormat = createClassOnDemand(this.modules.i18nFormat), l.i18nFormat.init && l.i18nFormat.init(this)), this.translator = new Translator(this.services, this.options), this.translator.on("*", function(r) {
                            for (var a = arguments.length, s = Array(a > 1 ? a - 1 : 0), l = 1; l < a; l++) s[l - 1] = arguments[l];
                            t.emit(r, ...s)
                        }), this.modules.external.forEach(t => {
                            t.init && t.init(this)
                        })
                    }
                    if (this.format = this.options.interpolation.format, a || (a = i18next_noop), this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
                        let t = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
                        t.length > 0 && "dev" !== t[0] && (this.options.lng = t[0])
                    }
                    this.services.languageDetector || this.options.lng || this.logger.warn("init: no languageDetector is used and no lng is defined"), ["getResource", "hasResourceBundle", "getResourceBundle", "getDataByLanguage"].forEach(r => {
                        this[r] = function() {
                            return t.store[r](...arguments)
                        }
                    }), ["addResource", "addResources", "addResourceBundle", "removeResourceBundle"].forEach(r => {
                        this[r] = function() {
                            return t.store[r](...arguments), t
                        }
                    });
                    let l = defer(),
                        load = () => {
                            let finish = (t, r) => {
                                this.isInitialized && !this.initializedStoreOnce && this.logger.warn("init: i18next is already initialized. You should call init just once!"), this.isInitialized = !0, this.options.isClone || this.logger.log("initialized", this.options), this.emit("initialized", this.options), l.resolve(r), a(t, r)
                            };
                            if (this.languages && "v1" !== this.options.compatibilityAPI && !this.isInitialized) return finish(null, this.t.bind(this));
                            this.changeLanguage(this.options.lng, finish)
                        };
                    return this.options.resources || !this.options.initImmediate ? load() : setTimeout(load, 0), l
                }
                loadResources(t) {
                    let r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : i18next_noop,
                        a = r,
                        s = "string" == typeof t ? t : this.language;
                    if ("function" == typeof t && (a = t), !this.options.resources || this.options.partialBundledLanguages) {
                        if (s && "cimode" === s.toLowerCase() && (!this.options.preload || 0 === this.options.preload.length)) return a();
                        let t = [],
                            append = r => {
                                if (!r || "cimode" === r) return;
                                let a = this.services.languageUtils.toResolveHierarchy(r);
                                a.forEach(r => {
                                    "cimode" !== r && 0 > t.indexOf(r) && t.push(r)
                                })
                            };
                        if (s) append(s);
                        else {
                            let t = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
                            t.forEach(t => append(t))
                        }
                        this.options.preload && this.options.preload.forEach(t => append(t)), this.services.backendConnector.load(t, this.options.ns, t => {
                            t || this.resolvedLanguage || !this.language || this.setResolvedLanguage(this.language), a(t)
                        })
                    } else a(null)
                }
                reloadResources(t, r, a) {
                    let s = defer();
                    return t || (t = this.languages), r || (r = this.options.ns), a || (a = i18next_noop), this.services.backendConnector.reload(t, r, t => {
                        s.resolve(), a(t)
                    }), s
                }
                use(t) {
                    if (!t) throw Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");
                    if (!t.type) throw Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");
                    return "backend" === t.type && (this.modules.backend = t), ("logger" === t.type || t.log && t.warn && t.error) && (this.modules.logger = t), "languageDetector" === t.type && (this.modules.languageDetector = t), "i18nFormat" === t.type && (this.modules.i18nFormat = t), "postProcessor" === t.type && rY.addPostProcessor(t), "formatter" === t.type && (this.modules.formatter = t), "3rdParty" === t.type && this.modules.external.push(t), this
                }
                setResolvedLanguage(t) {
                    if (t && this.languages && !(["cimode", "dev"].indexOf(t) > -1))
                        for (let t = 0; t < this.languages.length; t++) {
                            let r = this.languages[t];
                            if (!(["cimode", "dev"].indexOf(r) > -1) && this.store.hasLanguageSomeTranslations(r)) {
                                this.resolvedLanguage = r;
                                break
                            }
                        }
                }
                changeLanguage(t, r) {
                    var a = this;
                    this.isLanguageChangingTo = t;
                    let s = defer();
                    this.emit("languageChanging", t);
                    let setLngProps = t => {
                            this.language = t, this.languages = this.services.languageUtils.toResolveHierarchy(t), this.resolvedLanguage = void 0, this.setResolvedLanguage(t)
                        },
                        done = (t, l) => {
                            l ? (setLngProps(l), this.translator.changeLanguage(l), this.isLanguageChangingTo = void 0, this.emit("languageChanged", l), this.logger.log("languageChanged", l)) : this.isLanguageChangingTo = void 0, s.resolve(function() {
                                return a.t(...arguments)
                            }), r && r(t, function() {
                                return a.t(...arguments)
                            })
                        },
                        setLng = r => {
                            t || r || !this.services.languageDetector || (r = []);
                            let a = "string" == typeof r ? r : this.services.languageUtils.getBestMatchFromCodes(r);
                            a && (this.language || setLngProps(a), this.translator.language || this.translator.changeLanguage(a), this.services.languageDetector && this.services.languageDetector.cacheUserLanguage && this.services.languageDetector.cacheUserLanguage(a)), this.loadResources(a, t => {
                                done(t, a)
                            })
                        };
                    return t || !this.services.languageDetector || this.services.languageDetector.async ? !t && this.services.languageDetector && this.services.languageDetector.async ? 0 === this.services.languageDetector.detect.length ? this.services.languageDetector.detect().then(setLng) : this.services.languageDetector.detect(setLng) : setLng(t) : setLng(this.services.languageDetector.detect()), s
                }
                getFixedT(t, r, a) {
                    var s = this;
                    let fixedT = function(t, r) {
                        let l, c;
                        if ("object" != typeof r) {
                            for (var d = arguments.length, u = Array(d > 2 ? d - 2 : 0), m = 2; m < d; m++) u[m - 2] = arguments[m];
                            l = s.options.overloadTranslationOptionHandler([t, r].concat(u))
                        } else l = { ...r
                        };
                        l.lng = l.lng || fixedT.lng, l.lngs = l.lngs || fixedT.lngs, l.ns = l.ns || fixedT.ns, l.keyPrefix = l.keyPrefix || a || fixedT.keyPrefix;
                        let p = s.options.keySeparator || ".";
                        return c = l.keyPrefix && Array.isArray(t) ? t.map(t => `${l.keyPrefix}${p}${t}`) : l.keyPrefix ? `${l.keyPrefix}${p}${t}` : t, s.t(c, l)
                    };
                    return "string" == typeof t ? fixedT.lng = t : fixedT.lngs = t, fixedT.ns = r, fixedT.keyPrefix = a, fixedT
                }
                t() {
                    return this.translator && this.translator.translate(...arguments)
                }
                exists() {
                    return this.translator && this.translator.exists(...arguments)
                }
                setDefaultNamespace(t) {
                    this.options.defaultNS = t
                }
                hasLoadedNamespace(t) {
                    let r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                    if (!this.isInitialized) return this.logger.warn("hasLoadedNamespace: i18next was not initialized", this.languages), !1;
                    if (!this.languages || !this.languages.length) return this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty", this.languages), !1;
                    let a = r.lng || this.resolvedLanguage || this.languages[0],
                        s = !!this.options && this.options.fallbackLng,
                        l = this.languages[this.languages.length - 1];
                    if ("cimode" === a.toLowerCase()) return !0;
                    let loadNotPending = (t, r) => {
                        let a = this.services.backendConnector.state[`${t}|${r}`];
                        return -1 === a || 2 === a
                    };
                    if (r.precheck) {
                        let t = r.precheck(this, loadNotPending);
                        if (void 0 !== t) return t
                    }
                    return !!(this.hasResourceBundle(a, t) || !this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages || loadNotPending(a, t) && (!s || loadNotPending(l, t)))
                }
                loadNamespaces(t, r) {
                    let a = defer();
                    return this.options.ns ? ("string" == typeof t && (t = [t]), t.forEach(t => {
                        0 > this.options.ns.indexOf(t) && this.options.ns.push(t)
                    }), this.loadResources(t => {
                        a.resolve(), r && r(t)
                    }), a) : (r && r(), Promise.resolve())
                }
                loadLanguages(t, r) {
                    let a = defer();
                    "string" == typeof t && (t = [t]);
                    let s = this.options.preload || [],
                        l = t.filter(t => 0 > s.indexOf(t));
                    return l.length ? (this.options.preload = s.concat(l), this.loadResources(t => {
                        a.resolve(), r && r(t)
                    }), a) : (r && r(), Promise.resolve())
                }
                dir(t) {
                    if (t || (t = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language)), !t) return "rtl";
                    let r = this.services && this.services.languageUtils || new LanguageUtil(get());
                    return ["ar", "shu", "sqr", "ssh", "xaa", "yhd", "yud", "aao", "abh", "abv", "acm", "acq", "acw", "acx", "acy", "adf", "ads", "aeb", "aec", "afb", "ajp", "apc", "apd", "arb", "arq", "ars", "ary", "arz", "auz", "avl", "ayh", "ayl", "ayn", "ayp", "bbz", "pga", "he", "iw", "ps", "pbt", "pbu", "pst", "prp", "prd", "ug", "ur", "ydd", "yds", "yih", "ji", "yi", "hbo", "men", "xmn", "fa", "jpr", "peo", "pes", "prs", "dv", "sam", "ckb"].indexOf(r.getLanguagePartFromCode(t)) > -1 || t.toLowerCase().indexOf("-arab") > 1 ? "rtl" : "ltr"
                }
                static createInstance() {
                    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                        r = arguments.length > 1 ? arguments[1] : void 0;
                    return new I18n(t, r)
                }
                cloneInstance() {
                    let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                        r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : i18next_noop,
                        a = t.forkResourceStore;
                    a && delete t.forkResourceStore;
                    let s = { ...this.options,
                            ...t,
                            isClone: !0
                        },
                        l = new I18n(s);
                    return (void 0 !== t.debug || void 0 !== t.prefix) && (l.logger = l.logger.clone(t)), ["store", "services", "language"].forEach(t => {
                        l[t] = this[t]
                    }), l.services = { ...this.services
                    }, l.services.utils = {
                        hasLoadedNamespace: l.hasLoadedNamespace.bind(l)
                    }, a && (l.store = new ResourceStore(this.store.data, s), l.services.resourceStore = l.store), l.translator = new Translator(l.services, s), l.translator.on("*", function(t) {
                        for (var r = arguments.length, a = Array(r > 1 ? r - 1 : 0), s = 1; s < r; s++) a[s - 1] = arguments[s];
                        l.emit(t, ...a)
                    }), l.init(s, r), l.translator.options = s, l.translator.backendConnector.services.utils = {
                        hasLoadedNamespace: l.hasLoadedNamespace.bind(l)
                    }, l
                }
                toJSON() {
                    return {
                        options: this.options,
                        store: this.store,
                        language: this.language,
                        languages: this.languages,
                        resolvedLanguage: this.resolvedLanguage
                    }
                }
            };
            let r5 = I18n.createInstance();
            r5.createInstance = I18n.createInstance, r5.createInstance, r5.dir, r5.init, r5.loadResources, r5.reloadResources, r5.use, r5.changeLanguage, r5.getFixedT, r5.t, r5.exists, r5.setDefaultNamespace, r5.hasLoadedNamespace, r5.loadNamespaces, r5.loadLanguages;
            let r4 = (0, nt.createContext)(!1),
                useForceUpdate = () => {
                    let [, t] = (0, nt.useState)(0);
                    return () => t(t => t + 1)
                },
                usePrevious_usePrevious = t => {
                    let r = (0, nt.useRef)();
                    return (0, nt.useEffect)(() => {
                        r.current = t
                    }, [t]), r.current
                },
                useLocalStorage = (t, r, a, s) => {
                    let [l, c] = (0, nt.useState)(() => {
                        try {
                            let l = LocalStorage.getFromLS(t);
                            if (l && a && !a(l)) return LocalStorage.removeFromLS(t), null == s || s.forEach(t => LocalStorage.removeFromLS(t)), r;
                            return null != l ? l : r
                        } catch (t) {
                            return tv.error(t), r
                        }
                    }), d = (0, nt.useCallback)(r => {
                        try {
                            let a = r instanceof Function ? r(l) : r;
                            c(a), LocalStorage.setToLS(t, a)
                        } catch (t) {
                            tv.error(t)
                        }
                    }, [t, l]), u = (0, nt.useCallback)(() => {
                        LocalStorage.removeFromLS(t), c(r)
                    }, [r, t]);
                    return [l, d, u]
                },
                useInternalDynamicContext_useInternalDynamicContext = () => {
                    let t = (0, nt.useContext)(oA);
                    if (void 0 === t) throw Error("useInternalDynamicContext must be used within a DynamicContextProvider");
                    return t
                },
                findEmbeddedWalletFromVerifiedCredentials = (t, r) => {
                    var a;
                    let s = decodeJwt(t),
                        l = ns[r];
                    return null === (a = null == s ? void 0 : s.verifiedCredentials) || void 0 === a ? void 0 : a.find(({
                        walletProvider: t,
                        chain: r
                    }) => "embeddedWallet" === t && r === l)
                },
                isEmbeddedWalletPresent = t => !!(findEmbeddedWalletFromVerifiedCredentials(t, tu.AIv.Evm) || findEmbeddedWalletFromVerifiedCredentials(t, tu.AIv.Sol)),
                isProviderEnabled = (t, r) => t.some(t => {
                    let a = t.provider === r && !!t.enabledAt;
                    return t.provider === tu.ml9.MagicLink ? a && !!t.providerProjectId : a
                }),
                isTurnkeyEnabled = t => {
                    var r;
                    return isProviderEnabled(null !== (r = null == t ? void 0 : t.providers) && void 0 !== r ? r : [], tu.ml9.Turnkey)
                },
                findTurnkeyWallet = (t, r) => {
                    let a = r ? nl[r] : void 0;
                    return null == t ? void 0 : t.find(({
                        key: t,
                        walletConnector: r
                    }) => t.startsWith("turnkey") && (null == r ? void 0 : r.connectedChain) === a)
                },
                getUserWalletsFromVerifiedCredentials = t => {
                    var r;
                    let a = decodeJwt(t);
                    return null === (r = null == a ? void 0 : a.verifiedCredentials) || void 0 === r ? void 0 : r.filter(({
                        walletProvider: t
                    }) => t)
                },
                createEmbeddedWalletWithPasskey = ({
                    user: t,
                    walletConnector: r,
                    environmentId: a,
                    authToken: s,
                    chains: l
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    if (!s) throw new td.kW("Auth token is not defined");
                    if (!r) throw new td.kW("PasskeyWalletConnector not found");
                    if (!t) throw new td.kW("User is not defined");
                    r.setEmail(t.email);
                    let {
                        attestation: c,
                        challenge: d
                    } = yield r.getWebAuthnAttestation(), u = yield createTurnkeyEmbeddedWallet({
                        attestation: c,
                        chains: l,
                        challenge: d,
                        environmentId: a,
                        userJwt: s
                    }), {
                        jwt: m
                    } = u, p = decodeJwt(m);
                    if (void 0 === p) throw new td.kW("Invalid token!");
                    let h = r.connectedChain,
                        f = findEmbeddedWalletFromVerifiedCredentials(m, h);
                    if (!f) throw new td.kW("EmbeddedWalletVerifiedCredential not found");
                    return r.setVerifiedCredentials(p.verifiedCredentials), {
                        decodedJwt: p,
                        embeddedWalletVerifiedCredential: f,
                        jwt: m,
                        walletConnector: r
                    }
                }),
                findPasskeyEmailWalletConnector = (t, r) => {
                    let a = t.map(({
                        walletConnector: t
                    }) => t).find(t => (0, tl.q4)(t) && (0, tl.dE)(t) && t.connectedChain === r);
                    return a
                },
                createPregeneratedWallet = ({
                    user: t,
                    walletConnector: r,
                    environmentId: a,
                    authToken: s,
                    chains: l
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    if (!s) throw new td.kW("Auth token is not defined");
                    if (!r) throw new td.kW("PasskeyWalletConnector not found");
                    if (!t) throw new td.kW("User is not defined");
                    r.setEmail(t.email);
                    let c = yield createTurnkeyEmbeddedWallet({
                        chains: l,
                        environmentId: a,
                        userJwt: s
                    }), {
                        jwt: d
                    } = c, u = decodeJwt(d);
                    if (void 0 === u) throw new td.kW("Invalid token!");
                    let m = r.connectedChain,
                        p = findEmbeddedWalletFromVerifiedCredentials(d, m);
                    if (!p) throw new td.kW("EmbeddedWalletVerifiedCredential not found");
                    return r.setVerifiedCredentials(u.verifiedCredentials), {
                        decodedJwt: u,
                        embeddedWalletVerifiedCredential: p,
                        jwt: d,
                        walletConnector: r
                    }
                }),
                findWallet = (t, r) => {
                    let a = t.walletName && (0, tl.rB)(t.walletName);
                    if ("turnkeyhd" === a) {
                        let s = t.chain ? nl[t.chain] : void 0;
                        return r.find(t => a === t.key && t.walletConnector.connectedChain === s)
                    }
                    return r.find(t => a === t.key)
                },
                findOwner = (t, r) => r.find(r => r.id === t.signerRefId),
                findSmartWallet = (t, r) => r.find(r => r.signerRefId === t.id),
                isOwnerOfASmartWallet = (t, r) => !!findSmartWallet(t, r),
                initializeSmartWallet = ({
                    account: t,
                    verifiedCredentials: r,
                    walletConnectorOptions: a
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    let s = findOwner(t, r);
                    if (!s) throw Error("could not find associated eoa account for smart wallet");
                    let l = findWallet(s, a);
                    if (!l) throw Error("could not find owner wallet from wallet options");
                    let c = findWallet(t, a);
                    if (!c) throw Error("could not find smart wallet from wallet options");
                    let d = c.walletConnector;
                    if (!(0, tl.R9)(d)) throw Error("could not initialize smart wallet");
                    yield d.setEoaConnector(l.walletConnector)
                }),
                ErrorContainer = ({
                    children: t,
                    className: r,
                    isMultiWalletError: a = !1,
                    withIcon: s = !0,
                    variant: l = "error",
                    copykey: c
                }) => {
                    let d = classNames_classNames("error-container", `error-container--${l}`, r, {
                            "error-container--multi-wallet": a
                        }),
                        u = classNames_classNames("error", {
                            "error--with-icon": s
                        });
                    return (0, tb.jsxs)("div", {
                        className: d,
                        children: [s && (0, tb.jsx)(SvgError, {}), (0, tb.jsx)(Typography_Typography, {
                            variant: "body_small",
                            className: u,
                            copykey: c,
                            children: t
                        })]
                    })
                };
            var r6 = ["title", "titleId"];

            function search_extends() {
                return (search_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgSearch = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, r6);
                return nt.createElement("svg", search_extends({
                    width: 16,
                    height: 16,
                    viewBox: "0 0 16 16",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, E || (E = nt.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M6.667 2.667a4 4 0 1 0 0 8 4 4 0 0 0 0-8Zm-5.333 4a5.333 5.333 0 1 1 9.546 3.27l3.592 3.592a.667.667 0 0 1-.943.942L9.937 10.88a5.333 5.333 0 0 1-8.604-4.213Z",
                    fill: "currentColor"
                })))
            };
            let Search = ({
                    className: t = "",
                    id: r,
                    label: a,
                    type: s,
                    onChange: l,
                    onBlur: c,
                    name: d,
                    value: u,
                    onClickClear: m,
                    copykey: p
                }) => (0, tb.jsxs)("label", {
                    htmlFor: r,
                    className: classNames_classNames("search__container", u ? "search__container--active" : void 0),
                    children: [(0, tb.jsx)("div", {
                        className: "search-icon__container",
                        children: (0, tb.jsx)(SvgSearch, {})
                    }), (0, tb.jsx)("input", {
                        name: d,
                        value: u,
                        onChange: l,
                        onBlur: c,
                        type: s,
                        id: r,
                        placeholder: a,
                        className: classNames_classNames("search__input", t),
                        "data-testid": "Search",
                        copykey: p
                    }), u.length > 0 && (0, tb.jsx)("button", {
                        type: "button",
                        onClick: m,
                        className: "search__button--clear",
                        children: "Clear"
                    })]
                }),
                Skeleton = ({
                    count: t = 1,
                    className: r
                }) => {
                    let a = [];
                    for (let s = 0; s < t; s++) a.push((0, tb.jsx)("span", {
                        className: `skeleton ${r} `,
                        children: "‌"
                    }));
                    return (0, tb.jsx)("span", {
                        "data-testid": "loading-skeleton-container",
                        children: a.map((t, r) => (0, tb.jsx)("span", {
                            "data-testid": "loading-skeleton",
                            children: t
                        }, `skeleton-${r}`))
                    })
                },
                findLastPriorityIndex = (t, r) => r.reduce((r, a) => {
                    let s = t.indexOf(a.toLowerCase());
                    return s > r ? s : r
                }, -1),
                getCalculatedOffset = ({
                    hasWalletFilter: t,
                    defaultOffset: r,
                    list: a,
                    priorityList: s
                }) => {
                    let l = findLastPriorityIndex(a, s);
                    return t || a.length <= r || -1 === l ? r : l + 1
                },
                isWalletGroup = t => {
                    var r;
                    return !!(null === (r = t.groupedWallets) || void 0 === r ? void 0 : r.length)
                },
                findGroupIndex = (t, r) => r.findIndex(r => isWalletGroup(r) && r.key === t),
                groupWalletOptions = (t, r) => {
                    let a = [];
                    return r.forEach(s => {
                        var l;
                        if (!s.group) return a.push(s);
                        let c = findGroupIndex(s.group, a);
                        if (c > -1) return null === (l = a[c].groupedWallets) || void 0 === l ? void 0 : l.push(s);
                        let d = r.some(t => {
                            var r;
                            let a = s.group === t.group,
                                l = s.key !== t.key,
                                c = (null === (r = t.injectedConfig) || void 0 === r ? void 0 : r.length) && t.injectedConfig.length > 1;
                            return a && (c || l)
                        });
                        if (!d) return a.push(s);
                        let u = (0, tc.Dd)(t, s.group),
                            m = {
                                groupedWallets: [s],
                                key: u.key,
                                name: u.name
                            };
                        return a.push(m)
                    }), a
                },
                filterConnectedWallets = ({
                    walletOptions: t,
                    connectedWallets: r
                }) => {
                    let a = new Set(r.map(t => t.connector.key));
                    return (a.has("phantom") || a.has("phantomledger")) && (a.add("phantom"), a.add("phantomledger")), t.filter(t => !a.has(t.walletConnector.key))
                },
                r7 = ["metamask", "coinbase", "walletconnect", "phantom", "argentx", "myalgo", "blocto", "solflare", "braavos", "trust", "rainbow", "dapper", "glow", "lilico"],
                sortedInputList = t => {
                    let r = [],
                        a = [];
                    t.forEach(t => {
                        r7.includes(t.key) ? r.push(t) : a.push(t)
                    });
                    let s = r.slice().sort((t, r) => r7.indexOf(t.key) - r7.indexOf(r.key));
                    return [...s, ...a]
                },
                walletListBuilder = ({
                    authMode: t,
                    connectedWallets: r,
                    multiWallet: a,
                    numberOfWalletsToShow: s,
                    inputList: l,
                    isWalletConnectList: c,
                    lastUsedWalletKey: d,
                    signWithEmailWalletName: u,
                    searchFilter: m,
                    walletsFilter: p,
                    loginWithEmail: h,
                    groupWallets: f,
                    walletBook: y,
                    showMoreWalletsWithFilter: b
                }) => {
                    let C, E = l;
                    c && (E = l.filter(t => t.walletConnector.isWalletConnect && "walletconnect" !== t.key)), "connect-only" === t && a && (E = filterConnectedWallets({
                        connectedWallets: r,
                        walletOptions: E
                    }));
                    let j = !!p,
                        I = getSignWithEmailWallet(u, E),
                        O = [],
                        P = [],
                        R = orderAndFilterList(E, p, c);
                    R.forEach(t => {
                        (0, tl.MQ)(t.walletConnector) || (d === t.key ? C = t : t.isInstalledOnBrowser ? O.push(t) : P.push(t))
                    });
                    let F = [...I ? [I] : [], ...C ? [C] : []],
                        W = [...F, ...O, ...P],
                        M = f ? groupWalletOptions(y, W) : W,
                        D = b && j ? calculateWithFilterNumberOfWalletsToShow(R, F.concat(O), s) : s;
                    return {
                        numberOfWallets: W.length,
                        walletsList: listToDisplay(M, m, c, D, j, h)
                    }
                },
                orderAndFilterList = (t, r, a) => !a && r ? r(sortedInputList(t)) : sortedInputList(t),
                applySearchFilterToWalletOptionList = (t, r) => {
                    let a = t.trim().toLowerCase();
                    return r.filter(t => {
                        var r;
                        return t.name.trim().toLowerCase().includes(a) || (null === (r = t.groupedWallets) || void 0 === r ? void 0 : r.some(t => t.name.trim().toLowerCase().includes(a)))
                    })
                },
                listToDisplay = (t, r, a, s, l, c) => {
                    if (r) return applySearchFilterToWalletOptionList(r, t);
                    if (a) return t;
                    if (c) return t.slice(0, s); {
                        let r = t.map(t => t.name.toLowerCase()),
                            a = getCalculatedOffset({
                                defaultOffset: s,
                                hasWalletFilter: l,
                                list: r,
                                priorityList: r7
                            });
                        return t.slice(0, a)
                    }
                },
                calculateWithFilterNumberOfWalletsToShow = (t, r, a) => {
                    let s = t.slice(0, a),
                        l = r.filter(t => !s.includes(t)).length;
                    return a + l
                },
                getSignWithEmailWallet = (t, r) => {
                    let a;
                    if (t) {
                        let s = r.find(r => r.name === t && r.walletConnector.canConnectViaCustodialService);
                        s && ((a = Object.assign({}, s)).name = "Sign In With Email")
                    }
                    return a
                };
            var r8 = ["title", "titleId"];

            function no_wallet_found_extends() {
                return (no_wallet_found_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgNoWalletFound = function(t) {
                    var r = t.title,
                        a = t.titleId,
                        s = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = function(t, r) {
                                if (null == t) return {};
                                var a, s, l = {},
                                    c = Object.keys(t);
                                for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                                return l
                            }(t, r);
                            if (Object.getOwnPropertySymbols) {
                                var c = Object.getOwnPropertySymbols(t);
                                for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                            }
                            return l
                        }(t, r8);
                    return nt.createElement("svg", no_wallet_found_extends({
                        width: 121,
                        height: 81,
                        viewBox: "0 0 121 81",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        "aria-labelledby": a
                    }, s), r ? nt.createElement("title", {
                        id: a
                    }, r) : null, j || (j = nt.createElement("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M99.064 34.016c-6.654 0-12.048 5.394-12.048 12.048 0 6.653 5.394 12.047 12.048 12.047 6.653 0 12.047-5.394 12.047-12.047 0-6.654-5.394-12.048-12.047-12.048ZM83 46.064C83 37.192 90.192 30 99.064 30c8.871 0 16.063 7.192 16.063 16.064 0 3.712-1.259 7.13-3.373 9.85l8.658 8.658a2.008 2.008 0 0 1-2.84 2.84l-8.658-8.658a15.994 15.994 0 0 1-9.85 3.373C90.192 62.127 83 54.935 83 46.064Z",
                        fill: "currentColor",
                        fillOpacity: .35
                    })), I || (I = nt.createElement("rect", {
                        y: 8,
                        width: 121,
                        height: 16,
                        rx: 4,
                        fill: "currentColor",
                        fillOpacity: .3
                    })), O || (O = nt.createElement("rect", {
                        y: 30,
                        width: 75,
                        height: 16,
                        rx: 4,
                        fill: "currentColor",
                        fillOpacity: .3
                    })), P || (P = nt.createElement("rect", {
                        y: 52,
                        width: 75,
                        height: 16,
                        rx: 4,
                        fill: "currentColor",
                        fillOpacity: .3
                    })))
                },
                r9 = a(98201),
                ae = a(35746),
                at = a(96674),
                an = "hcaptcha-api-script-id",
                ar = "hcaptchaOnLoad",
                aa = new Promise(function(t, r) {
                    R = t, F = r
                }),
                mountCaptchaScript = function(t) {
                    if (void 0 === t && (t = {}), document.getElementById(an)) return aa;
                    window[ar] = R;
                    var r = t.apihost || "https://js.hcaptcha.com";
                    delete t.apihost;
                    var a = document.createElement("script");
                    a.id = an, a.src = r + "/1/api.js?render=explicit&onload=" + ar, a.async = !0, a.onerror = function(t) {
                        return F("script-error")
                    };
                    var s = Object.entries(t).filter(function(t) {
                        t[0];
                        var r = t[1];
                        return r || !1 === r
                    }).map(function(t) {
                        var r = t[0],
                            a = t[1];
                        return encodeURIComponent(r) + "=" + encodeURIComponent(a)
                    }).join("&");
                    return a.src += "" !== s ? "&" + s : "", document.head.appendChild(a), aa
                },
                ai = function(t) {
                    function HCaptcha(r) {
                        (a = t.call(this, r) || this).renderCaptcha = a.renderCaptcha.bind((0, ae.Z)(a)), a.resetCaptcha = a.resetCaptcha.bind((0, ae.Z)(a)), a.removeCaptcha = a.removeCaptcha.bind((0, ae.Z)(a)), a.isReady = a.isReady.bind((0, ae.Z)(a)), a.loadCaptcha = a.loadCaptcha.bind((0, ae.Z)(a)), a.handleOnLoad = a.handleOnLoad.bind((0, ae.Z)(a)), a.handleSubmit = a.handleSubmit.bind((0, ae.Z)(a)), a.handleExpire = a.handleExpire.bind((0, ae.Z)(a)), a.handleError = a.handleError.bind((0, ae.Z)(a)), a.handleOpen = a.handleOpen.bind((0, ae.Z)(a)), a.handleClose = a.handleClose.bind((0, ae.Z)(a)), a.handleChallengeExpired = a.handleChallengeExpired.bind((0, ae.Z)(a));
                        var a, s = "undefined" != typeof hcaptcha;
                        return a.ref = nt.createRef(), a.apiScriptRequested = !1, a.state = {
                            isApiReady: s,
                            isRemoved: !1,
                            elementId: r.id,
                            captchaId: ""
                        }, a
                    }(0, at.Z)(HCaptcha, t);
                    var r = HCaptcha.prototype;
                    return r.componentDidMount = function() {
                        if (this.state.isApiReady) {
                            this.renderCaptcha();
                            return
                        }
                        this.loadCaptcha()
                    }, r.componentWillUnmount = function() {
                        var t = this.state.captchaId;
                        this.isReady() && (hcaptcha.reset(t), hcaptcha.remove(t))
                    }, r.shouldComponentUpdate = function(t, r) {
                        return this.state.isApiReady === r.isApiReady && this.state.isRemoved === r.isRemoved
                    }, r.componentDidUpdate = function(t) {
                        var r = this;
                        ["sitekey", "size", "theme", "tabindex", "languageOverride", "endpoint"].every(function(a) {
                            return t[a] === r.props[a]
                        }) || this.removeCaptcha(function() {
                            r.renderCaptcha()
                        })
                    }, r.loadCaptcha = function() {
                        if (!this.apiScriptRequested) {
                            var t = this.props,
                                r = t.apihost,
                                a = t.assethost,
                                s = t.endpoint,
                                l = t.host,
                                c = t.imghost;
                            mountCaptchaScript({
                                apihost: r,
                                assethost: a,
                                endpoint: s,
                                hl: t.languageOverride,
                                host: l,
                                imghost: c,
                                recaptchacompat: !1 === t.reCaptchaCompat ? "off" : null,
                                reportapi: t.reportapi,
                                sentry: t.sentry,
                                custom: t.custom
                            }).then(this.handleOnLoad).catch(this.handleError), this.apiScriptRequested = !0
                        }
                    }, r.renderCaptcha = function(t) {
                        if (this.state.isApiReady) {
                            var r = Object.assign({
                                    "open-callback": this.handleOpen,
                                    "close-callback": this.handleClose,
                                    "error-callback": this.handleError,
                                    "chalexpired-callback": this.handleChallengeExpired,
                                    "expired-callback": this.handleExpire,
                                    callback: this.handleSubmit
                                }, this.props, {
                                    hl: this.props.hl || this.props.languageOverride,
                                    languageOverride: void 0
                                }),
                                a = hcaptcha.render(this.ref.current, r);
                            this.setState({
                                isRemoved: !1,
                                captchaId: a
                            }, function() {
                                t && t()
                            })
                        }
                    }, r.resetCaptcha = function() {
                        var t = this.state.captchaId;
                        this.isReady() && hcaptcha.reset(t)
                    }, r.removeCaptcha = function(t) {
                        var r = this.state.captchaId;
                        this.isReady() && this.setState({
                            isRemoved: !0
                        }, function() {
                            hcaptcha.remove(r), t && t()
                        })
                    }, r.handleOnLoad = function() {
                        var t = this;
                        this.setState({
                            isApiReady: !0
                        }, function() {
                            t.renderCaptcha(function() {
                                var r = t.props.onLoad;
                                r && r()
                            })
                        })
                    }, r.handleSubmit = function(t) {
                        var r = this.props.onVerify,
                            a = this.state,
                            s = a.isRemoved,
                            l = a.captchaId;
                        "undefined" == typeof hcaptcha || s || r(hcaptcha.getResponse(l), hcaptcha.getRespKey(l))
                    }, r.handleExpire = function() {
                        var t = this.props.onExpire,
                            r = this.state.captchaId;
                        this.isReady() && (hcaptcha.reset(r), t && t())
                    }, r.handleError = function(t) {
                        var r = this.props.onError,
                            a = this.state.captchaId;
                        this.isReady() && hcaptcha.reset(a), r && r(t)
                    }, r.isReady = function() {
                        var t = this.state,
                            r = t.isApiReady,
                            a = t.isRemoved;
                        return r && !a
                    }, r.handleOpen = function() {
                        this.isReady() && this.props.onOpen && this.props.onOpen()
                    }, r.handleClose = function() {
                        this.isReady() && this.props.onClose && this.props.onClose()
                    }, r.handleChallengeExpired = function() {
                        this.isReady() && this.props.onChalExpired && this.props.onChalExpired()
                    }, r.execute = function(t) {
                        void 0 === t && (t = null);
                        var r = this.state.captchaId;
                        if (this.isReady()) return t && "object" != typeof t && (t = null), hcaptcha.execute(r, t)
                    }, r.setData = function(t) {
                        var r = this.state.captchaId;
                        this.isReady() && (t && "object" != typeof t && (t = null), hcaptcha.setData(r, t))
                    }, r.getResponse = function() {
                        return hcaptcha.getResponse(this.state.captchaId)
                    }, r.getRespKey = function() {
                        return hcaptcha.getRespKey(this.state.captchaId)
                    }, r.render = function() {
                        var t = this.state.elementId;
                        return nt.createElement("div", {
                            ref: this.ref,
                            id: t
                        })
                    }, HCaptcha
                }(nt.Component);
            let getReferencedAccount_getReferencedAccount = (t, r) => {
                    let a = decodeJwt(t),
                        s = null == a ? void 0 : a.verifiedCredentials.find(t => t.id === r);
                    return null == a ? void 0 : a.verifiedCredentials.find(t => t.id === (null == s ? void 0 : s.refId))
                },
                generateMessages = (t, r, a, s, l, c) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    if (void 0 === t) throw new td.kW("Unable to fetch the public address from the wallet");
                    if (!r.connectedChain) throw new td.kW("Wallet is not connected");
                    let d = yield r.getNetwork();
                    void 0 === d && ("bloctoevm" === r.key ? d = 137 : "EVM" === r.connectedChain && (d = 1));
                    let u = generateMessageToSign({
                            blockchain: r.connectedChain,
                            chainId: d,
                            domain: window.location.host,
                            nonce: a,
                            publicKey: t,
                            requestId: s,
                            resources: r.providerResources,
                            statement: l ? c.replace(/(\r\n|\n|\r)/gm, " ").trim() : void 0,
                            uri: window.location.href
                        }),
                        m = yield r.proveOwnership(u);
                    if (!m) throw new td.kW("Unable to sign the message");
                    return {
                        messageToSign: u,
                        signedMessage: m
                    }
                }),
                getVerifyArgs = ({
                    walletConnector: t,
                    nonce: r,
                    walletProvider: a,
                    environmentId: s,
                    displaySiweStatement: l,
                    skipEmptyAccountCheck: c,
                    siweStatement: d,
                    publicWalletAddress: u,
                    signedMessageOverride: m,
                    messageToSignOverride: p
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    let h = t.connectedChain;
                    if (m && p) {
                        let [r, s] = yield Promise.all([t.getNetwork(), t.getAdditionalAddresses(u)]);
                        return {
                            additionalWalletAddresses: s,
                            chain: h,
                            messageToSign: p,
                            network: String(r),
                            publicWalletAddress: u,
                            signedMessage: m,
                            skipEmptyAccountCheck: c,
                            walletName: t.key,
                            walletProvider: a
                        }
                    }
                    let {
                        messageToSign: f,
                        signedMessage: y
                    } = yield generateMessages(u, t, r, s, l, d), [b, C] = yield Promise.all([t.getNetwork(), t.getAdditionalAddresses(u)]);
                    return {
                        additionalWalletAddresses: C,
                        chain: h,
                        messageToSign: f,
                        network: String(b),
                        publicWalletAddress: u,
                        signedMessage: y,
                        skipEmptyAccountCheck: c,
                        walletName: t.key,
                        walletProvider: a
                    }
                }),
                getSiweStatement = ({
                    appName: t,
                    siweStatement: r
                }) => {
                    let a = `Welcome to ${t}. Signing is the only way we can truly know that you are the owner of the wallet you are connecting. Signing is a safe, gas-less transaction that does not in any way give ${t} permission to perform any transactions with your wallet.`;
                    return r || a
                },
                getWalletProvider = t => t.isEmbeddedWallet ? "embeddedWallet" : t.canConnectViaCustodialService ? "custodialService" : t.isInstalledOnBrowser() ? "browserExtension" : (0, td.tq)() ? "deepLink" : "qrCode",
                getWalletGroupType = t => {
                    if (!t.groupedWallets.length) throw Error("Wallet group must have at least one wallet");
                    let [r] = t.groupedWallets;
                    return r.chainGroup ? "multi-chain" : r.walletGroup ? "multi-wallet" : void 0
                },
                ao = nt.createContext(void 0),
                useWalletGroupContext = () => {
                    let t = nt.useContext(ao);
                    if (void 0 === t) throw Error("usage of useWalletGroupContext not wrapped in `WalletGroupContextProvider`.");
                    return t
                },
                WalletGroupContextProvider = ({
                    children: t
                }) => {
                    let [r, a] = nt.useState(), {
                        setView: s
                    } = ViewContext_useViewContext(), l = nt.useCallback(t => {
                        a(t);
                        let r = getWalletGroupType(t),
                            l = {
                                "multi-chain": "wallet-group",
                                "multi-wallet": "select-wallet-in-wallet-group"
                            },
                            c = r ? l[r] : l["multi-chain"];
                        s(c)
                    }, [a, s]);
                    return (0, tb.jsx)(ao.Provider, {
                        value: {
                            navigateToWalletGroup: l,
                            selectedWalletGroup: r
                        },
                        children: t
                    })
                },
                as = {
                    algorand: tj,
                    bitcoin: tI,
                    cosmos: tT,
                    evm: tO,
                    flow: tN,
                    solana: tP,
                    starknet: tA
                },
                getChainIcon_getChainIcon = t => {
                    var r, a, s;
                    let l = null !== (a = null === (r = (0, tl.bt)(t)) || void 0 === r ? void 0 : r.name) && void 0 !== a ? a : "";
                    return null !== (s = as[l]) && void 0 !== s ? s : SvgError
                },
                getEnabledKYC = t => {
                    var r;
                    return null !== (r = null == t ? void 0 : t.filter(({
                        enabled: t
                    }) => !!t)) && void 0 !== r ? r : []
                },
                al = ["social"],
                mapUserFieldsToKycSettings = (t, r) => {
                    let a = Object.entries(t).reduce((t, [a, s]) => {
                        if (s) {
                            let s = r.find(t => t.name === a);
                            s && !s.enabled && t.push(Object.assign({}, s))
                        }
                        return t
                    }, []);
                    return a
                },
                getEditableUserProfileFields = t => getEnabledKYC(t).filter(({
                    name: t
                }) => !al.includes(t)),
                getNonEditableUserProfileFields = ({
                    projectSettingsKyc: t = [],
                    user: r
                }) => {
                    if (!r) return [];
                    let a = mapUserFieldsToKycSettings(r, t);
                    return a.filter(({
                        name: t
                    }) => !al.includes(t))
                },
                getUserProfileFields = ({
                    projectSettingsKyc: t = [],
                    user: r
                }) => {
                    var a;
                    let s = getEditableUserProfileFields(t),
                        l = getNonEditableUserProfileFields({
                            projectSettingsKyc: t,
                            user: r
                        }),
                        c = [...s, ...l],
                        d = null === (a = null == r ? void 0 : r.verifiedCredentials) || void 0 === a ? void 0 : a.find(({
                            walletProvider: t
                        }) => t === tu.hnE.EmbeddedWallet);
                    return d && (c = c.map(t => "email" !== t.name ? t : Object.assign(Object.assign({}, t), {
                        enabled: !1
                    }))), c.sort((r, a) => {
                        let s = t.findIndex(t => t.name === r.name),
                            l = t.findIndex(t => t.name === a.name);
                        return s - l
                    })
                },
                isSocialKycEnabled = t => {
                    var r;
                    return !!(null === (r = null == t ? void 0 : t.kyc.find(({
                        name: t
                    }) => "social" === t)) || void 0 === r ? void 0 : r.enabled)
                },
                useViewController = t => {
                    let [r, a] = (0, nt.useState)(null);
                    return {
                        goToInitialView: () => a(null),
                        setView: a,
                        view: r || t
                    }
                };
            var ac = ["title", "titleId"];

            function check_circle_extends() {
                return (check_circle_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgCheckCircle = function(t) {
                    var r = t.title,
                        a = t.titleId,
                        s = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = function(t, r) {
                                if (null == t) return {};
                                var a, s, l = {},
                                    c = Object.keys(t);
                                for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                                return l
                            }(t, r);
                            if (Object.getOwnPropertySymbols) {
                                var c = Object.getOwnPropertySymbols(t);
                                for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                            }
                            return l
                        }(t, ac);
                    return nt.createElement("svg", check_circle_extends({
                        width: 16,
                        height: 16,
                        viewBox: "0 0 16 16",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        "aria-labelledby": a
                    }, s), r ? nt.createElement("title", {
                        id: a
                    }, r) : null, W || (W = nt.createElement("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M8 2.666a5.333 5.333 0 1 0 0 10.667A5.333 5.333 0 0 0 8 2.666ZM1.333 8a6.667 6.667 0 1 1 13.333 0A6.667 6.667 0 0 1 1.333 8Zm9.138-1.805c.26.26.26.682 0 .943L7.804 9.804a.667.667 0 0 1-.942 0L5.528 8.471a.667.667 0 1 1 .943-.943l.862.862 2.195-2.195c.26-.26.683-.26.943 0Z",
                        fill: "currentColor"
                    })))
                },
                ad = ["title", "titleId"];

            function tooltip_arrow_extends() {
                return (tooltip_arrow_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgTooltipArrow = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, ad);
                return nt.createElement("svg", tooltip_arrow_extends({
                    width: 8,
                    height: 4,
                    viewBox: "0 0 8 4",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, M || (M = nt.createElement("path", {
                    d: "M4 3.75 7.031 0H.97L4 3.75Z",
                    fill: "currentColor"
                })))
            };
            let debounce = (t, r) => {
                    let a;
                    let onTimeoutTick = () => {
                        t()
                    };
                    return () => {
                        clearTimeout(a), a = window.setTimeout(onTimeoutTick, r)
                    }
                },
                useElementById_useElementById = (t = "dynamic-modal") => {
                    let r = (0, nt.useRef)(null);
                    return "undefined" == typeof window || (r.current = window.document.getElementById(t), r.current || (r.current = window.document.createElement("div"), r.current.setAttribute("id", t), r.current.setAttribute("class", t), r.current.setAttribute("data-testid", t), r.current.style.pointerEvents = "auto", window.document.body.appendChild(r.current))), r
                },
                useHover = ({
                    initialValue: t = !1,
                    falseOnClick: r = !1,
                    onHover: a,
                    onHoverOff: s
                }) => {
                    let [l, c] = (0, nt.useState)(t);
                    return [l, {
                        onMouseDown: () => c(!0),
                        onMouseEnter: () => {
                            null == a || a(), c(!0)
                        },
                        onMouseLeave: () => {
                            null == s || s(), c(!1)
                        },
                        onMouseUp: () => c(r)
                    }]
                };
            var au = a(35749);
            let am = {
                    0: "The operation either timed out or was not allowed.",
                    16: "Invalid Passkey signature. Select the passkey for this account and device.",
                    3: "You reached the limit of passkeys for this account.",
                    INSUFFICIENT_FUNDS: "Insufficient funds for this transaction.",
                    "-32603": "A network error has occurred. Please try again later"
                },
                ap = {
                    "provided ENS name resolves to null": "Invalid address. Please check that the entered address is correct."
                },
                getCode = t => {
                    var r;
                    return (null == t ? void 0 : t.code) || (null === (r = null == t ? void 0 : t.cause) || void 0 === r ? void 0 : r.code)
                },
                getMessage = t => null == t ? void 0 : t.message,
                hasReason = t => "reason" in t && void 0 !== t.reason,
                transactionErrorMessage = t => {
                    let r = t;
                    if ((0, au.Bf)(t) && (r = t.walk()), tv.debug("transaction error:", r), td.k4.isInstance(r)) return;
                    if (td.C_.isInstance(r) || isMagicInsufficientFundsError(r)) return am.INSUFFICIENT_FUNDS;
                    let a = getCode(r);
                    return void 0 !== a && am[a] ? am[a] : hasReason(r) && ap[r.reason] ? ap[r.reason] : "Something went wrong."
                },
                isMagicInsufficientFundsError = t => {
                    let r = getCode(t),
                        a = getMessage(t);
                    return -32603 === r && !!(null == a ? void 0 : a.includes("insufficient funds for gas * price + value"))
                },
                ah = "undefined" != typeof window ? nt.useLayoutEffect : nt.useEffect,
                useInterval = (t, r) => {
                    let a = (0, nt.useRef)(t);
                    ah(() => {
                        a.current = t
                    }, [t]), (0, nt.useEffect)(() => {
                        if (!r && 0 !== r) return;
                        let t = setInterval(() => a.current(), r);
                        return () => clearInterval(t)
                    }, [r])
                },
                resolveFetcher_isPromise = t => t instanceof Promise,
                resolveFetcher = (t, {
                    retries: r
                }, a) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    let s, l;
                    let c = r ? r + 1 : 1,
                        d = 0;
                    for (; d < c;) {
                        d += 1;
                        try {
                            let r = t();
                            s = resolveFetcher_isPromise(r) ? yield r: r, l = void 0
                        } catch (t) {
                            l = t
                        }
                    }
                    a(l, s)
                }),
                createReducer = () => (t, r) => {
                    switch (r.type) {
                        case "SET_DATA":
                            return Object.assign(Object.assign({}, t), {
                                data: r.payload,
                                isLoading: !1
                            });
                        case "SET_ERROR":
                            return Object.assign(Object.assign({}, t), {
                                error: r.payload,
                                isLoading: !1
                            });
                        case "SET_LOADING":
                            return Object.assign(Object.assign({}, t), {
                                isLoading: r.payload
                            });
                        default:
                            return t
                    }
                },
                usePromise_usePromise = (t, r) => {
                    let a = (0, nt.useRef)(new Date().getTime()),
                        {
                            deps: s = [],
                            initialData: l,
                            enabled: c = !0,
                            retries: d = 0,
                            onReject: u = () => {},
                            onResolve: m = () => {}
                        } = r || {},
                        [p, h] = (0, nt.useReducer)(createReducer(), {
                            data: l,
                            isLoading: !0
                        }),
                        f = (0, nt.useCallback)(() => {
                            let r = new Date().getTime(),
                                l = r - a.current;
                            l < 5 && tv.warn("usePromise: Fetcher function was called too soon. Please make sure you are not calling the fetcher function inside a loop or a synchronous function.", s), a.current = r, p.isLoading || h({
                                payload: !0,
                                type: "SET_LOADING"
                            }), resolveFetcher(t, {
                                retries: d
                            }, (t, s) => {
                                if (r === a.current) {
                                    if (t) {
                                        tv.error(t), h({
                                            payload: t,
                                            type: "SET_ERROR"
                                        }), null == u || u(t);
                                        return
                                    }
                                    h({
                                        payload: s,
                                        type: "SET_DATA"
                                    }), null == m || m(s), h({
                                        payload: !1,
                                        type: "SET_LOADING"
                                    })
                                }
                            })
                        }, s);
                    return (0, nt.useEffect)(() => {
                        c && f()
                    }, [f, c]), p
                };
            var af = ["title", "titleId"];

            function three_dots_extends() {
                return (three_dots_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var three_dots_SvgThreeDots = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, af);
                return nt.createElement("svg", three_dots_extends({
                    width: 16,
                    height: 16,
                    viewBox: "0 0 16 16",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, D || (D = nt.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M8 2a1.333 1.333 0 1 1 0 2.667A1.333 1.333 0 0 1 8 2Zm0 4.667a1.333 1.333 0 1 1 0 2.666 1.333 1.333 0 0 1 0-2.666Zm0 4.666A1.333 1.333 0 1 1 8 14a1.333 1.333 0 0 1 0-2.667Z",
                    fill: "currentColor"
                })))
            };
            let Badge = ({
                    className: t = "",
                    dot: r,
                    text: a,
                    copykey: s
                }) => (0, tb.jsxs)("div", {
                    className: classNames_classNames("badge__container", t),
                    children: [r && (0, tb.jsx)("span", {
                        "data-testid": "badge__dot",
                        className: "badge__dot"
                    }), (0, tb.jsx)("span", {
                        copykey: s,
                        children: a
                    })]
                }),
                DotsMenuDropdown = ({
                    options: t,
                    setShowMenu: r
                }) => (0, tb.jsx)("div", {
                    className: "dots-menu-dropdown__container",
                    style: {
                        zIndex: 2147483647
                    },
                    children: t.map(t => t.hide ? null : (0, tb.jsxs)("div", {
                        className: "dots-menu-dropdown__item",
                        onClick: () => {
                            t.callback(), r(!1)
                        },
                        children: [t.Icon && (0, tb.jsx)(Icon_Icon, {
                            color: "text-tertiary",
                            children: t.Icon
                        }), (0, tb.jsxs)(Typography_Typography, {
                            className: "dots-menu-dropdown__item-text",
                            color: t.fontColor ? t.fontColor : "secondary",
                            weight: t.fontWeight,
                            children: [t.text, " ", t.badge ? (0, tb.jsx)(Badge, {
                                text: t.badge
                            }) : null]
                        })]
                    }, t.text))
                }),
                DotsMenu = ({
                    options: t,
                    buttonClassName: r,
                    buttonClassNameWithOpenMenu: a,
                    direction: s = "right",
                    iconOverride: l
                }) => {
                    let c = (0, nt.useRef)(null),
                        d = (0, nt.useRef)(null),
                        [u, m] = (0, nt.useState)(!1);
                    return useOnClickOutside_useOnClickOutside(d, () => m(!1)), (0, tb.jsxs)(tb.Fragment, {
                        children: [(0, tb.jsx)(rk, {
                            ref: c,
                            onClick: () => m(!0),
                            "data-testid": "dotsMenu",
                            className: u ? a : r,
                            children: l || (0, tb.jsx)(Icon_Icon, {
                                children: (0, tb.jsx)(three_dots_SvgThreeDots, {})
                            })
                        }), (0, tb.jsx)(iy, {
                            isOpen: u,
                            onClickOutside: () => m(!1),
                            onScroll: () => m(!1),
                            anchorRef: c,
                            ref: d,
                            anchorOrigin: "right" === s ? "bottom-left" : "top-right",
                            transformOrigin: "right" === s ? "top-left" : "bottom-right",
                            children: (0, tb.jsx)(DotsMenuDropdown, {
                                options: t,
                                setShowMenu: m
                            })
                        })]
                    })
                },
                detectBrowserName = t => {
                    let r = t || navigator.userAgent;
                    return r.match(/brave/i) ? "brave" : r.match(/edg/i) ? "edge" : r.match(/chrome|chromium|crios/i) ? "chrome" : r.match(/firefox|fxios/i) ? "firefox" : r.match(/safari/i) ? "safari" : void 0
                },
                shortenString = (t, r, a) => t.replace(t.substring(r, a), "..."),
                shortenEmail_shortenEmail = (t, r) => {
                    if (!t) return "";
                    let a = (null == r ? void 0 : r.breakpoint) || 12,
                        s = (null == r ? void 0 : r.cutStart) || 4,
                        l = (null == r ? void 0 : r.cutEnd) || 4,
                        [c, d] = t.split("@"),
                        u = (null == c ? void 0 : c.length) > a;
                    u && (c = shortenString(c, s, c.length - l));
                    let m = (null == d ? void 0 : d.length) > a;
                    return m && (d = shortenString(d, s, d.length - l)), `${c}@${d}`
                };
            (0, tb.jsx)(tD, {}), (0, tb.jsx)(t_, {}), (0, tb.jsx)(tk, {}), (0, tb.jsx)(tx, {}), (0, tb.jsx)(tC, {}), (0, tb.jsx)(tM, {}), (0, tb.jsx)(tS, {}), (0, tb.jsx)(tE, {});
            let ay = BigInt(2),
                useTransactionWithGasPrice = ({
                    provider: t,
                    transaction: r,
                    enabled: a = !0
                }) => {
                    let s = !!r.gasPrice,
                        l = !!r.maxFeePerGas,
                        [c, d] = (0, nt.useState)(0),
                        u = !1 === s && !1 === l && !0 === a,
                        {
                            data: m
                        } = usePromise_usePromise(() => t.estimateFeesPerGas(), {
                            deps: [c],
                            enabled: u
                        });
                    return useInterval(() => {
                        d(t => t + 1)
                    }, 2e4), (0, nt.useMemo)(() => u && m && m.maxFeePerGas && m.maxPriorityFeePerGas ? Object.assign(Object.assign({}, r), {
                        maxFeePerGas: m.maxFeePerGas * ay,
                        maxPriorityFeePerGas: m.maxPriorityFeePerGas * ay
                    }) : r, [m, r, u])
                },
                Tooltip = ({
                    children: t,
                    content: r,
                    className: a,
                    as: s = "span",
                    copykey: l
                }) => {
                    let c = useElementById_useElementById("dynamic-tooltips"),
                        [d, u] = (0, nt.useState)([0, 0]),
                        m = (0, nt.useRef)(null),
                        [p, h] = (0, nt.useState)(!1),
                        f = (0, nt.useCallback)(() => {
                            if (m.current) {
                                let t = m.current.getBoundingClientRect();
                                u([t.left + t.width / 2, t.top - 6])
                            }
                        }, []),
                        [, y] = useHover({
                            falseOnClick: !0,
                            initialValue: !1,
                            onHover: () => {
                                f(), h(!0)
                            },
                            onHoverOff: () => {
                                h(!1)
                            }
                        });
                    return (0, nt.useEffect)(() => {
                        f();
                        let t = debounce(() => {
                            f()
                        }, 3);
                        return window.addEventListener("resize", t), () => {
                            window.removeEventListener("resize", t)
                        }
                    }, [f]), (0, tb.jsxs)(tb.Fragment, {
                        children: [(0, nU.createPortal)((0, tb.jsx)(ShadowDOM_ShadowDOM, {
                            zIndex: 2147483647,
                            children: (0, tb.jsxs)("div", {
                                "data-testid": "dynamicTooltip",
                                className: classNames_classNames("dynamic-tooltip", {
                                    "dynamic-tooltip--visible": p
                                }, a),
                                style: {
                                    left: d[0],
                                    top: d[1]
                                },
                                copykey: l,
                                children: [r, (0, tb.jsx)(SvgTooltipArrow, {
                                    className: "dynamic-tooltip__arrow"
                                })]
                            })
                        }), c.current), (0, tb.jsx)(s, Object.assign({
                            ref: m
                        }, y, {
                            children: t
                        }))]
                    })
                };
            (0, tb.jsx)(Typography_Typography, {
                variant: "numbers_medium",
                color: "tooltip",
                children: "This email is verified"
            });
            let ag = (0, nt.createContext)(void 0),
                DynamicWidgetContextProvider = ({
                    children: t
                }) => {
                    let r = (0, nt.useRef)(null),
                        a = (0, nt.useRef)(null),
                        s = (0, nt.useRef)(null),
                        {
                            setShowDynamicUserProfile: l,
                            showDynamicUserProfile: c,
                            multiWallet: d
                        } = useInternalDynamicContext_useInternalDynamicContext(),
                        u = useKYCFlag_useKYCFlag(),
                        {
                            view: m,
                            setView: p,
                            goToInitialView: h
                        } = useViewController(u && !d ? "profile" : "wallets"),
                        f = (0, nt.useCallback)(() => {
                            if (u) return p("profile");
                            p("wallets")
                        }, [u, d]),
                        y = (0, nt.useMemo)(() => ({
                            availableWalletsContainerRef: s,
                            dynamicWidgetView: m,
                            goToInitialDynamicWidgetView: h,
                            goToProfileView: f,
                            inlineControlsRef: a,
                            isOpen: c,
                            setDynamicWidgetView: p,
                            setIsOpen: l,
                            widgetRef: r
                        }), [m, l, h, f, c]);
                    return (0, tb.jsx)(ag.Provider, {
                        value: y,
                        children: t
                    })
                },
                DynamicWidgetContext_useWidgetContext = () => {
                    let t = (0, nt.useContext)(ag);
                    if (void 0 === t) throw Error("usage of useWidgetContext not wrapped in `DynamicWidgetContextProvider`.");
                    return t
                },
                useOnlyConnectedMode = () => {
                    let {
                        authMode: t,
                        user: r
                    } = useInternalDynamicContext_useInternalDynamicContext();
                    return "connect-only" === t && !r
                },
                useKYCFlag_useKYCFlag = () => {
                    let t = useOnlyConnectedMode(),
                        {
                            projectSettings: r,
                            user: a
                        } = useInternalDynamicContext_useInternalDynamicContext();
                    if (t) return !1;
                    let s = getUserProfileFields({
                        projectSettingsKyc: null == r ? void 0 : r.kyc,
                        user: a
                    });
                    return s.length > 0 || isSocialKycEnabled(r)
                },
                OptionsSwitcher_OptionsSwitcher = ({
                    onChange: t,
                    value: r,
                    options: a,
                    rootClassName: s,
                    activeButtonClassName: l,
                    buttonClassName: c
                }) => {
                    let isActive = t => void 0 !== t && t === r,
                        d = (0, nt.useRef)(null),
                        [u, m] = (0, nt.useState)(0),
                        getOptionDisplayValue = t => t.label || t.key;
                    return (0, nt.useLayoutEffect)(() => {
                        if (!d.current) return;
                        let t = null == a ? void 0 : a.find(({
                            key: t
                        }) => t === r);
                        if (!t) return;
                        let s = getOptionDisplayValue(t),
                            l = d.current.querySelector(`[data-options-switcher-label=${s}]`);
                        if (!l) return;
                        let c = d.current.getBoundingClientRect(),
                            u = l.getBoundingClientRect();
                        m(u.x - c.x)
                    }, [a, r]), (0, tb.jsxs)("div", {
                        ref: d,
                        "data-testid": "OptionsSwitcher",
                        className: classNames_classNames("options-switcher", s),
                        children: [(0, tb.jsx)("div", {
                            className: "options-switcher__active-rail",
                            style: {
                                left: u,
                                width: `${100/((null==a?void 0:a.length)||1)}%`
                            }
                        }), null == a ? void 0 : a.map(r => (0, tb.jsx)("button", {
                            type: "button",
                            className: classNames_classNames("options-switcher__button", c, {
                                "options-switcher__button--active": isActive(r.key)
                            }, isActive(r.key) && l),
                            onClick: () => null == t ? void 0 : t(r.key),
                            "data-options-switcher-label": getOptionDisplayValue(r),
                            children: getOptionDisplayValue(r)
                        }, r.key))]
                    })
                };
            var av = ["title", "titleId"];

            function add_extends() {
                return (add_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgAdd = function(t) {
                    var r = t.title,
                        a = t.titleId,
                        s = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = function(t, r) {
                                if (null == t) return {};
                                var a, s, l = {},
                                    c = Object.keys(t);
                                for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                                return l
                            }(t, r);
                            if (Object.getOwnPropertySymbols) {
                                var c = Object.getOwnPropertySymbols(t);
                                for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                            }
                            return l
                        }(t, av);
                    return nt.createElement("svg", add_extends({
                        width: 16,
                        height: 16,
                        viewBox: "0 0 16 16",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        "aria-labelledby": a
                    }, s), r ? nt.createElement("title", {
                        id: a
                    }, r) : null, L || (L = nt.createElement("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M8 2c.368 0 .667.298.667.667v4.666h4.666a.667.667 0 1 1 0 1.334H8.667v4.666a.667.667 0 1 1-1.334 0V8.667H2.667a.667.667 0 0 1 0-1.334h4.666V2.667C7.333 2.298 7.632 2 8 2Z",
                        fill: "currentColor",
                        fillOpacity: .4
                    })))
                },
                ab = ["title", "titleId"];

            function send_extends() {
                return (send_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgSend = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, ab);
                return nt.createElement("svg", send_extends({
                    width: 24,
                    height: 24,
                    viewBox: "0 0 24 24",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, U || (U = nt.createElement("g", {
                    clipPath: "url(#send_svg__clip0_6894_96)"
                }, nt.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "m3.846 9.3.03-.01 14.64-5.728c.199-.078.399-.156.567-.205.156-.046.465-.126.794-.02.374.123.664.413.786.787.107.33.027.638-.019.794-.049.168-.127.368-.205.567L14.702 20.15c-.08.204-.16.408-.239.568-.073.147-.226.436-.537.614a1.277 1.277 0 0 1-1.136.072c-.323-.137-.496-.405-.58-.542-.09-.149-.184-.342-.278-.535l-2.693-5.52-5.546-2.724-.027-.014c-.193-.094-.385-.189-.533-.28-.137-.082-.403-.256-.54-.578a1.277 1.277 0 0 1 .074-1.136c.178-.31.466-.463.612-.536.16-.079.363-.158.567-.238Zm.972 1.425 4.88 2.396 2.912-2.913a.848.848 0 0 1 1.2-.017.848.848 0 0 1-.017 1.2l-2.898 2.898 2.384 4.888 5.433-13.888-13.894 5.436Z",
                    fill: "currentColor",
                    fillOpacity: .4
                }))))
            };
            let getActiveOauthCredential_getActiveOauthCredential = t => {
                var r;
                return null === (r = null == t ? void 0 : t.verifiedCredentials) || void 0 === r ? void 0 : r.find(r => "oauth" === r.format && r.id === t.lastVerifiedCredentialId)
            };
            var aw = ["title", "titleId"];

            function spinner_extends() {
                return (spinner_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgSpinner = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, aw);
                return nt.createElement("svg", spinner_extends({
                    width: 24,
                    height: 24,
                    viewBox: "0 0 24 24",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, nt.createElement("circle", {
                    cx: 12,
                    cy: 12,
                    r: 11,
                    stroke: "currentColor",
                    strokeWidth: 2,
                    style: {
                        opacity: .1
                    }
                }), nt.createElement("mask", {
                    id: "spinner_svg__a",
                    style: {
                        maskType: "alpha"
                    },
                    maskUnits: "userSpaceOnUse",
                    x: 0,
                    y: 0,
                    width: 24,
                    height: 24
                }, B || (B = nt.createElement("circle", {
                    cx: 12,
                    cy: 12,
                    r: 11,
                    stroke: "currentColor",
                    strokeWidth: 2
                }))), $ || ($ = nt.createElement("g", {
                    mask: "url(#spinner_svg__a)"
                }, nt.createElement("path", {
                    fill: "currentColor",
                    d: "M12-16.5h27v27H12z"
                }))))
            };
            let Spinner = ({
                    className: t = ""
                }) => (0, tb.jsx)(SvgSpinner, {
                    className: classNames_classNames("spinner", t)
                }),
                Button_Button = ({
                    buttonClassName: t = "",
                    buttonPadding: r = "medium",
                    buttonVariant: a = "primary",
                    children: s,
                    feedback: l,
                    expanded: c,
                    dataTestId: d,
                    disabled: u = !1,
                    showInternalLoading: m = !0,
                    loading: p = !1,
                    onClick: h,
                    type: f,
                    startSlot: y,
                    endSlot: b,
                    typographyProps: C = {
                        variant: "button_primary"
                    },
                    copykey: E
                }) => {
                    let [j, I] = (0, nt.useState)(!1), [O, P] = (0, nt.useState)(!1), R = classNames_classNames("button", {
                        "button--expanded": !!c,
                        "button--loading": !!p
                    }, r ? ({
                        default: "button--padding-default",
                        large: "button--padding-large",
                        "login-screen-height": "button--padding-login-screen-height",
                        medium: "button--padding-medium",
                        none: "button--padding-none",
                        small: "button--padding-small"
                    })[r] : "", a ? ({
                        "brand-primary": "button--brand-primary",
                        primary: "button--primary",
                        secondary: "button--secondary",
                        tertiary: "button--tertiary"
                    })[a] : "", t), F = (0, tb.jsxs)(tb.Fragment, {
                        children: [y && (0, tb.jsx)("div", {
                            className: "button__start-slot",
                            children: y
                        }), (l || s) && (0, tb.jsx)(Typography_Typography, Object.assign({
                            variant: "button_primary",
                            color: "primary",
                            as: "span"
                        }, C, {
                            copykey: E,
                            children: O && l ? l : s
                        })), b && (0, tb.jsx)("div", {
                            className: "button__end-slot",
                            children: b
                        })]
                    });
                    return (0, tb.jsxs)("button", {
                        type: f,
                        onClick: t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            if (h) {
                                let r = h(t);
                                if (r instanceof Promise) {
                                    m && I(!0);
                                    try {
                                        yield r
                                    } finally {
                                        I(!1)
                                    }
                                }
                            }
                            l && (P(!0), setTimeout(() => {
                                P(!1)
                            }, 2e3))
                        }),
                        className: R,
                        disabled: u || j || p,
                        "data-testid": d,
                        children: [(j || p) && (0, tb.jsx)("div", {
                            className: "button__spinner-container",
                            "data-testid": "button__spinner",
                            children: (0, tb.jsx)(Spinner, {
                                className: "button__spinner"
                            })
                        }), F]
                    })
                };
            var a_ = ["title", "titleId"];

            function close_extends() {
                return (close_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var close_SvgClose = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, a_);
                return nt.createElement("svg", close_extends({
                    width: 20,
                    height: 20,
                    viewBox: "0 0 20 20",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, K || (K = nt.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M4.41 4.41a.833.833 0 0 1 1.18 0L10 8.822l4.41-4.41a.833.833 0 1 1 1.18 1.178L11.178 10l4.41 4.41a.833.833 0 1 1-1.178 1.18L10 11.177 5.588 15.59a.833.833 0 1 1-1.178-1.178L8.82 10l-4.41-4.41a.833.833 0 0 1 0-1.18Z",
                    fill: "currentcolor"
                })))
            };
            let createOwnerWallet = (t, r) => {
                    var a, s;
                    let {
                        connector: l
                    } = t;
                    if (!(0, tl.nM)(l)) throw Error("Wallet is not an account abstraction wallet");
                    let c = l.getEOAConnector();
                    if (!c) throw Error("EOA connector not found");
                    let d = r.find(r => r.address === t.address);
                    if (!d) throw Error("Account Abstraction Account not found");
                    let u = r.find(t => t.id === d.signerRefId);
                    if (!u || !u.address || !u.chain) throw Error("Owner Account not found");
                    let m = null === (a = u.walletName) || void 0 === a || !a.startsWith("turnkey") || !!(null === (s = u.walletProperties) || void 0 === s ? void 0 : s.isAuthenticatorAttached);
                    return {
                        address: u.address,
                        authenticated: m,
                        chain: u.chain,
                        connected: !1,
                        connector: c,
                        id: u.id
                    }
                },
                isAccountAbstractionWallet = t => !!t && null != t && "object" == typeof t && "connector" in t && (0, tl.nM)(t.connector),
                getEnabledEmbeddedWalletsAuthenticators = t => {
                    if (!t || !Object.keys(t).length) return {};
                    let r = {};
                    return Object.keys(t).filter(r => {
                        var a;
                        return null === (a = t[r]) || void 0 === a ? void 0 : a.isEnabled
                    }).forEach(a => r[a] = t[a]), r
                },
                ak = "dyn-passkey-recovery-id",
                ax = "dyn-passkey-recovery-element-id",
                removeElementById = t => {
                    let r;
                    if ("undefined" != typeof window) {
                        r = window.document.getElementById(t);
                        let a = null == r ? void 0 : r.parentElement;
                        if (!r || !a) return;
                        a.removeChild(r)
                    }
                },
                passkeyRecovery_initEmbeddedWalletSession = ({
                    authenticatorType: t,
                    authToken: r,
                    iframeContainer: a,
                    iframeElementId: s,
                    environmentId: l,
                    userEmail: c,
                    wallet: d,
                    sessionExpiration: u
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    var m;
                    if (!r) throw new td.kW("Auth token is not defined");
                    if (!(null == d ? void 0 : d.connector) || !(null == d ? void 0 : d.id) || !(0, tl.q4)(null == d ? void 0 : d.connector)) throw new td.kW("PasskeyWalletConnector not found");
                    let p = null === (m = d.connector) || void 0 === m ? void 0 : m.getAuthenticatorHandler();
                    if ("passkey" === t && p.isSessionActive()) return addNewPasskeyAuthenticator({
                        authToken: r,
                        environmentId: l,
                        userEmail: c,
                        wallet: d
                    });
                    let h = yield p.initRecovery(t, a, s, u);
                    if (!h) throw new td.kW("Something went wrong");
                    let f = yield initEmbeddedWalletSession({
                        authenticatorType: t,
                        environmentId: l,
                        publicKey: h,
                        userJwt: r,
                        walletId: d.id
                    });
                    p.recoveryUserId = "passkey" === t ? f.turnkeyRecoveryUserId : f.turnkeyUserId
                }),
                passkeyRecoveryBundleValidation = ({
                    authToken: t,
                    bundleInput: r,
                    wallet: a
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    var s, l, c, d;
                    if (!r) throw new td.kW("Code must be informed");
                    if (!(null == a ? void 0 : a.connector) || !(null == a ? void 0 : a.id) || !(0, tl.q4)(null == a ? void 0 : a.connector)) throw new td.kW("PasskeyWalletConnector not found");
                    let u = decodeJwt(t);
                    if (!u) throw new td.kW("User must be logged in with a valid token");
                    let m = null === (c = null === (l = null === (s = u.verifiedCredentials) || void 0 === s ? void 0 : s.find(({
                            walletName: t
                        }) => null == t ? void 0 : t.startsWith("turnkey"))) || void 0 === l ? void 0 : l.walletProperties) || void 0 === c ? void 0 : c.turnkeySubOrganizationId,
                        p = null === (d = a.connector) || void 0 === d ? void 0 : d.getAuthenticatorHandler();
                    yield p.verifyRecoveryCode(r, m);
                    let h = {
                        createdAt: new Date().getTime(),
                        emailCode: r,
                        userId: p.recoveryUserId
                    };
                    LocalStorage.setToLS(nb, h)
                }),
                resentRecoveryEmail = ({
                    authenticatorType: t,
                    authToken: r,
                    environmentId: a,
                    wallet: s
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    var l;
                    if (!r) throw new td.kW("Auth token is not defined");
                    if (!(null == s ? void 0 : s.connector) || !(null == s ? void 0 : s.id) || !(0, tl.q4)(null == s ? void 0 : s.connector)) throw new td.kW("PasskeyWalletConnector not found");
                    let c = null === (l = s.connector) || void 0 === l ? void 0 : l.getAuthenticatorHandler().publicKey;
                    if (!c) throw new td.kW("Could not proceed with your request. Please restart the process.");
                    return initEmbeddedWalletSession({
                        authenticatorType: t,
                        environmentId: a,
                        publicKey: c,
                        userJwt: r,
                        walletId: null == s ? void 0 : s.id
                    })
                }),
                passkeyRecovery_completePasskeyRecovery = ({
                    authToken: t,
                    userEmail: r,
                    environmentId: a,
                    wallet: s
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    var l, c, d;
                    if (!t) throw new td.kW("User must be logged in");
                    let u = decodeJwt(t);
                    if (!u) throw new td.kW("User must be logged in with a valid token");
                    if (!(null == s ? void 0 : s.connector) || !(null == s ? void 0 : s.id) || !(0, tl.q4)(null == s ? void 0 : s.connector)) throw new td.kW("PasskeyWalletConnector not found");
                    let m = s.connector;
                    m.setEmail(r);
                    let p = null === (d = null === (c = null === (l = u.verifiedCredentials) || void 0 === l ? void 0 : l.find(({
                        walletName: t
                    }) => null == t ? void 0 : t.startsWith("turnkey"))) || void 0 === c ? void 0 : c.walletProperties) || void 0 === d ? void 0 : d.turnkeySubOrganizationId;
                    if (!p) throw new td.kW("Invalid token!");
                    let h = s.connector.getAuthenticatorHandler(),
                        {
                            attestation: f,
                            challenge: y
                        } = yield m.getWebAuthnAttestation();
                    yield h.completeRecovery({
                        attestation: f,
                        challenge: y,
                        organizationId: p
                    });
                    let b = yield completePasskeyRecovery({
                        attestation: f,
                        challenge: y,
                        environmentId: a,
                        userJwt: t,
                        walletId: null == s ? void 0 : s.id
                    }), {
                        jwt: C
                    } = b;
                    if (void 0 === (u = decodeJwt(C))) throw new td.kW("Invalid token!");
                    let E = m.connectedChain,
                        j = findEmbeddedWalletFromVerifiedCredentials(C, E);
                    if (!j) throw new td.kW("EmbeddedWalletVerifiedCredential not found");
                    return m.setVerifiedCredentials(u.verifiedCredentials), m.getAuthenticatorHandler().clear(), removeElementById(ax), {
                        decodedJwt: u,
                        jwt: C
                    }
                }),
                addNewPasskeyAuthenticator = ({
                    authToken: t,
                    userEmail: r,
                    environmentId: a,
                    wallet: s
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    var l, c, d;
                    if (!t) throw new td.kW("User must be logged in");
                    let u = decodeJwt(t);
                    if (!u) throw new td.kW("User must be logged in with a valid token");
                    if (!(null == s ? void 0 : s.connector) || !(null == s ? void 0 : s.id) || !(0, tl.q4)(null == s ? void 0 : s.connector)) throw new td.kW("PasskeyWalletConnector not found");
                    let m = s.connector;
                    m.setEmail(r);
                    let p = null === (d = null === (c = null === (l = u.verifiedCredentials) || void 0 === l ? void 0 : l.find(({
                        walletName: t
                    }) => null == t ? void 0 : t.startsWith("turnkey"))) || void 0 === c ? void 0 : c.walletProperties) || void 0 === d ? void 0 : d.turnkeySubOrganizationId;
                    if (!p) throw new td.kW("Invalid token!");
                    let h = s.connector.getAuthenticatorHandler(),
                        {
                            attestation: f,
                            challenge: y
                        } = yield m.getWebAuthnAttestation();
                    yield h.addPasskeyAuthenticator({
                        attestation: f,
                        challenge: y,
                        organizationId: p
                    });
                    let b = yield completePasskeyRecovery({
                        attestation: f,
                        challenge: y,
                        environmentId: a,
                        userJwt: t,
                        walletId: null == s ? void 0 : s.id
                    }), {
                        jwt: C
                    } = b;
                    if (void 0 === (u = decodeJwt(C))) throw new td.kW("Invalid token!");
                    let E = m.connectedChain,
                        j = findEmbeddedWalletFromVerifiedCredentials(C, E);
                    if (!j) throw new td.kW("EmbeddedWalletVerifiedCredential not found");
                    return m.setVerifiedCredentials(u.verifiedCredentials), {
                        decodedJwt: u,
                        jwt: C
                    }
                }),
                restoreEmbeddedWalletSession = ({
                    authToken: t,
                    iframeContainer: r,
                    iframeElementId: a,
                    wallet: s,
                    sessionExpiration: l
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    var c, d, u, m;
                    if (!t) throw new td.kW("Auth token is not defined");
                    let p = decodeJwt(t);
                    if (!p) throw new td.kW("User must be logged in with a valid token");
                    if (!(null == s ? void 0 : s.connector) || !(null == s ? void 0 : s.id) || !(0, tl.q4)(null == s ? void 0 : s.connector)) throw new td.kW("PasskeyWalletConnector not found");
                    let h = LocalStorage.getFromLS(nb),
                        f = null === (c = s.connector) || void 0 === c ? void 0 : c.getAuthenticatorHandler();
                    if (!h || f.recoveryUserId) return !1;
                    let y = yield f.initRecovery("email", r, a, l);
                    if (!y) throw new td.kW("Something went wrong");
                    f.recoveryUserId = h.userId;
                    let b = null === (m = null === (u = null === (d = p.verifiedCredentials) || void 0 === d ? void 0 : d.find(({
                        walletName: t
                    }) => null == t ? void 0 : t.startsWith("turnkey"))) || void 0 === u ? void 0 : u.walletProperties) || void 0 === m ? void 0 : m.turnkeySubOrganizationId;
                    return yield f.verifyRecoveryCode(h.emailCode, b), !0
                }),
                useIsTurnkeyWallet = () => {
                    var t;
                    let {
                        primaryWallet: r,
                        user: a
                    } = useInternalDynamicContext_useInternalDynamicContext(), s = isAccountAbstractionWallet(r) ? createOwnerWallet(r, (null == a ? void 0 : a.verifiedCredentials) || []) : r, l = (() => {
                        if (!s || !a) return;
                        let t = s.connector.key.startsWith("turnkey");
                        if (!t) return;
                        let r = s.id,
                            l = a.verifiedCredentials.find(t => t.id === r);
                        if (l) return l
                    })(), c = (() => {
                        if (!s || !a) return !1;
                        let t = a.verifiedCredentials.find(t => {
                                var r, a;
                                return (null === (r = t.walletName) || void 0 === r ? void 0 : r.startsWith("turnkey")) && (null === (a = t.walletProperties) || void 0 === a ? void 0 : a.isAuthenticatorAttached) === !1
                            }),
                            r = a.verifiedCredentials.find(r => t && r.signerRefId === t.id);
                        return r
                    })(), d = !!c, u = !!(l || d), m = !!(null === (t = null == l ? void 0 : l.walletProperties) || void 0 === t ? void 0 : t.isAuthenticatorAttached);
                    return {
                        hasTurnkeyVerifiedCredentialAuthenticator: m,
                        isTurnkeyWallet: u,
                        isTurnkeyWalletWithoutAuthenticator: u && !m || d,
                        turnkeyVerifiedCredential: l
                    }
                },
                useInitEmbeddedWalletAuthMethod = () => {
                    let {
                        authToken: t,
                        primaryWallet: r,
                        environmentId: a,
                        user: s,
                        projectSettings: l,
                        setShowAuthFlow: c,
                        setUser: d
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        setView: u
                    } = ViewContext_useViewContext(), [m, p] = (0, nt.useState)(!1), [h, f] = (0, nt.useState)();
                    return {
                        error: h,
                        initAuthMethod: ({
                            authenticatorType: m,
                            iframeContainer: h,
                            currentAction: y
                        }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            var b, C, E, j;
                            p(!0);
                            let I = isAccountAbstractionWallet(r) ? createOwnerWallet(r, (null == s ? void 0 : s.verifiedCredentials) || []) : r,
                                O = (null === (C = null === (b = null == l ? void 0 : l.sdk.embeddedWallets) || void 0 === b ? void 0 : b.sessionKeyDuration) || void 0 === C ? void 0 : C.amount) || 0,
                                P = (null === (j = null === (E = null == l ? void 0 : l.sdk.embeddedWallets) || void 0 === E ? void 0 : E.sessionKeyDuration) || void 0 === j ? void 0 : j.unit) === "minutes" ? 60 : 3600,
                                R = "email" === m || !(null == I ? void 0 : I.connector).getAuthenticatorHandler().isSessionActive();
                            try {
                                let r = yield passkeyRecovery_initEmbeddedWalletSession({
                                    authToken: t,
                                    authenticatorType: m,
                                    environmentId: a,
                                    iframeContainer: h,
                                    iframeElementId: ax,
                                    sessionExpiration: O * P || void 0,
                                    userEmail: (null == s ? void 0 : s.email) || "",
                                    wallet: I
                                });
                                r && r.jwt && r.decodedJwt && (storeAuthToken(r.jwt), d(createUserProfile(r.decodedJwt))), R ? (u("passkey-recovery-bundle", {
                                    authenticatorType: m,
                                    currentAction: y
                                }), c(!0, {
                                    ignoreIfIsEmbeddedWidget: !1,
                                    performMultiWalletChecks: !1
                                })) : c(!1)
                            } catch (t) {
                                f(t), tv.error("Failed to create embedded wallet", t), nr.emit("passkeyRecoveryFailed", t)
                            } finally {
                                p(!1)
                            }
                        }),
                        isLoading: m
                    }
                },
                usePasskeyRecovery_usePasskeyRecovery = () => {
                    let {
                        authToken: t,
                        environmentId: r,
                        primaryWallet: a,
                        projectSettings: s,
                        setShowAuthFlow: l,
                        user: c,
                        setUser: d
                    } = useInternalDynamicContext_useInternalDynamicContext(), u = useElementById_useElementById(ak), {
                        userHasEmbeddedWallet: m
                    } = useEmbeddedWallet(), {
                        isTurnkeyWalletWithoutAuthenticator: p
                    } = useIsTurnkeyWallet(), {
                        initAuthMethod: h
                    } = useInitEmbeddedWalletAuthMethod(), {
                        setView: f
                    } = ViewContext_useViewContext(), y = isAccountAbstractionWallet(a) ? createOwnerWallet(a, (null == c ? void 0 : c.verifiedCredentials) || []) : a, b = (0, nt.useCallback)(() => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        if (!y || !(0, tl.q4)(y.connector)) return !1;
                        let t = y.connector.getAuthenticatorHandler();
                        return !(!p || t.isSessionActive() || (yield isSessionRestored()))
                    }), [a, p]), C = (0, nt.useCallback)((a, m) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        var p;
                        validateRecoveryRequest();
                        let b = (null == y ? void 0 : y.connector).getAuthenticatorHandler();
                        if ("passkey" === a && b.isSessionActive()) {
                            let {
                                jwt: a,
                                decodedJwt: s
                            } = yield addNewPasskeyAuthenticator({
                                authToken: t,
                                environmentId: r,
                                userEmail: null == c ? void 0 : c.email,
                                wallet: y
                            });
                            return storeAuthToken(a), d(createUserProfile(s)), l(!1), y
                        }
                        let C = getEnabledEmbeddedWalletsAuthenticators(null === (p = null == s ? void 0 : s.sdk.embeddedWallets) || void 0 === p ? void 0 : p.supportedSecurityMethods),
                            E = C ? Object.keys(C) : [];
                        if (!a && E.length > 1) f("embedded-wallet-auth-choice", {
                            currentAction: m
                        }), l(!0, {
                            ignoreIfIsEmbeddedWidget: !1,
                            performMultiWalletChecks: !1
                        });
                        else {
                            let [t] = E;
                            a && !E.includes(a) && (a = t), yield h({
                                authenticatorType: a || t,
                                currentAction: m,
                                iframeContainer: u.current
                            })
                        }
                        return new Promise((t, r) => {
                            nr.once("passkeyRecoveryCompleted", r => t(r)), nr.once("passkeyRecoveryFailed", t => r(t))
                        })
                    }), [l, s, f, m]), validateRecoveryRequest = () => {
                        let t = getAuthToken();
                        if (!t) throw Error("User is not logged in");
                        if (!isTurnkeyEnabled(s)) throw Error("Passkey embedded wallet is not enabled. Go to the dashboard and make sure to have both Turnkey/Passkey Embedded wallets and at least one EVM network enabled. Also, check if EthereumWalletConnectors is in the  DynamicContextProvider > settings > walletConnectors.");
                        if (!m()) throw Error("Passkey embedded wallet not found");
                        if (y && !(0, tl.q4)(y.connector)) throw Error("Passkey embedded wallet not found.")
                    }, isSessionRestored = () => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        var r, l;
                        if (!(null === (l = null === (r = null == s ? void 0 : s.sdk.embeddedWallets) || void 0 === r ? void 0 : r.sessionKeyDuration) || void 0 === l ? void 0 : l.amount)) return !1;
                        let c = LocalStorage.getFromLS(nb);
                        if (!c) return !1;
                        let d = 60 * s.sdk.embeddedWallets.sessionKeyDuration.amount,
                            m = (null == c ? void 0 : c.createdAt) + 1e3 * d,
                            p = new Date(m);
                        if (new Date >= p) return LocalStorage.removeFromLS(nb), !1;
                        try {
                            return yield restoreEmbeddedWalletSession({
                                authToken: t,
                                iframeContainer: u.current,
                                iframeElementId: ax,
                                sessionExpiration: d,
                                wallet: a
                            })
                        } catch (t) {
                            tv.error("Failed to restore embedded wallet", t)
                        }
                        return !1
                    });
                    return {
                        initPasskeyRecoveryProcess: C,
                        shouldInitRecovery: b
                    }
                },
                SecureTurnkeyWalletCard = ({
                    className: t
                }) => {
                    let {
                        t: r
                    } = useTranslation_useTranslation(), {
                        initPasskeyRecoveryProcess: a
                    } = usePasskeyRecovery_usePasskeyRecovery(), {
                        showSecureAccountBanner: s,
                        setShowSecureAccountBanner: l
                    } = usePasskeyContext();
                    return s ? (0, tb.jsxs)("div", {
                        className: classNames_classNames("secure-turnkey-wallet-card", t),
                        children: [(0, tb.jsxs)("div", {
                            className: "secure-turnkey-wallet-card__text-content",
                            "data-testid": "secure-wallet-button",
                            onClick: () => a(),
                            children: [(0, tb.jsx)(Typography_Typography, {
                                variant: "body_small",
                                color: "primary",
                                copykey: "dyn_secure_pregenerated_wallet.description",
                                children: r("dyn_secure_pregenerated_wallet.description")
                            }), (0, tb.jsx)(Typography_Typography, {
                                variant: "body_small",
                                weight: "bold",
                                color: "brand-primary",
                                copykey: "dyn_secure_pregenerated_wallet.action",
                                className: "secure-turnkey-wallet-card__link",
                                children: r("dyn_secure_pregenerated_wallet.action")
                            })]
                        }), (0, tb.jsx)("div", {
                            children: (0, tb.jsx)(rk, {
                                color: "text-secondary",
                                onClick: () => l(!1),
                                children: (0, tb.jsx)(close_SvgClose, {
                                    width: 16,
                                    height: 16
                                })
                            })
                        })]
                    }) : null
                },
                Image = ({
                    src: t,
                    alt: r = "",
                    fallback: a,
                    className: s,
                    dataTestId: l
                }) => {
                    let [c, d] = (0, nt.useState)(!1);
                    return t && !c ? (0, tb.jsx)("img", {
                        src: t,
                        alt: r,
                        onError: () => {
                            d(!0)
                        },
                        className: s,
                        "data-testid": l
                    }) : (0, tb.jsx)(tb.Fragment, {
                        children: a
                    })
                },
                UserAvatar = ({
                    user: t
                }) => (0, tb.jsx)("div", {
                    className: "user-profile-social-account__connected-avatar",
                    children: (0, tb.jsx)(Image, {
                        src: (() => {
                            var r, a, s;
                            let l = null === (s = null === (a = null === (r = null == t ? void 0 : t.verifiedCredentials) || void 0 === r ? void 0 : r.find(r => {
                                var a;
                                return t.lastVerifiedCredentialId === r.id && (null === (a = r.oauthAccountPhotos) || void 0 === a ? void 0 : a.length)
                            })) || void 0 === a ? void 0 : a.oauthAccountPhotos) || void 0 === s ? void 0 : s[0];
                            return l
                        })(),
                        alt: "User avatar",
                        dataTestId: "user-avatar",
                        fallback: (0, tb.jsx)(t9, {})
                    })
                }),
                aC = ["banxa"],
                isOnrampProvider = t => aC.includes(t.provider),
                getWalletAdditionalAddressByType = (t, r) => {
                    var a, s;
                    return null === (s = null === (a = null == r ? void 0 : r.additionalAddresses) || void 0 === a ? void 0 : a.find(r => r.type === t)) || void 0 === s ? void 0 : s.address
                },
                aS = (0, nt.createContext)(void 0),
                FundingContextProvider = ({
                    children: t
                }) => {
                    var r, a;
                    let s = (0, nt.useRef)(null),
                        [l, c] = (0, nt.useState)(!1),
                        [d, u] = (0, nt.useState)(!1),
                        [m, p] = (0, nt.useState)(""),
                        {
                            environmentId: h,
                            network: f,
                            primaryWallet: y,
                            projectSettings: b
                        } = useInternalDynamicContext_useInternalDynamicContext(),
                        C = null !== (a = null === (r = null == b ? void 0 : b.providers) || void 0 === r ? void 0 : r.some(t => isOnrampProvider(t) && !!t.enabledAt)) && void 0 !== a && a,
                        E = (0, nt.useCallback)(({
                            address: t,
                            token: r
                        } = {}) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            var a;
                            if (!C || !y) return;
                            let s = null === (a = (0, tl.bt)(y.chain)) || void 0 === a ? void 0 : a.name;
                            if (!s) return;
                            let l = (0, tl.nQ)(y.connector) && getWalletAdditionalAddressByType(tu.KOz.Payment, y);
                            try {
                                let [{
                                    url: a
                                }] = yield getOnrampProviders({
                                    chain: s,
                                    environmentId: h,
                                    networkId: f ? f.toString() : void 0,
                                    token: r,
                                    walletAddress: t || l || y.address
                                });
                                if (!a) throw Error("No onramp url found");
                                p(a), u(!0)
                            } catch (t) {
                                u(!1)
                            }
                        }), [h, C, f, y]),
                        j = (0, nt.useMemo)(() => ({
                            fundingEnabled: C,
                            fundingRef: s,
                            fundingUrl: m,
                            setShowFunding: c,
                            showFunding: l,
                            supportsFunding: d,
                            updateSupportsFunding: E
                        }), [C, m, l, d, E]);
                    return (0, nt.useEffect)(() => {
                        E()
                    }, [h, C, f, null == y ? void 0 : y.address]), (0, tb.jsx)(aS.Provider, {
                        value: j,
                        children: t
                    })
                },
                FundingContext_useFundingContext = () => {
                    let t = (0, nt.useContext)(aS);
                    if (void 0 === t) throw Error("usage of useFundingContext not wrapped in `FundingContextProvider`.");
                    return t
                },
                useConfirmationModal = ({
                    elementId: t
                }) => {
                    let r = useElementById_useElementById(t),
                        [a, s] = (0, nt.useState)(null),
                        l = (0, nt.useCallback)(t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            let r = new Promise((r, a) => {
                                try {
                                    s(t(r, a))
                                } catch (t) {
                                    a(t)
                                }
                            });
                            return r.finally(() => {
                                s(void 0)
                            })
                        }), [s]);
                    return {
                        modal: a ? (0, tb.jsx)("div", {
                            children: (0, nU.createPortal)(a, r.current)
                        }) : void 0,
                        open: l
                    }
                },
                useResizeObserver = (t, r) => {
                    let [a, s] = (0, nt.useState)(), l = (0, nt.useCallback)(t => {
                        if (!Array.isArray(t)) return;
                        let [a] = t;
                        s(a.contentRect), r && r(a.contentRect)
                    }, [r, s]);
                    return (0, nt.useLayoutEffect)(() => {
                        if (!t.current) return;
                        let r = new ResizeObserver(l);
                        return r.observe(t.current), () => {
                            null == r || r.disconnect(), r = null
                        }
                    }, [t]), [a]
                },
                VerticalDrawerTransition = t => {
                    var {
                        style: r,
                        children: a,
                        className: s
                    } = t, l = _tslib_rest(t, ["style", "children", "className"]);
                    let c = (0, nt.useRef)(null),
                        d = (0, nt.useRef)(null),
                        [u] = useResizeObserver(d),
                        m = (0, nt.useMemo)(() => null == u ? void 0 : u.height, [u]),
                        {
                            mount: p,
                            stage: h,
                            currentDuration: f
                        } = useTransition(Object.assign({
                            animateOnMount: !1
                        }, l)),
                        y = (0, nt.useMemo)(() => p && "EXITING" !== h && "UNMOUNT" !== h ? m : 0, [h, m, p]);
                    return (0, tb.jsx)("div", {
                        ref: c,
                        className: classNames_classNames(s, "vertical-drawer-animation"),
                        style: Object.assign(Object.assign({}, r), {
                            maxHeight: y,
                            transitionDuration: `${f}ms`
                        }),
                        children: (0, tb.jsx)("div", {
                            ref: d,
                            children: p && a
                        })
                    })
                },
                Modal_Modal = ({
                    children: t,
                    className: r,
                    isShown: a = !0,
                    transitionProps: s
                }) => (0, tb.jsx)("div", {
                    className: classNames_classNames("modal", r),
                    children: (0, tb.jsx)(rg, Object.assign({}, s, {
                        isShown: a,
                        children: (0, tb.jsx)("div", {
                            className: "modal__items",
                            children: t
                        })
                    }))
                }),
                ModalCard_ModalCard = ({
                    children: t,
                    borderRadius: r = "default",
                    border: a = !1,
                    sharpBottomRadiusOnMobile: s = !0,
                    dataTestId: l
                }) => (0, tb.jsx)("div", {
                    "data-testid": l,
                    className: classNames_classNames("modal-card", {
                        "modal-card--sharp-mobile-bottom-radius": s,
                        "modal-card--with-border": a
                    }, `modal-card--radius-${r}`),
                    children: t
                });
            var aE = a(16191),
                aj = a(84477),
                aI = "data-focus-lock",
                aT = "data-focus-lock-disabled",
                aO = a(86840),
                aN = {
                    width: "1px",
                    height: "0px",
                    padding: 0,
                    overflow: "hidden",
                    position: "fixed",
                    top: "1px",
                    left: "1px"
                },
                InFocusGuard = function(t) {
                    var r = t.children;
                    return nt.createElement(nt.Fragment, null, nt.createElement("div", {
                        key: "guard-first",
                        "data-focus-guard": !0,
                        "data-focus-auto-guard": !0,
                        style: aN
                    }), r, r && nt.createElement("div", {
                        key: "guard-last",
                        "data-focus-guard": !0,
                        "data-focus-auto-guard": !0,
                        style: aN
                    }))
                };
            InFocusGuard.propTypes = {}, InFocusGuard.defaultProps = {
                children: null
            };
            var aP = a(43011),
                aA = (0, aP.s)({}, function(t) {
                    return {
                        target: t.target,
                        currentTarget: t.currentTarget
                    }
                }),
                aR = (0, aP.s)(),
                aF = (0, aP.s)(),
                aW = (0, aP._)({
                    async: !0
                }),
                aM = [],
                aD = nt.forwardRef(function(t, r) {
                    var a, s = nt.useState(),
                        l = s[0],
                        c = s[1],
                        d = nt.useRef(),
                        u = nt.useRef(!1),
                        m = nt.useRef(null),
                        p = t.children,
                        h = t.disabled,
                        f = t.noFocusGuards,
                        y = t.persistentFocus,
                        b = t.crossFrame,
                        C = t.autoFocus,
                        E = (t.allowTextSelection, t.group),
                        j = t.className,
                        I = t.whiteList,
                        O = t.hasPositiveIndices,
                        P = t.shards,
                        R = void 0 === P ? aM : P,
                        F = t.as,
                        W = void 0 === F ? "div" : F,
                        M = t.lockProps,
                        D = void 0 === M ? {} : M,
                        L = t.sideCar,
                        U = t.returnFocus,
                        B = t.focusOptions,
                        $ = t.onActivation,
                        K = t.onDeactivation,
                        G = nt.useState({})[0],
                        J = nt.useCallback(function() {
                            m.current = m.current || document && document.activeElement, d.current && $ && $(d.current), u.current = !0
                        }, [$]),
                        Y = nt.useCallback(function() {
                            u.current = !1, K && K(d.current)
                        }, [K]);
                    (0, nt.useEffect)(function() {
                        h || (m.current = null)
                    }, []);
                    var Q = nt.useCallback(function(t) {
                            var r = m.current;
                            if (r && r.focus) {
                                var a = "function" == typeof U ? U(r) : U;
                                if (a) {
                                    var s = "object" == typeof a ? a : void 0;
                                    m.current = null, t ? Promise.resolve().then(function() {
                                        return r.focus(s)
                                    }) : r.focus(s)
                                }
                            }
                        }, [U]),
                        ee = nt.useCallback(function(t) {
                            u.current && aA.useMedium(t)
                        }, []),
                        et = aR.useMedium,
                        en = nt.useCallback(function(t) {
                            d.current !== t && (d.current = t, c(t))
                        }, []),
                        er = (0, aj.Z)(((a = {})[aT] = h && "disabled", a[aI] = E, a), D),
                        ea = !0 !== f,
                        ei = ea && "tail" !== f,
                        eo = (0, aO.q)([r, en]);
                    return nt.createElement(nt.Fragment, null, ea && [nt.createElement("div", {
                        key: "guard-first",
                        "data-focus-guard": !0,
                        tabIndex: h ? -1 : 0,
                        style: aN
                    }), O ? nt.createElement("div", {
                        key: "guard-nearest",
                        "data-focus-guard": !0,
                        tabIndex: h ? -1 : 1,
                        style: aN
                    }) : null], !h && nt.createElement(L, {
                        id: G,
                        sideCar: aW,
                        observed: l,
                        disabled: h,
                        persistentFocus: y,
                        crossFrame: b,
                        autoFocus: C,
                        whiteList: I,
                        shards: R,
                        onActivation: J,
                        onDeactivation: Y,
                        returnFocus: Q,
                        focusOptions: B
                    }), nt.createElement(W, (0, aj.Z)({
                        ref: eo
                    }, er, {
                        className: j,
                        onBlur: et,
                        onFocus: ee
                    }), p), ei && nt.createElement("div", {
                        "data-focus-guard": !0,
                        tabIndex: h ? -1 : 0,
                        style: aN
                    }))
                });
            aD.propTypes = {}, aD.defaultProps = {
                children: void 0,
                disabled: !1,
                returnFocus: !1,
                focusOptions: void 0,
                noFocusGuards: !1,
                autoFocus: !0,
                persistentFocus: !1,
                crossFrame: !0,
                hasPositiveIndices: void 0,
                allowTextSelection: void 0,
                group: void 0,
                className: void 0,
                whiteList: void 0,
                shards: void 0,
                as: "div",
                lockProps: {},
                onActivation: void 0,
                onDeactivation: void 0
            };
            var aL = a(29099),
                array_toArray = function(t) {
                    for (var r = Array(t.length), a = 0; a < t.length; ++a) r[a] = t[a];
                    return r
                },
                asArray = function(t) {
                    return Array.isArray(t) ? t : [t]
                },
                getFirst = function(t) {
                    return Array.isArray(t) ? t[0] : t
                },
                isElementHidden = function(t) {
                    if (t.nodeType !== Node.ELEMENT_NODE) return !1;
                    var r = window.getComputedStyle(t, null);
                    return !!r && !!r.getPropertyValue && ("none" === r.getPropertyValue("display") || "hidden" === r.getPropertyValue("visibility"))
                },
                getParentNode = function(t) {
                    return t.parentNode && t.parentNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? t.parentNode.host : t.parentNode
                },
                isTopNode = function(t) {
                    return t === document || t && t.nodeType === Node.DOCUMENT_NODE
                },
                isVisibleCached = function(t, r) {
                    var a, s = t.get(r);
                    if (void 0 !== s) return s;
                    var l = (a = isVisibleCached.bind(void 0, t), !r || isTopNode(r) || !isElementHidden(r) && a(getParentNode(r)));
                    return t.set(r, l), l
                },
                isAutoFocusAllowedCached = function(t, r) {
                    var a, s = t.get(r);
                    if (void 0 !== s) return s;
                    var l = (a = isAutoFocusAllowedCached.bind(void 0, t), !r || !!isTopNode(r) || !!isAutoFocusAllowed(r) && a(getParentNode(r)));
                    return t.set(r, l), l
                },
                getDataset = function(t) {
                    return t.dataset
                },
                isHTMLInputElement = function(t) {
                    return "INPUT" === t.tagName
                },
                isRadioElement = function(t) {
                    return isHTMLInputElement(t) && "radio" === t.type
                },
                isAutoFocusAllowed = function(t) {
                    return ![!0, "true", ""].includes(t.getAttribute("data-no-autofocus"))
                },
                isGuard = function(t) {
                    var r;
                    return !!(t && (null === (r = getDataset(t)) || void 0 === r ? void 0 : r.focusGuard))
                },
                isNotAGuard = function(t) {
                    return !isGuard(t)
                },
                isDefined = function(t) {
                    return !!t
                },
                tabSort = function(t, r) {
                    var a = t.tabIndex - r.tabIndex,
                        s = t.index - r.index;
                    if (a) {
                        if (!t.tabIndex) return 1;
                        if (!r.tabIndex) return -1
                    }
                    return a || s
                },
                orderByTabIndex = function(t, r, a) {
                    return array_toArray(t).map(function(t, r) {
                        return {
                            node: t,
                            index: r,
                            tabIndex: a && -1 === t.tabIndex ? (t.dataset || {}).focusGuard ? 0 : -1 : t.tabIndex
                        }
                    }).filter(function(t) {
                        return !r || t.tabIndex >= 0
                    }).sort(tabSort)
                },
                az = "button:enabled,select:enabled,textarea:enabled,input:enabled,a[href],area[href],summary,iframe,object,embed,audio[controls],video[controls],[tabindex],[contenteditable],[autofocus]",
                aU = "".concat(az, ", [data-focus-guard]"),
                getFocusablesWithShadowDom = function(t, r) {
                    return array_toArray((t.shadowRoot || t).children).reduce(function(t, a) {
                        return t.concat(a.matches(r ? aU : az) ? [a] : [], getFocusablesWithShadowDom(a))
                    }, [])
                },
                getFocusablesWithIFrame = function(t, r) {
                    var a;
                    return t instanceof HTMLIFrameElement && (null === (a = t.contentDocument) || void 0 === a ? void 0 : a.body) ? getFocusables([t.contentDocument.body], r) : [t]
                },
                getFocusables = function(t, r) {
                    return t.reduce(function(t, a) {
                        var s, l = getFocusablesWithShadowDom(a, r),
                            c = (s = []).concat.apply(s, l.map(function(t) {
                                return getFocusablesWithIFrame(t, r)
                            }));
                        return t.concat(c, a.parentNode ? array_toArray(a.parentNode.querySelectorAll(az)).filter(function(t) {
                            return t === a
                        }) : [])
                    }, [])
                },
                filterFocusable = function(t, r) {
                    return array_toArray(t).filter(function(t) {
                        return isVisibleCached(r, t)
                    }).filter(function(t) {
                        return !((isHTMLInputElement(t) || "BUTTON" === t.tagName) && ("hidden" === t.type || t.disabled))
                    })
                },
                filterAutoFocusable = function(t, r) {
                    return void 0 === r && (r = new Map), array_toArray(t).filter(function(t) {
                        return isAutoFocusAllowedCached(r, t)
                    })
                },
                getTabbableNodes = function(t, r, a) {
                    return orderByTabIndex(filterFocusable(getFocusables(t, a), r), !0, a)
                },
                getAllTabbableNodes = function(t, r) {
                    return orderByTabIndex(filterFocusable(getFocusables(t), r), !1)
                },
                contains = function(t, r) {
                    return t.shadowRoot ? contains(t.shadowRoot, r) : !!(void 0 !== Object.getPrototypeOf(t).contains && Object.getPrototypeOf(t).contains.call(t, r)) || array_toArray(t.children).some(function(t) {
                        var a;
                        if (t instanceof HTMLIFrameElement) {
                            var s = null === (a = t.contentDocument) || void 0 === a ? void 0 : a.body;
                            return !!s && contains(s, r)
                        }
                        return contains(t, r)
                    })
                },
                safeProbe = function(t) {
                    try {
                        return t()
                    } catch (t) {
                        return
                    }
                },
                getActiveElement_getActiveElement = function(t) {
                    if (void 0 === t && (t = document), t && t.activeElement) {
                        var r = t.activeElement;
                        return r.shadowRoot ? getActiveElement_getActiveElement(r.shadowRoot) : r instanceof HTMLIFrameElement && safeProbe(function() {
                            return r.contentWindow.document
                        }) ? getActiveElement_getActiveElement(r.contentWindow.document) : r
                    }
                },
                focusIsHidden = function(t) {
                    void 0 === t && (t = document);
                    var r = getActiveElement_getActiveElement(t);
                    return !!r && array_toArray(t.querySelectorAll("[".concat("data-no-focus-lock", "]"))).some(function(t) {
                        return contains(t, r)
                    })
                },
                filterNested = function(t) {
                    for (var r = new Set, a = t.length, s = 0; s < a; s += 1)
                        for (var l = s + 1; l < a; l += 1) {
                            var c = t[s].compareDocumentPosition(t[l]);
                            (c & Node.DOCUMENT_POSITION_CONTAINED_BY) > 0 && r.add(l), (c & Node.DOCUMENT_POSITION_CONTAINS) > 0 && r.add(s)
                        }
                    return t.filter(function(t, a) {
                        return !r.has(a)
                    })
                },
                getTopParent = function(t) {
                    return t.parentNode ? getTopParent(t.parentNode) : t
                },
                getAllAffectedNodes = function(t) {
                    return asArray(t).filter(Boolean).reduce(function(t, r) {
                        var a = r.getAttribute(aI);
                        return t.push.apply(t, a ? filterNested(array_toArray(getTopParent(r).querySelectorAll("[".concat(aI, '="').concat(a, '"]:not([').concat(aT, '="disabled"])')))) : [r]), t
                    }, [])
                },
                focusInside = function(t, r) {
                    return void 0 === r && (r = getActiveElement_getActiveElement(getFirst(t).ownerDocument)), !!r && (!r.dataset || !r.dataset.focusGuard) && getAllAffectedNodes(t).some(function(t) {
                        var a;
                        return contains(t, r) || (a = r, !!array_toArray(t.querySelectorAll("iframe")).some(function(t) {
                            return t === a
                        }))
                    })
                },
                correctNode = function(t, r) {
                    return isRadioElement(t) && t.name && r.filter(isRadioElement).filter(function(r) {
                        return r.name === t.name
                    }).filter(function(t) {
                        return t.checked
                    })[0] || t
                },
                correctNodes = function(t) {
                    var r = new Set;
                    return t.forEach(function(a) {
                        return r.add(correctNode(a, t))
                    }), t.filter(function(t) {
                        return r.has(t)
                    })
                },
                pickFirstFocus = function(t) {
                    return t[0] && t.length > 1 ? correctNode(t[0], t) : t[0]
                },
                pickFocusable = function(t, r) {
                    return t.length > 1 ? t.indexOf(correctNode(t[r], t)) : r
                },
                aq = "NEW_FOCUS",
                newFocus = function(t, r, a, s) {
                    var l = t.length,
                        c = t[0],
                        d = t[l - 1],
                        u = isGuard(a);
                    if (!(a && t.indexOf(a) >= 0)) {
                        var m = void 0 !== a ? r.indexOf(a) : -1,
                            p = s ? r.indexOf(s) : m,
                            h = s ? t.indexOf(s) : -1,
                            f = m - p,
                            y = r.indexOf(c),
                            b = r.indexOf(d),
                            C = correctNodes(r),
                            E = (void 0 !== a ? C.indexOf(a) : -1) - (s ? C.indexOf(s) : m),
                            j = pickFocusable(t, 0),
                            I = pickFocusable(t, l - 1);
                        if (-1 === m || -1 === h) return aq;
                        if (!f && h >= 0) return h;
                        if (m <= y && u && Math.abs(f) > 1) return I;
                        if (m >= b && u && Math.abs(f) > 1) return j;
                        if (f && Math.abs(E) > 1) return h;
                        if (m <= y) return I;
                        if (m > b) return j;
                        if (f) return Math.abs(f) > 1 ? h : (l + h + f) % l
                    }
                },
                pickAutofocus = function(t, r, a) {
                    var s = filterAutoFocusable(t.map(function(t) {
                        return t.node
                    }).filter(function(t) {
                        var r, s = null === (r = getDataset(t)) || void 0 === r ? void 0 : r.autofocus;
                        return t.autofocus || void 0 !== s && "false" !== s || a.indexOf(t) >= 0
                    }));
                    return s && s.length ? pickFirstFocus(s) : pickFirstFocus(filterAutoFocusable(r))
                },
                getParents = function(t, r) {
                    return void 0 === r && (r = []), r.push(t), t.parentNode && getParents(t.parentNode.host || t.parentNode, r), r
                },
                getCommonParent = function(t, r) {
                    for (var a = getParents(t), s = getParents(r), l = 0; l < a.length; l += 1) {
                        var c = a[l];
                        if (s.indexOf(c) >= 0) return c
                    }
                    return !1
                },
                getTopCommonParent = function(t, r, a) {
                    var s = asArray(t),
                        l = asArray(r),
                        c = s[0],
                        d = !1;
                    return l.filter(Boolean).forEach(function(t) {
                        d = getCommonParent(d || t, t) || d, a.filter(Boolean).forEach(function(t) {
                            var r = getCommonParent(c, t);
                            r && (d = !d || contains(r, d) ? r : getCommonParent(r, d))
                        })
                    }), d
                },
                reorderNodes = function(t, r) {
                    var a = new Map;
                    return r.forEach(function(t) {
                        return a.set(t.node, t)
                    }), t.map(function(t) {
                        return a.get(t)
                    }).filter(isDefined)
                },
                getFocusMerge = function(t, r) {
                    var a = getActiveElement_getActiveElement(asArray(t).length > 0 ? document : getFirst(t).ownerDocument),
                        s = getAllAffectedNodes(t).filter(isNotAGuard),
                        l = getTopCommonParent(a || t, t, s),
                        c = new Map,
                        d = getAllTabbableNodes(s, c),
                        u = getTabbableNodes(s, c).filter(function(t) {
                            return isNotAGuard(t.node)
                        });
                    if (u[0] || (u = d)[0]) {
                        var m = getAllTabbableNodes([l], c).map(function(t) {
                                return t.node
                            }),
                            p = reorderNodes(m, u),
                            h = p.map(function(t) {
                                return t.node
                            }),
                            f = newFocus(h, m, a, r);
                        if (f === aq) {
                            var y = pickAutofocus(d, h, s.reduce(function(t, r) {
                                return t.concat(filterFocusable(array_toArray(r.querySelectorAll("[".concat("data-autofocus-inside", "]"))).map(function(t) {
                                    return getFocusables([t])
                                }).reduce(function(t, r) {
                                    return t.concat(r)
                                }, []), c))
                            }, []));
                            return y ? {
                                node: y
                            } : void console.warn("focus-lock: cannot find any node to move focus into")
                        }
                        return void 0 === f ? f : p[f]
                    }
                },
                focusOn = function(t, r) {
                    "focus" in t && t.focus(r), "contentWindow" in t && t.contentWindow && t.contentWindow.focus()
                },
                aB = 0,
                aV = !1,
                es2015 = function(t, r, a) {
                    void 0 === a && (a = {});
                    var s = getFocusMerge(t, r);
                    if (!aV && s) {
                        if (aB > 2) {
                            console.error("FocusLock: focus-fighting detected. Only one focus management system could be active. See https://github.com/theKashey/focus-lock/#focus-fighting"), aV = !0, setTimeout(function() {
                                aV = !1
                            }, 1);
                            return
                        }
                        aB++, focusOn(s.node, a.focusOptions), aB--
                    }
                },
                getFocusabledIn = function(t) {
                    var r = getAllAffectedNodes(t).filter(isNotAGuard),
                        a = getTopCommonParent(t, t, r),
                        s = new Map,
                        l = getTabbableNodes([a], s, !0),
                        c = getTabbableNodes(r, s).filter(function(t) {
                            return isNotAGuard(t.node)
                        }).map(function(t) {
                            return t.node
                        });
                    return l.map(function(t) {
                        var r = t.node;
                        return {
                            node: r,
                            index: t.index,
                            lockItem: c.indexOf(r) >= 0,
                            guard: isGuard(r)
                        }
                    })
                };

            function deferAction(t) {
                var r = window.setImmediate;
                void 0 !== r ? r(t) : setTimeout(t, 1)
            }
            var aH = null,
                a$ = null,
                aK = null,
                aG = !1,
                recordPortal = function(t, r) {
                    aK = {
                        observerNode: t,
                        portaledElement: r
                    }
                };

            function autoGuard(t, r, a, s) {
                var l = null,
                    c = t;
                do {
                    var d = s[c];
                    if (d.guard) d.node.dataset.focusAutoGuard && (l = d);
                    else if (d.lockItem) {
                        if (c !== t) return;
                        l = null
                    } else break
                } while ((c += a) !== r);
                l && (l.node.tabIndex = 0)
            }
            var extractRef = function(t) {
                    return t && "current" in t ? t.current : t
                },
                activateTrap = function() {
                    var t = !1;
                    if (aH) {
                        var r = aH,
                            a = r.observed,
                            s = r.persistentFocus,
                            l = r.autoFocus,
                            c = r.shards,
                            d = r.crossFrame,
                            u = r.focusOptions,
                            m = a || aK && aK.portaledElement,
                            p = document && document.activeElement;
                        if (m) {
                            var h = [m].concat(c.map(extractRef).filter(Boolean));
                            if ((!p || (aH.whiteList || function() {
                                    return !0
                                })(p)) && (s || (d ? !!aG : "meanwhile" === aG) || !(document && document.activeElement === document.body || focusIsHidden()) || !a$ && l) && (m && !(focusInside(h) || p && h.some(function(t) {
                                    return function checkInHost(t, r, a) {
                                        return r && (r.host === t && (!r.activeElement || a.contains(r.activeElement)) || r.parentNode && checkInHost(t, r.parentNode, a))
                                    }(p, t, t)
                                }) || aK && aK.portaledElement === p) && (document && !a$ && p && !l ? (p.blur && p.blur(), document.body.focus()) : (t = es2015(h, a$, {
                                    focusOptions: u
                                }), aK = {})), aG = !1, a$ = document && document.activeElement), document) {
                                var f = document && document.activeElement,
                                    y = getFocusabledIn(h),
                                    b = y.map(function(t) {
                                        return t.node
                                    }).indexOf(f);
                                b > -1 && (y.filter(function(t) {
                                    var r = t.guard,
                                        a = t.node;
                                    return r && a.dataset.focusAutoGuard
                                }).forEach(function(t) {
                                    return t.node.removeAttribute("tabIndex")
                                }), autoGuard(b, y.length, 1, y), autoGuard(b, -1, -1, y))
                            }
                        }
                    }
                    return t
                },
                onTrap = function(t) {
                    activateTrap() && t && (t.stopPropagation(), t.preventDefault())
                },
                onBlur = function() {
                    return deferAction(activateTrap)
                },
                onWindowBlur = function() {
                    aG = "just", setTimeout(function() {
                        aG = "meanwhile"
                    }, 0)
                },
                attachHandler = function() {
                    document.addEventListener("focusin", onTrap), document.addEventListener("focusout", onBlur), window.addEventListener("blur", onWindowBlur)
                },
                detachHandler = function() {
                    document.removeEventListener("focusin", onTrap), document.removeEventListener("focusout", onBlur), window.removeEventListener("blur", onWindowBlur)
                };
            aA.assignSyncMedium(function(t) {
                var r = t.target,
                    a = t.currentTarget;
                a.contains(r) || recordPortal(a, r)
            }), aR.assignMedium(onBlur), aF.assignMedium(function(t) {
                return t({
                    moveFocusInside: es2015,
                    focusInside: focusInside
                })
            });
            var aZ = (m = function(t) {
                    var r = t.slice(-1)[0];
                    r && !aH && attachHandler();
                    var a = aH,
                        s = a && r && r.id === a.id;
                    aH = r, !a || s || (a.onDeactivation(), t.filter(function(t) {
                        return t.id === a.id
                    }).length || a.returnFocus(!r)), r ? (a$ = null, s && a.observed === r.observed || r.onActivation(), activateTrap(!0), deferAction(activateTrap)) : (detachHandler(), a$ = null)
                }, function(t) {
                    var r, a = [];

                    function emitChange() {
                        m(r = a.map(function(t) {
                            return t.props
                        }).filter(function(t) {
                            return !t.disabled
                        }))
                    }
                    var s = function(s) {
                        function SideEffect() {
                            return s.apply(this, arguments) || this
                        }(0, at.Z)(SideEffect, s), SideEffect.peek = function() {
                            return r
                        };
                        var l = SideEffect.prototype;
                        return l.componentDidMount = function() {
                            a.push(this), emitChange()
                        }, l.componentDidUpdate = function() {
                            emitChange()
                        }, l.componentWillUnmount = function() {
                            var t = a.indexOf(this);
                            a.splice(t, 1), emitChange()
                        }, l.render = function() {
                            return nt.createElement(t, this.props)
                        }, SideEffect
                    }(nt.PureComponent);
                    return (0, aL.Z)(s, "displayName", "SideEffect(" + (t.displayName || t.name || "Component") + ")"), s
                })(function() {
                    return null
                }),
                aJ = nt.forwardRef(function(t, r) {
                    return nt.createElement(aD, (0, aj.Z)({
                        sideCar: aZ,
                        ref: r
                    }, t))
                }),
                aY = aD.propTypes || {};
            aY.sideCar, (0, aE.Z)(aY, ["sideCar"]), aJ.propTypes = {};
            let useKeyboardEventListener = ({
                    disabled: t,
                    inputKey: r,
                    onKeyPressed: a
                }) => {
                    (0, nt.useEffect)(() => {
                        let handleKeydown = s => {
                            t || s.key !== r || a(s)
                        };
                        return document.addEventListener("keydown", handleKeydown), () => {
                            document.removeEventListener("keydown", handleKeydown)
                        }
                    }, [t, r, a])
                },
                ModalComponent = ({
                    children: t,
                    handleClose: r,
                    withBackdrop: a = !0,
                    zIndex: s,
                    whiteList: l
                }) => {
                    let {
                        view: c
                    } = ViewContext_useViewContext(), d = (null == c ? void 0 : c.type) && "collect-user-data" !== c.type && "update-email" !== c.type && "login-with-email-verification" !== c.type && "verify-email" !== c.type, onBackdropClick = t => {
                        d && (t.stopPropagation(), r(t))
                    };
                    return useKeyboardEventListener({
                        disabled: !d,
                        inputKey: "Escape",
                        onKeyPressed: r
                    }), (0, tb.jsxs)(aJ, {
                        className: "portal__container",
                        whiteList: l,
                        children: [a && (0, tb.jsx)("div", {
                            "data-testid": "portal-backdrop",
                            role: "button",
                            onClick: t => {
                                onBackdropClick(t)
                            },
                            tabIndex: 0,
                            "aria-label": "Close modal",
                            style: {
                                zIndex: s ? s - 2 : void 0
                            },
                            className: "portal__backdrop"
                        }), (0, tb.jsx)("div", {
                            style: {
                                zIndex: s
                            },
                            children: t
                        })]
                    })
                },
                Portal_Portal = ({
                    children: t,
                    isShown: r,
                    handleClose: a,
                    withBackdrop: s,
                    zIndex: l,
                    transitionEvents: c,
                    elementId: d = "dynamic-modal"
                }) => {
                    let u = useElementById_useElementById(d);
                    return (0, nU.createPortal)((0, tb.jsx)(ShadowDOM_ShadowDOM, {
                        zIndex: l,
                        dataTestId: "dynamic-modal-shadow",
                        children: (0, tb.jsx)(rb, Object.assign({
                            isShown: r
                        }, c, {
                            children: (0, tb.jsx)(ModalComponent, {
                                handleClose: a,
                                withBackdrop: s,
                                whiteList: t => u.current.contains(t),
                                children: t
                            })
                        }))
                    }), u.current)
                };
            var aQ = a(88266);
            let shortenWalletAddress_shortenWalletAddress = (t, r = 6, a = 4) => t ? t.replace(t.substring(r, Number(t.length) - a), "...") : "";
            var aX = a(30274);
            let ceil = (t, r = 0) => {
                    let a = Math.pow(10, r);
                    return Math.ceil(t * a) / a
                },
                trimEnd = (t, r = "") => {
                    let a = t.length - 1;
                    for (; a >= 0 && t[a] === r;) a--;
                    return t.slice(0, a + 1)
                },
                formatBigNumber = (t, r = 0) => {
                    let a = (0, aX.d)(t);
                    if (!r) return a;
                    let s = parseFloat(a),
                        l = ceil(s, r).toFixed(r),
                        [c, d] = l.split("."),
                        u = trimEnd(d, "0");
                    return `${c}.${u||"0"}`
                };
            var a0 = ["title", "titleId"];

            function chevron_left_extends() {
                return (chevron_left_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgChevronLeft = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, a0);
                return nt.createElement("svg", chevron_left_extends({
                    width: 20,
                    height: 20,
                    viewBox: "0 0 20 20",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, G || (G = nt.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M13.09 3.577a.833.833 0 0 1 0 1.179L7.844 10l5.244 5.244a.833.833 0 0 1-1.178 1.179l-5.834-5.834a.833.833 0 0 1 0-1.178l5.834-5.834a.833.833 0 0 1 1.178 0Z",
                    fill: "currentcolor"
                })))
            };
            let ModalHeader = ({
                alignContent: t,
                children: r,
                leading: a,
                displayLeading: s = !0,
                trailing: l,
                displayTrailing: c = !0,
                style: d,
                displayBorder: u
            }) => (0, tb.jsxs)("div", {
                className: classNames_classNames("modal-header", {
                    "modal-header--align-content-bottom": "bottom" === t,
                    "modal-header--border": u
                }),
                style: d,
                children: [s && (0, tb.jsx)("div", {
                    className: "modal-header__leading",
                    children: a
                }), r, c && (0, tb.jsx)("div", {
                    className: "modal-header__trailing",
                    children: l
                })]
            });
            var a1 = ["title", "titleId"];

            function dynamic_logo_extends() {
                return (dynamic_logo_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgDynamicLogo = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, a1);
                return nt.createElement("svg", dynamic_logo_extends({
                    fill: "none",
                    viewBox: "0 0 114 21",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, J || (J = nt.createElement("g", {
                    clipPath: "url(#dynamic-logo_svg__a)",
                    fill: "currentColor"
                }, nt.createElement("path", {
                    d: "M10.053 2.002c-.43.4-.85.793-1.273 1.184-1.959 1.818-3.918 3.638-5.879 5.453-.45.417-.915.817-1.48 1.061C.75 9.99.365 9.81.15 9.085-.153 8.072.009 7.128.59 6.258 1.087 5.517 1.71 4.9 2.354 4.3A178.857 178.857 0 0 1 5.45 1.47c.457-.408.957-.78 1.567-.905 1.828-.368 2.994 1.384 3.038 1.436l-.002.001zM1.259 11.254c1.112-.32 1.946-1.026 2.758-1.768 2.59-2.363 5.176-4.728 7.777-7.078A16.823 16.823 0 0 1 13.609.96C14.42.408 15.303.33 16.173.855c.314.189.623.409.878.672a106.565 106.565 0 0 1 5.28 5.866c.298.358.542.774.744 1.196.375.785.279 1.561-.178 2.293-.409.655-.956 1.192-1.52 1.702a699.92 699.92 0 0 1-6.653 5.96c-.6.53-1.26 1.004-1.94 1.422-1.282.791-2.568.693-3.737-.244A16.245 16.245 0 0 1 7.14 17.92c-1.883-2.087-3.73-4.203-5.592-6.31-.094-.106-.18-.22-.29-.358v.002zM39.574.915h2.808V16.14h-2.808v-1.284c-.827 1.06-2.003 1.587-3.526 1.587-1.522 0-2.717-.555-3.755-1.664s-1.556-2.469-1.556-4.078c0-1.609.518-2.968 1.556-4.077s2.288-1.665 3.755-1.665 2.7.53 3.526 1.587V.913v.002zm-5.17 11.996c.573.572 1.294.859 2.166.859s1.589-.287 2.155-.86c.566-.572.849-1.309.849-2.207 0-.898-.283-1.635-.85-2.207-.565-.572-1.283-.859-2.154-.859s-1.593.287-2.166.86c-.574.571-.86 1.308-.86 2.206 0 .898.286 1.635.86 2.208zM51.766 5.264h3.004l-3.968 10.894c-.566 1.554-1.315 2.682-2.251 3.385-.934.704-2.098 1.02-3.489.947v-2.61c.755.015 1.352-.144 1.796-.477.442-.334.796-.87 1.057-1.61L43.453 5.268h3.069l2.837 7.308 2.409-7.308-.002-.002zM61.908 4.959c1.19 0 2.174.398 2.949 1.196.777.798 1.163 1.9 1.163 3.305v6.678h-2.808v-6.33c0-.723-.196-1.279-.588-1.664-.392-.383-.914-.576-1.567-.576-.725 0-1.306.224-1.74.674s-.654 1.124-.654 2.022v5.872h-2.808V5.261h2.808v1.218c.683-1.014 1.763-1.522 3.243-1.522l.002.002zM76.243 5.264h2.808V16.14h-2.808v-1.283c-.842 1.06-2.024 1.587-3.548 1.587s-2.695-.555-3.733-1.665-1.556-2.468-1.556-4.077c0-1.61.518-2.968 1.556-4.078C70 5.514 71.242 4.96 72.695 4.96c1.524 0 2.706.53 3.548 1.587V5.262v.002zm-5.182 7.646c.566.572 1.284.86 2.156.86s1.592-.288 2.166-.86c.573-.572.86-1.309.86-2.207 0-.898-.287-1.635-.86-2.207-.574-.572-1.295-.86-2.166-.86s-1.59.288-2.156.86c-.566.572-.849 1.309-.849 2.207 0 .898.283 1.635.85 2.207zM92.864 4.959c1.249 0 2.246.406 2.993 1.218.748.813 1.121 1.9 1.121 3.263v6.7H94.17V9.637c0-.652-.16-1.16-.48-1.523s-.769-.544-1.35-.544c-.638 0-1.135.211-1.49.631-.356.42-.533 1.03-.533 1.828v6.113h-2.808V9.638c0-.651-.16-1.159-.48-1.522-.32-.363-.77-.544-1.35-.544-.623 0-1.121.21-1.491.631-.37.42-.555 1.03-.555 1.828v6.113h-2.808V5.269h2.808v1.153c.653-.972 1.661-1.457 3.027-1.457 1.365 0 2.321.522 2.96 1.566.724-1.044 1.807-1.566 3.242-1.566l.002-.006zM100.15 3.959c-.464 0-.868-.17-1.208-.511a1.653 1.653 0 0 1-.512-1.207c0-.465.17-.87.512-1.219.34-.348.744-.522 1.208-.522.464 0 .888.174 1.23.522.341.348.511.754.511 1.219 0 .464-.17.866-.511 1.207-.34.34-.751.511-1.23.511zM98.757 16.14V5.265h2.808V16.14h-2.808zM108.69 16.443c-1.641 0-3.008-.55-4.103-1.654-1.095-1.101-1.643-2.464-1.643-4.088s.548-2.987 1.643-4.089 2.464-1.653 4.103-1.653c1.06 0 2.024.253 2.895.76.871.508 1.532 1.19 1.981 2.045l-2.416 1.413a2.464 2.464 0 0 0-.989-1.067 2.878 2.878 0 0 0-1.491-.39c-.842 0-1.539.28-2.091.837-.551.559-.827 1.272-.827 2.142 0 .87.276 1.563.827 2.12.552.56 1.249.837 2.091.837.566 0 1.069-.126 1.513-.381.442-.254.773-.606.99-1.056l2.438 1.393a5.463 5.463 0 0 1-2.024 2.055c-.871.515-1.835.772-2.895.772l-.002.004z"
                }))), Y || (Y = nt.createElement("defs", null, nt.createElement("clipPath", {
                    id: "dynamic-logo_svg__a"
                }, nt.createElement("path", {
                    transform: "translate(0 .5)",
                    fill: "#fff",
                    d: "M0 0h113.61v20H0z"
                })))))
            };
            let DynamicWidgetFooter = ({
                    children: t
                }) => (0, tb.jsx)("div", {
                    className: "dynamic-widget-footer",
                    "data-testid": "dynamic-widget-footer",
                    children: t
                }),
                a2 = {
                    center: "powered-by-dynamic--center",
                    right: "powered-by-dynamic--right"
                },
                PoweredByDynamic = ({
                    align: t = "center",
                    classNameLogo: r,
                    classNameRoot: a,
                    classNameText: s,
                    asFooter: l
                }) => {
                    var c;
                    let {
                        projectSettings: d
                    } = useInternalDynamicContext_useInternalDynamicContext();
                    if ((null === (c = null == d ? void 0 : d.sdk) || void 0 === c ? void 0 : c.displayDynamicMessaging) === !1) return null;
                    let u = (0, tb.jsxs)("a", {
                        target: "_blank",
                        href: "https://dynamic.xyz",
                        className: classNames_classNames("powered-by-dynamic", a2[t], a),
                        rel: "noreferrer",
                        children: [(0, tb.jsx)(Typography_Typography, {
                            as: "span",
                            color: "tertiary",
                            weight: "regular",
                            variant: "body_mini",
                            className: classNames_classNames("powered-by-dynamic__text", s),
                            children: "Powered by"
                        }), (0, tb.jsx)(SvgDynamicLogo, {
                            className: classNames_classNames("powered-by-dynamic__logo", r)
                        })]
                    });
                    return l ? (0, tb.jsx)(DynamicWidgetFooter, {
                        children: u
                    }) : u
                },
                Input = t => {
                    var {
                        className: r = "",
                        id: a,
                        label: s,
                        type: l,
                        onChange: c,
                        onBlur: d,
                        name: u,
                        value: m,
                        optional: p,
                        error: h = !1,
                        disabled: f,
                        message: y,
                        placeholder: b,
                        variant: C = "dense",
                        suffix: E
                    } = t, j = _tslib_rest(t, ["className", "id", "label", "type", "onChange", "onBlur", "name", "value", "optional", "error", "disabled", "message", "placeholder", "variant", "suffix"]);
                    return (0, tb.jsxs)("div", {
                        className: classNames_classNames("input__container", {
                            "input__container--dense": "dense" === C,
                            "input__container--regular": "regular" === C
                        }),
                        children: [(0, tb.jsx)("input", Object.assign({}, j, {
                            name: u,
                            value: m,
                            onChange: c,
                            onBlur: d,
                            type: l,
                            id: a,
                            placeholder: "regular" === C ? b : s,
                            disabled: f,
                            className: classNames_classNames("input", r, {
                                input__error: h,
                                input__has_trailing: p
                            })
                        })), (0, tb.jsx)("label", {
                            htmlFor: a,
                            className: classNames_classNames("input__label"),
                            children: s
                        }), E && (0, tb.jsx)("div", {
                            className: classNames_classNames("input__suffix"),
                            children: E
                        }), p && (0, tb.jsx)("span", {
                            className: "input__trailing",
                            children: "Optional"
                        }), !!y && (0, tb.jsx)(Typography_Typography, {
                            variant: "body_mini",
                            className: classNames_classNames("input__message", {
                                input__message__error: h
                            }),
                            children: y
                        })]
                    })
                },
                getOrdinalNumber = t => t < 1 ? "" : t % 10 == 1 && t % 100 != 11 ? `${t}st` : t % 10 == 2 && t % 100 != 12 ? `${t}nd` : t % 10 == 3 && t % 100 != 13 ? `${t}rd` : `${t}th`,
                a3 = {
                    amount: "",
                    recipient: ""
                },
                getDisplayErrorMessage = (t, r, a, s) => {
                    let l = {
                            amount: {
                                invalidDecimals: r("dyn_send_transaction.validation.amount.invalid_decimals", {
                                    decimals: s
                                }),
                                invalidFormat: r("dyn_send_transaction.validation.amount.invalid_decimals", {
                                    decimals: s
                                }),
                                overBalance: r("dyn_send_transaction.validation.amount.over_balance"),
                                required: r("dyn_send_transaction.validation.amount.required")
                            },
                            recipient: {
                                invalidFormat: r("dyn_send_transaction.validation.recipient.invalid_format"),
                                required: r("dyn_send_transaction.validation.recipient.required")
                            }
                        },
                        c = t[a];
                    if (c) {
                        let t = l[a][c];
                        return t.replace("{decimals}", getOrdinalNumber(null != s ? s : 0))
                    }
                    return ""
                },
                SendBalanceForm = ({
                    initialValues: t,
                    onSubmit: r,
                    balance: a,
                    decimals: s = 18
                }) => {
                    let {
                        t: l
                    } = useTranslation_useTranslation(), c = (0, nt.useMemo)(() => {
                        let t = RegExp(`^\\d*(\\.\\d{1,${s}})?$`);
                        return object_create().shape({
                            amount: string_create().required("required").matches(/^\d*(\.\d+)?$/, "invalidFormat").matches(t, "invalidDecimals").test({
                                message: "overBalance",
                                test: t => {
                                    if (!t || void 0 === a) return !0;
                                    try {
                                        let r = parseFloat(t);
                                        return r < a
                                    } catch (t) {
                                        return !0
                                    }
                                }
                            }),
                            recipient: string_create().required("required").matches(/^0x[0-9a-fA-F]{40}$/, "invalidFormat")
                        })
                    }, [a, s]);
                    return (0, tb.jsx)(Formik, {
                        initialValues: t || a3,
                        validationSchema: c,
                        onSubmit: t => r(t),
                        validateOnChange: !1,
                        validateOnBlur: !1,
                        children: ({
                            errors: t,
                            touched: r
                        }) => (0, tb.jsxs)(r$, {
                            className: "send-balance-form",
                            children: [(0, tb.jsx)(Field, {
                                variant: "regular",
                                className: "send-balance-form__field",
                                name: "amount",
                                label: l("dyn_send_transaction.data.amount.label"),
                                placeholder: l("dyn_send_transaction.data.amount.placeholder"),
                                as: Input,
                                error: t.amount,
                                copykey: "dyn_send_transaction.data.amount.label",
                                message: r.amount && getDisplayErrorMessage(t, l, "amount", s)
                            }), (0, tb.jsx)(Field, {
                                variant: "regular",
                                className: "send-balance-form__field",
                                placeholder: l("dyn_send_transaction.data.recipient.placeholder"),
                                label: l("dyn_send_transaction.data.recipient.label"),
                                id: "recipient",
                                name: "recipient",
                                as: Input,
                                error: t.recipient,
                                copykey: "dyn_send_transaction.data.recipient.label",
                                message: r.recipient && getDisplayErrorMessage(t, l, "recipient")
                            }), (0, tb.jsx)(Button_Button, {
                                dataTestId: "sendBalanceFormSubmitButton",
                                expanded: !0,
                                type: "submit",
                                buttonVariant: "primary",
                                buttonPadding: "medium",
                                buttonClassName: "send-balance-form__button",
                                copykey: "dyn_send_transaction.send_button",
                                children: l("dyn_send_transaction.send_button")
                            })]
                        })
                    })
                },
                Chip = ({
                    children: t,
                    icon: r,
                    className: a
                }) => (0, tb.jsxs)("div", {
                    className: classNames_classNames("chip", a, {
                        "chip__with-icon": !!r
                    }),
                    children: [!!r && (0, tb.jsx)("div", {
                        className: "chip--icon",
                        children: r
                    }), (0, tb.jsx)(Typography_Typography, {
                        variant: "body_small",
                        children: t
                    })]
                }),
                FormFieldLabel = ({
                    children: t,
                    htmlFor: r,
                    className: a,
                    divider: s
                }) => (0, tb.jsx)("label", {
                    className: classNames_classNames("form-field-label", {
                        "form-field-label__with-divider": s
                    }, a),
                    htmlFor: r,
                    children: t
                }),
                replaceAll = (t, r, a) => {
                    let s = RegExp(r, "g");
                    return t.replace(s, a)
                },
                smartFloor = t => Math.floor(ceil(t, 13)),
                roundBalance = (t, r = 4) => {
                    let a = parseFloat(replaceAll(t, '"', ""));
                    if (a > 1e6) {
                        let t = Math.floor(a);
                        return `${Math.floor(t/1e6*1e4)/1e4}M`
                    }
                    if (a > 1e3) return String(Math.floor(a));
                    let s = Math.pow(10, r),
                        l = 1 / s;
                    if (a < l && a > 0) return `< ${l}`;
                    let c = smartFloor(a * s) / s;
                    return 0 === c ? "0.0" : String(c)
                },
                getExportKeysOption = (t, r) => {
                    var a;
                    if (!t || !(null == r ? void 0 : r.length) || !(0, tl.EN)(t)) return;
                    let s = null === (a = r.find(t => t.provider === tu.ml9.MagicLink)) || void 0 === a ? void 0 : a.keyExportUrl;
                    if (s) return () => {
                        window.open(s, "_blank")
                    }
                },
                TokenBalanceCard = ({
                    chainIcon: t,
                    currencySymbol: r,
                    balance: a
                }) => {
                    let {
                        t: s
                    } = useTranslation_useTranslation();
                    return (0, tb.jsxs)("div", {
                        className: "token-balance-card",
                        children: [(0, tb.jsxs)("div", {
                            className: "token-balance-card__chain",
                            children: [!!t && (0, tb.jsx)("div", {
                                className: "token-balance-card__chain__icon",
                                children: t
                            }), (0, tb.jsx)(Typography_Typography, {
                                variant: "body_normal",
                                color: "primary",
                                children: r
                            })]
                        }), void 0 !== a && (0, tb.jsxs)("div", {
                            className: "token-balance-card__balance-container",
                            children: [(0, tb.jsx)(Typography_Typography, {
                                variant: "body_small",
                                color: "tertiary",
                                copykey: "dyn_send_transaction.data.balance.label",
                                children: s("dyn_send_transaction.data.balance.label")
                            }), (0, tb.jsxs)("div", {
                                className: "token-balance-card__balance",
                                children: [(0, tb.jsx)(Typography_Typography, {
                                    variant: "body_small",
                                    color: "secondary",
                                    children: roundBalance(a, 6)
                                }), (0, tb.jsx)(Typography_Typography, {
                                    variant: "body_small",
                                    color: "tertiary",
                                    children: r
                                })]
                            })]
                        })]
                    })
                },
                SendBalancePageLayout = ({
                    error: t,
                    walletAddress: r,
                    onClickClose: a,
                    onClickBack: s,
                    walletKey: l,
                    onSubmit: c,
                    displayPoweredByDynamicFooter: d = !1,
                    balance: u,
                    chain: m,
                    currencySymbol: p,
                    initialValues: h,
                    networkName: f,
                    networkIcon: y,
                    networkCurrencyDecimals: b
                }) => {
                    let {
                        t: C
                    } = useTranslation_useTranslation(), E = a && (0, tb.jsx)(rk, {
                        type: "button",
                        onClick: a,
                        "data-testid": "close-button",
                        children: (0, tb.jsx)(close_SvgClose, {})
                    }), j = s && (0, tb.jsx)(rk, {
                        type: "button",
                        onClick: s,
                        "data-testid": "back-button",
                        children: (0, tb.jsx)(SvgChevronLeft, {})
                    }), I = (0, nt.useMemo)(() => {
                        if (!u) return;
                        let t = parseFloat(u);
                        if (!isNaN(t)) return parseFloat(u)
                    }, [u]);
                    return (0, tb.jsxs)(tb.Fragment, {
                        children: [(0, tb.jsx)(ModalHeader, {
                            leading: j,
                            trailing: E,
                            children: (0, tb.jsxs)("div", {
                                className: "send-balance-page-layout__header-content",
                                children: [(0, tb.jsx)(Typography_Typography, {
                                    variant: "body_normal",
                                    color: "primary",
                                    as: "p",
                                    copykey: "dyn_send_transaction.data.from",
                                    children: C("dyn_send_transaction.data.from")
                                }), l && (0, tb.jsx)(Icon_Icon, {
                                    size: "small",
                                    children: (0, tb.jsx)(tc.o, {
                                        walletKey: l
                                    })
                                }), (0, tb.jsx)(Typography_Typography, {
                                    variant: "body_normal",
                                    color: "primary",
                                    as: "p",
                                    children: shortenWalletAddress_shortenWalletAddress(r, 3, 3)
                                })]
                            })
                        }), (0, tb.jsxs)("div", {
                            className: "send-balance-page-layout__body",
                            children: [(0, tb.jsx)(AnimatePresence, {
                                animationComponent: (0, tb.jsx)(VerticalDrawerTransition, {}),
                                children: t && (0, tb.jsx)("div", {
                                    className: "send-balance-page-layout__error",
                                    children: (0, tb.jsx)(Alert, {
                                        icon: "error",
                                        variant: "error",
                                        children: t
                                    })
                                })
                            }), f && y && (0, tb.jsx)("div", {
                                className: "send-balance-page-layout__network-container",
                                children: (0, tb.jsx)(Chip, {
                                    icon: y,
                                    children: f
                                })
                            }), (0, tb.jsxs)("div", {
                                className: "send-balance-page-layout__balance-container",
                                children: [(0, tb.jsx)(FormFieldLabel, {
                                    divider: !0,
                                    children: "Token"
                                }), (0, tb.jsx)(TokenBalanceCard, {
                                    chainIcon: y,
                                    currencySymbol: p,
                                    balance: u
                                })]
                            }), (0, tb.jsx)(SendBalanceForm, {
                                onSubmit: c,
                                initialValues: h,
                                balance: I,
                                decimals: b
                            }), d && (0, tb.jsx)(PoweredByDynamic, {
                                classNameRoot: "send-balance-page-layout__footer"
                            })]
                        })]
                    })
                },
                useFetchChain = t => {
                    let {
                        data: r
                    } = usePromise_usePromise(() => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        var r;
                        let a = yield t.getNetwork(), {
                            connectedChain: s
                        } = t, l = (0, tl.bt)(s || ""), c = {
                            name: null == l ? void 0 : l.displayName
                        };
                        if (a && t.evmNetworks) {
                            let s = t.evmNetworks.find(t => t.chainId === a);
                            c.name = null !== (r = null == s ? void 0 : s.vanityName) && void 0 !== r ? r : c.name, c.icon = null == s ? void 0 : s.iconUrls[0]
                        }
                        return c
                    }));
                    return [r]
                },
                useFetchCurrency = (t, r) => {
                    let {
                        data: a
                    } = usePromise_usePromise(() => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        var r, a, s, l;
                        let c = yield t.getNetwork(), d = (0, tl.bt)(null !== (r = t.connectedChain) && void 0 !== r ? r : "");
                        if (!c) return null == d ? void 0 : d.symbol;
                        let u = "STARK" === t.connectedChain ? "starknetNetworks" : "evmNetworks",
                            m = null === (a = t[u]) || void 0 === a ? void 0 : a.find(t => t.chainId === c);
                        return null !== (l = null === (s = null == m ? void 0 : m.nativeCurrency) || void 0 === s ? void 0 : s.symbol) && void 0 !== l ? l : null == d ? void 0 : d.symbol
                    }), {
                        deps: [r]
                    });
                    return [a]
                };
            var a5 = ["title", "titleId"];

            function check_extends() {
                return (check_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgCheck = function(t) {
                    var r = t.title,
                        a = t.titleId,
                        s = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = function(t, r) {
                                if (null == t) return {};
                                var a, s, l = {},
                                    c = Object.keys(t);
                                for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                                return l
                            }(t, r);
                            if (Object.getOwnPropertySymbols) {
                                var c = Object.getOwnPropertySymbols(t);
                                for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                            }
                            return l
                        }(t, a5);
                    return nt.createElement("svg", check_extends({
                        width: 14,
                        height: 14,
                        viewBox: "0 0 14 14",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        "aria-labelledby": a
                    }, s), r ? nt.createElement("title", {
                        id: a
                    }, r) : null, Q || (Q = nt.createElement("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M11.496 3.67a.583.583 0 0 1 0 .826l-5.834 5.833a.583.583 0 0 1-.824 0L2.504 7.996a.583.583 0 1 1 .825-.825L5.25 9.09l5.42-5.42a.583.583 0 0 1 .826 0Z",
                        fill: "currentColor"
                    })))
                },
                a4 = ["title", "titleId"];

            function sign_circle_extends() {
                return (sign_circle_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgSignCircle = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, a4);
                return nt.createElement("svg", sign_circle_extends({
                    width: 64,
                    height: 64,
                    viewBox: "0 0 64 64",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, ee || (ee = nt.createElement("circle", {
                    cx: 32,
                    cy: 32,
                    r: 32,
                    fill: "currentColor"
                })), et || (et = nt.createElement("path", {
                    d: "M34.048 17.611a5.5 5.5 0 1 1 7.779 7.779l-.611.61.193.193a4.5 4.5 0 0 1 0 6.364l-3.238 3.239a1.125 1.125 0 0 1-1.592-1.591l3.239-3.239a2.25 2.25 0 0 0 0-3.182l-.193-.193-12.704 12.705a1.123 1.123 0 0 1-.523.296l-9 2.25a1.125 1.125 0 0 1-1.34-1.447l2.812-8.438c.055-.166.148-.316.272-.44l14.906-14.906Zm6.188 1.591a3.25 3.25 0 0 0-4.597 0L20.921 33.92l-2.08 6.242 6.709-1.678 14.686-14.686a3.25 3.25 0 0 0 0-4.596ZM24.925 47.375c-2.779 0-4.967-1.275-6.424-2.49l2.89-.723c1.003.562 2.19.963 3.534.963.912 0 1.853-.369 2.856-1.028 1.005-.66 1.976-1.546 2.956-2.465l.255-.24c.865-.812 1.764-1.658 2.624-2.242.918-.624 2.135-1.191 3.413-.7.844.325 1.393.925 1.78 1.658.362.687.612 1.548.855 2.485.111.427.3.841.515 1.12.105.137.196.214.26.253.055.034.08.034.086.034.274 0 .745-.185 1.417-.643.417-.284.774-.568 1.13-.852.221-.177.443-.354.679-.53.628-.47 1.171-.785 1.57-.986a6.86 6.86 0 0 1 .625-.28l.045-.016.016-.006.006-.002h.003s.002-.002.359 1.065l-.357-1.067a1.125 1.125 0 0 1 .721 2.132l-.008.003a4.59 4.59 0 0 0-.394.178 8.472 8.472 0 0 0-1.238.78c-.132.098-.304.235-.5.391-.409.324-.921.73-1.39 1.05-.7.476-1.67 1.033-2.684 1.033-.98 0-1.69-.595-2.127-1.162-.447-.578-.746-1.29-.912-1.93-.247-.95-.442-1.573-.667-2-.201-.38-.383-.525-.598-.608-.184-.07-.552-.075-1.34.46-.704.48-1.472 1.2-2.38 2.053l-.225.211c-.97.91-2.071 1.922-3.26 2.703-1.19.783-2.566 1.398-4.091 1.398Z",
                    fill: "#fff"
                })))
            };
            let pixelToRem_pixelToRem = t => `${t/16}rem`,
                StatusDot = ({
                    variant: t,
                    containerClassName: r
                }) => (0, tb.jsx)("div", {
                    "data-testid": "status-dot-container",
                    className: classNames_classNames("status-dot__container", r || ""),
                    children: (0, tb.jsx)("div", {
                        "data-testid": "status-dot",
                        className: classNames_classNames("status-dot", `status-dot--${t}`)
                    })
                }),
                IconWithStatus = ({
                    Icon: t,
                    InnerIcon: r,
                    primaryWalletKey: a,
                    containerClassName: s,
                    iconSize: l = 16,
                    variant: c = "green"
                }) => {
                    let d = a ? (0, tb.jsx)("div", {
                        className: "inner-icon__container",
                        children: (0, tb.jsx)("div", {
                            className: classNames_classNames("inner-icon"),
                            children: (0, tb.jsx)(Icon_Icon, {
                                size: "medium",
                                children: (0, tb.jsx)(tc.o, {
                                    walletKey: a
                                })
                            })
                        })
                    }) : (0, tb.jsx)("div", {
                        className: "inner-icon__container",
                        children: (0, tb.jsx)("div", {
                            className: classNames_classNames("inner-icon", `inner-icon--${c}`),
                            children: r && (0, tb.jsx)(r, {})
                        })
                    });
                    return (0, tb.jsxs)("div", {
                        className: classNames_classNames("icon-with-status__container", s || ""),
                        children: ["string" == typeof t ? (0, tb.jsx)("img", {
                            style: {
                                height: pixelToRem_pixelToRem(l),
                                width: pixelToRem_pixelToRem(l)
                            },
                            src: t,
                            alt: "",
                            className: "icon"
                        }) : (0, tb.jsx)(t, {
                            style: {
                                height: pixelToRem_pixelToRem(l),
                                width: pixelToRem_pixelToRem(l)
                            }
                        }), r || a ? d : (0, tb.jsx)(StatusDot, {
                            variant: c,
                            containerClassName: "icon-with-status__status-dot"
                        })]
                    })
                },
                TransactionRow = ({
                    label: t,
                    title: r,
                    children: a,
                    isEmpty: s = !1,
                    isLoading: l = !1,
                    suffix: c,
                    dataTestId: d,
                    icon: u,
                    copykey: m
                }) => (0, tb.jsxs)("div", {
                    className: "transaction-row",
                    children: [(0, tb.jsx)(Typography_Typography, {
                        color: "secondary",
                        variant: "body_normal",
                        weight: "regular",
                        className: "transaction-row__label",
                        copykey: m,
                        children: t
                    }), (0, tb.jsxs)("div", {
                        className: "transaction-row__content",
                        "data-testid": d,
                        children: [l && (0, tb.jsx)(Skeleton, {
                            count: 1,
                            className: "transaction-row__skeleton"
                        }), !1 === l && void 0 !== a && (0, tb.jsxs)(tb.Fragment, {
                            children: [(0, tb.jsx)(Typography_Typography, {
                                title: r,
                                color: s ? "secondary" : "primary",
                                variant: "body_normal",
                                weight: s ? "regular" : "medium",
                                truncate: !0,
                                children: a
                            }), c && (0, tb.jsx)(Typography_Typography, {
                                as: "span",
                                color: "secondary",
                                weight: "regular",
                                children: c
                            }), u]
                        })]
                    })]
                }),
                TransactionStatusLayout = ({
                    destinationAddress: t,
                    amount: r,
                    networkName: a,
                    networkCurrency: s,
                    NetworkIcon: l,
                    onDone: c,
                    displayPoweredByDynamicFooter: d = !0,
                    onClickClose: u
                }) => {
                    let {
                        t: m
                    } = useTranslation_useTranslation(), p = u && (0, tb.jsx)(rk, {
                        type: "button",
                        onClick: u,
                        "data-testid": "close",
                        children: (0, tb.jsx)(close_SvgClose, {})
                    }), h = (0, tb.jsx)("span", {
                        className: "transaction-status-layout__network-icon",
                        children: l
                    });
                    return (0, tb.jsxs)("div", {
                        className: "transaction-status-layout",
                        children: [(0, tb.jsx)(ModalHeader, {
                            trailing: p,
                            alignContent: "bottom",
                            children: (0, tb.jsx)(IconWithStatus, {
                                containerClassName: "transaction-status-layout__status-icon",
                                iconSize: 50,
                                Icon: SvgSignCircle,
                                InnerIcon: SvgCheck
                            })
                        }), (0, tb.jsxs)("div", {
                            className: "transaction-status-layout__body",
                            children: [(0, tb.jsx)(Typography_Typography, {
                                weight: "medium",
                                variant: "title",
                                color: "primary",
                                className: "transaction-status-layout__title",
                                copykey: "dyn_send_transaction.succeeded.title",
                                children: m("dyn_send_transaction.succeeded.title")
                            }), (0, tb.jsx)("div", {
                                className: "transaction-status-layout__content",
                                children: (0, tb.jsxs)("div", {
                                    className: "transaction-status-layout__rows",
                                    children: [(0, tb.jsx)(TransactionRow, {
                                        copykey: "dyn_send_transaction.succeeded.recipient.label",
                                        label: m("dyn_send_transaction.succeeded.recipient.label"),
                                        children: shortenWalletAddress_shortenWalletAddress(t, 3, 3)
                                    }), (0, tb.jsxs)(TransactionRow, {
                                        copykey: "dyn_send_transaction.succeeded.network.label",
                                        label: m("dyn_send_transaction.succeeded.network.label"),
                                        children: [h, (0, tb.jsx)("span", {
                                            className: "transaction-status-layout__network-name",
                                            children: a
                                        })]
                                    }), (0, tb.jsxs)(TransactionRow, {
                                        copykey: "dyn_send_transaction.succeeded.total_amount.label",
                                        label: m("dyn_send_transaction.succeeded.total_amount.label"),
                                        children: [r, (0, tb.jsx)(Typography_Typography, {
                                            as: "span",
                                            color: "secondary",
                                            className: "transaction-status-layout__network-currency",
                                            children: s
                                        })]
                                    })]
                                })
                            }), (0, tb.jsx)("div", {
                                className: "transaction-status-layout__actions",
                                children: (0, tb.jsx)(Button_Button, {
                                    buttonVariant: "primary",
                                    buttonPadding: "large",
                                    expanded: !0,
                                    onClick: c,
                                    loading: !1,
                                    copykey: "dyn_send_transaction.succeeded.continue_button",
                                    children: m("dyn_send_transaction.succeeded.continue_button")
                                })
                            }), d && (0, tb.jsx)(PoweredByDynamic, {
                                classNameRoot: "transaction-status-layout__footer"
                            })]
                        })]
                    })
                };
            var a6 = a(63424),
                a7 = a(17114);
            let getAppOrigin = () => {
                    if ("undefined" != typeof window) return window.location.origin
                },
                useMutation_useMutation = (t, r = {}) => {
                    let [a, s] = (0, nt.useState)({
                        isLoading: !1
                    }), l = (0, nt.useCallback)(a => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        var l, c;
                        let d;
                        s({
                            isLoading: !0
                        });
                        try {
                            let c = t(a);
                            d = c instanceof Promise ? yield c: c, s({
                                data: d,
                                isLoading: !1
                            });
                            try {
                                null === (l = null == r ? void 0 : r.onSuccess) || void 0 === l || l.call(r, d, a)
                            } catch (t) {
                                tl.kg.error(t)
                            }
                            return d
                        } catch (t) {
                            s({
                                error: t,
                                isLoading: !1
                            }), tl.kg.error(t);
                            try {
                                null === (c = null == r ? void 0 : r.onFailure) || void 0 === c || c.call(r, t, a)
                            } catch (t) {
                                tl.kg.error(t)
                            }
                        }
                    }), [t, r]);
                    return Object.assign(Object.assign({}, a), {
                        hasData: !!a.data,
                        hasError: !!a.error,
                        mutate: l
                    })
                },
                Spinner_Spinner = ({
                    className: t = "",
                    size: r = 16,
                    customSpinnerColor: a = ""
                }) => {
                    let {
                        theme: s
                    } = ThemeContext_useThemeContext(), l = a || s.customColor || "#4779FF";
                    return (0, tb.jsxs)("svg", {
                        style: {
                            height: pixelToRem_pixelToRem(r),
                            width: pixelToRem_pixelToRem(r)
                        },
                        viewBox: "0 0 42 42",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        className: t,
                        "data-testid": "spinner",
                        children: [(0, tb.jsx)("mask", {
                            id: "path-1-inside-1_1433_60360",
                            fill: "white",
                            children: (0, tb.jsx)("path", {
                                d: "M40.53 42C41.3419 42 42.0027 41.3416 41.9743 40.5303C41.7987 35.5162 40.726 30.5699 38.8029 25.9273C36.6922 20.8316 33.5985 16.2016 29.6985 12.3015C25.7984 8.40145 21.1684 5.30776 16.0727 3.19706C11.4301 1.27403 6.48384 0.201284 1.46972 0.0257219C0.658363 -0.00268681 0 0.658141 0 1.47C0 2.28186 0.658382 2.93711 1.46967 2.96766C6.09758 3.1419 10.6617 4.138 14.9476 5.91326C19.6866 7.87621 23.9925 10.7534 27.6196 14.3804C31.2467 18.0075 34.1238 22.3134 36.0867 27.0524C37.862 31.3383 38.8581 35.9024 39.0323 40.5303C39.0629 41.3416 39.7181 42 40.53 42Z"
                            })
                        }), (0, tb.jsx)("path", {
                            d: "M40.53 42C41.3419 42 42.0027 41.3416 41.9743 40.5303C41.7987 35.5162 40.726 30.5699 38.8029 25.9273C36.6922 20.8316 33.5985 16.2016 29.6985 12.3015C25.7984 8.40145 21.1684 5.30776 16.0727 3.19706C11.4301 1.27403 6.48384 0.201284 1.46972 0.0257219C0.658363 -0.00268681 0 0.658141 0 1.47C0 2.28186 0.658382 2.93711 1.46967 2.96766C6.09758 3.1419 10.6617 4.138 14.9476 5.91326C19.6866 7.87621 23.9925 10.7534 27.6196 14.3804C31.2467 18.0075 34.1238 22.3134 36.0867 27.0524C37.862 31.3383 38.8581 35.9024 39.0323 40.5303C39.0629 41.3416 39.7181 42 40.53 42Z",
                            stroke: "url(#paint0_linear_1433_60360)",
                            strokeWidth: "4",
                            mask: "url(#path-1-inside-1_1433_60360)"
                        }), (0, tb.jsx)("defs", {
                            children: (0, tb.jsxs)("linearGradient", {
                                id: "paint0_linear_1433_60360",
                                x1: "41",
                                y1: "42",
                                x2: "1.5",
                                y2: "-1.82007e-07",
                                gradientUnits: "userSpaceOnUse",
                                children: [(0, tb.jsx)("stop", {
                                    stopColor: l
                                }), (0, tb.jsx)("stop", {
                                    offset: "1",
                                    stopColor: l,
                                    stopOpacity: "0"
                                })]
                            })
                        })]
                    })
                };
            var a8 = ["title", "titleId"];

            function wallet_connect_logo_extends() {
                return (wallet_connect_logo_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgWalletConnectLogo = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, a8);
                return nt.createElement("svg", wallet_connect_logo_extends({
                    width: 17,
                    height: 12,
                    viewBox: "0 0 17 12",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, en || (en = nt.createElement("path", {
                    d: "M3.84 2.345c2.573-3.127 6.747-3.127 9.32 0l.31.376a.463.463 0 0 1 0 .566l-1.06 1.287a.145.145 0 0 1-.232 0l-.427-.518c-1.795-2.18-4.707-2.18-6.502 0l-.457.555a.145.145 0 0 1-.233 0L3.5 3.324a.463.463 0 0 1 0-.566l.34-.413Zm11.512 2.661.943 1.146a.463.463 0 0 1 0 .566l-4.252 5.165a.29.29 0 0 1-.466 0L8.558 8.217a.073.073 0 0 0-.116 0l-3.018 3.666a.29.29 0 0 1-.466 0L.705 6.718a.463.463 0 0 1 0-.566l.943-1.146a.29.29 0 0 1 .466 0l3.018 3.666c.032.04.085.04.117 0l3.018-3.666a.29.29 0 0 1 .466 0l3.018 3.666c.033.04.085.04.117 0l3.018-3.666a.29.29 0 0 1 .466 0Z",
                    fill: "currentColor"
                })))
            };
            let Indicator = ({
                    indicator: t,
                    iconSize: r
                }) => {
                    let a = {
                            container: 4 * r / 15,
                            icon: 3 * r / 15
                        },
                        s = {
                            container: r / 6,
                            icon: r / 9
                        };
                    return "walletConnect" === t ? (0, tb.jsx)("div", {
                        className: "indicator__wallet-connect",
                        style: {
                            height: pixelToRem_pixelToRem(a.container),
                            width: pixelToRem_pixelToRem(a.container)
                        },
                        children: (0, tb.jsx)(SvgWalletConnectLogo, {
                            style: {
                                height: pixelToRem_pixelToRem(a.icon),
                                width: pixelToRem_pixelToRem(a.icon)
                            }
                        })
                    }) : (0, tb.jsx)("div", {
                        className: "indicator__container indicator__container--connected",
                        style: {
                            height: pixelToRem_pixelToRem(s.container),
                            width: pixelToRem_pixelToRem(s.container)
                        },
                        "data-testid": "connected-indicator",
                        children: (0, tb.jsx)("div", {
                            className: "indicator__icon",
                            style: {
                                height: pixelToRem_pixelToRem(s.icon),
                                width: pixelToRem_pixelToRem(s.icon)
                            }
                        })
                    })
                },
                a9 = 7 / 11,
                IconWithSpinner_IconWithSpinner = ({
                    iconSize: t = 24,
                    Icon: r,
                    isSpinning: a = !1,
                    className: s = "",
                    indicator: l,
                    customSpinnerColor: c,
                    treatAsFunctionComponent: d
                }) => {
                    let u = t * a9,
                        m = t / 2,
                        [p, h] = (0, nt.useState)(0);
                    (0, nt.useEffect)(() => {
                        let t = 0,
                            r = setInterval(() => {
                                h(t), t = t < 360 ? t + 1 : 0
                            }, 1300 / 360);
                        return () => clearInterval(r)
                    }, []);
                    let f = classNames_classNames("icon-with-spinner__container", s);
                    return (0, tb.jsxs)("div", {
                        className: f,
                        style: {
                            height: pixelToRem_pixelToRem(t),
                            width: pixelToRem_pixelToRem(t)
                        },
                        children: [r && (0, tb.jsxs)("div", {
                            style: {
                                height: pixelToRem_pixelToRem(u),
                                width: pixelToRem_pixelToRem(u)
                            },
                            className: "icon-with-spinner__icon-container",
                            children: [d || "function" == typeof r ? (0, tb.jsx)(r, {
                                height: u,
                                width: u
                            }) : r, l && (0, tb.jsx)(Indicator, {
                                indicator: l,
                                iconSize: t
                            })]
                        }), a && !(0, td.XS)() && (0, tb.jsx)("div", {
                            className: "icon-with-spinner__spinner-container",
                            "data-chromatic": "ignore",
                            style: {
                                height: pixelToRem_pixelToRem(t),
                                transform: `rotate(${p}deg)`,
                                width: pixelToRem_pixelToRem(t)
                            },
                            children: (0, tb.jsx)(Spinner_Spinner, {
                                className: "icon-with-spinner__spinner",
                                customSpinnerColor: c,
                                size: m
                            })
                        })]
                    })
                },
                AppOriginTile = ({
                    appLogoUrl: t,
                    appName: r,
                    appOrigin: a
                }) => (0, tb.jsxs)("div", {
                    className: "app-origin-tile",
                    children: [!!r && (0, tb.jsxs)("div", {
                        className: "app-origin-tile__title",
                        children: [!!t && (0, tb.jsx)("img", {
                            alt: "app_logo",
                            src: t,
                            className: "app-origin-tile__logo"
                        }), (0, tb.jsx)(Typography_Typography, {
                            color: "primary",
                            variant: "body_normal",
                            children: r
                        })]
                    }), (0, tb.jsx)(Typography_Typography, {
                        color: "secondary",
                        variant: "body_normal",
                        weight: "regular",
                        children: a
                    })]
                }),
                TransactionConfirmationPageLayout = ({
                    onClickClose: t,
                    isLoading: r,
                    onClickBack: a,
                    copykey: s,
                    title: l,
                    error: c,
                    appOrigin: d,
                    appLogoUrl: u,
                    appName: m,
                    onClickSend: p,
                    disableSendButton: h,
                    displayPoweredByDynamicFooter: f = !1,
                    alert: y,
                    children: b
                }) => {
                    let {
                        t: C
                    } = useTranslation_useTranslation(), {
                        isTurnkeyWallet: E
                    } = useIsTurnkeyWallet(), {
                        setShowAuthFlow: j
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        setView: I
                    } = ViewContext_useViewContext(), {
                        userNeedsCrossDomainPasskey: O
                    } = usePasskeyContext(), {
                        initPasskeyRecoveryProcess: P,
                        shouldInitRecovery: R
                    } = usePasskeyRecovery_usePasskeyRecovery(), F = t && (0, tb.jsx)(rk, {
                        type: "button",
                        onClick: t,
                        "data-testid": "close",
                        disabled: r,
                        children: (0, tb.jsx)(close_SvgClose, {})
                    }), W = a && (0, tb.jsx)(rk, {
                        type: "button",
                        onClick: a,
                        "data-testid": "back-button",
                        children: (0, tb.jsx)(SvgChevronLeft, {})
                    });
                    return (0, tb.jsxs)(tb.Fragment, {
                        children: [(0, tb.jsx)(ModalHeader, {
                            trailing: F,
                            leading: W,
                            alignContent: "bottom",
                            children: (0, tb.jsx)(IconWithSpinner_IconWithSpinner, {
                                Icon: t => (0, tb.jsx)(Icon_Icon, {
                                    color: "brand-primary",
                                    children: (0, tb.jsx)(SvgSignCircle, Object.assign({}, t))
                                }),
                                iconSize: 64,
                                isSpinning: !0
                            })
                        }), (0, tb.jsx)(PasskeyCreatedSuccessBanner, {}), (0, tb.jsxs)("div", {
                            className: "transaction-confirmation__body",
                            children: [(0, tb.jsx)(Typography_Typography, {
                                variant: "title",
                                color: "primary",
                                className: "transaction-confirmation__title",
                                copykey: s,
                                children: l
                            }), (0, tb.jsx)(AnimatePresence, {
                                animationComponent: (0, tb.jsx)(VerticalDrawerTransition, {}),
                                children: c && (0, tb.jsx)("div", {
                                    className: "transaction-confirmation__error",
                                    children: (0, tb.jsx)(Alert, {
                                        icon: "error",
                                        variant: "error",
                                        children: c
                                    })
                                })
                            }), (0, tb.jsxs)("div", {
                                className: "transaction-confirmation__content",
                                children: [(0, tb.jsx)("div", {
                                    className: "transaction-confirmation__app-origin-tile",
                                    children: (0, tb.jsx)(AppOriginTile, {
                                        appLogoUrl: u,
                                        appName: m,
                                        appOrigin: d
                                    })
                                }), (0, tb.jsx)("div", {
                                    className: "transaction-confirmation__rows",
                                    children: b
                                })]
                            }), (0, tb.jsx)(AnimatePresence, {
                                animationComponent: (0, tb.jsx)(VerticalDrawerTransition, {}),
                                children: y && (0, tb.jsx)("div", {
                                    className: "transaction-confirmation__warning",
                                    children: y
                                })
                            }), (0, tb.jsxs)("div", {
                                className: "transaction-confirmation__actions",
                                children: [t && (0, tb.jsx)(Button_Button, {
                                    buttonVariant: "secondary",
                                    onClick: t,
                                    expanded: !0,
                                    buttonPadding: "large",
                                    disabled: r,
                                    copykey: "dyn_send_transaction.confirmation.cancel_button",
                                    children: C("dyn_send_transaction.confirmation.cancel_button")
                                }), (0, tb.jsx)(Button_Button, {
                                    buttonVariant: "primary",
                                    buttonPadding: "large",
                                    onClick: t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                                        if ((yield R()) && (yield P("email", "sendTransaction")), E && O) {
                                            I("passkey-new-domain-detected"), j(!0, {
                                                ignoreIfIsEmbeddedWidget: !1,
                                                performMultiWalletChecks: !1
                                            }), nr.once("passkeyRecoveryCompleted", () => {
                                                p(t)
                                            });
                                            return
                                        }
                                        p(t)
                                    }),
                                    expanded: !0,
                                    loading: r,
                                    disabled: h,
                                    copykey: "dyn_send_transaction.confirmation.confirm_button",
                                    children: C("dyn_send_transaction.confirmation.confirm_button")
                                })]
                            }), f && (0, tb.jsx)(PoweredByDynamic, {
                                classNameRoot: "transaction-confirmation__footer"
                            })]
                        })]
                    })
                },
                useTransactionEstimatedGas = (t, r) => usePromise_usePromise(() => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    let {
                        from: a
                    } = r, s = _tslib_rest(r, ["from"]);
                    return t.estimateGas(Object.assign(Object.assign({}, s), {
                        account: a
                    }))
                }), {
                    deps: [r]
                }),
                useEstimateL1Fee = (t, r) => {
                    var a;
                    let [s, l] = (0, nt.useState)(0), c = usePromise_usePromise(() => (0, au.mw)(t, r), {
                        deps: [s, r],
                        enabled: (0, au.FD)((null === (a = t.chain) || void 0 === a ? void 0 : a.id) || 0)
                    });
                    return useInterval(() => {
                        l(t => t + 1)
                    }, 2e4), c
                },
                useTransactionGas = ({
                    provider: t,
                    transaction: r
                }) => {
                    let {
                        data: a
                    } = useEstimateL1Fee(t, r), {
                        data: s,
                        isLoading: l
                    } = useTransactionEstimatedGas(t, r), c = (0, nt.useMemo)(() => {
                        let {
                            maxFeePerGas: t,
                            gasPrice: a
                        } = r;
                        return a || t || void 0
                    }, [r]), d = (0, nt.useMemo)(() => {
                        let t = c && s ? c * s : void 0;
                        return a && t ? t + a : t
                    }, [c, s, a]), u = !!s && !r.gasPrice;
                    return {
                        gasTotalPrice: d,
                        isGasEstimated: u,
                        isLoading: l
                    }
                },
                useTransactionTotal = ({
                    transactionValue: t,
                    gasTotalPrice: r,
                    isGasSponsored: a = !1
                }) => (0, nt.useMemo)(() => a ? void 0 !== t ? t : BigInt(0) : void 0 !== r && void 0 !== t ? r + t : t || r, [r, t, a]),
                TransactionConfirmationView = ({
                    transaction: t,
                    mutation: r,
                    onError: a,
                    onSuccess: s,
                    onClickBack: l,
                    onClickClose: c,
                    title: d,
                    displayPoweredByDynamicFooter: u = !1,
                    provider: m,
                    copykey: p
                }) => {
                    let {
                        appName: h,
                        appLogoUrl: f,
                        primaryWallet: y
                    } = useInternalDynamicContext_useInternalDynamicContext(), b = getAppOrigin(), [C, E] = (0, nt.useState)(!1), {
                        t: j
                    } = useTranslation_useTranslation();
                    if (!y) throw new td.kW("Primary wallet is not available, transaction cannot be displayed");
                    let [I] = useFetchCurrency(y.connector), {
                        data: O
                    } = usePromise_usePromise(() => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        let t = yield y.connector.getBalance();
                        return t ? (0, aQ.f)(t) : void 0
                    })), {
                        isLoading: P,
                        data: R
                    } = usePromise_usePromise(() => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        if (!(0, tl.nM)(y.connector)) return !1;
                        let r = yield y.connector.canSponsorTransactionGas(t);
                        return null != r && r
                    }), {
                        onReject: t => {
                            tv.error(t)
                        },
                        onResolve: t => {
                            let {
                                connector: r
                            } = y;
                            E(t), !t && (0, tl.nM)(r) && r.disableGasSponsorshipOnce()
                        }
                    }), {
                        mutate: F,
                        isLoading: W,
                        error: M
                    } = useMutation_useMutation(() => r(), {
                        onFailure: t => {
                            if (td.k4.isInstance(t)) {
                                tv.debug(t), E(!1);
                                let {
                                    connector: r
                                } = y;
                                (0, tl.nM)(r) && r.disableGasSponsorshipOnce()
                            }
                            tv.error(t), null == a || a(t)
                        },
                        onSuccess: t => null == s ? void 0 : s(t)
                    }), {
                        isLoading: D,
                        gasTotalPrice: L,
                        isGasEstimated: U
                    } = useTransactionGas({
                        provider: m,
                        transaction: t
                    }), {
                        data: B,
                        isLoading: $
                    } = usePromise_usePromise(() => {
                        var r;
                        return null === (r = t.to) || void 0 === r ? void 0 : r.toString()
                    }), {
                        data: K,
                        isLoading: G
                    } = usePromise_usePromise(() => t.from), {
                        data: J,
                        isLoading: Y
                    } = usePromise_usePromise(() => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        let r = yield t.value;
                        return (0, a6.v)(r) ? (0, a7.y_)(r) : r || void 0
                    })), Q = useTransactionTotal({
                        gasTotalPrice: L,
                        isGasSponsored: C,
                        transactionValue: J
                    }), ee = Y || !R && D || $ || G || P, [et] = useFetchChain(y.connector), en = (null == et ? void 0 : et.name) || y.chain, er = getChainIcon_getChainIcon(en), ea = (0, tb.jsx)(Icon_Icon, {
                        size: "small",
                        children: (null == et ? void 0 : et.icon) ? (0, tb.jsx)("img", {
                            src: et.icon,
                            alt: `${et.name} icon`
                        }) : (0, tb.jsx)(er, {})
                    }), ei = M && transactionErrorMessage(M), eo = (0, nt.useMemo)(() => {
                        if (void 0 !== O && void 0 !== Q) return Q - O
                    }, [O, Q]), es = (0, nt.useMemo)(() => void 0 !== O && void 0 !== Q && Q > O, [O, Q]), el = (0, nt.useMemo)(() => {
                        if (ee || ei) return null;
                        if (td.k4.isInstance(M)) return (0, tb.jsx)(Alert, {
                            icon: "error",
                            variant: "error",
                            copykey: "dyn_send_transaction.error_message.gas_not_sponsored",
                            children: j("dyn_send_transaction.error_message.gas_not_sponsored")
                        });
                        let t = es && eo;
                        if (!t) return;
                        let r = formatBigNumber(eo, 5);
                        return (0, tb.jsx)(Alert, {
                            icon: "error",
                            variant: "warning",
                            contentDataTestId: "warning_content",
                            copykey: "dyn_send_transaction.warning_message.insufficient_funds",
                            children: j("dyn_send_transaction.warning_message.insufficient_funds", {
                                amountLeft: r,
                                currencySymbol: I
                            })
                        })
                    }, [I, es, eo, j, M, ee, ei]);
                    return (0, tb.jsxs)(TransactionConfirmationPageLayout, {
                        onClickBack: l,
                        onClickClose: c,
                        copykey: p,
                        title: d,
                        appOrigin: b,
                        appName: h,
                        appLogoUrl: f,
                        isLoading: W,
                        onClickSend: () => F(),
                        displayPoweredByDynamicFooter: u,
                        disableSendButton: ee || es,
                        error: ei,
                        alert: el,
                        children: [(0, tb.jsx)(TransactionRow, {
                            copykey: "dyn_send_transaction.confirmation.data.from",
                            label: j("dyn_send_transaction.confirmation.data.from"),
                            isLoading: G,
                            title: K,
                            children: shortenWalletAddress_shortenWalletAddress(K, 4, 4)
                        }), (0, tb.jsx)(TransactionRow, {
                            copykey: "dyn_send_transaction.confirmation.data.to",
                            label: j("dyn_send_transaction.confirmation.data.to"),
                            isLoading: $,
                            title: B,
                            children: B && shortenWalletAddress_shortenWalletAddress(B, 4, 4)
                        }), (0, tb.jsx)(TransactionRow, {
                            copykey: "dyn_send_transaction.confirmation.data.amount",
                            label: j("dyn_send_transaction.confirmation.data.amount"),
                            isLoading: Y,
                            isEmpty: !J,
                            title: J ? formatBigNumber(J) : void 0,
                            suffix: I,
                            icon: ea,
                            dataTestId: "transaction-amount",
                            children: J ? formatBigNumber(J, 10) : 0
                        }), !C && (0, tb.jsxs)(tb.Fragment, {
                            children: [(0, tb.jsx)(TransactionRow, {
                                copykey: U ? "dyn_send_transaction.confirmation.data.gas_estimate" : "dyn_send_transaction.confirmation.data.gas",
                                label: U ? j("dyn_send_transaction.confirmation.data.gas_estimate") : j("dyn_send_transaction.confirmation.data.gas"),
                                isEmpty: !L,
                                isLoading: D || P,
                                title: L ? formatBigNumber(L) : void 0,
                                suffix: L ? I : void 0,
                                icon: L ? ea : void 0,
                                dataTestId: U ? "transaction-estimated-gas-fee" : "transaction-gas-fee",
                                children: L ? formatBigNumber(L, 10) : "--"
                            }), (0, tb.jsx)(TransactionRow, {
                                copykey: "dyn_send_transaction.confirmation.data.total",
                                label: j("dyn_send_transaction.confirmation.data.total"),
                                isEmpty: !Q,
                                title: Q ? formatBigNumber(Q) : void 0,
                                suffix: Q ? I : void 0,
                                icon: Q ? ea : void 0,
                                dataTestId: "transaction-total",
                                children: Q ? formatBigNumber(Q, 10) : j("dyn_send_transaction.confirmation.not_applied")
                            })]
                        })]
                    })
                },
                TransactionStage = t => {
                    var {
                        transaction: r,
                        provider: a,
                        mutation: s
                    } = t, l = _tslib_rest(t, ["transaction", "provider", "mutation"]);
                    let {
                        primaryWallet: c
                    } = useInternalDynamicContext_useInternalDynamicContext(), d = useTransactionWithGasPrice({
                        enabled: !(0, tl.nM)(null == c ? void 0 : c.connector),
                        provider: a,
                        transaction: r
                    });
                    return (0, tb.jsx)(TransactionConfirmationView, Object.assign({
                        provider: a,
                        transaction: d,
                        mutation: () => s(d)
                    }, l))
                },
                SendBalanceView = ({
                    initialRecipientAddress: t = "",
                    initialValue: r,
                    onClickBack: a,
                    onClickClose: s,
                    onError: l,
                    onSuccess: c,
                    onDone: d,
                    displayPoweredByDynamicFooter: u = !1
                }) => {
                    let [m, p] = (0, nt.useState)("form"), {
                        primaryWallet: h,
                        network: f,
                        walletUiUtils: y
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        t: b
                    } = useTranslation_useTranslation(), [C, E] = (0, nt.useState)(null != r ? r : null), [j, I] = (0, nt.useState)(t), O = (0, nt.useRef)(null);
                    if (!h) throw new td.kW("Primary wallet is not available, send balance cannot be displayed");
                    let P = h.connector,
                        {
                            data: R
                        } = usePromise_usePromise(() => P.getBalance(), {
                            deps: [P]
                        }),
                        {
                            data: F
                        } = usePromise_usePromise(() => h.connector.getPublicClient()),
                        W = P && P.evmNetworks || [],
                        M = W.find(t => t.chainId === f),
                        D = M && (0, tb.jsx)("img", {
                            src: null == M ? void 0 : M.iconUrls[0],
                            alt: `${null==M?void 0:M.name} icon`
                        }),
                        L = (null == M ? void 0 : M.vanityName) || (null == M ? void 0 : M.name),
                        U = null == M ? void 0 : M.nativeCurrency.decimals,
                        [B] = useFetchChain(h.connector),
                        $ = (null == B ? void 0 : B.name) || h.chain,
                        K = getChainIcon_getChainIcon($),
                        G = (0, tb.jsx)(Icon_Icon, {
                            size: "small",
                            children: (null == B ? void 0 : B.icon) ? (0, tb.jsx)("img", {
                                src: B.icon,
                                alt: `${B.name} icon`
                            }) : (0, tb.jsx)(K, {})
                        }),
                        [J = ""] = useFetchCurrency(h.connector),
                        buildFormStage = () => (0, tb.jsx)(SendBalancePageLayout, {
                            initialValues: {
                                amount: null === C ? "" : formatBigNumber(C),
                                recipient: j
                            },
                            balance: R,
                            onClickBack: a,
                            chain: h.chain,
                            networkName: L,
                            networkIcon: D,
                            networkCurrencyDecimals: U,
                            currencySymbol: J,
                            isLoading: !1,
                            walletAddress: shortenWalletAddress_shortenWalletAddress(h.address, 3, 3),
                            walletKey: h.connector.key,
                            onClickClose: s,
                            displayPoweredByDynamicFooter: u,
                            onSubmit: t => {
                                E((0, aQ.f)(t.amount, "wei")), I(t.recipient), p("confirmation")
                            }
                        }),
                        buildTransactionStage = () => {
                            if (!F || null === C) return null;
                            let t = {
                                from: h.address,
                                to: j,
                                value: C
                            };
                            return (0, tb.jsx)(TransactionStage, {
                                provider: F,
                                transaction: t,
                                copykey: "dyn_send_transaction.confirmation.title",
                                title: b("dyn_send_transaction.confirmation.title"),
                                onClickBack: () => p("form"),
                                onError: l,
                                displayPoweredByDynamicFooter: u,
                                mutation: ({
                                    maxFeePerGas: r,
                                    maxPriorityFeePerGas: a
                                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                                    y.disabledConfirmationOnce();
                                    let s = yield P.getWalletClient(), l = yield s.sendTransaction({
                                        account: s.account || h.address,
                                        chain: null,
                                        maxFeePerGas: r,
                                        maxPriorityFeePerGas: a,
                                        to: t.to,
                                        value: t.value
                                    });
                                    return l
                                }),
                                onSuccess: t => {
                                    O.current = t, p("success"), null == c || c(O.current)
                                }
                            })
                        },
                        buildSuccessState = () => null === C ? null : (0, tb.jsx)(TransactionStatusLayout, {
                            amount: formatBigNumber(C),
                            destinationAddress: j,
                            networkCurrency: J,
                            networkName: $ || "",
                            NetworkIcon: G,
                            onClickClose: s,
                            onDone: () => null == d ? void 0 : d(),
                            displayPoweredByDynamicFooter: u
                        });
                    return (() => {
                        switch (m) {
                            case "form":
                                return buildFormStage();
                            case "confirmation":
                                return buildTransactionStage();
                            case "success":
                                return buildSuccessState()
                        }
                    })()
                },
                SendBalanceModal = ({
                    initialRecipientAddress: t,
                    initialValue: r,
                    onReject: a,
                    onSuccess: s
                }) => {
                    usePreventPageScroll(!0);
                    let [l, c] = (0, nt.useState)(!0), d = (0, nt.useRef)(null), u = (0, nt.useRef)(null), m = (0, nt.useCallback)(() => {
                        if (u.current) {
                            s(u.current);
                            return
                        }
                        a(d.current || Error("user rejected transaction"))
                    }, [a, s]), closeModal = () => {
                        c(!1)
                    };
                    return (0, tb.jsx)(Portal_Portal, {
                        handleClose: closeModal,
                        isShown: l,
                        zIndex: 2147483645,
                        withBackdrop: !0,
                        elementId: "dynamic-send-balance",
                        transitionEvents: {
                            onUnmount: m
                        },
                        children: (0, tb.jsx)(Modal_Modal, {
                            children: (0, tb.jsx)(ModalCard_ModalCard, {
                                children: (0, tb.jsx)(VerticalDrawerTransition, {
                                    isShown: !0,
                                    children: (0, tb.jsx)(SendBalanceView, {
                                        initialRecipientAddress: t,
                                        initialValue: r,
                                        onError: t => d.current = t,
                                        onClickClose: closeModal,
                                        onDone: closeModal,
                                        displayPoweredByDynamicFooter: !0,
                                        onSuccess: t => {
                                            d.current = null, u.current = t
                                        }
                                    })
                                })
                            })
                        })
                    })
                },
                ie = new td.kW("No wallet connected"),
                it = new td.kW("Primary wallet must use embedded wallet"),
                ir = (0, nt.createContext)(void 0),
                SendBalanceContextProvider = ({
                    children: t
                }) => {
                    let {
                        primaryWallet: r
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        open: a,
                        modal: s
                    } = useConfirmationModal({
                        elementId: "dynamic-send-balance"
                    }), l = (0, nt.useCallback)(t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        return a((a, s) => {
                            if (!r) throw ie;
                            if (!(0, tl.MQ)(r.connector)) throw it;
                            return (0, tb.jsx)(SendBalanceModal, {
                                onReject: s,
                                onSuccess: a,
                                initialRecipientAddress: null == t ? void 0 : t.recipientAddress,
                                initialValue: null == t ? void 0 : t.value
                            })
                        })
                    }), [a, r]);
                    return (0, tb.jsxs)(ir.Provider, {
                        value: {
                            open: l
                        },
                        children: [s, t]
                    })
                },
                useSendBalance = () => {
                    let t = (0, nt.useContext)(ir);
                    if (void 0 === t) throw Error("usage of useSendBalance not wrapped in `SendBalanceContextProvider`.");
                    let r = (0, nt.useContext)(ih);
                    if (void 0 === r) throw Error("usage of useSendBalance not wrapped in `PasskeyContextProvider`.");
                    return t
                },
                isTestnet = t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    var r, a;
                    return null != t && !!t.connector && ((null === (a = null === (r = yield t.connector.getPublicClient()) || void 0 === r ? void 0 : r.chain) || void 0 === a ? void 0 : a.testnet) || !1)
                });
            var ia = ["title", "titleId"];

            function embedded_wallet_icon_extends() {
                return (embedded_wallet_icon_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgEmbeddedWalletIcon = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, ia);
                return nt.createElement("svg", embedded_wallet_icon_extends({
                    width: 28,
                    height: 28,
                    viewBox: "0 0 28 28",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, er || (er = nt.createElement("path", {
                    d: "M17.5 2.333a2.333 2.333 0 0 1 2.334 2.334h-14a4.654 4.654 0 0 0-3.426 1.497A4.668 4.668 0 0 1 7 2.334h10.5ZM25.666 11.667A4.667 4.667 0 0 0 21 7H7a4.667 4.667 0 0 0-4.667 4.667V21A4.667 4.667 0 0 0 7 25.667h14A4.667 4.667 0 0 0 25.666 21v-9.333Z",
                    fill: "#4779FF"
                })))
            };
            let useMediaQuery = t => {
                    let getMatches = t => "undefined" != typeof window && window.matchMedia(t).matches,
                        [r, a] = (0, nt.useState)(getMatches(t)),
                        handleChange = () => a(getMatches(t));
                    return (0, nt.useEffect)(() => {
                        let r = window.matchMedia(t);
                        return handleChange(), r.addEventListener("change", handleChange), () => {
                            r.removeEventListener("change", handleChange)
                        }
                    }, [t]), r
                },
                useColorSchemePreference = () => {
                    let t = useMediaQuery("(prefers-color-scheme: dark)");
                    return t ? "dark" : "light"
                },
                useIconThemeVariant = () => {
                    let {
                        theme: {
                            theme: {
                                name: t
                            }
                        }
                    } = ThemeContext_useThemeContext(), r = useColorSchemePreference();
                    return "auto" === t ? r : t
                },
                useFindSocialIcon = () => {
                    let t = useIconThemeVariant();
                    return (0, nt.useCallback)(r => findSocialIcon(r, t), [t])
                },
                WalletIconWithStatus = ({
                    iconSize: t = 24,
                    walletKey: r,
                    connected: a,
                    variant: s = "primary"
                }) => (0, tb.jsxs)("div", {
                    className: "wallet-icon-with-status__container",
                    children: [(0, tb.jsx)(tc.o, {
                        walletKey: r,
                        style: {
                            height: pixelToRem_pixelToRem(t),
                            width: pixelToRem_pixelToRem(t)
                        }
                    }, r), (0, tb.jsx)("div", {
                        "data-testid": "status-dot-container",
                        className: classNames_classNames("wallet-icon-with-status__dot-container", "secondary" === s ? "wallet-icon-with-status__dot-container--secondary" : ""),
                        children: (0, tb.jsx)(StatusDot, {
                            variant: a ? "green" : "red"
                        })
                    })]
                }),
                WalletIconWithNetwork = ({
                    iconSize: t = 24,
                    chainName: r,
                    Icon: a,
                    showNetwork: s = !0
                }) => {
                    let l = r ? getChainIcon_getChainIcon(r) : void 0;
                    return (0, tb.jsxs)("div", {
                        className: "wallet-icon-with-network__container",
                        children: [(0, tb.jsx)(a, {
                            style: {
                                height: pixelToRem_pixelToRem(t),
                                width: pixelToRem_pixelToRem(t)
                            }
                        }), l && s && (0, tb.jsx)("div", {
                            "data-testid": "network-container",
                            className: classNames_classNames("wallet-icon-with-network__network-container"),
                            children: (0, tb.jsx)(l, {})
                        })]
                    })
                },
                getMagicEmailOrSocialIcon = ({
                    findSocialIcon: t,
                    wallet: r,
                    jwt: a
                }) => {
                    if ((0, tl.EZ)(r.connector)) return tF;
                    if ((0, tl.be)(r.connector)) {
                        let s = getReferencedAccount_getReferencedAccount(a, r.id);
                        if (!s || !s.oauthProvider) return tF;
                        let {
                            oauthProvider: l
                        } = s;
                        try {
                            let r = t(l);
                            return r
                        } catch (t) {
                            tv.error(t)
                        }
                    }
                    return (0, tl.MQ)(r.connector) || (0, tl.R9)(r.connector) ? SvgEmbeddedWalletIcon : null
                },
                AuthProviderIcon_AuthProviderIcon = ({
                    jwt: t,
                    iconSize: r = 64,
                    showStatus: a,
                    wallet: s
                }) => {
                    var l, c;
                    let {
                        primaryWallet: d,
                        selectedWalletConnector: u
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        deniedOauthProvider: m,
                        deniedAddress: p
                    } = useAccessDeniedContext(), h = useFindSocialIcon();
                    if (m) {
                        let t = h(m);
                        return t ? (0, tb.jsx)(t, {
                            style: {
                                height: pixelToRem_pixelToRem(r),
                                width: pixelToRem_pixelToRem(r)
                            }
                        }) : null
                    }
                    if (p) return (0, tb.jsx)(tc.o, {
                        walletKey: null == u ? void 0 : u.key,
                        style: {
                            height: pixelToRem_pixelToRem(r),
                            width: pixelToRem_pixelToRem(r)
                        }
                    });
                    let f = s || d;
                    if (!f) return null;
                    let y = getMagicEmailOrSocialIcon({
                            findSocialIcon: h,
                            jwt: t,
                            wallet: f
                        }),
                        b = null === (c = null === (l = null == f ? void 0 : f.connector) || void 0 === l ? void 0 : l.key) || void 0 === c ? void 0 : c.startsWith("turnkey");
                    if (b && y) {
                        let t = null == f ? void 0 : f.chain,
                            s = nl[t];
                        return (0, tb.jsx)(WalletIconWithNetwork, {
                            iconSize: r,
                            Icon: y,
                            chainName: s,
                            showNetwork: a
                        })
                    }
                    return y ? a ? (0, tb.jsx)(IconWithStatus, {
                        iconSize: r,
                        Icon: y,
                        variant: f.connected ? "green" : "red"
                    }) : (0, tb.jsx)(y, {
                        style: {
                            height: pixelToRem_pixelToRem(r),
                            width: pixelToRem_pixelToRem(r)
                        }
                    }) : a ? (0, tb.jsx)(WalletIconWithStatus, {
                        iconSize: r,
                        walletKey: f.connector.key,
                        connected: f.connected,
                        variant: "secondary"
                    }) : (0, tb.jsx)(tc.o, {
                        walletKey: f.connector.key,
                        style: {
                            height: pixelToRem_pixelToRem(r),
                            width: pixelToRem_pixelToRem(r)
                        }
                    })
                },
                isNetworkUnsupported = (t, r) => !(null == r ? void 0 : r.find(r => t && r.chainId === (0, td.DQ)(t))),
                OverlayCard = ({
                    isOpen: t,
                    children: r,
                    onClickOverlay: a,
                    style: s,
                    className: l
                }) => {
                    let c = (0, nt.useContext)(r4);
                    usePreventPageScroll(t && !c.portal);
                    let d = (0, tb.jsxs)("div", {
                        children: [(0, tb.jsx)(AnimatePresence, {
                            animationComponent: (0, tb.jsx)(rb, {}),
                            children: t && (0, tb.jsx)("div", {
                                onClick: a,
                                className: "overlay-card--overlay"
                            })
                        }), (0, tb.jsx)(AnimatePresence, {
                            animationComponent: (0, tb.jsx)(rg, {}),
                            children: t && (0, tb.jsx)(AnimatePresence, {
                                animationComponent: (0, tb.jsx)(rb, {}),
                                children: t && (0, tb.jsx)("div", {
                                    className: classNames_classNames(l, "overlay-card--content"),
                                    style: s,
                                    children: r
                                })
                            })
                        })]
                    });
                    return (null == c ? void 0 : c.portal) ? (0, nU.createPortal)(d, c.portal) : (0, nU.createPortal)((0, tb.jsx)(ShadowDOM_ShadowDOM, {
                        children: d
                    }), document.body)
                },
                MenuList = ({
                    isOpen: t,
                    onClickClose: r,
                    popperProps: a,
                    dropdownClassName: s,
                    dropdownStyle: l,
                    overlayCardClassName: c,
                    overlayCardStyle: d,
                    className: u,
                    style: m,
                    children: p,
                    mobileTitle: h
                }) => {
                    let f = (0, tb.jsx)(rk, {
                        onClick: r,
                        type: "button",
                        children: (0, tb.jsx)(close_SvgClose, {})
                    });
                    return (0, td.tq)() ? (0, tb.jsxs)(OverlayCard, {
                        isOpen: t,
                        onClickOverlay: r,
                        className: classNames_classNames(c, u),
                        style: Object.assign(Object.assign({}, m), d),
                        children: [(0, tb.jsx)(ModalHeader, {
                            trailing: f,
                            children: (0, tb.jsx)(Typography_Typography, {
                                as: "h1",
                                variant: "title",
                                color: "primary",
                                children: h
                            })
                        }), (0, tb.jsx)("div", {
                            className: "menu-list__overlay-card__container",
                            children: p
                        })]
                    }) : (0, tb.jsx)(iy, Object.assign({
                        isOpen: t,
                        onClickOutside: r,
                        onScroll: r,
                        className: classNames_classNames(s, u),
                        style: Object.assign(Object.assign({}, m), l)
                    }, a, {
                        children: p
                    }))
                },
                Network = ({
                    iconUrl: t,
                    isActive: r,
                    networkName: a,
                    className: s,
                    checkboxClassName: l = "",
                    isChanging: c,
                    notSupported: d = !1
                }) => (0, tb.jsxs)("div", {
                    className: classNames_classNames("network", s, {
                        "network--not-supported": d
                    }),
                    children: [(0, tb.jsxs)("div", {
                        className: "network__container",
                        children: [t ? (0, tb.jsx)("img", {
                            src: t,
                            className: "network__title-icon",
                            alt: `${a} icon`
                        }) : (0, tb.jsx)(SvgError, {}), (0, tb.jsxs)("div", {
                            className: "network__title-container",
                            children: [(0, tb.jsx)(Typography_Typography, {
                                variant: "button_primary",
                                className: "network__title-copy",
                                as: "span",
                                weight: "medium",
                                color: d ? "secondary" : "primary",
                                children: a
                            }), d && (0, tb.jsx)(Typography_Typography, {
                                variant: "body_mini",
                                className: "network__title-copy",
                                as: "span",
                                weight: "medium",
                                color: d ? "secondary" : "primary",
                                "data-testid": "network-not-supported",
                                children: "Switch network in your wallet"
                            })]
                        })]
                    }), (0, tb.jsxs)("div", {
                        className: classNames_classNames("network__status-container", {
                            "network__status-container--active": r
                        }, l),
                        "data-testid": "single-network-checkbox",
                        children: [r && (0, tb.jsx)(SvgCheck, {
                            className: "network__status-icon"
                        }), c && (0, tb.jsx)(Spinner_Spinner, {
                            className: "network__status-spinner-icon",
                            size: 12
                        })]
                    })]
                }),
                NetworkAction = ({
                    iconUrl: t,
                    networkId: r,
                    network: a,
                    onClick: s,
                    networkName: l,
                    checkboxClassName: c = "",
                    newNetworkId: d,
                    notSupported: u
                }) => (0, tb.jsx)("div", {
                    className: classNames_classNames("network-action", {
                        "network--not-supported": u
                    }),
                    onClick: () => {
                        u || s(r)
                    },
                    "data-testid": "network-action",
                    children: (0, tb.jsx)(Network, {
                        iconUrl: t,
                        isActive: r === a,
                        networkName: l,
                        checkboxClassName: c,
                        isChanging: d === r,
                        notSupported: u
                    })
                });
            var ii = ["title", "titleId"];

            function stroke_extends() {
                return (stroke_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgStroke = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, ii);
                return nt.createElement("svg", stroke_extends({
                    width: 24,
                    height: 24,
                    viewBox: "0 0 24 24",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, ea || (ea = nt.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M8.293 19.707a1 1 0 0 1 0-1.414L14.586 12 8.293 5.707a1 1 0 0 1 1.414-1.414l7 7a1 1 0 0 1 0 1.414l-7 7a1 1 0 0 1-1.414 0Z",
                    fill: "currentColor"
                })))
            };
            let NetworkControlSkeleton = ({
                    className: t
                }) => (0, tb.jsx)("div", {
                    className: classNames_classNames("network-control-skeleton", t),
                    "data-testid": "network-control-loading",
                    children: (0, tb.jsx)("div", {
                        className: "network-control-skeleton__icon"
                    })
                }),
                UnsupportedNetwork = ({
                    showMsg: t
                }) => {
                    let {
                        t: r
                    } = useTranslation_useTranslation();
                    return (0, tb.jsxs)(tb.Fragment, {
                        children: [(0, tb.jsx)(Icon_Icon, {
                            size: "small",
                            children: (0, tb.jsx)(SvgError, {})
                        }), t && (0, tb.jsx)(Typography_Typography, {
                            className: "evm-network-control__network-name",
                            as: "span",
                            color: "error-1",
                            variant: "body_small",
                            copykey: "dyn_network_not_supported.button",
                            children: r("dyn_network_not_supported.button")
                        })]
                    })
                },
                EvmNetworkControl = ({
                    evmNetworks: t,
                    className: r = "",
                    activeClassName: a = "",
                    network: s,
                    walletConnector: l,
                    isOpen: c,
                    setIsOpen: d,
                    showNetworkName: u = !1
                }) => {
                    var m, p;
                    let h = null == t ? void 0 : t.find(t => s && t.chainId === (0, td.DQ)(s));
                    if (t && !t.length) return (0, tb.jsx)("div", {
                        "data-testid": "EvmNetworkControl",
                        className: classNames_classNames("evm-network-control__container evm-network-control__container--error", r),
                        children: (0, tb.jsx)(UnsupportedNetwork, {
                            showMsg: u
                        })
                    });
                    if (!s) return (0, tb.jsx)("div", {
                        "data-testid": "EvmNetworkControl",
                        className: classNames_classNames("evm-network-control__container", r),
                        children: (0, tb.jsx)(NetworkControlSkeleton, {})
                    });
                    if ((null == t ? void 0 : t.length) === 1) {
                        let t = classNames_classNames(r, "evm-network-control__container", "evm-network-control__container--error", {
                            [a]: c,
                            "evm-network-control__container": !!(null == l ? void 0 : l.supportsNetworkSwitching())
                        });
                        return h ? (0, tb.jsx)("div", {
                            "data-testid": "EvmNetworkControl",
                            onClick: () => s && d(!c),
                            className: classNames_classNames("evm-network-control__container", {
                                [a]: c
                            }, r),
                            children: h.name && (null === (m = h.iconUrls) || void 0 === m ? void 0 : m[0]) ? (0, tb.jsxs)(tb.Fragment, {
                                children: [(0, tb.jsx)(Icon_Icon, {
                                    size: "small",
                                    children: (0, tb.jsx)("img", {
                                        src: h.iconUrls[0],
                                        alt: `${h.name} icon`
                                    })
                                }), u && (0, tb.jsx)(Typography_Typography, {
                                    className: "evm-network-control__network-name",
                                    as: "span",
                                    variant: "body_small",
                                    children: h.vanityName || h.name
                                })]
                            }) : (0, tb.jsx)(UnsupportedNetwork, {
                                showMsg: u
                            })
                        }) : (0, tb.jsxs)("button", {
                            "data-testid": "EvmNetworkControl",
                            type: "button",
                            onClick: () => d(!c),
                            className: t,
                            children: [(0, tb.jsx)(UnsupportedNetwork, {
                                showMsg: u
                            }), (0, tb.jsx)(Icon_Icon, {
                                color: "text-primary",
                                size: "small",
                                className: classNames_classNames("evm-network-control__arrow-icon", {
                                    "evm-network-control__arrow-icon--active": c
                                }),
                                children: (0, tb.jsx)(SvgStroke, {})
                            })]
                        })
                    }
                    return (0, tb.jsxs)("button", {
                        "data-testid": "EvmNetworkControl",
                        type: "button",
                        onClick: t => {
                            t.stopPropagation(), s && d(!c)
                        },
                        className: classNames_classNames(r, {
                            [a]: c,
                            "evm-network-control__container": !!(null == l ? void 0 : l.supportsNetworkSwitching()),
                            "evm-network-control__container--error": !(null == h ? void 0 : h.name)
                        }),
                        children: [(null == h ? void 0 : h.name) && (null === (p = null == h ? void 0 : h.iconUrls) || void 0 === p ? void 0 : p[0]) ? (0, tb.jsxs)(tb.Fragment, {
                            children: [(0, tb.jsx)(Icon_Icon, {
                                size: "small",
                                children: (0, tb.jsx)("img", {
                                    src: h.iconUrls[0],
                                    alt: `${h.name} icon`
                                })
                            }), u && (0, tb.jsx)(Typography_Typography, {
                                className: "evm-network-control__network-name",
                                as: "span",
                                variant: "body_small",
                                children: h.vanityName || h.name
                            })]
                        }) : (0, tb.jsx)(UnsupportedNetwork, {
                            showMsg: u
                        }), t && t.length > 1 && (0, tb.jsx)(Icon_Icon, {
                            color: "text-primary",
                            size: "small",
                            className: classNames_classNames("evm-network-control__arrow-icon", {
                                "evm-network-control__arrow-icon--active": c
                            }),
                            children: (0, tb.jsx)(SvgStroke, {})
                        })]
                    })
                },
                capitalize_capitalize_capitalize = t => {
                    var r;
                    return (null === (r = t[0]) || void 0 === r ? void 0 : r.toUpperCase()) + t.slice(1).toLowerCase()
                },
                NonNetworkSwitchingSupportedControl = ({
                    walletConnector: t,
                    className: r,
                    showNetworkName: a = !1
                }) => {
                    let [s] = useFetchChain(t), l = (null == s ? void 0 : s.name) || "", c = getChainIcon_getChainIcon(l);
                    return (0, tb.jsxs)("div", {
                        "data-testid": "NonNetworkSwitchingSupportedControl",
                        className: classNames_classNames("non-network-switching-supported-control", r),
                        children: [(0, tb.jsx)(Icon_Icon, {
                            size: "small",
                            children: (null == s ? void 0 : s.icon) ? (0, tb.jsx)("img", {
                                src: s.icon,
                                alt: `${s.name} icon`
                            }) : (0, tb.jsx)(c, {})
                        }), a && (0, tb.jsx)(Typography_Typography, {
                            className: classNames_classNames("non-network-switching-supported-control__network-name"),
                            as: "span",
                            variant: "body_small",
                            children: capitalize_capitalize_capitalize(l)
                        }), (0, tb.jsx)("span", {})]
                    })
                },
                NetworkControl = ({
                    loading: t,
                    walletConnector: r,
                    buttonClassName: a,
                    network: s,
                    evmNetworks: l,
                    activeClassName: c,
                    isOpen: d,
                    setIsOpen: u,
                    showNetworkName: m
                }) => t ? (0, tb.jsx)(NetworkControlSkeleton, {
                    className: a
                }) : (null == r ? void 0 : r.connectedChain) && !r.supportsNetworkSwitching() ? (0, tb.jsx)(NonNetworkSwitchingSupportedControl, {
                    className: a,
                    showNetworkName: m,
                    walletConnector: r
                }) : (0, tb.jsx)(EvmNetworkControl, {
                    showNetworkName: m,
                    evmNetworks: l,
                    activeClassName: c,
                    className: a,
                    network: s,
                    loading: t,
                    isOpen: d,
                    walletConnector: r,
                    setIsOpen: u
                }),
                NetworkPicker_NetworkPicker = ({
                    activeClassName: t = "",
                    buttonClassName: r = "",
                    checkboxClassName: a = "",
                    connector: s,
                    evmNetworks: l,
                    isNetworkPickerOpen: c,
                    listClassName: d = "",
                    mainClassName: u = "",
                    setIsNetworkPickerOpen: m,
                    showNetworkName: p,
                    customCallbackOnSuccess: h,
                    currentNetwork: f
                }) => {
                    let y = (0, nt.useRef)(null),
                        [b, C] = (0, nt.useState)(void 0),
                        {
                            loadingNetwork: E,
                            primaryWallet: j,
                            setNetwork: I
                        } = useInternalDynamicContext_useInternalDynamicContext(),
                        {
                            data: O
                        } = usePromise_usePromise(() => null == s ? void 0 : s.getSupportedNetworks(), {
                            deps: [s, c]
                        }),
                        P = isNetworkUnsupported(f, l) || (null == l ? void 0 : l.length) > 1,
                        R = (0, nt.useRef)(null),
                        handleNetworkChange = t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            C(t);
                            try {
                                yield null == s ? void 0 : s.switchNetwork({
                                    networkChainId: t
                                });
                                let r = yield null == s ? void 0 : s.getNetwork();
                                (null == j ? void 0 : j.connector.key) === (null == s ? void 0 : s.key) && I(r), null == h || h()
                            } catch (t) {
                                tv.debug(t)
                            } finally {
                                C(void 0), m(!1)
                            }
                        });
                    return (0, tb.jsxs)("div", {
                        className: classNames_classNames("non-widget-network-picker", u),
                        ref: y,
                        "data-testid": "network-picker",
                        children: [(0, tb.jsxs)("div", {
                            className: "network-picker-network-control",
                            children: [(0, tb.jsx)(NetworkControl, {
                                evmNetworks: l,
                                activeClassName: t,
                                network: f,
                                loading: E,
                                isOpen: c,
                                setIsOpen: m,
                                walletConnector: s,
                                showNetworkName: p,
                                buttonClassName: r
                            }), (0, tb.jsx)("div", {
                                ref: R,
                                className: "network-picker-network-control__anchor"
                            })]
                        }), P && (0, tb.jsx)(MenuList, {
                            className: d,
                            isOpen: c,
                            onClickClose: () => m(!1),
                            popperProps: {
                                anchorOrigin: "bottom-left",
                                anchorRef: R
                            },
                            mobileTitle: "Select network",
                            children: l.map(({
                                name: t,
                                networkId: r,
                                vanityName: s,
                                iconUrls: l
                            }) => (0, tb.jsx)(NetworkAction, {
                                iconUrl: null == l ? void 0 : l[0],
                                networkId: r,
                                networkName: s || t,
                                network: f,
                                onClick: handleNetworkChange,
                                checkboxClassName: a,
                                newNetworkId: b,
                                notSupported: O && !O.includes(`${r}`)
                            }, r))
                        })]
                    })
                },
                useFetchNameService_useFetchNameService = t => {
                    let {
                        getNameService: r
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        data: a
                    } = usePromise_usePromise(() => r(t), {
                        deps: [t]
                    });
                    return a
                },
                useWalletConnectorEvent = (t, r, a) => {
                    let s = (0, nt.useRef)(a);
                    s.current = a, (0, nt.useEffect)(() => {
                        if (!t) return;
                        let a = Array.isArray(t) ? t : [t];
                        a.forEach(t => t.initEventListener());
                        let l = Array.from(new Set(a)),
                            c = l.map(t => {
                                let callback = (...r) => {
                                    s.current(...r, t)
                                };
                                return t.on(r, callback), () => t.off(r, callback)
                            });
                        return () => c.forEach(t => t())
                    }, [t, r])
                },
                isWalletConnected = ({
                    address: t,
                    chain: r,
                    connector: a
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    let s = yield a.getConnectedAccounts();
                    return s.some(a => (0, tl.Wr)(a, t, r))
                }),
                useFetchBalance = ({
                    connector: t,
                    chain: r,
                    address: a,
                    network: s
                }) => {
                    let [l, c] = (0, nt.useState)("0.0"), d = !r || !a || t.supportsNetworkSwitching() && !s, fetchBalance = () => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        if (d) return;
                        let s = yield isWalletConnected({
                            address: a,
                            chain: r,
                            connector: t
                        });
                        if (s) {
                            let r = yield t.getBalance();
                            c(r)
                        }
                    });
                    return usePromise_usePromise(fetchBalance, {
                        deps: [a, null == s ? void 0 : s.toString(), r],
                        enabled: !d
                    }), useWalletConnectorEvent(t, "accountChange", fetchBalance), [l]
                },
                Balance = ({
                    connector: t,
                    address: r,
                    network: a,
                    className: s
                }) => {
                    let [l] = useFetchCurrency(t, a), [c] = useFetchBalance({
                        address: r,
                        chain: l,
                        connector: t,
                        network: a
                    });
                    return c ? (0, tb.jsxs)(Typography_Typography, {
                        className: s,
                        variant: "body_normal",
                        color: "primary",
                        children: [roundBalance(c), " ", (0, tb.jsx)(Typography_Typography, {
                            as: "span",
                            variant: "body_normal",
                            color: "secondary",
                            children: l
                        })]
                    }) : null
                };
            var io = ["title", "titleId"];

            function copy_extends() {
                return (copy_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgCopy = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, io);
                return nt.createElement("svg", copy_extends({
                    width: 18,
                    height: 18,
                    viewBox: "0 0 20 20",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, ei || (ei = nt.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M8.333 1.667a2.5 2.5 0 0 0-2.5 2.5v1.666H7.5V4.167c0-.46.373-.834.833-.834h7.5c.46 0 .833.373.833.834v7.5c0 .46-.373.833-.833.833h-1.667v1.667h1.667a2.5 2.5 0 0 0 2.5-2.5v-7.5a2.5 2.5 0 0 0-2.5-2.5h-7.5Z",
                    fill: "currentColor"
                })), eo || (eo = nt.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M1.667 8.333a2.5 2.5 0 0 1 2.5-2.5h7.5a2.5 2.5 0 0 1 2.5 2.5v7.5a2.5 2.5 0 0 1-2.5 2.5h-7.5a2.5 2.5 0 0 1-2.5-2.5v-7.5Zm2.5-.833a.833.833 0 0 0-.833.833v7.5c0 .46.373.834.833.834h7.5c.46 0 .833-.373.833-.834v-7.5a.833.833 0 0 0-.833-.833h-7.5Z",
                    fill: "currentColor"
                })))
            };
            let TextButton_TextButton = t => {
                    var {
                        className: r = ""
                    } = t, a = _tslib_rest(t, ["className"]);
                    return (0, tb.jsx)("button", Object.assign({
                        className: classNames_classNames("text-button", r)
                    }, a))
                },
                CopyButton_CopyButton = ({
                    children: t,
                    className: r = "",
                    textToCopy: a,
                    onClick: s
                }) => {
                    let [l, c] = (0, nt.useState)(!1), copyToClipboard = () => {
                        navigator.clipboard.writeText(a), c(!0), null == s || s()
                    };
                    return (0, tb.jsx)(TextButton_TextButton, {
                        className: classNames_classNames("copy-button__container", r),
                        onClick: () => copyToClipboard(),
                        onMouseLeave: () => c(!1),
                        children: (0, tb.jsx)(Tooltip, {
                            className: "copy-button__tooltip",
                            content: l ? "Copied" : "Copy",
                            children: t
                        })
                    })
                },
                ActiveBitcoinWalletAddresses = ({
                    menuOption: t,
                    wallet: r
                }) => {
                    var a, s;
                    let {
                        t: l
                    } = useTranslation_useTranslation(), c = null !== (a = getWalletAdditionalAddressByType(tu.KOz.Ordinals, r)) && void 0 !== a ? a : null == r ? void 0 : r.address, d = null !== (s = getWalletAdditionalAddressByType(tu.KOz.Payment, r)) && void 0 !== s ? s : null == r ? void 0 : r.address;
                    return (0, tb.jsxs)(tb.Fragment, {
                        children: [(0, tb.jsxs)("div", {
                            className: "active-wallet-information__address-container",
                            children: [(0, tb.jsxs)("div", {
                                children: [(0, tb.jsx)(Typography_Typography, {
                                    className: "active-wallet-information__address",
                                    weight: "regular",
                                    variant: "body_small",
                                    color: "secondary",
                                    children: l("dyn_active_wallet_info.ordinals_address")
                                }), (0, tb.jsx)(Typography_Typography, {
                                    className: "active-wallet-information__address",
                                    weight: "medium",
                                    variant: "body_normal",
                                    color: "primary",
                                    children: shortenWalletAddress_shortenWalletAddress(c, 4, 4)
                                })]
                            }), (0, tb.jsx)(DotsMenu, {
                                "data-testid": "dots-menu",
                                options: t,
                                buttonClassName: "active-wallet-information__dots-menu",
                                buttonClassNameWithOpenMenu: "active-wallet-information__dots-menu"
                            })]
                        }), (0, tb.jsxs)("div", {
                            className: "active-wallet-information__address-container",
                            children: [(0, tb.jsxs)("div", {
                                children: [(0, tb.jsx)(Typography_Typography, {
                                    className: "active-wallet-information__address",
                                    weight: "regular",
                                    variant: "body_small",
                                    color: "secondary",
                                    children: l("dyn_active_wallet_info.payment_address")
                                }), (0, tb.jsx)(Typography_Typography, {
                                    className: "active-wallet-information__address",
                                    weight: "regular",
                                    variant: "body_small",
                                    color: "primary",
                                    children: shortenWalletAddress_shortenWalletAddress(d, 4, 4)
                                })]
                            }), (0, tb.jsx)(CopyButton_CopyButton, {
                                textToCopy: null != d ? d : "",
                                children: (0, tb.jsx)(Icon_Icon, {
                                    size: "xsmall",
                                    children: (0, tb.jsx)(SvgCopy, {})
                                })
                            })]
                        })]
                    })
                };
            var is = ["title", "titleId"];

            function gear_extends() {
                return (gear_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgGear = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, is);
                return nt.createElement("svg", gear_extends({
                    width: 24,
                    height: 24,
                    viewBox: "0 0 24 24",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, es || (es = nt.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M9.353 4.081c.674-2.775 4.62-2.775 5.294 0a.724.724 0 0 0 1.08.448c2.44-1.486 5.23 1.305 3.744 3.744a.724.724 0 0 0 .448 1.08c2.775.674 2.775 4.62 0 5.294a.724.724 0 0 0-.448 1.08c1.486 2.44-1.305 5.23-3.744 3.744a.724.724 0 0 0-1.08.448c-.674 2.775-4.62 2.775-5.294 0a.724.724 0 0 0-1.08-.448c-2.44 1.486-5.23-1.305-3.744-3.744a.724.724 0 0 0-.448-1.08c-2.775-.674-2.775-4.62 0-5.294a.724.724 0 0 0 .448-1.08c-1.486-2.44 1.305-5.23 3.744-3.744a.724.724 0 0 0 1.08-.448Zm3.35.472c-.178-.737-1.227-.737-1.407 0a2.724 2.724 0 0 1-4.064 1.684c-.648-.395-1.39.347-.995.995.96 1.575.109 3.63-1.684 4.064-.737.18-.737 1.229 0 1.408a2.724 2.724 0 0 1 1.684 4.064c-.395.648.347 1.39.995.995a2.724 2.724 0 0 1 4.064 1.684c.18.737 1.229.737 1.408 0a2.724 2.724 0 0 1 4.064-1.684c.648.395 1.39-.347.995-.995a2.724 2.724 0 0 1 1.684-4.064c.737-.18.737-1.229 0-1.408a2.724 2.724 0 0 1-1.684-4.064c.395-.648-.347-1.39-.995-.995-1.575.96-3.63.109-4.064-1.684ZM12 10a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm-4 2a4 4 0 1 1 8 0 4 4 0 0 1-8 0Z",
                    fill: "#ABACB2"
                })))
            };
            let ActiveWalletAddreess = ({
                    address: t,
                    nameServiceName: r,
                    menuOption: a
                }) => {
                    let {
                        showAlert: s
                    } = usePasskeyContext();
                    return (0, tb.jsxs)("div", {
                        className: "active-wallet-information__address-container",
                        children: [(0, tb.jsxs)("div", {
                            children: [(0, tb.jsx)(Typography_Typography, {
                                className: "active-wallet-information__handle",
                                color: "primary",
                                variant: "body_normal",
                                children: r
                            }), (0, tb.jsx)(Typography_Typography, {
                                className: "active-wallet-information__address",
                                weight: r ? "regular" : "medium",
                                variant: r ? "body_small" : "body_normal",
                                color: r ? "secondary" : "primary",
                                children: shortenWalletAddress_shortenWalletAddress(t, 4, 4)
                            })]
                        }), (0, tb.jsx)(DotsMenu, {
                            "data-testid": "dots-menu",
                            options: a,
                            buttonClassName: "active-wallet-information__dots-menu",
                            buttonClassNameWithOpenMenu: "active-wallet-information__dots-menu",
                            iconOverride: s() ? (0, tb.jsx)(IconWithStatus, {
                                Icon: () => (0, tb.jsx)(SvgGear, {
                                    width: 16,
                                    height: 16
                                }),
                                variant: "yellow"
                            }) : (0, tb.jsx)(SvgGear, {
                                width: 16,
                                height: 16
                            })
                        })]
                    })
                },
                ActiveWalletInformation = () => {
                    var t, r;
                    let {
                        t: a
                    } = useTranslation_useTranslation(), [s, l] = (0, nt.useState)(!1), {
                        primaryWallet: c,
                        authToken: d,
                        network: u,
                        projectSettings: m,
                        handleLogOut: p,
                        user: h
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        setDynamicWidgetView: f
                    } = DynamicWidgetContext_useWidgetContext(), {
                        isTurnkeyWalletWithoutAuthenticator: y
                    } = useIsTurnkeyWallet(), b = null == c ? void 0 : c.address, C = useFetchNameService_useFetchNameService(b), {
                        data: E
                    } = usePromise_usePromise(() => isTestnet(c), {
                        deps: [u]
                    }), j = getExportKeysOption(null == c ? void 0 : c.connector, null == m ? void 0 : m.providers), {
                        showAlert: I
                    } = usePasskeyContext(), O = isAccountAbstractionWallet(c) ? createOwnerWallet(c, (null == h ? void 0 : h.verifiedCredentials) || []) : c, P = c && (0, tl.nQ)(null == c ? void 0 : c.connector), R = !!(O && (null === (r = null === (t = null == O ? void 0 : O.connector) || void 0 === t ? void 0 : t.key) || void 0 === r ? void 0 : r.startsWith("turnkey"))), F = [{
                        Icon: null,
                        callback: () => (null == C ? void 0 : C.name) && navigator.clipboard.writeText(null == C ? void 0 : C.name),
                        hide: !(null == C ? void 0 : C.name),
                        text: "Copy ENS"
                    }, {
                        Icon: null,
                        callback: () => b && navigator.clipboard.writeText(b),
                        hide: !b,
                        text: "Copy wallet address"
                    }, {
                        Icon: null,
                        callback: () => f("wallet-settings"),
                        fontColor: I() ? "primary" : void 0,
                        fontWeight: I() ? "bold" : void 0,
                        hide: !(O && O.connector.key.startsWith("turnkey")),
                        text: "Wallet settings"
                    }, {
                        Icon: null,
                        callback: j || (() => tv.info("No option to export private keys")),
                        hide: !j,
                        text: "Export private keys"
                    }, {
                        Icon: null,
                        callback: p,
                        hide: R,
                        text: "Disconnect"
                    }], W = (null == c ? void 0 : c.connector) && (null == c ? void 0 : c.connector).evmNetworks || [];
                    return (0, tb.jsxs)("div", {
                        className: "active-wallet-information-container",
                        "data-testid": "active-wallet-information",
                        children: [(0, tb.jsxs)("div", {
                            className: "active-wallet-information",
                            children: [(0, tb.jsxs)("div", {
                                className: "active-wallet-information__header",
                                children: [(0, tb.jsx)("div", {
                                    className: "active-wallet-information__avatar",
                                    children: (null == C ? void 0 : C.avatar) ? (0, tb.jsx)("div", {
                                        className: "active-wallet-information__avatar__name-service",
                                        children: (0, tb.jsx)("img", {
                                            src: null == C ? void 0 : C.avatar,
                                            alt: ""
                                        })
                                    }) : (0, tb.jsx)("div", {
                                        className: "active-wallet-information__wallet-img",
                                        children: (0, tb.jsx)(AuthProviderIcon_AuthProviderIcon, {
                                            jwt: d,
                                            iconSize: 28,
                                            showStatus: !R
                                        })
                                    })
                                }), (0, tb.jsxs)("div", {
                                    className: "active-wallet-information__details",
                                    children: [(0, tb.jsx)("div", {
                                        className: classNames_classNames("active-wallet-information__addresses-container", {
                                            "active-wallet-information__addresses-container--centered": !(null == C ? void 0 : C.name)
                                        }),
                                        children: P ? (0, tb.jsx)(ActiveBitcoinWalletAddresses, {
                                            wallet: c,
                                            menuOption: F
                                        }) : R ? (0, tb.jsx)(ActiveWalletAddreess, {
                                            address: b,
                                            nameServiceName: null == h ? void 0 : h.email,
                                            menuOption: F
                                        }) : (0, tb.jsx)(ActiveWalletAddreess, {
                                            address: b,
                                            nameServiceName: null == C ? void 0 : C.name,
                                            menuOption: F
                                        })
                                    }), (0, tb.jsx)(NetworkPicker_NetworkPicker, {
                                        currentNetwork: u,
                                        connector: null == c ? void 0 : c.connector,
                                        isNetworkPickerOpen: s,
                                        setIsNetworkPickerOpen: l,
                                        mainClassName: "active-wallet-information__network-picker",
                                        buttonClassName: "active-wallet-information__network-picker-button",
                                        evmNetworks: W,
                                        showNetworkName: !0
                                    })]
                                })]
                            }), E && !y && (0, tb.jsx)(Alert, {
                                variant: "warning",
                                copykey: "dyn_active_wallet_info.testnet_warning",
                                children: a("dyn_active_wallet_info.testnet_warning")
                            })]
                        }), (0, tb.jsxs)("div", {
                            className: "balance-container",
                            children: [(0, tb.jsx)(Typography_Typography, {
                                color: "secondary",
                                variant: "body_small",
                                children: "Balance"
                            }), c && (0, tb.jsx)(Balance, {
                                className: "balance-container__balance",
                                connector: c.connector,
                                address: c.address,
                                network: u
                            })]
                        })]
                    })
                },
                UnknownWalletInformation = ({
                    address: t
                }) => {
                    let {
                        handleLogOut: r
                    } = useInternalDynamicContext_useInternalDynamicContext(), a = [{
                        Icon: null,
                        callback: () => t && navigator.clipboard.writeText(t),
                        hide: !t,
                        text: "Copy wallet address"
                    }, {
                        Icon: null,
                        callback: r,
                        text: "Disconnect"
                    }];
                    return (0, tb.jsx)("div", {
                        className: "unknown-wallet-information-container",
                        children: (0, tb.jsx)("div", {
                            className: "unknown-wallet-information",
                            children: (0, tb.jsx)("div", {
                                className: "unknown-wallet-information__header",
                                children: (0, tb.jsx)("div", {
                                    className: "unknown-wallet-information__details",
                                    children: (0, tb.jsxs)("div", {
                                        className: "unknown-wallet-information__actions-container",
                                        children: [(0, tb.jsx)("div", {
                                            children: (0, tb.jsx)(Typography_Typography, {
                                                className: "unknown-wallet-information__address",
                                                weight: "medium",
                                                variant: "body_normal",
                                                color: "primary",
                                                children: shortenWalletAddress_shortenWalletAddress(t, 4, 4)
                                            })
                                        }), (0, tb.jsx)(DotsMenu, {
                                            options: a,
                                            buttonClassName: "unknown-wallet-information__dots-menu",
                                            buttonClassNameWithOpenMenu: "unknown-wallet-information__dots-menu"
                                        })]
                                    })
                                })
                            })
                        })
                    })
                },
                DynamicWidgetWalletHeader = ({
                    variant: t
                }) => {
                    let {
                        primaryWallet: r,
                        user: a
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        open: s
                    } = useSendBalance(), {
                        supportsFunding: l,
                        setShowFunding: c,
                        fundingEnabled: d
                    } = FundingContext_useFundingContext(), {
                        setDynamicWidgetView: u,
                        setIsOpen: m
                    } = DynamicWidgetContext_useWidgetContext(), p = (0, nt.useMemo)(() => {
                        var t;
                        let a = null == r ? void 0 : r.connector;
                        return !!a && (null === (t = a.supportedChains) || void 0 === t ? void 0 : t.includes("EVM")) && (0, tl.MQ)(a)
                    }, [r]);
                    return (0, tb.jsxs)("div", {
                        className: "dynamic-widget-wallet-header",
                        "data-testid": "dynamic-widget-wallet-header",
                        children: [(() => {
                            let t = null == a ? void 0 : a.verifiedCredentials.find(t => "unknown" === t.walletName);
                            return r ? (0, tb.jsx)(ActiveWalletInformation, {}) : t ? (0, tb.jsx)(UnknownWalletInformation, {
                                address: t.address
                            }) : (0, tb.jsx)("div", {
                                className: "dynamic-widget-wallet-header__icon-container",
                                children: (0, tb.jsx)(UserAvatar, {
                                    user: a
                                })
                            })
                        })(), r ? (0, tb.jsxs)("div", {
                            "data-testid": "primaryWalletStatus",
                            className: "dynamic-widget-wallet-header__wallet-info",
                            children: [(0, tb.jsx)(SecureTurnkeyWalletCard, {
                                className: "dynamic-widget-wallet-header__wallet-info__secure-wallet"
                            }), (p || d) && (0, tb.jsxs)("div", {
                                className: "dynamic-widget-wallet-header__wallet-actions",
                                children: [d && (0, tb.jsx)(Button_Button, {
                                    expanded: !0,
                                    dataTestId: "buy-crypto-button",
                                    buttonPadding: "small",
                                    buttonVariant: "primary",
                                    onClick: () => c(!0),
                                    disabled: !l,
                                    startSlot: (0, tb.jsx)(Icon_Icon, {
                                        size: "small",
                                        color: "text-secondary",
                                        children: (0, tb.jsx)(SvgAdd, {})
                                    }),
                                    children: "Buy"
                                }), p && (0, tb.jsx)(Button_Button, {
                                    expanded: !0,
                                    dataTestId: "send-balance-button",
                                    buttonPadding: "small",
                                    buttonVariant: "primary",
                                    onClick: () => {
                                        "dropdown" === t ? (m(!1), s().catch(t => tv.error(t))) : u("send-balance")
                                    },
                                    startSlot: (0, tb.jsx)(Icon_Icon, {
                                        size: "small",
                                        color: "text-secondary",
                                        children: (0, tb.jsx)(SvgSend, {})
                                    }),
                                    children: "Send"
                                })]
                            })]
                        }) : (0, tb.jsx)(Typography_Typography, {
                            className: "dynamic-widget-wallet-header__email",
                            variant: "body_normal",
                            weight: "regular",
                            children: (() => {
                                let t = getActiveOauthCredential_getActiveOauthCredential(a);
                                return (null == t ? void 0 : t.publicIdentifier) ? t.publicIdentifier : shortenEmail_shortenEmail(null == a ? void 0 : a.email)
                            })()
                        })]
                    })
                };
            nt.memo(DynamicWidgetWalletHeader);
            let il = [{
                key: "wallets",
                label: "Wallets"
            }, {
                key: "profile",
                label: "Profile"
            }];
            nt.memo(({
                variant: t
            }) => {
                let {
                    dynamicWidgetView: r,
                    setDynamicWidgetView: a
                } = DynamicWidgetContext_useWidgetContext(), {
                    multiWallet: s
                } = useInternalDynamicContext_useInternalDynamicContext(), l = useKYCFlag_useKYCFlag(), c = (0, nt.useMemo)(() => l || s ? "edit-profile" === r ? "profile" : r : "wallets", [r, l, s]);
                return (0, tb.jsxs)("div", {
                    className: "dynamic-widget-header",
                    children: [l && s && (0, tb.jsx)(OptionsSwitcher_OptionsSwitcher, {
                        rootClassName: "dynamic-widget-header__switcher",
                        value: c,
                        options: il,
                        onChange: t => a(t)
                    }), (0, tb.jsx)(PasskeyCreatedSuccessBanner, {
                        className: "dynamic-widget-header__passkey-success"
                    }), ("wallets" === c || "profile" === c && !s) && (0, tb.jsx)(DynamicWidgetWalletHeader, {
                        variant: t
                    })]
                })
            });
            let DynamicBridgeWalletCard = ({
                    className: t,
                    networkIcon: r,
                    networkName: a,
                    children: s
                }) => {
                    let {
                        t: l
                    } = useTranslation_useTranslation();
                    return (0, tb.jsxs)("div", {
                        className: classNames_classNames("dynamic-bridge-wallet-card", t),
                        children: [(0, tb.jsxs)("div", {
                            className: "dynamic-bridge-wallet-card__network",
                            children: [r && nt.cloneElement(r, {
                                className: "dynamic-bridge-wallet-card__network-icon"
                            }), a && (0, tb.jsx)(Typography_Typography, {
                                className: "dynamic-bridge-wallet-card__network-name",
                                variant: "body_small",
                                color: "primary",
                                weight: "medium",
                                as: "span",
                                copykey: "dyn_bridge.widget.wallet_network",
                                children: l("dyn_bridge.widget.wallet_network", {
                                    networkName: a
                                })
                            })]
                        }), s]
                    })
                },
                WalletInformationCard = ({
                    address: t,
                    ens: r,
                    balance: a,
                    icon: s,
                    network: l,
                    menu: c
                }) => {
                    let {
                        t: d
                    } = useTranslation_useTranslation(), u = (0, nt.useMemo)(() => {
                        let a = shortenWalletAddress_shortenWalletAddress(t, 4, 4);
                        return r ? (0, tb.jsxs)(tb.Fragment, {
                            children: [(0, tb.jsx)(Typography_Typography, {
                                color: "primary",
                                variant: "body_normal",
                                truncate: !0,
                                children: r
                            }), (0, tb.jsx)(Typography_Typography, {
                                weight: "regular",
                                variant: "body_small",
                                color: "secondary",
                                children: a
                            })]
                        }) : (0, tb.jsx)(Typography_Typography, {
                            weight: "medium",
                            variant: "body_normal",
                            color: "primary",
                            children: a
                        })
                    }, [r, t]);
                    return (0, tb.jsxs)("div", {
                        className: "wallet-information-card",
                        children: [(0, tb.jsxs)("div", {
                            className: "wallet-information-card__header",
                            children: [(0, tb.jsxs)("div", {
                                className: "wallet-information-card__details-container",
                                children: [s && (0, tb.jsx)(Icon_Icon, {
                                    className: "wallet-information-card__icon",
                                    children: s
                                }), (0, tb.jsx)("div", {
                                    className: "wallet-information-card__details",
                                    children: u
                                }), (0, tb.jsx)("div", {
                                    className: "wallet-information-card__menu",
                                    children: c
                                })]
                            }), l]
                        }), (0, tb.jsxs)("div", {
                            className: "wallet-information-card__balance-container",
                            children: [(0, tb.jsx)(Typography_Typography, {
                                color: "secondary",
                                variant: "body_small",
                                copykey: "dyn_wallet_information.balance",
                                children: d("dyn_wallet_information.balance")
                            }), a]
                        })]
                    })
                },
                DynamicBridgeWalletCardBody = ({
                    walletAddress: t,
                    walletBalance: r,
                    walletKey: a,
                    onDisconnectClick: s
                }) => {
                    let {
                        t: l
                    } = useTranslation_useTranslation(), c = useFetchNameService_useFetchNameService(t), d = [{
                        Icon: null,
                        callback: () => (null == c ? void 0 : c.name) && navigator.clipboard.writeText(null == c ? void 0 : c.name),
                        hide: !(null == c ? void 0 : c.name),
                        text: l("dyn_bridge.widget.copy.ens")
                    }, {
                        Icon: null,
                        callback: () => t && navigator.clipboard.writeText(t),
                        hide: !t,
                        text: l("dyn_bridge.widget.copy.address")
                    }, {
                        Icon: null,
                        callback: () => null == s ? void 0 : s(),
                        hide: !s,
                        text: l("dyn_bridge.widget.disconnect")
                    }];
                    return (0, tb.jsx)(WalletInformationCard, {
                        ens: null == c ? void 0 : c.name,
                        address: t,
                        icon: (0, tb.jsx)(tc.o, {
                            walletKey: a
                        }),
                        balance: r,
                        menu: (0, tb.jsx)(DotsMenu, {
                            options: d
                        }),
                        copykey: "dyn_bridge.widget"
                    })
                },
                DynamicBridgeWidgetEmptyCard = ({
                    chain: t
                }) => {
                    let {
                        t: r
                    } = useTranslation_useTranslation(), {
                        bridgeChainsToConnect: a,
                        setShowAuthFlow: s,
                        setShowBridgeWidget: l
                    } = useInternalDynamicContext_useInternalDynamicContext();
                    if (!(null == a ? void 0 : a.length) || !t) return null;
                    let c = (0, tl.bt)(t),
                        d = getChainIcon_getChainIcon(t);
                    return (0, tb.jsxs)("div", {
                        role: "button",
                        className: "dynamic-bridge-widget-empty-card",
                        onClick: () => {
                            l(!1), s(!0)
                        },
                        children: [(0, tb.jsx)(d, {
                            className: "dynamic-bridge-widget-empty-card__icon"
                        }), (0, tb.jsx)(Typography_Typography, {
                            variant: "body_normal",
                            weight: "medium",
                            as: "span",
                            color: "primary",
                            className: "dynamic-bridge-widget-empty-card__text",
                            copykey: "dyn_bridge.widget.connect_with_network",
                            children: r("dyn_bridge.widget.connect_with_network", {
                                blockchainName: null == c ? void 0 : c.blockchainName
                            })
                        })]
                    })
                },
                ic = nt.memo(({
                    hideUnlinkAction: t = !1
                }) => {
                    let {
                        disconnectWallet: r,
                        getConnectedWalletById: a,
                        bridgeChains: s
                    } = useInternalDynamicContext_useInternalDynamicContext(), l = a("connect-wallet-1"), c = l && getChainIcon_getChainIcon(null == l ? void 0 : l.chain), d = l && (0, tl.bt)(null == l ? void 0 : l.chain);
                    return (0, tb.jsxs)(tb.Fragment, {
                        children: [!l && (0, tb.jsx)(DynamicBridgeWidgetEmptyCard, {
                            chain: null == s ? void 0 : s[1].chain
                        }), l && c && (0, tb.jsx)(DynamicBridgeWalletCard, {
                            networkIcon: (0, tb.jsx)(c, {}),
                            networkName: null == d ? void 0 : d.displayName,
                            children: (0, tb.jsx)(DynamicBridgeWalletCardBody, {
                                walletKey: l.connector.key,
                                walletAddress: l.address,
                                walletBalance: (0, tb.jsx)(Balance, {
                                    address: l.address,
                                    connector: l.connector,
                                    network: l.chain
                                }),
                                onDisconnectClick: t ? void 0 : () => r(l.id)
                            }, l.id)
                        })]
                    })
                }),
                useVerifyWallet_useVerifyWallet = ({
                    consumeNonce: t,
                    displaySiweStatement: r,
                    environmentId: a,
                    projectSettings: s,
                    setIsSingleWalletAccount: l
                }) => {
                    let {
                        setDeniedAddress: c,
                        setDeniedOauthProvider: d
                    } = useAccessDeniedContext(), {
                        setExistentAccountData: u
                    } = useAccountExistsContext(), {
                        setView: m,
                        goToInitialView: p
                    } = ViewContext_useViewContext(), {
                        setErrorMessage: h,
                        setError: f
                    } = ErrorContext_useErrorContext(), {
                        setUser: y,
                        multiWalletWidgetState: b,
                        debugError: C,
                        multiWallet: E,
                        appName: j,
                        primaryWalletId: I,
                        setCallback: O,
                        setShowAuthFlow: P,
                        setPrimaryWalletId: R,
                        siweStatement: F,
                        connectedWallets: W,
                        authMode: M,
                        setOnboardingOnlyJwt: D,
                        authToken: L,
                        setAuthMode: U,
                        removeConnectedWalletsInfo: B,
                        setIsVerificationInProgress: $,
                        eventsCallbacks: K,
                        primaryWallet: G,
                        enableConnectOnlyFallback: J,
                        setMultiWalletWidgetState: Y,
                        setLogInWithEmail: Q
                    } = useInternalDynamicContext_useInternalDynamicContext(), ee = !L, et = J && (ee || !E), generateJWT = (s, l, c, d, u, m, p, h) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        let f;
                        let y = t();
                        if (void 0 === y) throw new td.kW("Missing nonce");
                        let b = yield getVerifyArgs({
                            displaySiweStatement: r,
                            environmentId: a,
                            fetchPublicAddressOpts: c,
                            messageToSignOverride: h,
                            nonce: y,
                            publicWalletAddress: d,
                            signedMessageOverride: p,
                            siweStatement: getSiweStatement({
                                appName: j,
                                siweStatement: F
                            }),
                            walletConnector: s,
                            walletProvider: l
                        });
                        if (void 0 === (f = void 0 !== L && E ? yield linkWallet(a, b, L): yield verifyWallet(a, Object.assign(Object.assign({}, b), {
                                captchaToken: u,
                                oauth: m
                            })))) throw new td.kW("Could not obtain a valid JWT");
                        return {
                            Jwt: f,
                            verifyArgs: b
                        }
                    }), updatePrimaryWalletId = (t, r) => {
                        let a = r.verifiedCredentials.find(t => t.id === r.lastVerifiedCredentialId && "blockchain" === t.format);
                        if (a) {
                            let s = r.verifiedCredentials.find(t => t.id === I);
                            (ee || !G || "awaiting_signature" === b && a.walletName === (null == s ? void 0 : s.walletName) || (null == s ? void 0 : s.chain) === "flow" && "FLOW" === t.connectedChain) && R(a.id)
                        }
                    }, handleWalletUsedError = t => {
                        var r;
                        P(!0), m("wallet-used"), l(!1), "reassign_wallet_error" === t.code && ((null === (r = null == s ? void 0 : s.sdk) || void 0 === r ? void 0 : r.preventOrphanedAccounts) && m("wallet-cannot-be-transferred"), l(!0))
                    }, handleDisconnectWallet = ({
                        walletConnector: t,
                        endSession: r = !0
                    }) => {
                        B(), $(!1), r && (null == t || t.endSession())
                    }, handleError = (t, r, a, s) => {
                        var l;
                        if ("ignore" === t.message) return;
                        if (t instanceof td.Fr) return handleDisconnectWallet({
                            endSession: !1,
                            walletConnector: r
                        }), handleWalletUsedError(t);
                        if (t instanceof td.aH) {
                            handleDisconnectWallet({
                                walletConnector: r
                            }), c(a), m("chainalysis-blocked-wallet");
                            return
                        }
                        if (t instanceof td.bR) {
                            handleDisconnectWallet({
                                walletConnector: r
                            }), c(a), m("gate-blocked-wallet");
                            return
                        }
                        if (t instanceof td.U8) {
                            handleDisconnectWallet({
                                walletConnector: r
                            }), c(a), (0, tl.be)(r) && d(null == s ? void 0 : s.provider), m("no-access");
                            return
                        }
                        if (t instanceof td.uk) {
                            handleDisconnectWallet({
                                walletConnector: r
                            }), u(t.errorPayload), m("account-exists");
                            return
                        }
                        if (W.length && "connect-only" === M) throw new td.kW(t.message);
                        let y = null === (l = null == t ? void 0 : t.message) || void 0 === l ? void 0 : l.includes("User rejected the request");
                        et && !y ? (tv.warn("Verification failed, changing to connect-only"), U("connect-only"), m("wallet-list"), $(!1)) : (handleDisconnectWallet({
                            walletConnector: r
                        }), p()), tv.error(t), C ? f(`${t.message}
 ${t.stack}`) : h(t.code)
                    };
                    return ({
                        walletConnector: t,
                        fetchPublicAddressOpts: r,
                        publicWalletAddress: a,
                        captchaToken: l,
                        oauth: c,
                        signedMessageOverride: d,
                        messageToSignOverride: u
                    }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        var p;
                        let h = getWalletProvider(t);
                        try {
                            $(!0);
                            let {
                                Jwt: f,
                                verifyArgs: b
                            } = yield generateJWT(t, h, r, a, l, c, d, u), C = decodeJwt(f);
                            if (void 0 === C) throw new td.kW("Invalid token!");
                            try {
                                null === (p = null == K ? void 0 : K.onSignedMessage) || void 0 === p || p.call(K, {
                                    messageToSign: b.messageToSign,
                                    signedMessage: b.signedMessage
                                })
                            } catch (t) {
                                tv.warn("Error calling onSignedMessage callback")
                            }
                            let E = yield createUserProfile(C), j = C.missingFields.length;
                            if (D(f), LocalStorage.setToLS(nu, t.key), U("connect-and-sign"), updatePrimaryWalletId(t, E), ee && s && j) return P(!0), m("collect-user-data");
                            storeAuthToken(f), D(void 0), Y("idle"), y(E), Q(!1), P(!1), ee ? O("authSuccess") : (m("wallet-list"), O("linkSuccess", {
                                walletId: C.lastVerifiedCredentialId
                            }))
                        } catch (r) {
                            handleError(r, t, a, c)
                        }
                    })
                },
                id = (0, nt.createContext)(void 0),
                SocialRedirectContext_SocialRedirectContextProvider = ({
                    children: t
                }) => {
                    var r, a, s, l;
                    let {
                        setShowAuthFlow: c,
                        walletConnectorOptions: d,
                        setSelectedWalletConnectorKey: u,
                        walletUiUtils: m,
                        consumeNonce: p,
                        displaySiweStatement: h,
                        environmentId: f,
                        projectSettings: y,
                        setIsSingleWalletAccount: b,
                        setShowDynamicUserProfile: C,
                        isAuthenticated: E,
                        setPrimaryWalletId: j,
                        secondaryWallets: I,
                        sdkHasLoaded: O,
                        authToken: P,
                        connectWallet: R,
                        primaryWallet: F,
                        socialProvidersFilter: W = t => t
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        setErrorMessage: M
                    } = ErrorContext_useErrorContext(), {
                        setView: D
                    } = ViewContext_useViewContext(), {
                        getCaptchaToken: L
                    } = CaptchaContext_useCaptchaContext(), U = useVerifyWallet_useVerifyWallet({
                        consumeNonce: p,
                        displaySiweStatement: h,
                        environmentId: f,
                        projectSettings: y,
                        setIsSingleWalletAccount: b
                    }), B = null === (r = null == y ? void 0 : y.sdk.socialSignIn) || void 0 === r ? void 0 : r.signInProvider, $ = null !== (s = null === (a = null == y ? void 0 : y.sdk.socialSignIn) || void 0 === a ? void 0 : a.providers) && void 0 !== s ? s : [], K = null !== (l = W($.filter(t => t.enabled).map(t => t.provider))) && void 0 !== l ? l : [], G = d.map(({
                        walletConnector: t
                    }) => t).find(tl.be), [J, Y] = (0, nt.useState)("idle"), [Q, ee] = (0, nt.useState)(), et = F ? [F, ...I] : I, en = et.find(t => t.connector.key === (null == G ? void 0 : G.key)), er = (0, nt.useMemo)(() => en ? getReferencedAccount_getReferencedAccount(P, en.id) : void 0, [P, en]);
                    useInternalDynamicEvents("logout", () => ee(void 0));
                    let ea = (0, nt.useCallback)(t => {
                        tv.error(t), E ? (c(!1, {
                            emitCancelAuth: !0
                        }), C(!0)) : (c(!0), D("wallet-list"), M("-1"))
                    }, [E, M, c, C, D]);
                    return (0, nt.useEffect)(() => {
                        var t, r;
                        if (!y || !G || !O) {
                            let t = new URLSearchParams(window.location.search);
                            t.has("magic_oauth_request_id") && (D("social-redirect-view"), c(!0));
                            return
                        }
                        let a = new URLSearchParams(window.location.search);
                        if (a.has("error") && a.has("provider")) {
                            let r = a.get("error_description");
                            ea(null != r ? r : "Unknown error"), null === (t = G.getSession) || void 0 === t || t.call(G);
                            return
                        }
                        if (a.has("magic_oauth_request_id")) {
                            let t = a.get("provider");
                            ee(t), Y("loading"), D("social-redirect-view"), c(!0), E || u(G.key), null === (r = G.getSession) || void 0 === r || r.call(G).then(r => _tslib_awaiter(void 0, void 0, void 0, function*() {
                                if (E) {
                                    if (!er) throw Error("Social account not found");
                                    er.oauthAccountId === r.oauthId ? (null == en ? void 0 : en.id) !== (null == F ? void 0 : F.id) && (j(en.id), c(!1), C(!0)) : (yield G.endSession(), D("social-wrong-account"))
                                } else {
                                    yield R(G);
                                    let a = yield G.fetchPublicAddress();
                                    m.disabledConfirmationOnce(), yield U({
                                        captchaToken: L(),
                                        oauth: {
                                            accessToken: r.accessToken,
                                            didToken: r.didToken,
                                            provider: t
                                        },
                                        publicWalletAddress: a,
                                        walletConnector: G
                                    })
                                }
                                ee(void 0), Y("success")
                            })).catch(t => {
                                ee(void 0), Y("error"), ea(t)
                            })
                        }
                    }, [er, P, E, y, O, I, j, u, c, C, D, G, U, m, en, ea, R, null == F ? void 0 : F.id, L]), (0, tb.jsx)(id.Provider, {
                        value: {
                            enabledSocialProviders: K,
                            redirectStatus: J,
                            setSocialProvider: ee,
                            signInProvider: B,
                            socialAccount: er,
                            socialProvider: Q,
                            socialWalletConnector: G
                        },
                        children: t
                    })
                },
                useSocialRedirectContext = () => {
                    let t = (0, nt.useContext)(id);
                    if (void 0 === t) throw Error("useSocialRedirectContext must be used within a SocialRedirectContextProvider");
                    return t
                },
                iu = (0, nt.createContext)(void 0),
                LoadingContextProvider = ({
                    children: t
                }) => {
                    let [r, a] = (0, nt.useState)(!1);
                    useInternalDynamicEvents("logout", () => a(!1));
                    let s = (0, nt.useMemo)(() => ({
                        loading: r,
                        setLoading: a
                    }), [r]);
                    return (0, tb.jsx)(iu.Provider, {
                        value: s,
                        children: t
                    })
                },
                LoadingContext_useLoadingContext = () => {
                    let t = (0, nt.useContext)(iu);
                    if (void 0 === t) throw Error("usage of useLoadingContext not wrapped in `LoadingContextProvider`.");
                    return t
                },
                DefaultFooter = ({
                    hideBorder: t
                }) => (0, tb.jsx)("div", {
                    className: classNames_classNames("default-footer__footer", {
                        "default-footer__footer--hidden": t
                    }),
                    "data-testid": "default-footer"
                }),
                isUserLinkingWallet = (t, r, a) => (null == t ? void 0 : t.verifiedCredentials) !== void 0 && ("wallet-list" === r || "login-with-email-or-wallet-full-wallet-list" === r) && !a,
                useDynamicLayoutData = ({
                    view: t,
                    authMode: r
                }) => {
                    let {
                        t: a
                    } = useTranslation_useTranslation(), {
                        isTurnkeyWalletWithoutAuthenticator: s
                    } = useIsTurnkeyWallet();
                    if ("no-access" === t) {
                        let t = {
                            copykey: "dyn_no_access.title",
                            heading: a("dyn_no_access.title")
                        };
                        return {
                            headerData: t
                        }
                    }
                    let l = {
                            "login-with-email-or-wallet-full-wallet-list": {
                                copykey: "dyn_login.helper.all_wallet_list",
                                heading: a("dyn_login.helper.all_wallet_list")
                            },
                            "login-with-wallet-only": {
                                copykey: "dyn_login.helper.wallet_only",
                                heading: a("dyn_login.helper.wallet_only")
                            },
                            "passkey-intro": {
                                copykey: "dyn_passkey_intro.helper.title",
                                heading: a("dyn_passkey_intro.helper.title")
                            },
                            "pending-connect": {
                                copykey: "dyn_login.helper.pending_connect.title",
                                heading: a("dyn_login.helper.pending_connect.title")
                            },
                            "pending-signature": {
                                copykey: "dyn_login.helper.pending_signature.title",
                                heading: a("dyn_login.helper.pending_signature.title")
                            },
                            "pending-signature-without-back-button": {
                                copykey: "dyn_login.helper.pending_signature_without_back_button.title",
                                heading: a("dyn_login.helper.pending_signature_without_back_button.title")
                            },
                            "qr-code": {
                                copykey: "dyn_login.helper.qr_code.title",
                                heading: a("dyn_login.helper.qr_code.title")
                            },
                            "wallet-connect-mobile-wallets-list": {
                                copykey: "dyn_wallet_conect.mobile.wallet_list.helper",
                                heading: a("dyn_wallet_conect.mobile.wallet_list.helper")
                            },
                            "wallet-list": {
                                copykey: "dyn_wallet_list.helper",
                                heading: a("dyn_wallet_list.helper")
                            }
                        },
                        c = {
                            "account-exists": {
                                copykey: "dyn_account_exists.title",
                                heading: a("dyn_account_exists.title")
                            },
                            "chainalysis-blocked-wallet": {
                                copykey: "dyn_chainalysis_blocked_wallet.title",
                                heading: a("dyn_chainalysis_blocked_wallet.title")
                            },
                            "login-with-email-or-wallet": {
                                copykey: "dyn_login.title.all",
                                heading: a("dyn_login.title.all")
                            },
                            "login-with-email-or-wallet-full-wallet-list": {
                                copykey: "dyn_login.title.all_wallet_list",
                                heading: a("dyn_login.title.all_wallet_list")
                            },
                            "login-with-email-verification": {
                                copykey: "dyn_otp_verification.title",
                                heading: a("dyn_otp_verification.title")
                            },
                            "login-with-wallet-only": {
                                copykey: "dyn_login.title.wallet_only",
                                heading: a("dyn_login.title.wallet_only")
                            },
                            "multi-wallet-wallet-list": {
                                copykey: "connect-only" === r ? "dyn_wallet_list.title.connect" : "dyn_wallet_list.title.link",
                                heading: a("connect-only" === r ? "dyn_wallet_list.title.connect" : "dyn_wallet_list.title.link")
                            },
                            "network-not-supported": {
                                copykey: "dyn_network_not_supported.title",
                                heading: a("dyn_network_not_supported.title")
                            },
                            "passkey-recovery-complete": {
                                copykey: s ? "dyn_passkey_secure_modal.complete.title" : "dyn_passkey_recovery.complete.title",
                                heading: a(s ? "dyn_passkey_secure_modal.complete.title" : "dyn_passkey_recovery.complete.title")
                            },
                            "passkey-recovery-start": {
                                copykey: s ? "dyn_passkey_secure_modal.start.title" : "dyn_passkey_recovery.start.title",
                                heading: a(s ? "dyn_passkey_secure_modal.start.title" : "dyn_passkey_recovery.start.title")
                            },
                            "pending-connect": {
                                copykey: "dyn_login.connect_wallet.title",
                                heading: a("dyn_login.connect_wallet.title")
                            },
                            "pending-signature": {
                                copykey: "dyn_login.sign_wallet.title",
                                heading: a("dyn_login.sign_wallet.title")
                            },
                            "qr-code": {
                                copykey: "dyn_login.qr_code.title",
                                heading: a("dyn_login.qr_code.title")
                            },
                            "select-hardware-wallet": {
                                copykey: "dyn_select_hardware_wallet.title",
                                heading: a("dyn_select_hardware_wallet.title")
                            },
                            "select-wallet-in-wallet-group": {
                                copykey: "dyn_login.select_wallet_in_wallet_group.title",
                                heading: a("dyn_login.select_wallet_in_wallet_group.title")
                            },
                            "verify-email": {
                                copykey: "dyn_otp_verification.title",
                                heading: a("dyn_otp_verification.title")
                            },
                            "wallet-connect-mobile-wallets-list": {
                                copykey: "dyn_wallet_conect.mobile.wallet_list.title",
                                heading: (0, tb.jsxs)(tb.Fragment, {
                                    children: [(0, tb.jsx)(tW, {
                                        style: {
                                            height: "1.5rem",
                                            width: "1.5rem"
                                        }
                                    }), " ", a("dyn_wallet_conect.mobile.wallet_list.title")]
                                })
                            },
                            "wallet-group": {
                                copykey: "dyn_login.wallet_group.title",
                                heading: a("dyn_login.wallet_group.title")
                            },
                            "wallet-list": {
                                copykey: "dyn_wallet_list.title.select",
                                heading: a("dyn_wallet_list.title.select")
                            },
                            "wallet-sign": {
                                copykey: "dyn_wallet_transfer.sign.title",
                                heading: a("dyn_wallet_transfer.sign.title")
                            },
                            "wallet-used": {
                                copykey: "dyn_wallet_link.title",
                                heading: a("dyn_wallet_link.title")
                            }
                        },
                        d = l[t],
                        u = c[t];
                    return {
                        headerData: u,
                        helpHeaderData: d
                    }
                },
                useAuthLayoutChecks = () => {
                    let {
                        view: t
                    } = ViewContext_useViewContext(), {
                        user: r,
                        customPrivacyPolicy: a,
                        customTermsOfServices: s,
                        privacyPolicyUrl: l,
                        termsOfServiceUrl: c,
                        isBridgeFlow: d,
                        authMode: u
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        isFooterExpanded: m
                    } = useFooterAnimationContext(), {
                        mockedSDK: p
                    } = useMockContext(), {
                        helpHeaderData: h
                    } = useDynamicLayoutData({
                        authMode: u,
                        view: t.type
                    }), f = "wallet-list" !== t.type && "login-with-email-or-wallet-full-wallet-list" !== t.type && "multi-wallet-wallet-list" !== t.type && "login-with-wallet-only" !== t.type || m, y = "wallet-connect-mobile-wallets-list" === t.type || "wallet-list" === t.type || "login-with-email-or-wallet-full-wallet-list" === t.type || "login-with-wallet-only" === t.type, b = !!(h && !("qr-code" === t.type || "no-qr-not-installed" === t.type || "wallet-used" === t.type || "chainalysis-blocked-wallet" === t.type || "wallet-sign" === t.type || "collect-user-data" === t.type || "passkey-new-domain-detected" === t.type || isUserLinkingWallet(r, t.type, p))), C = "collect-user-data" !== t.type && "no-access" !== t.type && "chainalysis-blocked-wallet" !== t.type && "wallet-locked-view" !== t.type && "gate-blocked-wallet" !== t.type && "email-wallet-otp-verification-view" !== t.type && "bridge-welcome" !== t.type && "bridge-summary" !== t.type && "bridge-next-wallet-connection" !== t.type && "passkey-intro" !== t.type && "passkey-new-domain-detected" !== t.type && "social-redirect-view" !== t.type && "update-email" !== t.type && "collect-user-data-login-with-email" !== t.type && "passkey-recovery-bundle" !== t.type && "passkey-recovery-start" !== t.type && "embedded-reveal-view" !== t.type && "embedded-reveal-account-view" !== t.type && "rename-passkey" !== t.type && "embedded-wallet-auth-choice" !== t.type, E = d && ("wallet-list" === t.type || "qr-code" === t.type || "wallet-connect-mobile-wallets-list" === t.type || "pending-connect" === t.type || "pending-signature" === t.type || "pending-signature-without-back-button" === t.type || "bridge-next-wallet-connection" === t.type || "bridge-summary" === t.type), j = !!(!isUserLinkingWallet(r, t.type, p) && ("wallet-list" === t.type || "wallet-connect-mobile-wallets-list" === t.type || ("login-with-email-or-wallet" === t.type || "login-with-email-or-wallet-full-wallet-list" === t.type || "login-with-wallet-only" === t.type || "multi-wallet-wallet-list" === t.type) && (c || l || a || s))), I = "login-with-email-verification" === t.type || "verify-email" === t.type || "pending-connect" === t.type || "wallet-group" === t.type || "select-wallet-in-wallet-group" === t.type || "select-hardware-wallet" === t.type || "pending-signature" === t.type || "qr-code" === t.type || "wallet-used" === t.type || "email-wallet-otp-verification-view" === t.type, O = "login-with-email-or-wallet-full-wallet-list" !== t.type && "login-with-email-verification" !== t.type && "network-not-supported" !== t.type && "passkey-recovery-complete" !== t.type && "passkey-recovery-start" !== t.type && "passkey-recovery-bundle" !== t.type && "rename-passkey" !== t.type && "qr-code" !== t.type, P = "pending-signature" === t.type || "no-qr-not-installed" === t.type || "wallet-connect-mobile-wallets-list" === t.type || "login-with-email-verification" === t.type || "login-with-email-or-wallet-full-wallet-list" === t.type || "wallet-group" === t.type || "select-wallet-in-wallet-group" === t.type || "select-hardware-wallet" === t.type || "pending-connect" === t.type || "account-exists" === t.type || "passkey-intro" === t.type || "qr-code" === t.type || "merge-user-accounts" === t.type && !r;
                    return {
                        displayBorderBelowHeader: f,
                        isWalletListTypeView: y,
                        showBackButton: P,
                        showCloseButton: O,
                        showConnectedWalletProgress: E,
                        showDefaultFooter: !E && !I && !j,
                        showDynamicFooter: I,
                        showHeader: C,
                        showHelpContent: b,
                        showToSFooter: j
                    }
                },
                getLastUsedWalletKey = () => LocalStorage.getFromLS(nu),
                getWalletGroupLabel = t => {
                    let r = getLastUsedWalletKey(),
                        a = t.groupedWallets.some(t => t.walletConnector.key === r);
                    if (a) return "Last used";
                    let s = t.groupedWallets.some(t => t.isInstalledOnBrowser);
                    return s ? "Installed" : "multi-chain" === getWalletGroupType(t) ? "Multichain" : void 0
                },
                getWalletLabel = t => {
                    let r = getLastUsedWalletKey(),
                        {
                            key: a
                        } = t.walletConnector;
                    return a === r ? "Last used" : t.isInstalledOnBrowser ? "Installed" : void 0
                },
                getWalletListItemLabel = ({
                    wallet: t
                }) => isWalletGroup(t) ? getWalletGroupLabel(t) : getWalletLabel(t),
                isProgrammableNetworkSwitchSupported = t => {
                    let r = new URLSearchParams(window.location.search),
                        a = r.get("dev_isProgrammableNetworkSwitchSupported");
                    return a ? "true" === a : !0 !== t.switchNetworkOnlyFromWallet
                },
                useHandleWalletsToConnect = () => {
                    let {
                        bridgeChainsToConnect: t,
                        setBridgeChainsToConnect: r,
                        setShowAuthFlow: a,
                        setIsFullyConnected: s,
                        isFullyConnected: l
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        setView: c,
                        goToInitialView: d
                    } = ViewContext_useViewContext();
                    return {
                        handleWalletsToConnect: ({
                            walletConnector: u
                        }) => {
                            if (!t) {
                                s(!0), a(!1);
                                return
                            }
                            if (0 === t.length || !u || !u.connectedChain) return a(!1), d();
                            let m = t.filter(t => t.chain !== (null == u ? void 0 : u.connectedChain));
                            r(m);
                            let p = 0 === m.length;
                            if (p) {
                                l ? (a(!1), d()) : (s(!0), c("bridge-summary"));
                                return
                            }
                            c("bridge-next-wallet-connection")
                        }
                    }
                },
                im = ["slope", "myalgo", "bloctoevm", "perawallet"],
                showPendingConnectView = (t, r) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    let a = getWalletProvider(t);
                    if ("walletConnect" === a || "qrCode" === a) return;
                    im.forEach(a => {
                        t.key === a && r("pending-connect")
                    });
                    let s = yield t.getConnectedAccounts();
                    0 === s.length && r("pending-connect")
                }),
                useConnectAndSign = ({
                    shouldUpdateWallets: t = !0,
                    shouldCallCallback: r = !0
                } = {}) => {
                    let {
                        setView: a,
                        goToInitialView: s
                    } = ViewContext_useViewContext(), {
                        engageCaptcha: l,
                        getCaptchaToken: c
                    } = CaptchaContext_useCaptchaContext(), {
                        setErrorMessage: d
                    } = ErrorContext_useErrorContext(), {
                        authMode: u,
                        connectWallet: m,
                        consumeNonce: p,
                        displaySiweStatement: h,
                        environmentId: f,
                        projectSettings: y,
                        setIsSingleWalletAccount: b,
                        user: C,
                        walletUiUtils: E,
                        setIsVerificationInProgress: j
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        handleWalletsToConnect: I
                    } = useHandleWalletsToConnect(), O = useVerifyWallet_useVerifyWallet({
                        consumeNonce: p,
                        displaySiweStatement: h,
                        environmentId: f,
                        projectSettings: y,
                        setIsSingleWalletAccount: b
                    }), handleWalletVerify = (t, r, s) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        !(0, tl.dE)(t) || (0, tl.aw)(t) ? a("pending-signature"): E.disabledConfirmationOnce(), yield O({
                            captchaToken: s,
                            publicWalletAddress: r,
                            walletConnector: t
                        })
                    }), handleWalletVerifyError = t => {
                        var r;
                        let a = (null == t ? void 0 : t.code) === "user-cancelled";
                        a || tv.debug(t), d(null === (r = null == t ? void 0 : t.code) || void 0 === r ? void 0 : r.toString()), s(), a || j(!1)
                    };
                    return ({
                        walletConnector: s,
                        fetchPublicAddressOpts: d
                    }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        var p;
                        j(!0);
                        try {
                            yield showPendingConnectView(s, a), (0, tl.dE)(s) && ((0, tl.EZ)(s) ? a("email-wallet-otp-verification-view") : (0, tl.aw)(s) || a("wait-for-email-confirmation-view"));
                            let h = yield m(s, d, {
                                applyOnBeforeConnectSuccessConfirmation: r,
                                raiseOnConnect: !0
                            });
                            if (!(null == h ? void 0 : h.address)) return;
                            let {
                                address: f
                            } = h, b = yield s.getNetwork(), E = isSupportedNetwork({
                                network: b,
                                walletConnector: s
                            });
                            if (!E) {
                                if (!isProgrammableNetworkSwitchSupported(s)) return a("network-not-supported-manual");
                                return a("network-not-supported")
                            }
                            if (isConnectOnly(C, u)) {
                                LocalStorage.setToLS(nu, s.key), t && I({
                                    walletConnector: s
                                });
                                return
                            }
                            if (null === (p = null == y ? void 0 : y.security.hCaptcha) || void 0 === p ? void 0 : p.enabled) {
                                l({
                                    authMethod: "wallet",
                                    onCaptchaSuccess: t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                                        try {
                                            yield handleWalletVerify(s, f, t)
                                        } catch (t) {
                                            handleWalletVerifyError(t)
                                        }
                                    })
                                });
                                return
                            }
                            yield handleWalletVerify(s, f, c())
                        } catch (t) {
                            handleWalletVerifyError(t)
                        }
                    })
                },
                ip = ["dapper"],
                requiresTwoStepAuthentication = t => (0, td.tq)() && !(null == t ? void 0 : t.canConnectViaCustodialService) || ip.includes((null == t ? void 0 : t.key) || ""),
                useConnectAndSignSplitSteps_useConnectAndSignSplitSteps = () => {
                    let {
                        setView: t,
                        goToInitialView: r
                    } = ViewContext_useViewContext(), {
                        setErrorMessage: a
                    } = ErrorContext_useErrorContext(), {
                        getCaptchaToken: s,
                        engageCaptcha: l
                    } = CaptchaContext_useCaptchaContext(), {
                        connectWallet: c,
                        consumeNonce: d,
                        displaySiweStatement: u,
                        projectSettings: m,
                        environmentId: p,
                        setIsSingleWalletAccount: h,
                        setShowAuthFlow: f,
                        user: y,
                        authMode: b,
                        setIsVerificationInProgress: C
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        handleWalletsToConnect: E
                    } = useHandleWalletsToConnect(), j = useVerifyWallet_useVerifyWallet({
                        consumeNonce: d,
                        displaySiweStatement: u,
                        environmentId: p,
                        projectSettings: m,
                        setIsSingleWalletAccount: h
                    }), onErrorHandler = t => {
                        var s;
                        tv.debug(t), r(), C(!1);
                        let l = t instanceof td.BI && (0, td.tq)();
                        l || a(null !== (s = t.code) && void 0 !== s ? s : t.toString())
                    };
                    return {
                        onlyConnectUser: ({
                            walletConnector: r,
                            fetchPublicAddressOpts: a
                        }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            var s;
                            C(!0), yield showPendingConnectView(r, t);
                            try {
                                if (yield c(r, a, {
                                        raiseOnConnect: !0
                                    }), isConnectOnly(y, b)) {
                                    LocalStorage.setToLS(nu, r.key), E({
                                        walletConnector: r
                                    });
                                    return
                                }
                                if (null === (s = null == m ? void 0 : m.security.hCaptcha) || void 0 === s ? void 0 : s.enabled) {
                                    l({
                                        authMethod: "wallet",
                                        onCaptchaSuccess: r => _tslib_awaiter(void 0, void 0, void 0, function*() {
                                            f(!0), t("pending-signature")
                                        })
                                    });
                                    return
                                }
                                f(!0), t("pending-signature")
                            } catch (t) {
                                onErrorHandler(t);
                                return
                            }
                        }),
                        signAlreadyConnectedUser: ({
                            walletConnector: t,
                            fetchPublicAddressOpts: r
                        }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            C(!0);
                            try {
                                let a = yield c(t, r);
                                if (!(null == a ? void 0 : a.address)) return;
                                yield j({
                                    captchaToken: s(),
                                    publicWalletAddress: a.address,
                                    walletConnector: t
                                })
                            } catch (t) {
                                onErrorHandler(t);
                                return
                            }
                        })
                    }
                },
                isSelectedWalletAlreadyConnected = (t, r, a) => !!a && t.map(({
                    connector: t
                }) => t.key).includes(r.key),
                useWalletItemActions = () => {
                    let {
                        setMultiWalletWidgetState: t,
                        setShowAuthFlow: r,
                        setSelectedWalletConnectorKey: a,
                        walletConnectorOptions: s,
                        setQrcodeUri: l,
                        setDesktopUri: c,
                        user: d,
                        linkedWallets: u,
                        setLegacyIsVerifying: m
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        mockedSDK: p
                    } = useMockContext(), {
                        setError: h
                    } = ErrorContext_useErrorContext(), {
                        setView: f
                    } = ViewContext_useViewContext(), {
                        onlyConnectUser: y
                    } = useConnectAndSignSplitSteps_useConnectAndSignSplitSteps(), b = useConnectAndSign(), handleCustodialWalletClick = r => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        let s = requiresTwoStepAuthentication(r);
                        s ? (a(r.key), yield y({
                            walletConnector: r
                        })) : (a(r.key), t("awaiting_signature", void 0, "linking_new_wallet")), f("pending-signature")
                    }), handleMobileWalletClick = t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        a(t.key), y({
                            walletConnector: t
                        })
                    }), handleInstalledExtensionClick = r => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        a(r.key), t("awaiting_signature", void 0, "linking_new_wallet")
                    }), handleUninstalledClick = t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        a(t.key), t.canConnectViaQrCode ? (b({
                            fetchPublicAddressOpts: {
                                onDesktopUri: t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                                    c(t)
                                }),
                                onDisplayUri: t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                                    l(t)
                                })
                            },
                            walletConnector: t
                        }), f("qr-code")) : f("no-qr-not-installed"), h(void 0)
                    }), handleAlreadyConnectedWallet = s => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        let l = yield s.getConnectedAccounts(), c = u.find(t => {
                            var r;
                            return t.address.toLowerCase() === (null === (r = l[0]) || void 0 === r ? void 0 : r.toLowerCase())
                        });
                        c ? t("awaiting_account_switch", "linking_new_wallet") : t("awaiting_signature", void 0, "linking_new_wallet"), r(!1), a(s.key)
                    });
                    return {
                        handleAlreadyConnectedWallet,
                        handleCustodialWalletClick,
                        handleInstalledExtensionClick,
                        handleMobileWalletClick,
                        handleUninstalledClick,
                        handleWalletItemClick: t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            let {
                                walletConnector: r,
                                isInstalledOnBrowser: a
                            } = t;
                            p || ("FLOW" === r.connectedChain && (yield r.endSession()), m(!1), isSelectedWalletAlreadyConnected(u, r, d) && "FLOW" !== r.connectedChain ? handleAlreadyConnectedWallet(r) : r.canConnectViaCustodialService ? handleCustodialWalletClick(r) : (0, td.tq)() ? "walletconnect" === r.key ? f("wallet-connect-mobile-wallets-list") : handleMobileWalletClick(r) : a ? handleInstalledExtensionClick(r) : handleUninstalledClick(r))
                        }),
                        openWallet: (t, r) => {
                            var a;
                            let {
                                openMobileWallet: l = handleMobileWalletClick,
                                openCustodialWallet: c = handleCustodialWalletClick,
                                openExtensionWallet: d = handleInstalledExtensionClick
                            } = r || {}, u = null === (a = s.find(r => r.key === t)) || void 0 === a ? void 0 : a.walletConnector;
                            u && ((0, td.tq)() ? l(u) : u.canConnectViaCustodialService ? c(u) : u.isInstalledOnBrowser() && d(u))
                        }
                    }
                },
                ListTileAnimatedTrailing = ({
                    hoverElement: t,
                    children: r
                }) => (0, tb.jsx)("div", {
                    children: (0, tb.jsxs)("div", {
                        className: "list-tile-animated-trailing",
                        children: [(0, tb.jsx)("div", {
                            className: "list-tile-animated-trailing__child",
                            children: r
                        }), (0, tb.jsx)("div", {
                            className: "list-tile-animated-trailing__hover-element",
                            children: t
                        })]
                    })
                }),
                ListTile = ({
                    children: t,
                    onClick: r,
                    leading: a,
                    disabled: s = !1,
                    trailing: l,
                    style: c,
                    className: d = "",
                    dataTestId: u,
                    copykey: m
                }) => (0, tb.jsxs)("button", {
                    "data-testid": u,
                    type: "button",
                    className: classNames_classNames(d, "list-tile"),
                    onClick: r,
                    style: c,
                    disabled: s,
                    children: [a, (0, tb.jsx)("div", {
                        className: "list-tile__children",
                        children: (0, tb.jsx)(Typography_Typography, {
                            weight: "medium",
                            variant: "body_normal",
                            color: "primary",
                            as: "span",
                            copykey: m,
                            children: t
                        })
                    }), l]
                }),
                WalletListItem = ({
                    disabled: t = !1,
                    wallet: r,
                    onResetSearchValue: a,
                    tile: s = ({
                        leading: t,
                        name: r,
                        onClick: a,
                        trailing: s
                    }) => (0, tb.jsx)(ListTile, {
                        leading: t,
                        trailing: s,
                        onClick: a,
                        className: "wallet-list-item__tile",
                        dataTestId: "ListTile",
                        children: r
                    })
                }) => {
                    let {
                        navigateToWalletGroup: l
                    } = useWalletGroupContext(), {
                        setView: c
                    } = ViewContext_useViewContext(), d = isWalletGroup(r), {
                        walletBook: u
                    } = (0, tc.yw)(), {
                        handleWalletItemClick: m
                    } = useWalletItemActions(), p = getWalletListItemLabel({
                        wallet: r
                    }), h = d ? (0, tc.Dd)(u, r.key).name : (0, tc.MO)(u, r.key).name, f = (0, tb.jsx)(tc.o, {
                        className: "wallet-list-item__leading",
                        walletKey: r.key,
                        style: {
                            height: pixelToRem_pixelToRem(28),
                            width: pixelToRem_pixelToRem(28)
                        }
                    }), y = (0, tb.jsx)(ListTileAnimatedTrailing, {
                        hoverElement: (0, tb.jsx)(Icon_Icon, {
                            color: "text-tertiary",
                            size: "mini",
                            children: (0, tb.jsx)(SvgStroke, {})
                        }),
                        children: p && (0, tb.jsx)(Badge, {
                            dot: !0,
                            text: (0, tb.jsx)(Typography_Typography, {
                                variant: "body_small",
                                children: p
                            })
                        })
                    });
                    return (0, tb.jsx)(s, {
                        leading: f,
                        trailing: y,
                        name: h,
                        onClick: () => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            if (!t) {
                                if (null == a || a(""), d) return l(r);
                                if ((0, tl.UD)(r.walletConnector) && r.walletConnector.canConnectWithHardwareWallet()) {
                                    c("select-hardware-wallet", {
                                        onSelectWallet: m,
                                        wallet: r
                                    });
                                    return
                                }
                                yield m(r)
                            }
                        })
                    })
                },
                SortWallets = t => r => [...r].sort((r, a) => {
                    let s = t.indexOf(r.key),
                        l = t.indexOf(a.key);
                    return -1 !== s && -1 === l ? -1 : -1 === s && -1 !== l ? 1 : s - l
                }),
                FilterBridgeChainsName = t => r => r.filter(r => r.walletConnector.supportedChains.includes(t)),
                SearchNotFoundMessage = ({
                    title: t,
                    subtitle: r,
                    image: a
                }) => {
                    let {
                        t: s
                    } = useTranslation_useTranslation();
                    return (0, tb.jsxs)("div", {
                        className: "search-instead__container",
                        children: [a && (0, tb.jsx)(Icon_Icon, {
                            className: "search-instead__container__image",
                            color: "text-tertiary",
                            children: a
                        }), (0, tb.jsx)(Typography_Typography, {
                            color: "secondary",
                            variant: "body_small",
                            weight: "regular",
                            copykey: "dyn_wallet_list.wallet_missing.title",
                            children: t || s("dyn_wallet_list.wallet_missing.title")
                        }), (0, tb.jsx)(Typography_Typography, {
                            color: "primary",
                            variant: "button_primary",
                            weight: "regular",
                            copykey: "dyn_wallet_list.wallet_missing.description",
                            children: r || s("dyn_wallet_list.wallet_missing.description")
                        })]
                    })
                };
            LocalStorage.setToLS(np, "");
            let WalletList = ({
                    isWalletConnectList: t = !1
                }) => {
                    var r;
                    let {
                        walletsFilter: a,
                        signWithEmailWalletName: s,
                        walletConnectorOptions: l,
                        projectSettings: c,
                        defaultNumberOfWalletsToShow: d,
                        bridgeChainsToConnect: u,
                        connectedWallets: m,
                        authMode: p,
                        multiWallet: h
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        walletBook: f
                    } = (0, tc.yw)(), {
                        error: y
                    } = ErrorContext_useErrorContext(), {
                        showDefaultFooter: b
                    } = useAuthLayoutChecks(), [C, E] = (0, nt.useState)(!0), {
                        t: j
                    } = useTranslation_useTranslation(), [I, O] = (0, nt.useState)(null !== (r = LocalStorage.getFromLS(np)) && void 0 !== r ? r : ""), P = (null == u ? void 0 : u.length) && FilterBridgeChainsName(u[0].chain), R = P && P(l), {
                        numberOfWallets: F,
                        walletsList: W
                    } = walletListBuilder({
                        authMode: p,
                        connectedWallets: m,
                        groupWallets: !0,
                        inputList: R || l,
                        isWalletConnectList: t,
                        lastUsedWalletKey: LocalStorage.getFromLS(nu),
                        multiWallet: h,
                        numberOfWalletsToShow: d,
                        searchFilter: I,
                        showMoreWalletsWithFilter: !0,
                        signWithEmailWalletName: s,
                        walletBook: f,
                        walletsFilter: a
                    }), M = F > d && W.length !== F, D = (0, nt.useRef)(null), handleFilterValueChange = t => {
                        LocalStorage.setToLS(np, t), O(t)
                    }, L = c ? M && (0, tb.jsx)("div", {
                        className: classNames_classNames("wallet-list__search-container", {
                            "wallet-list__search-container--scroll": !y
                        }),
                        children: (0, tb.jsx)(Search, {
                            copykey: "dyn_wallet_list.search.label",
                            label: j("dyn_wallet_list.search.label", {
                                numberOfWallets: F
                            }),
                            value: I,
                            onChange: ({
                                target: {
                                    value: t
                                }
                            }) => handleFilterValueChange(t),
                            onClickClear: () => handleFilterValueChange("")
                        })
                    }) : (0, tb.jsx)(Skeleton, {
                        className: "wallet-list__search-skeleton"
                    });
                    return (0, tb.jsxs)(tb.Fragment, {
                        children: [L, !!y && (0, tb.jsx)(ErrorContainer, {
                            className: "wallet-list__error-container",
                            withIcon: !1,
                            children: y
                        }), (0, tb.jsx)("div", {
                            className: "wallet-list__container",
                            children: (0, tb.jsxs)("div", {
                                className: classNames_classNames("wallet-list__scroll-container", {
                                    "wallet-list__scroll-container--error": !!y,
                                    "wallet-list__scroll-container--full-height": M
                                }),
                                "data-testid": "wallet-list-scroll-container",
                                ref: D,
                                onScroll: () => {
                                    let t = D.current;
                                    t && ((null == t ? void 0 : t.scrollTop) > (null == t ? void 0 : t.clientHeight) * 1.25 ? E(!1) : E(!0))
                                },
                                children: [c ? (0, tb.jsxs)(tb.Fragment, {
                                    children: [0 === l.length && (0, tb.jsx)(ErrorContainer, {
                                        copykey: "dyn_wallet_list.configuration_mismatch",
                                        children: j("dyn_wallet_list.configuration_mismatch")
                                    }), l.length && 0 === W.length ? (0, tb.jsx)(SearchNotFoundMessage, {
                                        title: j("dyn_wallet_list.search.not_found.title"),
                                        subtitle: j("dyn_wallet_list.search.not_found.description"),
                                        image: (0, tb.jsx)(SvgNoWalletFound, {})
                                    }) : W.map((t, r) => (0, tb.jsx)(WalletListItem, {
                                        wallet: t,
                                        onResetSearchValue: () => handleFilterValueChange("")
                                    }, `${t.key}_${r}`))]
                                }) : (0, tb.jsx)(Skeleton, {
                                    count: 10,
                                    className: "wallet-list__tile-skeleton"
                                }), M && !I && c && (0, tb.jsx)(SearchNotFoundMessage, {})]
                            })
                        }), b && (0, tb.jsx)(DefaultFooter, {
                            hideBorder: !C
                        })]
                    })
                },
                useCreateDynamicEmbeddedWalletMutation = () => {
                    var t, r, a;
                    let {
                        setPrimaryWalletId: s,
                        setCallback: l,
                        setUser: c,
                        user: d,
                        setShowAuthFlow: u,
                        projectSettings: m
                    } = useInternalDynamicContext_useInternalDynamicContext(), [p, h] = (0, nt.useState)(!1), [f, y] = (0, nt.useState)(), b = (null === (r = null === (t = null == m ? void 0 : m.sdk) || void 0 === t ? void 0 : t.embeddedWallets) || void 0 === r ? void 0 : r.chainConfigurations) || [], C = (null === (a = b.find(t => t.primary)) || void 0 === a ? void 0 : a.name) === "SOL" ? tu.AIv.Sol : tu.AIv.Evm, E = b.filter(t => t.enabled).map(t => "SOL" === t.name ? tu.AIv.Sol : tu.AIv.Evm), j = (0, nt.useCallback)(({
                        authToken: t,
                        decodedJwt: r,
                        environmentId: a,
                        walletConnectorOptions: m,
                        withAuthenticator: p
                    }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        var f, b;
                        h(!0);
                        try {
                            let {
                                embeddedWalletVerifiedCredential: h,
                                jwt: y,
                                decodedJwt: j,
                                walletConnector: I
                            } = yield(p ? createEmbeddedWalletWithPasskey : createPregeneratedWallet)({
                                authToken: t,
                                chains: E,
                                environmentId: a,
                                user: null != d ? d : createUserProfile(r),
                                walletConnector: findPasskeyEmailWalletConnector(m, C)
                            }), O = null === (f = null == j ? void 0 : j.verifiedCredentials) || void 0 === f ? void 0 : f.find(({
                                walletName: t
                            }) => null == t ? void 0 : t.startsWith("turnkey")), P = !!(null === (b = null == O ? void 0 : O.walletProperties) || void 0 === b ? void 0 : b.isAuthenticatorAttached), R = {
                                address: (yield I.fetchPublicAddress()) || "",
                                authenticated: P,
                                chain: I.connectedChain || "",
                                connected: !0,
                                connector: I,
                                id: h.id
                            };
                            nr.emit("embeddedWalletCreated", R);
                            let F = findSmartWallet(h, j.verifiedCredentials);
                            F ? (yield initializeSmartWallet({
                                account: F,
                                verifiedCredentials: j.verifiedCredentials,
                                walletConnectorOptions: m
                            }), s(F.id)) : s(h.id), storeAuthToken(y), c(createUserProfile(j)), u(!1, {
                                performMultiWalletChecks: !1
                            }), l("embeddedWalletCreated", {
                                email: (null == O ? void 0 : O.email) || "",
                                verifiedCredential: O
                            })
                        } catch (t) {
                            y(t), tv.error("Failed to create embedded wallet", t), nr.emit("embeddedWalletFailed", t)
                        } finally {
                            h(!1)
                        }
                    }), [l, s, u, c, d]);
                    return {
                        createDynamicEmbeddedWalletMutation: j,
                        error: f,
                        isLoading: p
                    }
                },
                useTurnkey = () => {
                    let {
                        projectSettings: t,
                        setPrimaryWalletId: r,
                        walletConnectorOptions: a,
                        setShowAuthFlow: s,
                        primaryWallet: l,
                        environmentId: c
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        setView: d
                    } = ViewContext_useViewContext(), {
                        createDynamicEmbeddedWalletMutation: u
                    } = useCreateDynamicEmbeddedWalletMutation(), m = (0, nt.useCallback)((t, r) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        return yield u({
                            authToken: t,
                            decodedJwt: r,
                            environmentId: c,
                            walletConnectorOptions: a,
                            withAuthenticator: !1
                        }), s(!1, {
                            performMultiWalletChecks: !1
                        }), new Promise((t, r) => {
                            nr.once("embeddedWalletCreated", r => t(r)), nr.once("embeddedWalletFailed", t => r(t))
                        })
                    }), [u, c, a, s]), p = (0, nt.useCallback)(() => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        return s(!0, {
                            ignoreIfIsEmbeddedWidget: !1,
                            performMultiWalletChecks: !1
                        }), d("passkey-intro"), new Promise((t, r) => {
                            nr.once("embeddedWalletCreated", r => t(r)), nr.once("embeddedWalletFailed", t => {
                                if (t instanceof DOMException && "NotAllowedError" === t.name) {
                                    tv.error("User cancelled the passkey creation.", t);
                                    return
                                }
                                r(t)
                            })
                        })
                    }), [s, d]), h = (0, nt.useCallback)((t, s) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        var l, c, d, u;
                        let m = decodeJwt(t),
                            {
                                chain: p
                            } = s,
                            h = findTurnkeyWallet(a, p);
                        if (m) {
                            null === (l = null == h ? void 0 : h.walletConnector) || void 0 === l || l.setVerifiedCredentials(m.verifiedCredentials);
                            let t = findSmartWallet(s, m.verifiedCredentials);
                            t ? (yield initializeSmartWallet({
                                account: t,
                                verifiedCredentials: m.verifiedCredentials,
                                walletConnectorOptions: a
                            }), r(t.id)) : r(s.id)
                        }
                        let f = !!(null === (c = s.walletProperties) || void 0 === c ? void 0 : c.isAuthenticatorAttached),
                            y = {
                                address: (yield null === (d = null == h ? void 0 : h.walletConnector) || void 0 === d ? void 0 : d.fetchPublicAddress()) || "",
                                authenticated: f,
                                chain: (null === (u = null == h ? void 0 : h.walletConnector) || void 0 === u ? void 0 : u.connectedChain) || "",
                                connected: !0,
                                connector: (null == h ? void 0 : h.walletConnector) || {},
                                id: s.id
                            };
                        return Promise.resolve(y)
                    }), [r, a]), f = (0, nt.useCallback)((a, c, d = tu.AIv.Evm) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        var u;
                        let f = getUserWalletsFromVerifiedCredentials(a);
                        if (!(null == f ? void 0 : f.length)) return (null === (u = null == t ? void 0 : t.sdk.embeddedWallets) || void 0 === u ? void 0 : u.forceAuthenticatorAtSignup) ? p() : m(a, c);
                        s(!1, {
                            performMultiWalletChecks: !1
                        });
                        let y = findEmbeddedWalletFromVerifiedCredentials(a, d);
                        return y ? h(a, y) : (l || r(f[0].id), Promise.resolve(l))
                    }), [t, s, h, p, m, l, r]);
                    return {
                        createTurnkeyWallet: f
                    }
                },
                useEmbeddedWallet = () => {
                    let {
                        projectSettings: t,
                        onboardingOnlyJwt: r
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        createTurnkeyWallet: a
                    } = useTurnkey(), s = (0, nt.useCallback)((s = tu.AIv.Evm) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        var l;
                        let c = null !== (l = getAuthToken()) && void 0 !== l ? l : r,
                            d = decodeJwt(c);
                        if (!c || !d) throw Error("User is not logged in");
                        if (isTurnkeyEnabled(t)) return a(c, d, s);
                        throw Error("No embedded wallet is enabled. Go to the dashboard and make sure to have both Embedded wallets and at least one EVM network enabled. Also, check if EthereumWalletConnectors is in the DynamicContextProvider > settings > walletConnectors.")
                    }), [r, t, a]);
                    return {
                        createEmbeddedWallet: s,
                        userHasEmbeddedWallet: () => {
                            var t;
                            let a = null !== (t = getAuthToken()) && void 0 !== t ? t : r;
                            return !!a && isEmbeddedWalletPresent(a)
                        }
                    }
                },
                ih = (0, nt.createContext)(void 0),
                PasskeyContextProviderWithBrowser = ({
                    children: t
                }) => {
                    var r, a, s, l, c, d, u, m;
                    let {
                        userHasEmbeddedWallet: p
                    } = useEmbeddedWallet(), {
                        isTurnkeyWalletWithoutAuthenticator: h
                    } = useIsTurnkeyWallet(), {
                        environmentId: f,
                        projectSettings: y
                    } = useInternalDynamicContext_useInternalDynamicContext(), [b, C] = (0, nt.useState)(!1), [E, j] = (0, nt.useState)(void 0), [I, O] = (0, nt.useState)(void 0), [P, R] = useLocalStorage(nw, !0), F = (0, nt.useMemo)(() => {
                        var t, r, a, s;
                        let l = !!(null === (s = null === (a = null === (r = null === (t = null == y ? void 0 : y.sdk) || void 0 === t ? void 0 : t.embeddedWallets) || void 0 === r ? void 0 : r.supportedSecurityMethods) || void 0 === a ? void 0 : a.passkey) || void 0 === s ? void 0 : s.isEnabled);
                        return !1 !== P && h && l
                    }, [h, P, null === (l = null === (s = null === (a = null === (r = null == y ? void 0 : y.sdk) || void 0 === r ? void 0 : r.embeddedWallets) || void 0 === a ? void 0 : a.supportedSecurityMethods) || void 0 === s ? void 0 : s.passkey) || void 0 === l ? void 0 : l.isEnabled]), W = (0, nt.useCallback)(() => {
                        var t, r, a, s;
                        let l = !!(null === (s = null === (a = null === (r = null === (t = null == y ? void 0 : y.sdk) || void 0 === t ? void 0 : t.embeddedWallets) || void 0 === r ? void 0 : r.supportedSecurityMethods) || void 0 === a ? void 0 : a.passkey) || void 0 === s ? void 0 : s.isEnabled);
                        return !F && h && l
                    }, [F, h, null === (m = null === (u = null === (d = null === (c = null == y ? void 0 : y.sdk) || void 0 === c ? void 0 : c.embeddedWallets) || void 0 === d ? void 0 : d.supportedSecurityMethods) || void 0 === u ? void 0 : u.passkey) || void 0 === m ? void 0 : m.isEnabled]), M = getAuthToken(), D = usePromise_usePromise(() => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        let t = yield getUserPasskeys({
                            environmentId: f,
                            userJwt: M
                        });
                        return t.passkeys
                    }), {
                        deps: [f, M, p(), b],
                        enabled: !!(f && M && p())
                    }), L = (0, nt.useMemo)(() => {
                        if ("undefined" == typeof window) return !1;
                        let {
                            location: {
                                hostname: t
                            }
                        } = window;
                        return !!D.data && D.data.some(r => {
                            if (!r.origin) return !1;
                            try {
                                let a = new URL(r.origin).hostname;
                                return a === (0, td.KT)() || a === t
                            } catch (t) {
                                return tv.error(t), !1
                            }
                        })
                    }, [D.data]), U = !h && !L, B = (0, nt.useMemo)(() => {
                        var t;
                        return {
                            passkey: E,
                            passkeyEdited: b,
                            passkeyIcon: I,
                            setPasskey: j,
                            setPasskeyEdited: C,
                            setPasskeyIcon: O,
                            setShowSecureAccountBanner: R,
                            showAlert: W,
                            showSecureAccountBanner: F,
                            userHasPasskeysForCurrentOrigin: L,
                            userNeedsCrossDomainPasskey: U,
                            userPasskeys: null !== (t = D.data) && void 0 !== t ? t : [],
                            userPasskeysLoading: D.isLoading
                        }
                    }, [E, b, I, L, D.data, D.isLoading, h, U, W, R, F]);
                    return (0, tb.jsx)(ih.Provider, {
                        value: B,
                        children: t
                    })
                },
                PasskeyContextProvider = ({
                    children: t
                }) => (0, tb.jsx)(PasskeyContextProviderWithBrowser, {
                    children: t
                }),
                usePasskeyContext = () => {
                    let t = (0, nt.useContext)(ih);
                    if (void 0 === t) throw Error("usage of PasskeyContext not wrapped in `PasskeyContextProvider`.");
                    return t
                },
                AnimatePresence = ({
                    children: t,
                    animationComponent: r
                }) => {
                    let [a, s] = (0, nt.useState)(!0), l = useForceUpdate(), c = (0, nt.useRef)(null), d = (0, nt.useMemo)(() => !!t, [t]), u = usePrevious_usePrevious(d), m = (0, nt.useCallback)(() => {
                        c.current = null, l()
                    }, [l]);
                    return (0, nt.useEffect)(() => {
                        (0, nt.isValidElement)(t) && (c.current = nt.Children.map(t, t => (0, nt.cloneElement)(t)))
                    }, [t]), (0, nt.useEffect)(() => {
                        d && !u && s(!0), u && !d && s(!1)
                    }, [d, u]), (0, nt.cloneElement)(r, {
                        children: t || c.current,
                        isShown: a,
                        onUnmount: m
                    })
                };
            (p = el || (el = {}))[p.CREATED = 0] = "CREATED", p[p.EDITED = 1] = "EDITED";
            let PasskeyCreatedSuccessBanner = ({
                    className: t
                }) => {
                    let {
                        passkeySuccessPopup: r
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        t: a
                    } = useTranslation_useTranslation();
                    return (0, tb.jsxs)(AnimatePresence, {
                        animationComponent: (0, tb.jsx)(rb, {}),
                        children: [r === el.EDITED && (0, tb.jsx)(ErrorContainer, {
                            variant: "success",
                            className: t,
                            copykey: "dyn_passkey_success.edited",
                            children: a("dyn_passkey_success.edited")
                        }), r === el.CREATED && (0, tb.jsx)(ErrorContainer, {
                            variant: "success",
                            className: t,
                            copykey: "dyn_passkey_success.created",
                            children: a("dyn_passkey_success.created")
                        })]
                    })
                },
                iy = (0, nt.forwardRef)((t, r) => {
                    var {
                        children: a,
                        isOpen: s,
                        onClickOutside: l,
                        onScroll: c,
                        className: d,
                        style: u,
                        maxHeight: m = 300
                    } = t, p = _tslib_rest(t, ["children", "isOpen", "onClickOutside", "onScroll", "className", "style", "maxHeight"]);
                    let {
                        containerRef: h
                    } = usePopper(), f = useForwardedRef(r);
                    useOnClickOutside_useOnClickOutside(f, () => null == l ? void 0 : l()), (0, nt.useEffect)(() => {
                        if (h.current && p.anchorRef.current) return watchToScrollInHierarchy(h.current, p.anchorRef.current, () => null == c ? void 0 : c())
                    }, [h, p.anchorRef, c]);
                    let {
                        mount: y,
                        stage: b,
                        currentDuration: C
                    } = useTransition({
                        inDuration: 300,
                        isShown: s,
                        outDuration: 300
                    }), E = classNames_classNames({
                        "dropdown--entering": "ENTERING" === b,
                        "dropdown--exiting": "EXITING" === b
                    });
                    return y ? (0, tb.jsx)(rj, Object.assign({}, p, {
                        ref: f,
                        children: (0, tb.jsx)("div", {
                            className: classNames_classNames("dropdown", E, d),
                            style: Object.assign({
                                "--max-height": `${m}px`,
                                animationDuration: `${C}ms`
                            }, u),
                            children: a
                        })
                    })) : null
                });
            iy.displayName = "Dropdown";
            var ig = '@layer shadow-reset{.dynamic-shadow-dom-content{all:initial}}@layer preflight{a,hr{color:inherit}progress,sub,sup{vertical-align:baseline}blockquote,body,dd,dl,fieldset,figure,h1,h2,h3,h4,h5,h6,hr,menu,ol,p,pre,ul{margin:0}fieldset,legend,menu,ol,ul{padding:0}*,:after,:before{border:0 solid;box-sizing:border-box}html{-webkit-text-size-adjust:100%;-moz-text-size-adjust:100%;text-size-adjust:100%;font-feature-settings:normal;font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4}body{line-height:inherit}hr{border-top-width:1px;height:0}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,pre,samp{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative}sub{bottom:-.25em}sup{top:-.5em}table{border-collapse:collapse;border-color:inherit;text-indent:0}button,input,optgroup,select,textarea{color:inherit;font-family:inherit;font-size:100%;font-weight:inherit;line-height:inherit;margin:0;padding:0}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button;-moz-appearance:button;appearance:button;background-color:transparent;background-image:none}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;-moz-appearance:textfield;appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none;appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;appearance:button;font:inherit}summary{display:list-item}menu,ol,ul{list-style:none}textarea{resize:vertical}input::-moz-placeholder,textarea::-moz-placeholder{color:#9ca3af;opacity:1}input::placeholder,textarea::placeholder{color:#9ca3af;opacity:1}[role=button],button{cursor:pointer}:disabled{cursor:default}audio,canvas,embed,iframe,img,object,svg,video{display:block;vertical-align:middle}img,video{height:auto;max-width:100%}[hidden]{display:none}}.accordion-item{overflow:hidden;position:relative;transition-duration:.15s;transition-property:max-height;transition-timing-function:ease-out}.accordion-item--full-height{height:100vh}.accordion-item__curtain{background-color:var(--dynamic-overlay);left:0;opacity:0;position:absolute;right:0;top:0;transition:opacity 50ms ease-in;z-index:1}.accordion-item__curtain--dimmed{bottom:0;opacity:1}.vertical-accordion__container{display:flex;flex-direction:column}.alert{align-items:center;border-radius:calc(var(--dynamic-border-radius)/3);display:flex;gap:.75rem;padding:.75rem}.alert--error{background-color:var(--dynamic-error-2);color:var(--dynamic-error-1)}.alert--warning{background-color:var(--dynamic-alert-2);color:var(--dynamic-alert-1)}.alert__icon{flex-shrink:0}.badge__container{align-items:center;background-color:var(--dynamic-badge-background);color:var(--dynamic-badge-color);display:flex;font-size:.625rem;font-weight:500;gap:.25rem;padding:.25rem .5rem;position:relative;white-space:nowrap}.badge__container,.badge__dot{border-radius:9999px;transition:color .3s,background-color .3s}.badge__dot{background-color:var(--dynamic-badge-dot-background);height:.375rem;width:.375rem}.button{align-items:center;cursor:pointer;display:flex;gap:.375rem;justify-content:center;position:relative;transition:all .2s ease}.button:disabled:not(.button--loading){cursor:default;opacity:.5}.button--expanded{width:100%}.button--brand-primary{background:var(--dynamic-brand-primary-color);border:var(--dynamic-button-primary-border);box-shadow:var(--dynamic-shadow-down-1);color:#fff;padding:var(--dynamic-button-primary-padding)}.button--brand-primary .typography{font-size:var(--dynamic-button-primary-font-size)}.button--brand-primary:hover:enabled{box-shadow:var(--dynamic-button-shadow)}.button--brand-primary:active:enabled,.button--primary{box-shadow:var(--dynamic-shadow-down-1)}.button--primary{background:var(--dynamic-button-primary-background);border:var(--dynamic-button-primary-border);padding:var(--dynamic-button-primary-padding)}.button--primary .typography{font-size:var(--dynamic-button-primary-font-size)}.button--primary:hover:enabled{box-shadow:var(--dynamic-button-shadow)}.button--primary:active:enabled,.button--secondary{box-shadow:var(--dynamic-shadow-down-1)}.button--secondary{background:var(--dynamic-button-secondary-background);border:var(--dynamic-button-secondary-border);padding:var(--dynamic-button-secondary-padding)}.button--secondary .typography{font-size:var(--dynamic-button-primary-font-size)}.button--secondary:hover:enabled{background:var(--dynamic-hover)}.button--secondary:active:enabled{background:var(--dynamic-base-3)}.button--tertiary,.button--tertiary .typography{color:var(--dynamic-text-secondary)}.button--tertiary:hover:enabled,.button--tertiary:hover:enabled .typography{color:var(--dynamic-text-primary)}.button--padding-default{border-radius:calc(var(--dynamic-border-radius)/2);padding:.625rem 1rem}.button--padding-large{border-radius:var(--dynamic-button-border-radius);padding:.875rem 1.25rem}.button--padding-medium{border-radius:calc(var(--dynamic-button-border-radius)/1.5);padding:.625rem 1rem}.button--padding-small{border-radius:calc(var(--dynamic-button-border-radius)/2);padding:.5rem .75rem}.button--padding-none{padding:0}.button--padding-login-screen-height{border-radius:calc(var(--dynamic-border-radius)/2);height:2.5rem;padding:0 1rem}.button__spinner{margin-left:auto;margin-right:auto}.button__end-slot,.button__start-slot{display:inline-flex}.button__spinner-container{align-items:center;bottom:0;color:var(--dynamic-text-primary);display:flex;justify-content:center;left:0;position:absolute;right:0;top:0}.button--loading>:not(.button__spinner-container){opacity:0}.checkbox--hidden{cursor:pointer;display:block;height:1rem;opacity:0;position:absolute;width:1rem;z-index:10}.checkbox--hidden:checked+.checkbox--visible{background:var(--dynamic-brand-primary-color);border-style:none}.checkbox--hidden:checked+.checkbox--visible>.checkbox__icon{opacity:1}.checkbox--hidden:disabled{pointer-events:none}.checkbox--visible{align-items:center;background:var(--dynamic-base-3);border:.0625rem solid var(--dynamic-base-4);border-radius:calc(var(--dynamic-border-radius)/4);display:flex;height:1rem;justify-content:center;position:absolute;transition-duration:.2s;transition-property:all;transition-timing-function:cubic-bezier(.4,0,.2,1);width:1rem;z-index:0}.checkbox__container{height:1rem;position:relative;width:1rem}.checkbox__icon{color:#fff;height:.75rem;opacity:0;transition-duration:.2s;transition-property:opacity;width:.75rem}.copy-button__container{position:relative}.copy-button__tooltip{background-color:var(--dynamic-text-primary);color:var(--dynamic-base-2);font-size:.75rem}@keyframes enter-tile{0%{opacity:0;transform:translateY(.5rem)}to{opacity:1;transform:translateY(0)}}.enter-list-tile-animation{animation-duration:.2s;animation-fill-mode:both;animation-iteration-count:1;animation-name:enter-tile;animation-timing-function:ease-out}.error-container{align-items:center;display:flex;justify-content:center;margin-bottom:.5rem;padding:.5rem .75rem}.error-container img,.error-container svg{height:1.25rem;width:1.25rem}.error-container--error{background:var(--dynamic-error-2);color:var(--dynamic-error-1)}.error-container--info{background:var(--dynamic-base-3);color:var(--dynamic-text-primary)}.error-container--success{background:var(--dynamic-success-2);color:var(--dynamic-success-1)}.error-container--multi-wallet{margin-bottom:.75rem}.error--with-icon{margin-left:.875rem}.icon--color-brand-primary{color:var(--dynamic-brand-primary-color)}.icon--color-text-primary{color:var(--dynamic-text-primary)}.icon--color-text-secondary{color:var(--dynamic-text-secondary)}.icon--color-text-tertiary{color:var(--dynamic-text-tertiary)}.icon--color-text-error{color:var(--dynamic-error-1)}.icon--color-success-1{color:var(--dynamic-success-1)}.icon--size-xsmall{height:.75rem;width:.75rem}.icon--size-small{height:1rem;width:1rem}.icon--size-mini{height:1.25rem;width:1.25rem}.icon--size-medium{height:1.5rem;width:1.5rem}.icon--size-large{height:2.375rem;width:2.375rem}.icon-button{align-items:center;border-radius:100%;color:var(--dynamic-text-tertiary);display:flex;justify-content:center}.icon-button svg:hover{color:var(--dynamic-text-secondary)}.icon-button svg:active{color:var(--dynamic-text-primary)}.indicator__container{align-items:center;background:var(--dynamic-base-1);border-radius:100%;bottom:0;display:flex;justify-content:center;position:absolute;right:0}.indicator__icon{background:var(--dynamic-success-1);border-radius:100%}.indicator__wallet-connect{background:#4084ed;bottom:0;color:#fff;position:absolute;right:-.125rem}.icon-with-spinner__container,.indicator__wallet-connect{align-items:center;border-radius:9999px;display:flex;justify-content:center}.icon-with-spinner__container{position:relative}.icon-with-spinner__container img{height:100%;width:100%}.icon-with-spinner__icon-container{align-items:center;display:flex;justify-content:center;position:relative}.icon-with-spinner__spinner-container{display:grid;grid-template-columns:repeat(2,minmax(0,1fr));grid-template-rows:repeat(2,minmax(0,1fr));position:absolute;right:0;top:0}.icon-with-spinner__spinner{grid-column-start:2;grid-row-start:1;height:100%;width:100%}.icon-with-status__container{margin-bottom:12px;max-width:-moz-fit-content;max-width:fit-content;position:relative}.icon-with-status__container .icon{border-radius:100%}.icon-with-status__status-dot{bottom:-.125rem;position:absolute;right:-.25rem}.icon-with-status__container .inner-icon__container{background:var(--dynamic-base-1);border-radius:100%;bottom:-.125rem;padding:.1875rem;position:absolute;right:-.1875rem}.icon-with-status__container .inner-icon{border-radius:100%}.icon-with-status__container .inner-icon svg{height:1rem;width:1rem}.icon-with-status__container .inner-icon--green{background:var(--dynamic-success-1)}.icon-with-status__container .inner-icon--red{background:var(--dynamic-error-1)}.icon-with-status__container .inner-icon path{fill:var(--dynamic-base-1)}.icon-with-status__container .status-dot__container{align-items:center;background:var(--dynamic-base-1);border-radius:100%;bottom:-.125rem;display:flex;height:.625rem;justify-content:center;position:absolute;right:-.25rem;width:.625rem}.icon-with-status__container .status-dot{border-radius:100%;height:.375rem;width:.375rem}.icon-with-status__container .status-dot--green{background:var(--dynamic-success-1)}.icon-with-status__container .status-dot--red{background:var(--dynamic-error-1)}.info-item__container{color:var(--dynamic-text-tertiary);display:flex}.info-item__container a{text-decoration:underline}.info-item__container .info-item__icon-container{border-radius:calc(var(--dynamic-border-radius)/3);color:var(--dynamic-text-tertiary);display:flex;margin-right:1.125rem}.info-item__container .info-item__icon-container svg{height:1.5rem;width:1.5rem}.info-item__container .info-item__secondary-text{margin-top:.25rem}.input__container{position:relative}.input__container .input__suffix{position:absolute;right:1rem;top:1rem}.input__container .input{background:var(--dynamic-base-2);border-color:var(--dynamic-base-3);border-radius:calc(var(--dynamic-border-radius)*.4);border-width:.0625rem;color:var(--dynamic-text-primary);font-size:.9375rem;font-weight:400;margin:0;outline:none;transition:all .2s ease;width:100%}.input__container .input:disabled{background:var(--dynamic-base-3);border-color:var(--dynamic-base-4)}.input__container .input:disabled .input__label{color:var(--dynamic-text-tertiary)}.input__container .input__label{color:var(--dynamic-text-secondary);cursor:text;font-size:.625rem;pointer-events:none}.input__container .input:not(.input__error):focus,.input__container .input:not(.input__error):hover{background:var(--dynamic-base-2);border-color:var(--dynamic-base-4)}.input__container .input__error{background:var(--dynamic-error-2);border-color:var(--dynamic-error-1)}.input__container .input__error~.input__label,.input__container .input__error~.input__trailing{color:var(--dynamic-error-1)}.input__container .input__has_trailing{padding-right:4rem}.input__container .input__trailing{color:var(--dynamic-text-secondary);font-size:.75rem;font-weight:500;position:absolute;right:.75rem;top:50%;transform:translateY(-50%)}.input__container--dense .input{padding:1.125rem .75rem .375rem}.input__container--dense .input::-moz-placeholder{color:transparent}.input__container--dense .input::placeholder{color:transparent}.input__container--dense .input__label{left:.75rem;position:absolute;top:.4375rem;transition:all .2s ease;-webkit-user-select:none;-moz-user-select:none;user-select:none}.input__container--dense .input:-moz-placeholder-shown~.input__label{font-size:.9375rem;top:.75rem}.input__container--dense .input:placeholder-shown~.input__label{font-size:.9375rem;top:.75rem}.input__container--dense .input:focus~.input__label{font-size:.625rem;top:.4375rem}.input__container--regular{display:flex;flex-direction:column}.input__container--regular .input{padding:.75rem}.input__container--regular .input__label{align-items:center;display:inline-flex;font-size:.75rem;line-height:1rem;margin-bottom:.5rem;order:-1}.input__container--regular .input__label:after{background:var(--dynamic-base-4);content:"";flex:1;height:1px;margin-left:.75rem;right:0}.input__container--regular .input__suffix{top:2.375rem}.input__message{color:var(--dynamic-text-primary);padding:.5rem 0}.input__message__error{color:var(--dynamic-error-1)}.list-tile{align-items:center;background-color:var(--dynamic-wallet-list-tile-background);border:var(--dynamic-wallet-list-tile-border);border-radius:calc(var(--dynamic-border-radius)/2);box-shadow:var(--dynamic-wallet-list-tile-shadow);color:var(--dynamic-text-primary);display:flex;gap:.625rem;padding:var(--dynamic-wallet-list-tile-padding);transition-duration:var(--dynamic-wallet-list-tile-animation-duration);transition-property:all;transition-timing-function:ease-out;width:100%}.list-tile:not(:disabled):active{transform:scale(.95)}.list-tile:not(:disabled):hover{background-color:var(--dynamic-wallet-list-tile-background-hover);border:var(--dynamic-wallet-list-tile-border-hover);box-shadow:var(--dynamic-wallet-list-tile-shadow-hover)}.list-tile__children{flex-grow:1;text-align:left}.modal-header{align-items:center;background:var(--dynamic-header-background);display:flex;justify-content:center;padding:var(--dynamic-header-padding);width:100%}.modal-header--border{border-bottom:var(--dynamic-header-border-bottom)}.modal-header--align-content-bottom{align-items:start}.modal-header__leading,.modal-header__trailing{align-items:center;display:flex;flex:1;gap:.25rem;height:1.5rem;justify-content:start;margin-right:auto}.modal-header__trailing{justify-content:flex-end;margin-left:auto;margin-right:0}.evm-network-control__container{align-items:center;background:var(--dynamic-base-2);border-radius:calc(var(--dynamic-border-radius)/2);bottom:0;color:var(--dynamic-text-primary);display:flex;gap:.375rem;max-width:100%;padding:.25rem;position:absolute;right:0;transform:translateX(50%)}.evm-network-control__container--error{border:1px solid var(--dynamic-error-1);color:var(--dynamic-error-1);cursor:auto}.evm-network-control__network-name{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.evm-network-control__arrow-icon{min-width:1rem;transform:rotate(90deg);transition:transform .15s linear}.evm-network-control__arrow-icon--active{transform:rotate(-90deg)}@keyframes spinner-animation{0%{transform:rotate(0)}to{transform:rotate(1turn)}}.network{color:var(--dynamic-text-primary);display:flex;justify-content:space-between;width:100%}.network .network__container{align-items:flex-start;display:flex}.network .network__title-icon{height:1rem;margin-right:.5rem;margin-top:.0625rem;width:1rem}.network .network__title-container{display:flex;flex-direction:column;gap:.25rem}.network .network__title-copy{white-space:nowrap}.network .network__status-container{align-items:center;border-radius:100%;display:flex;height:1rem;justify-content:center;width:1rem}.network .network__status-container .network__status-icon{color:#fff;height:.75rem;width:.75rem}.network .network__status-container .network__status-icon svg path{fill:currentcolor}.network .network__status-container .network__status-spinner-icon{animation:spinner-animation 2s linear infinite;height:.75rem;margin-right:-.9375rem;margin-top:-.75rem;transform-origin:0 100%;width:.75rem}.network .network__status-container--active{background-color:var(--dynamic-brand-primary-color)}.network-action{align-items:center;display:flex;padding:.5rem 1rem}@media (pointer:coarse){.network-action{padding:.5rem 1.5rem}}.network-action:not(.network--not-supported){cursor:pointer}.network-action:not(.network--not-supported):hover{background-color:var(--dynamic-hover)}.network-control-skeleton{align-items:center;display:flex;gap:.375rem;justify-content:center}.network-control-skeleton__icon{background-color:var(--dynamic-text-secondary);border-radius:9999px;height:1rem;width:1rem}.non-network-switching-supported-control{align-items:center;background:var(--dynamic-base-2);border-radius:calc(var(--dynamic-border-radius)/2);bottom:0;color:var(--dynamic-text-primary);display:flex;gap:.375rem;justify-content:center;padding:.25rem;position:absolute;right:0;transform:translateX(50%)}.non-network-switching-supported-control--error{background-color:var(--dynamic-error-2);cursor:auto}.non-network-switching-supported-control__network-name{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.network-picker-network-control{display:flex;flex-direction:column}.network-picker-network-control__anchor{padding-top:.125rem;position:relative}.pin-field__container{display:flex;flex:1;gap:2.5%;justify-content:space-between;margin-top:1rem;max-width:19.5rem;width:100%}.pin-input__input{background:var(--dynamic-base-2);border:.0625rem solid var(--dynamic-base-4);border-radius:.75rem;color:var(--dynamic-text-primary);font-size:1rem;height:2.75rem;max-width:2.75rem;outline:.125rem solid transparent;outline-offset:.125rem;text-align:center;width:100%}.pin-input__input:last-child{margin-right:0}.pin-input__input:disabled{cursor:not-allowed;opacity:.5}.pin-input__input--error{background:var(--dynamic-error-2);border-color:var(--dynamic-error-1);color:var(--dynamic-error-1)}.pin-input__input--success{background:var(--dynamic-success-2);border-color:var(--dynamic-success-1);color:var(--dynamic-success-1)}.portal__container{align-items:center;display:flex;height:100%;justify-content:center;width:100%}.portal__backdrop{-webkit-backdrop-filter:var(--dynamic-modal-backdrop-filter);backdrop-filter:var(--dynamic-modal-backdrop-filter);background:var(--dynamic-modal-backdrop-background);cursor:default;height:100%;left:0;position:fixed;top:0;width:100%}.search__container{align-items:center;background:var(--dynamic-search-bar-background);border:var(--dynamic-search-bar-border);border-radius:var(--dynamic-search-border-radius);cursor:text;display:flex;gap:.625rem;height:2.625rem;justify-content:space-between;min-height:2.25rem;padding-left:.75rem;padding-right:.75rem}.search__container,.search__container svg{color:var(--dynamic-text-tertiary)}.search__container:hover:not(.search__container--active,.search__container:focus-within){background:var(--dynamic-search-bar-background-hover);border:var(--dynamic-search-bar-border-hover);color:var(--dynamic-text-secondary)}.search__container:hover:not(.search__container--active,.search__container:focus-within) svg{color:var(--dynamic-text-secondary)}.search__container--active,.search__container:focus-within{background:var(--dynamic-search-bar-background-focus);border:var(--dynamic-search-bar-border-focus);color:var(--dynamic-text-primary)}.search__container--active svg,.search__container:focus-within svg{color:var(--dynamic-text-secondary)}.search-icon__container{align-items:center;color:var(--dynamic-text-tertiary);display:flex;height:1rem;justify-content:center;width:1rem}.search__input{background:none;border:0;color:var(--dynamic-text-primary);display:flex;flex-grow:1;font-size:var(--dynamic-text-size-body-small);font-weight:500;line-height:1rem;margin:0;outline:none;padding-bottom:.25rem;padding-top:.25rem}.search__input::-moz-placeholder{color:var(--dynamic-text-tertiary)}.search__input::placeholder{color:var(--dynamic-text-tertiary)}.search__input:hover::-moz-placeholder{color:var(--dynamic-text-secondary)}.search__input:hover::placeholder{color:var(--dynamic-text-secondary)}.search__input:focus::-moz-placeholder{color:transparent}.search__input:focus::placeholder{color:transparent}.search__button--clear{color:var(--dynamic-text-secondary);font-size:var(--dynamic-text-size-body-mini)}.search__button--clear:hover{color:var(--dynamic-text-primary)}.select__container{cursor:pointer;position:relative}.select__container .select{-webkit-appearance:none;-moz-appearance:none;appearance:none;bottom:0;left:0;opacity:0;outline:none;position:absolute;right:0;top:0}.select__container .select::-moz-placeholder{color:transparent}.select__container .select::placeholder{color:transparent}.select__container .select__body{background:var(--dynamic-base-2);border-color:var(--dynamic-base-4);border-radius:calc(var(--dynamic-border-radius)*.4);border-width:.0625rem;display:block;margin:0;padding:1.125rem .75rem .375rem;position:relative;transition:all .2s ease;width:100%}.select__container .select__value{color:var(--dynamic-text-primary);font-size:.9375rem;font-weight:400}.select__container .select__label{color:var(--dynamic-text-secondary);font-size:.9375rem;left:.75rem;pointer-events:none;position:absolute;top:.75rem;transition:all .2s ease}.select__container .select__control_icon{align-items:center;bottom:0;color:var(--dynamic-text-secondary);display:flex;position:absolute;right:.75rem;top:0}.select__container .select__has_value .select__label{font-size:.625rem;top:.4375rem}.select__container .select:has(.select__error)~.select__body{background:var(--dynamic-error-2);border-color:var(--dynamic-error-1)}.select__container .select__error{background:var(--dynamic-error-2);border-color:var(--dynamic-error-1)}.select__container .select__error .select__control_icon,.select__container .select__error .select__label{color:var(--dynamic-error-1)}.select__message{color:var(--dynamic-text-primary);padding-top:.5rem}.select__message__error{color:var(--dynamic-error-1)}.separator{border-top:.0625rem solid var(--dynamic-base-3)}@keyframes shimmer{to{transform:translateX(100%)}}.skeleton{background:var(--dynamic-base-3);border-radius:calc(var(--dynamic-border-radius)/6);display:inline-flex;line-height:1;min-width:100%;overflow:hidden;position:relative;z-index:0}.skeleton:after{animation:shimmer 2s infinite;background-image:var(--dynamic-loading-animation-gradient);bottom:0;content:"";left:0;position:absolute;right:0;top:0;transform:translateX(-100%)}.spinner{animation:spin 1s linear infinite}.spinner path{stroke:var(--dynamic-brand-primary-color)}@keyframes spin{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}.status-dot__container{align-items:center;background:var(--dynamic-base-1);border-radius:100%;display:flex;height:.625rem;justify-content:center;width:.625rem}.status-dot{border-radius:100%;height:.375rem;width:.375rem}.status-dot--green{background:var(--dynamic-success-1)}.status-dot--red{background:var(--dynamic-error-1)}.status-dot--yellow{background:var(--dynamic-alert-1)}.switch__container{display:flex}.switch__container.disabled{opacity:.2;pointer-events:none}.switch__container .button{background:var(--dynamic-base-2);border-radius:0;box-shadow:var(--dynamic-shadow-down-1);color:var(--dynamic-text-primary);font-size:var(--dynamic-text-size-button-primary);font-weight:400;margin:0;padding:.75rem 0;width:100%}.switch__container .button:first-child{border-bottom-left-radius:calc(var(--dynamic-border-radius)/3);border-right:0;border-top-left-radius:calc(var(--dynamic-border-radius)/3)}.switch__container .button:last-child{border-bottom-right-radius:calc(var(--dynamic-border-radius)/3);border-top-right-radius:calc(var(--dynamic-border-radius)/3)}.switch__container .button.active{background:var(--dynamic-brand-primary-color);color:#fff}.text-button{align-items:center;border-radius:calc(var(--dynamic-border-radius)/6);color:var(--dynamic-text-secondary);cursor:pointer;display:flex;font-size:.75rem;font-weight:500;gap:.375rem;padding:.125rem .375rem}.text-button:hover{background-color:var(--dynamic-hover)}.auth-mode-switch__container{align-items:center;color:#fff;display:flex;font-size:1rem;gap:.25rem;margin-bottom:.25rem}.auth-mode-switch__container label{cursor:pointer}.multi-wallet-switch__container{align-items:center;color:#fff;display:flex;font-size:1rem;gap:.25rem;margin-bottom:.25rem}.multi-wallet-switch__container label{cursor:pointer}.toolkit__container{background:var(--dynamic-base-1);border-bottom-right-radius:calc(var(--dynamic-border-radius)/1.5);border-top-right-radius:calc(var(--dynamic-border-radius)/1.5);display:flex;flex-direction:column;gap:1rem;left:0;padding:1.875rem 3.5rem;position:fixed;top:50%;transform:translateY(-50%);width:18.125rem}@media (pointer:coarse){.toolkit__container{display:none}}.switcher__copy{color:var(--dynamic-text-primary);margin-bottom:.25rem}.tos-and-pp__text{color:var(--dynamic-text-secondary);font-size:var(--dynamic-text-size-body-small);margin:0 auto;text-align:center}.tos-and-pp__text .tos-and-pp__link{color:var(--dynamic-text-link);text-decoration:none}.zoom-transition__root{transform-origin:50% 50%}.vertical-drawer-animation{overflow:hidden;transition-property:max-height;transition-timing-function:ease-out}.typography{font-family:var(--dynamic-font-family-primary);font-weight:500;line-height:normal}.typography--title{font-size:var(--dynamic-text-size-title)}.typography--body-normal{font-size:var(--dynamic-text-size-body-normal)}.typography--body-small{font-size:var(--dynamic-text-size-body-small)}.typography--body-mini{font-size:var(--dynamic-text-size-body-mini)}.typography--button-primary{font-size:var(--dynamic-text-size-button-primary);font-weight:700}.typography--button-secondary{font-size:var(--dynamic-text-size-button-secondary);font-weight:700}.typography--button-tertiary{font-size:var(--dynamic-text-size-button-secondary);font-weight:400}.typography--numbers-big{font-family:var(--dynamic-font-family-numbers);font-size:var(--dynamic-text-size-numbers-big)}.typography--numbers-medium{font-family:var(--dynamic-font-family-numbers);font-size:var(--dynamic-text-size-numbers-medium)}.typography--bold{font-weight:700}.typography--medium{font-weight:500}.typography--regular{font-weight:400}.typography--link{color:var(--dynamic-text-link)}.typography--brand-primary{color:var(--dynamic-brand-primary-color)}.typography--primary{color:var(--dynamic-text-primary)}.typography--secondary{color:var(--dynamic-text-secondary)}.typography--tertiary{color:var(--dynamic-text-tertiary)}.typography--uppercase{text-transform:uppercase}.typography--dynamic-error-1{color:var(--dynamic-error-1)}.typography--errror-2{color:var(--dynamic-error-2)}.typography--connection-green-1{color:var(--dynamic-success-1)}.typography--tooltip{color:var(--dynamic-tooltip-text-color)}.typography--inherit{color:inherit}.typography--truncate{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.powered-by-dynamic{align-items:center;color:var(--dynamic-text-tertiary);display:flex;text-decoration:none;width:100%}.powered-by-dynamic--center{justify-content:center}.powered-by-dynamic--right{justify-content:end}.powered-by-dynamic__logo,.powered-by-dynamic__text{display:inline-block}.powered-by-dynamic__text{margin-right:.25rem}.powered-by-dynamic__logo{display:inline-block;margin-top:.0625rem;max-width:3.6875rem;width:3.6875rem}.dynamic-footer{background:var(--dynamic-footer-background);border-top:var(--dynamic-footer-border-top);padding:var(--dynamic-footer-padding);width:100%}.user-address,.user-address__container{align-items:center;display:flex;justify-content:center}.user-address__container{margin-top:.375rem}.user-address__status-dot{margin-right:.375rem}.user-address__seperator{background-color:var(--dynamic-base-4);height:.5rem;margin:0 .5rem;width:.0625rem}.app-origin-tile{align-items:center;display:flex;flex-direction:column;gap:.125rem}.app-origin-tile__title{align-items:center;display:flex;gap:.25rem}.app-origin-tile__logo{height:1rem;width:1rem}.options-switcher{background-color:var(--dynamic-base-4);display:flex;min-height:2rem;position:relative}.options-switcher,.options-switcher__active-rail,.options-switcher__button{border-radius:calc(var(--dynamic-border-radius)/3)}.options-switcher__button{color:var(--dynamic-text-secondary);flex:1;font-size:var(--dynamic-text-size-button-secondary);font-weight:500;position:relative}.options-switcher__button--active{color:var(--dynamic-text-primary)}.options-switcher__active-rail{background-color:var(--dynamic-base-2);box-shadow:var(--dynamic-shadow-down-1);height:100%;position:absolute;transition:left .1s ease-in-out}.dynamic-verified-email-icon{color:var(--dynamic-success-1)}.user-profile-field__value{align-items:center;display:flex;min-height:.9375rem;overflow:auto}.user-profile-field__verify-email-icon{margin-left:.25rem}.user-profile-section{margin:0 0 .75rem}.user-profile-section__title{margin-bottom:.5rem}.user-profile-social-account__connected-avatar{border-radius:100%;height:100%;overflow:hidden;position:relative;width:100%}.user-profile-social-account__connected-provider-icon{background-color:#fff;border-radius:100%;bottom:-.1875rem;height:.875rem;padding:.09375rem;position:absolute;right:-.3125rem;width:.875rem}.user-profile-social-account{align-items:center;background-color:var(--dynamic-wallet-list-tile-background);border:var(--dynamic-wallet-list-tile-border);border-radius:calc(var(--dynamic-border-radius)/2);box-shadow:var(--dynamic-wallet-list-tile-shadow);color:var(--dynamic-text-primary);display:flex;gap:.625rem;padding:var(--dynamic-wallet-list-tile-padding);width:100%}.user-profile-social-account__icon{height:1.5rem;position:relative;width:1.5rem}.user-profile-social-account__label{flex-grow:1;text-align:left}.user-profile-social-account__button{padding:.1875rem .28125rem}.user-profile-social-account__button .button__spinner-container{left:auto}.user-profile__fields{background-color:var(--dynamic-base-2);border-radius:calc(var(--dynamic-border-radius)/2);padding:.75rem}.user-profile__fields,.user-profile__social-accounts{display:flex;flex-direction:column;gap:.5rem}.divider{align-items:center;display:flex;gap:.75rem;justify-content:space-between;padding:1rem 0}.divider__dash{background:var(--dynamic-base-4);height:.0625rem;width:100%}.divider__text{white-space:nowrap}.divider__full-width{width:100%}.dynamic-tooltip{background-color:var(--dynamic-tooltip-color);border-radius:calc(var(--dynamic-border-radius)/4);opacity:0;padding:.125rem .5rem;pointer-events:none;position:absolute;transform:translate(-50%,-100%);transform-origin:50% 50%;-webkit-user-select:none;-moz-user-select:none;user-select:none;white-space:nowrap;z-index:-1}.dynamic-tooltip__arrow{bottom:-.1875rem;color:var(--dynamic-tooltip-color);height:.25rem;left:50%;position:absolute;transform:translateX(-50%);width:.375rem}.dynamic-tooltip--visible{opacity:1;pointer-events:unset;-webkit-user-select:unset;-moz-user-select:unset;user-select:unset;z-index:1}.modal-header-banner{padding:.5rem .75rem;text-align:center}.modal-header-banner__error{background-color:var(--dynamic-error-2)}.modal-header-banner__success{background-color:var(--dynamic-success-2)}.modal-header-banner__notice{background-color:var(--dynamic-brand-secondary-color)}.otp-verification-view{align-items:center;display:flex;flex-direction:column;padding:var(--dynamic-layout-content-padding);text-align:center}.otp-verification-view__icon-with-spinner{margin:0 auto .75rem}.otp-verification-view--message{padding:var(--dynamic-layout-content-error-padding)}.otp-verification-view__status-header{align-items:center;display:flex;justify-content:center}.otp-verification-view__footer{display:flex;flex-direction:column;gap:1rem}.otp-verification-view__email-container{align-items:center;display:flex;gap:.25rem;justify-content:center}.otp-verification-view__retry-container{margin:1rem auto 0}.overlay-card--overlay{background-color:var(--dynamic-overlay);bottom:0;left:0;position:absolute;right:0;top:0}.overlay-card--content{background-color:var(--dynamic-base-1);border-radius:calc(var(--dynamic-border-radius)/1.5);border-top:.0625rem solid var(--dynamic-base-4);bottom:0;display:flex;flex-direction:column;left:0;max-height:80vh;overflow-y:auto;position:absolute;right:0}@media (pointer:coarse){.overlay-card--content{border-bottom-left-radius:0;border-bottom-right-radius:0}}.icon-list-tile{padding-left:0;padding-right:0}.icon-list-tile--children{align-items:center;display:flex;justify-content:center}.popper-content{display:flex;position:absolute}.popper-content__transform-origin-bottom-left{transform:translateY(-100%)}.popper-content__transform-origin-bottom-right{transform:translate(-100%,-100%)}.popper-content__transform-origin-top-left{transform:translate(0)}.popper-content__transform-origin-top-right{transform:translate(-100%)}.dropdown{align-items:stretch;background-color:var(--dynamic-base-2);border:.0625rem solid var(--dynamic-base-4);border-radius:calc(var(--dynamic-border-radius)/3);box-shadow:0 .5rem .75rem -.375rem rgba(24,39,75,.06),0 .5rem .75rem -.1875rem rgba(24,39,75,.06);display:flex;flex-direction:column;max-height:var(--max-height);min-width:10rem;overflow-y:auto;padding-block:.1875rem}.dropdown--entering{animation-fill-mode:both;animation-iteration-count:1;animation-name:desktop-dropdown-entering-animation;animation-timing-function:ease-out}.dropdown--exiting{animation-fill-mode:both;animation-iteration-count:1;animation-name:desktop-dropdown-exiting-animation;animation-timing-function:ease-out}.menu-list__overlay-card__container{align-items:stretch;display:flex;flex-direction:column;justify-content:center;overflow-y:auto;padding-bottom:1.25rem}.transaction-row{align-items:center;display:flex;gap:.5rem;justify-content:space-between;padding:.625rem 0}.transaction-row__label{flex-shrink:0}.transaction-row__content{align-items:center;display:flex;gap:.25rem;min-width:0}.transaction-row__skeleton{height:1rem;width:3rem}.transaction-confirmation__actions{align-items:center;display:flex;flex-direction:row;gap:.375rem;padding-top:.5rem;width:100%}.transaction-confirmation__footer{padding-top:1rem}.transaction-confirmation__body{align-items:stretch;display:flex;flex:1;flex-direction:column;overflow:hidden;padding:.5rem 1.5rem 1.5rem}.transaction-confirmation__app-origin-tile{padding:.75rem}.transaction-confirmation__content{align-items:center;background-color:var(--dynamic-base-2);border:1px solid var(--dynamic-base-4);border-radius:.75rem;box-shadow:var(--dynamic-shadow-down-1);display:flex;flex:1;flex-direction:column;justify-content:start;margin-top:.75rem;overflow:auto;width:100%}.transaction-confirmation__rows{max-height:14.375rem;overflow-y:auto;padding:.375rem .75rem;width:100%}.transaction-confirmation__rows,.transaction-confirmation__rows>.transaction-row:not(:first-child){border-top:1px solid var(--dynamic-base-4)}.transaction-confirmation__secure-wallet{margin-bottom:0;margin-top:1rem}.transaction-confirmation__title{text-align:center}.transaction-confirmation__error{padding-top:.75rem}.transaction-confirmation__warning{padding-top:.5rem}.transaction-status-layout{display:flex;flex:1;flex-direction:column;overflow:hidden}.transaction-status-layout__status-icon{color:var(--dynamic-brand-primary-color)}.transaction-status-layout__title{text-align:center}.transaction-status-layout__body{align-items:stretch;display:flex;flex:1;flex-direction:column;padding:.25rem 1.5rem 1.5rem}.transaction-status-layout__content{align-items:center;background-color:var(--dynamic-base-2);border:1px solid var(--dynamic-base-4);border-radius:.75rem;box-shadow:var(--dynamic-shadow-down-1);display:flex;flex-direction:column;justify-content:center;margin-top:1rem;width:100%}.transaction-status-layout__rows{max-height:14.375rem;overflow-y:auto;padding:.375rem .75rem;width:100%}.transaction-status-layout__rows>.transaction-row:not(:first-child){border-top:1px solid var(--dynamic-base-4)}.transaction-status-layout__actions{margin-top:auto;padding-top:1rem}.transaction-status-layout__footer{padding-top:1rem}.transaction-status-layout__network-icon,.transaction-status-layout__network-name{line-height:1rem;vertical-align:middle}.transaction-status-layout__network-icon{display:inline-block;height:1rem;margin-right:.375rem;width:1rem}.transaction-status-layout__network-currency{margin-left:.125rem}.transaction-origin-destination__arrow-icon,.transaction-origin-destination__wallet-icon{display:inline-block}.transaction-origin-destination__arrow-icon,.transaction-origin-destination__text,.transaction-origin-destination__wallet-icon{vertical-align:middle}.transaction-origin-destination__wallet-icon{height:1rem;margin-right:.375rem;width:1rem}.transaction-origin-destination__arrow-icon{color:var(--dynamic-text-tertiary);margin:0 .5625rem}.token-balance-card{align-items:center;background-color:var(--dynamic-base-2);border:1px solid var(--dynamic-base-4);border-radius:calc(var(--dynamic-border-radius)*.4);display:flex;gap:.5rem;justify-content:space-between;padding:.875rem .75rem}.token-balance-card__chain{align-items:center;display:flex;gap:.375rem}.token-balance-card__chain__icon{height:1rem;width:1rem}.token-balance-card__balance-container{align-items:center;display:flex;gap:.25rem}.token-balance-card__balance{align-items:center;display:flex;gap:.125rem}.send-balance-page-layout__header-content{align-items:center;display:flex;gap:.5rem}.send-balance-page-layout__body{display:flex;flex:1;flex-direction:column;overflow:auto;padding:.25rem 1.5rem 1.5rem}.send-balance-page-layout__balance-container{display:flex;flex-direction:column;gap:.5rem;padding-bottom:1rem}.send-balance-page-layout__error{padding-bottom:1rem}.send-balance-page-layout__footer{padding-top:1.5rem}.send-balance-page-layout__network-container{display:flex;justify-content:center;padding-bottom:.5rem}.send-balance-form{display:flex;flex:1;flex-direction:column;gap:1rem}.send-balance-form__button{margin-top:auto}.send-balance-form__secure-wallet{margin:0}.select-network-button__icon{display:inline;margin:0 6px 3px;max-height:16px;max-width:16px;vertical-align:middle}.chip{align-items:center;background:var(--dynamic-base-2);border-radius:.75rem;color:var(--dynamic-text-primary);display:inline-flex;gap:.1875rem;height:1.5rem;justify-content:center;padding:.125rem .25rem}.chip__with-icon{padding:.125rem .25rem .125rem .125rem}.chip--icon{border-radius:50%;height:1.25rem;justify-content:center;overflow:hidden;width:1.25rem}.chip--icon,.form-field-label{align-items:center;display:flex}.form-field-label{color:var(--dynamic-text-secondary);cursor:text;font-size:.75rem}.form-field-label__with-divider:after{background:var(--dynamic-base-4);content:"";flex:1;height:1px;margin-left:.75rem;right:0}.step{counter-increment:step;gap:.5rem}.step,.step__icon{align-items:center;display:flex}.step__icon{flex-shrink:0;height:1.25rem;justify-content:center;width:1.25rem}.step__icon--done{background-color:var(--dynamic-success-1);border-radius:50%}.step__icon__check-mark{color:var(--dynamic-base-1);height:1rem;width:1rem}.step__index{align-items:center;border:1px solid var(--dynamic-base-4);border-radius:.625rem;display:flex;height:1.25rem;justify-content:center;min-width:1.25rem;padding:0 .25rem}.step__index-label:before{content:counter(step)}.step__leading{max-width:-moz-fit-content;max-width:fit-content;position:relative}.stepper{counter-reset:step;display:flex;gap:1rem;width:100%}.stepper__divider{flex-grow:1}.modal{left:50%;margin:auto;position:fixed;top:50%;transform:translate(-50%,-50%);width:var(--dynamic-modal-width)}@media (max-width:640px){.modal{bottom:0;max-width:37.5rem;top:auto;transform:translate(-50%);width:100%}}.modal__items{display:flex;flex-direction:column;gap:.75rem}.modal-card{background:var(--dynamic-base-1);border-radius:var(--dynamic-border-radius);box-shadow:var(--dynamic-shadow-down-3);overflow:hidden;width:100%}.modal-card--radius-small{border-radius:calc(var(--dynamic-border-radius)*.75)}.modal-card--with-border{border:1px solid var(--dynamic-base-4)}@media (max-width:640px){.modal-card{bottom:0;max-width:37.5rem;top:auto;transform:translateY(0);width:100%}.modal-card--sharp-mobile-bottom-radius:last-child{border-radius:var(--dynamic-border-radius) var(--dynamic-border-radius) 0 0}}.inline-widget-button{align-items:center;background-color:var(--dynamic-base-1);display:flex;gap:.5rem;min-height:100%;padding:.5rem .75rem;width:-moz-fit-content;width:fit-content}.inline-widget-button:hover{background-color:var(--dynamic-hover)}.inline-widget-button__icon{height:1.25rem;width:1.25rem}.inline-widget-button__vertical-divider{background-color:var(--dynamic-base-3);content:"";height:1rem;width:.0625rem}.inline-widget{align-items:center;background-color:var(--dynamic-base-1);border-radius:calc(var(--dynamic-border-radius)/3);display:flex;justify-content:center;overflow:hidden;width:-moz-fit-content;width:fit-content}.inline-widget>*{border-right:1px solid var(--dynamic-base-3)}.inline-widget>:last-child{border-right:none}.wallet-information-card{background:var(--dynamic-base-2);border-radius:calc(var(--dynamic-border-radius)/2);display:flex;flex-direction:column}.wallet-information-card__header{border-bottom:1px solid var(--dynamic-base-3);display:flex;gap:.5rem;justify-content:space-between;padding:.75rem}.wallet-information-card__details-container{align-items:center;display:flex;gap:.75rem;justify-content:space-between;min-width:0}.wallet-information-card__menu{flex-shrink:0}.wallet-information-card__icon{height:1.75rem;width:1.75rem}.wallet-information-card__details{display:flex;flex-direction:column;overflow:hidden}.wallet-information-card__balance-container{align-items:center;display:flex;gap:.5rem;justify-content:space-between;padding:.75rem}.social-sign-in{display:flex;flex-wrap:wrap;gap:.375rem;justify-content:space-between}.social-sign-in--tile{flex:1;height:2.5rem}.social-sign-in--tile__full-width{flex:1 0 100%}.social-sign-in--card{display:flex;flex-direction:column;min-height:11.5625rem}.social-sign-in--card--body{display:grid;gap:.375rem;grid-template-columns:auto auto auto auto;padding:.25rem 1.5rem 1.5rem}.social-sign-in--card--tile{height:2.5rem}.sign-typed-data-preview--attribute-row{display:flex;gap:.5rem}.sign-typed-data-preview--fields-list,.sign-typed-data-preview--type-container{display:flex;flex-direction:column;gap:.25rem}.sign-typed-data-preview--type-container{padding-left:1rem}.need-help-section{align-items:center;display:flex;flex-direction:column;gap:.125rem;margin-bottom:.5rem}.need-help-section__links{display:flex;gap:.5rem}.need-help-section__links>*+*{padding-left:.5rem;position:relative}.need-help-section__links>*+:after{border-left:1px solid var(--dynamic-text-secondary);bottom:15%;content:"";left:0;position:absolute;top:15%;width:50%}.need-help-section__helper-link{color:var(--dynamic-text-link)}.textarea__container{position:relative}.textarea__container .textarea__suffix{position:absolute;right:1rem;top:1rem}.textarea__container .textarea{background:var(--dynamic-base-2);border-color:var(--dynamic-base-3);border-radius:calc(var(--dynamic-border-radius)*.4);border-width:.0625rem;color:var(--dynamic-text-primary);font-size:.9375rem;font-weight:400;margin:0;outline:none;resize:none;transition:all .2s ease;width:100%}.textarea__container .textarea:disabled{background:var(--dynamic-base-3);border-color:var(--dynamic-base-4)}.textarea__container .textarea:disabled .textarea__label{color:var(--dynamic-text-tertiary)}.textarea__container .textarea__label{color:var(--dynamic-text-secondary);cursor:text;font-size:.625rem}.textarea__container .textarea:not(.textarea__error):focus,.textarea__container .textarea:not(.textarea__error):hover{background:var(--dynamic-base-2);border-color:var(--dynamic-base-4)}.textarea__container .textarea__error{background:var(--dynamic-error-2);border-color:var(--dynamic-error-1)}.textarea__container .textarea__error~.textarea__label,.textarea__container .textarea__error~.textarea__trailing{color:var(--dynamic-error-1)}.textarea__container .textarea__valid{background:var(--dynamic-success-2);border-color:var(--dynamic-success-1)}.textarea__container .textarea__valid~.textarea__label,.textarea__container .textarea__valid~.textarea__trailing{color:var(--dynamic-success-1)}.textarea__container .textarea__has_trailing{padding-right:4rem}.textarea__container .textarea__trailing{color:var(--dynamic-text-secondary);font-size:.75rem;font-weight:500;position:absolute;right:.75rem;top:50%;transform:translateY(-50%)}.textarea__container--dense .textarea{padding:1.125rem .75rem .375rem}.textarea__container--dense .textarea::-moz-placeholder{color:transparent}.textarea__container--dense .textarea::placeholder{color:transparent}.textarea__container--dense .textarea__label{left:.75rem;position:absolute;top:.4375rem;transition:all .2s ease;-webkit-user-select:none;-moz-user-select:none;user-select:none}.textarea__container--dense .textarea:-moz-placeholder-shown~.textarea__label{font-size:.9375rem;top:.75rem}.textarea__container--dense .textarea:placeholder-shown~.textarea__label{font-size:.9375rem;top:.75rem}.textarea__container--dense .textarea:focus~.textarea__label{font-size:.625rem;top:.4375rem}.textarea__container--regular{display:flex;flex-direction:column}.textarea__container--regular .textarea{padding:.75rem}.textarea__container--regular .textarea__label{align-items:center;display:inline-flex;font-size:.75rem;line-height:1rem;margin-bottom:.5rem;order:-1}.textarea__container--regular .textarea__label:after{background:var(--dynamic-base-4);content:"";flex:1;height:1px;margin-left:.75rem;right:0}.textarea__container--regular .textarea__suffix{top:2.375rem}.textarea__message{color:var(--dynamic-text-primary);padding:.5rem 0}.textarea__message__error{color:var(--dynamic-error-1)}input:-webkit-autofill,input:-webkit-autofill:active,input:-webkit-autofill:focus,input:-webkit-autofill:hover,select:-webkit-autofill,select:-webkit-autofill:focus,select:-webkit-autofill:hover,textarea:-webkit-autofill,textarea:-webkit-autofill:focus,textarea:-webkit-autofill:hover{-webkit-text-fill-color:var(--dynamic-text-primary)!important;background:var(--dynamic-base-2);border-color:var(--dynamic-base-4);border-radius:calc(var(--dynamic-border-radius)*.4);border-width:.0625rem;color:var(--dynamic-text-primary)!important;-webkit-transition:background-color 5000s ease-in-out 0s;transition:background-color 5000s ease-in-out 0s}.secure-turnkey-wallet-card{background:var(--dynamic-brand-secondary-color);border:var(--dynamic-wallet-list-tile-border);border-radius:calc(var(--dynamic-border-radius)/2);color:var(--dynamic-text-primary);display:flex;gap:.625rem;padding:.75rem;transition-duration:var(--dynamic-wallet-list-tile-animation-duration);transition-property:all;transition-timing-function:ease-out;width:100%}.secure-turnkey-wallet-card__text-content{align-items:flex-start;cursor:pointer;display:flex;flex-direction:column;flex-grow:1;padding:0;text-align:left}.secure-turnkey-wallet-card__text-content,.secure-turnkey-wallet-card__text-content:hover{background-color:transparent;box-shadow:none}.secure-turnkey-wallet-card__link{line-height:20px;text-decoration:underline}.toggle{-webkit-tap-highlight-color:transparent;cursor:pointer;display:inline-block}.toggle--input{display:none}.toggle--input:checked+.toggle--content__variant-primary{background-color:var(--dynamic-brand-primary-color);color:var(--dynamic-brand-primary-color)}.toggle--input:checked+.toggle--content .toggle--knob{left:1.09375rem}.toggle--input:checked+.toggle--content .toggle--knob>*{opacity:1}.toggle--content{background-color:var(--dynamic-base-3);border-radius:.625rem;height:1.25rem;position:relative;transition:background-color .2s ease;width:2.25rem}.toggle--knob{align-items:center;background-color:#fff;border-radius:100%;display:flex;height:1.0625rem;justify-content:center;left:.09375rem;position:absolute;top:.09375rem;transition:left .2s ease;width:1.0625rem}.toggle--knob>*{opacity:0;transition:opacity .2s ease}.list-tile-animated-trailing{position:relative}.list-tile-animated-trailing__child{position:absolute;right:0;transform:translateY(-50%);transition-duration:.2s;transition-property:opacity,transform;transition-timing-function:ease-in}.list-tile-animated-trailing__hover-element{opacity:0;position:absolute;right:0;transform:translate(-.625rem,-50%);transition-duration:.3s}.list-tile:hover .list-tile-animated-trailing__hover-element{opacity:1;transform:translateY(-50%)}.list-tile:hover .list-tile-animated-trailing__child{opacity:0;transform:translate(-.625rem,-50%)}.wallet-group-view-layout__container{padding:var(--dynamic-layout-content-padding)}.wallet-group-view-layout__icon{height:4rem;margin:0 auto .75rem;width:4rem}.wallet-group-view-layout__list{display:flex;flex-direction:column;gap:.5rem}.wallet-group-view-layout__title{padding-bottom:1rem;text-align:center}.retry-send-verification-code-section{align-items:center;display:flex;flex-direction:column}.retry-send-verification-code-section__confirmation{color:var(--dynamic-success-1);display:flex;gap:.3125rem;padding:.125rem .375rem}.phantom-ledger-icon{position:absolute}.phantom-ledger-icon__container{align-items:center;display:flex;height:100%;position:relative}.account-exists__container{align-items:center;background:var(--dynamic-base-1);display:flex;flex-direction:column;padding:.3125rem}.account-exists__main{padding:var(--dynamic-modal-padding)}.account-exists__social-icon{margin:auto}.account-exists__image{padding:.3125rem;width:4.375rem}.account-exists__content{text-align:center}.account-exists__content--primary{margin-bottom:.375rem}.account-exists__content--secondary{margin-bottom:1rem}.account-exists__button--primary{background:var(--dynamic-base-2);border:1px solid var(--dynamic-base-4);box-shadow:var(--dynamic-shadow-down-1);margin:0}.user-data-fields__fields-column,.user-data-form__form{display:flex;flex-direction:column}.user-data-fields__fields-column{gap:.375rem;margin-bottom:.5rem;max-height:11.25rem;overflow:auto}.user-data-fields__checkbox-container{background:var(--dynamic-base-2);border:.0625rem solid var(--dynamic-base-4);border-radius:calc(var(--dynamic-border-radius)/2);display:flex;flex-direction:column;padding:.625rem}.user-data-fields__consent-checkbox{display:flex;margin-bottom:.5rem}.user-data-fields__consent-checkbox a{color:var(--dynamic-text-link)}.user-data-fields__consent-checkbox:last-child{margin-bottom:0}.user-data-fields__checkbox-label{padding-left:.75rem}.user-data-fields__tooltip{background-color:var(--dynamic-text-primary);color:var(--dynamic-base-2);font-size:.75rem}.collect-user-data::-webkit-scrollbar,.collect-user-data::-webkit-scrollbar-thumb,.collect-user-data::-webkit-scrollbar-track{display:none}.collect-user-data__main-img{width:100%}.collect-user-data__form{padding:var(--dynamic-layout-content-padding)}.collect-user-data__form--error{padding:var(--dynamic-layout-content-error-padding)}.collect-user-data__img-container{align-items:center;display:flex;justify-content:center}.collect-user-data__img{height:1.75rem;width:1.75rem}.collect-user-data__img--rounded{border-radius:9999px}.collect-user-data__wallet-address{margin-left:.5rem}.collect-user-data__success-icon{align-items:center;display:flex;justify-content:center}.collect-user-data__success-icon svg{height:4rem;width:4rem}.collect-user-data__welcome-container{margin:1rem 0;text-align:center}.collect-user-data__welcome-title{margin-bottom:.25rem}.collect-user-data__log-out{margin:.75rem auto 0}.collect-user-data__error--not-supported{align-items:center;border-radius:0;display:flex;justify-content:center;margin:0;width:100%}.collect-user-data__network-picker{margin:auto 0;max-width:-moz-fit-content;max-width:fit-content}.collect-user-data__network-picker-button{border:1px solid var(--dynamic-base-4);position:static;transform:translateX(0)}.collect-user-data__network-picker-button:hover{background:var(--dynamic-hover)}.collect-user-data__network-container{border:var(--dynamic-header-border-bottom);display:flex;justify-content:space-between;padding:var(--dynamic-header-padding);position:relative}.collect-user-data-login-with-email::-webkit-scrollbar,.collect-user-data-login-with-email::-webkit-scrollbar-thumb,.collect-user-data-login-with-email::-webkit-scrollbar-track{display:none}.collect-user-data-login-with-email__main-img{width:100%}.collect-user-data-login-with-email__user-info-container{align-items:center;border:var(--dynamic-header-border-bottom);display:flex;justify-content:center;padding:var(--dynamic-header-padding)}.collect-user-data-login-with-email__email-address{margin-left:.5rem}.collect-user-data-login-with-email__icon-container{height:1.5rem;width:1.5rem}.collect-user-data-login-with-email__icon-container .user-profile-social-account__connected-avatar{margin-top:.125rem}.collect-user-data-login-with-email__form{padding:var(--dynamic-layout-content-padding)}.collect-user-data-login-with-email__success-icon{align-items:center;display:flex;justify-content:center}.collect-user-data-login-with-email__success-icon svg{height:4rem;width:4rem}.collect-user-data-login-with-email__welcome-container{margin:1rem 0;text-align:center}.collect-user-data-login-with-email__welcome-title{margin-bottom:.375rem}.collect-user-data-login-with-email__log-out{margin:.75rem auto 0}.email-update__container{padding:var(--dynamic-layout-content-padding)}.email-update__copy-text-container{margin:.375rem auto .75rem;text-align:center}.email-update__icon{margin:-1.5rem auto auto}.email-update__title{color:var(--dynamic-text-primary);margin-top:.5rem!important;max-width:20rem;text-align:center}.email-update__button{background:var(--dynamic-base-2)!important;border-radius:.75rem;margin-top:1rem;padding-bottom:1rem;padding-top:1rem;width:100%}.email-update__button:disabled{cursor:not-allowed;opacity:.5}.email-update__input{width:100%!important}.email-verification__retry-container{margin:1rem auto 0}.email-verification__container{align-items:center;display:flex;flex-direction:column;justify-content:center;padding:var(--dynamic-layout-content-padding)}.email-verification__container--error{padding:var(--dynamic-layout-content-error-padding)}.email-verification__icon-with-spinner{margin:0 auto .75rem}.email-verification__error-message{margin:0}.email-verification__error-message,.email-verification__transfer-message{align-items:center;border-radius:0;display:flex;justify-content:center;width:100%}.email-verification__transfer-message{background:var(--dynamic-success-2);color:var(--dynamic-success-1);margin-bottom:.5rem;padding:.5rem .75rem;text-align:center}.email-verification__icon--verified{margin:0 auto 1rem}.email-verification__title{margin-top:.5rem;text-align:center}.email-verification__retry-copy{margin-top:1rem}.email-verification__copy-text-container{margin:0;text-align:center}.email-verification__text-button{color:var(--dynamic-text-link)}.email-verification__text-button:disabled{color:var(--dynamic-text-tertiary);cursor:not-allowed}.email-verification__log-out{margin:.75rem auto 0}.no-qr-code-installed__container{align-items:center;color:var(--dynamic-text-primary);flex-direction:column;margin:-2.25rem 0 0;padding:var(--dynamic-modal-padding);padding-top:0;width:100%}.no-qr-code-installed__container:first-child,.no-qr-code-installed__container:last-child{margin-right:0}.no-qr-code-installed__img{display:flex;height:auto;justify-content:center;margin:auto;text-align:center}.no-qr-code-installed__typography{text-align:center}.no-qr-code-installed__typography--title{margin:1rem 0 .375rem;text-align:center}.no-qr-code-installed__links-section{flex-direction:column;margin:1rem 0}.wallet-help-link__anchor{align-items:center;background:var(--dynamic-base-2);border:.0625rem solid var(--dynamic-base-4);border-radius:calc(var(--dynamic-border-radius)/2);box-shadow:var(--dynamic-shadow-down-1);color:var(--dynamic-text-primary);display:flex;gap:.625rem;margin-bottom:.5rem;padding:.75rem;position:relative;width:100%}.pending-connect__container{align-items:center;display:flex;flex-direction:column;justify-content:center;padding:var(--dynamic-layout-content-padding)}.pending-connect__copy-text{color:var(--dynamic-text-secondary);max-width:20rem;text-align:center}.pending-connect__icon-with-spinner{margin:0 auto .75rem}.pending-signature__container{align-items:center;display:flex;flex-direction:column;justify-content:center;padding:var(--dynamic-layout-content-padding)}.pending-signature__container .pending-signature__icon-with-spinner{margin:0 auto .75rem}.pending-signature__container .pending-signature__copy{color:var(--dynamic-text-secondary);line-height:1.25rem;max-width:20rem;text-align:center}.pending-signature__container .pending-signature__copy--mini{line-height:1rem;margin-top:.25rem}.pending-signature__container .pending-signature__button{box-shadow:var(--dynamic-shadow-down-1);margin-top:.75rem}.social-wrong-account-view__container{align-items:center;display:flex;flex-direction:column;justify-content:center;padding:0 var(--dynamic-modal-padding) 1.125rem}.social-wrong-account-view__container .social-wrong-account-view__title{color:var(--dynamic-text-primary);line-height:1.5rem}.social-wrong-account-view__container .social-wrong-account-view__copy{color:var(--dynamic-text-secondary);line-height:1.25rem;margin-top:.375rem;max-width:20rem;text-align:center}.social-wrong-account-view__container .social-wrong-account-view__button{box-shadow:var(--dynamic-shadow-down-1);margin-top:.75rem}.social-redirect-view__container{align-items:center;display:flex;flex-direction:column;justify-content:center;padding:var(--dynamic-modal-padding)}.social-redirect-view__container .social-redirect-view__title{color:var(--dynamic-text-primary);line-height:2.25rem}.social-redirect-view__container .powered-by-dynamic{margin-top:1.5rem}.qrcode-container__container{align-items:center;display:flex;flex-direction:column;justify-content:center;padding:var(--dynamic-layout-content-padding)}.qrcode-container__container--message{padding:var(--dynamic-layout-content-error-padding)}.qrcode-container__container .button__content{display:flex;gap:.375rem}.qrcode-container__top{align-items:center;display:flex;flex-direction:column;gap:.625rem;margin-bottom:1rem}.qrcode-container__top .button-container{display:flex;gap:1rem}.qrcode-container__top .button-container svg path{fill-opacity:100%}.qrcode-container__content{max-width:20rem;text-align:center}.qrcode-container__tos{margin-top:1rem;max-width:17.5rem;text-align:center}.qrcode-container__tos .tos__link{color:var(--dynamic-text-link)}.qrcode-container__tos .tos__link:hover{text-decoration:underline}.qrcode{color:var(--dynamic-base-1);position:relative}.qrcode__container{align-items:center;border-radius:calc(var(--dynamic-border-radius)/1.5);display:flex;height:16.25rem;justify-content:center;margin:auto;width:16.25rem}.qrcode__dot-circle{color:var(--dynamic-text-primary)}.qrcode__icon{bottom:0;left:0;margin:auto;position:absolute;right:0;top:0}.qr-code-view__scan-issue-message{align-items:center;background:var(--dynamic-base-2);border-radius:0;color:var(--dynamic-text-primary);display:flex;justify-content:center;padding:.5rem .75rem;text-align:center;width:100%}.qr-code-view__scan-issue-button{color:var(--dynamic-text-link);font-size:.75rem;text-decoration:underline}.search-instead__container{font-size:.75rem;line-height:1rem;margin-top:2.5rem;padding-bottom:1rem;text-align:center;transition-duration:.3s;transition-property:background-color,border-color,color,fill,stroke;width:100%}.search-instead__container__image{display:flex;justify-content:center;margin:.5rem auto}.wallet-list-item__tile{border-radius:var(--dynamic-wallet-list-tile-border-radius)}.wallet-list__error-container{margin:0}.wallet-list__search-container{padding:var(--dynamic-search-padding)}.wallet-list__scroll-container{display:flex;flex-direction:column;gap:var(--dynamic-wallet-list-tile-gap);height:100%;max-height:var(--dynamic-wallet-list-max-height);overflow:auto;padding:var(--dynamic-initial-view-content-padding)}.wallet-list__scroll-container--error{padding:var(--dynamic-layout-content-error-padding)}.wallet-list__scroll-container::-webkit-scrollbar,.wallet-list__scroll-container::-webkit-scrollbar-track{display:none}.wallet-list__scroll-container::-webkit-scrollbar-thumb{display:none}.wallet-list__scroll-container:empty{display:flex}.wallet-list__scroll-container--full-height{height:100vh}.wallet-list__search-skeleton{height:2.625rem}.wallet-list__search-skeleton,.wallet-list__tile-skeleton{border-radius:calc(var(--dynamic-border-radius)/2);margin-bottom:.5rem}.wallet-list__tile-skeleton{height:3rem;padding:.75rem}.wallet-list__tiny-footer{background:var(--dynamic-base-1);border-top:.0625rem solid var(--dynamic-base-4);box-shadow:var(--dynamic-shadow-up-1);height:var(--dynamic-border-radius);opacity:1;text-align:center;transition:opacity .15s,visibility .15s;visibility:visible}.wallet-list__tiny-footer--hidden{opacity:0;transition:opacity .15s,visibility .15s;visibility:hidden}.wallet-no-access__container{background:var(--dynamic-base-1)}.wallet-no-access__main{padding:var(--dynamic-modal-padding)}.wallet-no-access__social-info-container{align-items:center;display:flex;justify-content:center;margin-top:1.5rem}.wallet-no-access__waitlist-link{align-items:center;display:flex;gap:8px;justify-content:center}.wallet-no-access__social-icon{margin:auto}.wallet-no-access__image{width:100%}.wallet-no-access__user-info-container{align-items:center;display:flex;flex-direction:column;margin-bottom:1rem}.wallet-no-access__content{text-align:center}.wallet-no-access__content--primary{margin-bottom:.375rem}.wallet-no-access__content--secondary{margin-bottom:1rem}.wallet-no-access__wallet-address{margin-left:.375rem}.wallet-no-access__wallet-address-container{align-items:center;display:flex;justify-content:center}.wallet-no-access__button--primary{background:var(--dynamic-base-2);border:1px solid var(--dynamic-base-4);box-shadow:var(--dynamic-shadow-down-1);margin:0}.wallet-no-access__icon--verified{margin:0 auto 1rem}.wallet-sign-spinner__container{align-items:center;display:flex;flex-direction:column;justify-content:center;padding:var(--dynamic-layout-content-padding)}.wallet-sign-spinner__copy{color:var(--dynamic-text-secondary);margin:0;text-align:center}.wallet-sign-spinner__button{box-shadow:var(--dynamic-shadow-down-1);margin:.75rem 0 0}.wallet-used-view__container{padding:var(--dynamic-layout-content-padding);text-align:center}.wallet-used-view__icon{display:flex;justify-content:center;margin:0 0 .5rem}.wallet-used-view__icon svg{margin:0 auto}.wallet-used-view__shorten-wallet-address{margin:0 0 1rem}.wallet-used-view__copy{margin:0 0 .75rem}.wallet-used-view__accept-button,.wallet-used-view__footer{margin:0 0 .5rem}.wallet-used-view__logout{background:none;border:none;box-shadow:none;margin:auto}.wallet-used-view__checkbox-label{align-items:center;background-color:var(--dynamic-base-2);border-radius:calc(var(--dynamic-border-radius)/2);cursor:pointer;display:flex;gap:.5rem;justify-content:center;margin:1rem auto .5rem;padding:.75rem;text-align:left}.wallet-used-view__checkbox-container{flex-shrink:0}.network-not-supported__content-container{padding:var(--dynamic-layout-content-padding)}.network-not-supported__content-container--error{padding:var(--dynamic-layout-content-error-padding)}.network-not-supported__main-img{width:100%}.network-not-supported__img-container{align-items:center;display:flex;justify-content:center}.network-not-supported__img{border-radius:100%;height:4rem;width:4rem}.network-not-supported__welcome-container{margin:1rem 0;text-align:center}.network-not-supported__welcome-title{margin-bottom:.375rem}.network-not-supported__continue{margin-top:1rem}.network-not-supported__log-out{margin:.75rem auto 0}.network-not-supported__error--not-supported{align-items:center;border-radius:0;display:flex;justify-content:center;margin:0;width:100%}.network-not-supported__network-container{margin-top:.5rem;position:relative}.network-not-supported__network-picker{margin:auto;max-width:-moz-fit-content;max-width:fit-content}.network-not-supported__network-picker-button{position:static;transform:translateX(0)}.email-confirmation-waiting-view{align-items:center;display:flex;flex-direction:column;padding-bottom:1.625rem;text-align:center}.email-confirmation-waiting-view__title{padding-bottom:.375rem}.email-confirmation-waiting-view__email-container{align-items:center;display:flex;gap:.25rem;justify-content:center}.email-confirmation-waiting-view__edit-icon-button{display:inline-flex}.email-confirmation-waiting-view__header-icon{display:flex;justify-content:center;margin-top:-2rem}.email-confirmation-waiting-view__note{max-width:16.25rem;padding-top:1rem;text-align:center}.email-confirmation-waiting-view__powered_by_dynamic_footer{padding-top:1rem;width:100%}.login-with-email-form{display:flex;flex-direction:column;gap:.375rem}.login-with-email-form .input__suffix{top:.6875rem}.login-with-email-form .input__suffix .icon-button{--icon-arrow:var(--dynamic-text-tertiary);--icon-background:var(--dynamic-base-3);transition:all .2s}.login-with-email-form .input__suffix .icon-button path,.login-with-email-form .input__suffix .icon-button rect{transition:all .2s}.login-with-email-form .input__suffix .icon-button--active,.login-with-email-form .input__suffix .icon-button:hover{--icon-arrow:var(--dynamic-text-secondary);--icon-background:var(--dynamic-hover)}.login-with-email-form .input__suffix .icon-button--has-content,.login-with-email-form .input__suffix .icon-button--has-content:hover{--icon-arrow:var(--dynamic-base-2);--icon-background:var(--dynamic-brand-primary-color)}.login-with-email-form .input__container .input:focus~.input__suffix .icon-button{opacity:1;visibility:visible}.list-item-button{background:none;box-shadow:none}.list-item-button__trailing{position:relative}.list-item-button__trailing-child{position:absolute;right:0;transition-property:opacity,transform;transition-timing-function:ease-in}.list-item-button__trailing-label{transform:translateY(-50%);transition-duration:.2s}.list-item-button__trailing-icon{transition-duration:.3s}.list-item-button:hover .list-item-button__trailing-label,.list-item-button__trailing-icon{opacity:0;transform:translate(-.625rem,-50%)}.list-item-button:hover .list-item-button__trailing-icon{opacity:1;transform:translateY(-50%)}.login-with-email-wallet-list__skeleton{border-radius:calc(var(--dynamic-border-radius)/2);height:2.625rem;margin-bottom:.5rem}.login-with-email-wallet-list__container{display:flex;flex-direction:column;gap:.375rem}.connect-with-wallet-button{height:2.5rem}.login-view__text{padding:.5rem 0}.login-view__error-container{margin:0}.login-view__container{padding:var(--dynamic-initial-view-content-padding)}.login-view__container--error{padding:var(--dynamic-layout-content-error-padding)}@media (pointer:coarse){.login-view__container{padding:.75rem}}.login-view__scroll{display:flex;flex-direction:column;gap:.375rem;height:100%;max-height:36.25rem;overflow:auto}.login-view__scroll::-webkit-scrollbar,.login-view__scroll::-webkit-scrollbar-track{display:none}.login-view__scroll::-webkit-scrollbar-thumb{display:none}.login-view__scroll:empty{display:flex}.login-view__scroll--full-height{height:100vh}.login-view__scroll--email-first{flex-direction:column-reverse}.login-view__scroll__web2{display:flex;flex-direction:column;gap:.75rem}.captcha-verify-user__container{align-items:center;display:flex;flex-direction:column;justify-content:center;padding:0 1.5rem 1.5rem;text-align:center}.captcha-verify-user__icon{height:4rem;margin-bottom:1rem;width:4rem}.captcha-verify-user__title{margin-bottom:.375rem}.captcha-verify-user__subtitle{margin-bottom:1rem}.captcha-verify-user__dynamic-logo{margin-top:1rem}.network-not-supported-switch-manual{margin-top:-1.5rem;padding:0 1.5rem 1.5rem}.network-not-supported-switch-manual__img-container{align-items:center;display:flex;justify-content:center;margin-bottom:1rem}.network-not-supported-switch-manual__img{border-radius:100%;height:4rem;width:4rem}.network-not-supported-switch-manual__network-container{position:relative}.network-not-supported-switch-manual__content{text-align:center}.network-not-supported-switch-manual__title{margin:0 0 .375rem}.wallet-group__list{display:flex;flex-direction:column}.wallet-locked-view__error-container{align-items:center;display:flex;justify-content:center}.wallet-locked-view__button-header{margin:.75rem}.wallet-locked-view__button{margin:.75rem auto auto}.wallet-locked-view__icon{margin:auto}.wallet-locked-view__content{padding:0 var(--dynamic-modal-padding) 2.1875rem;text-align:center}@media (pointer:coarse){.wallet-locked-view__content{padding:0 .75rem}}.wallet-locked-view__title{margin-top:.75rem}.wallet-locked-view__log-out{margin:.75rem auto 0}.merge-user-accounts__container{padding:0 1.5rem 1.5rem}@media (pointer:coarse){.merge-user-accounts__container{padding:0 .75rem}}.merge-user-accounts__accounts{align-items:center;display:flex;justify-content:space-between;margin:-1.5rem auto 1.5rem;max-width:270px;width:100%}.merge-user-accounts__accounts__item{align-items:center;display:flex;flex-direction:column;gap:.625rem;justify-content:center;width:100%}.merge-user-accounts__accounts__item__icon{height:3.5rem;width:3.5rem}.merge-user-accounts__accounts__divider{height:16px;margin-top:-1.5rem;width:16px}.merge-user-accounts__accounts__divider__icon>path{fill:var(--dynamic-text-secondary)}.merge-user-accounts__text{text-align:center}.merge-user-accounts__text__header{color:var(--dynamic-text-primary);margin-bottom:.5rem}.merge-user-accounts__text__body{color:var(--dynamic-text-secondary);margin-bottom:1rem}.merge-user-accounts__text--bold{font-weight:700}.merge-user-accounts__buttons{display:flex;flex-direction:column;gap:.5rem}.merge-user-accounts__buttons__button{width:100%}.wallet-cannot-be-transferred-view__container{padding:var(--dynamic-modal-padding);text-align:center}.wallet-cannot-be-transferred-view__icon{display:flex;justify-content:center;margin:0 0 .5rem}.wallet-cannot-be-transferred-view__icon svg{margin:0 auto}.wallet-cannot-be-transferred-view__shorten-wallet-address{margin:0 0 1rem}.wallet-cannot-be-transferred-view__title{margin:0 0 .375rem}.wallet-cannot-be-transferred-view__copy{margin:0 0 .75rem}.wallet-cannot-be-transferred-view__transfer-alt-wallet-button{margin:0 0 1rem}.wallet-cannot-be-transferred-view__footer{margin:0 0 .5rem}.wallet-cannot-be-transferred-view__cancel{background:none;border:none;box-shadow:none;margin:auto}.user-field-editor__header{align-items:center;display:flex;flex-direction:column;gap:1.25rem;text-align:center}.user-field-editor__header__icon{align-items:center;background-color:var(--dynamic-base-2);border-radius:50%;display:flex;height:4rem;justify-content:center;width:4rem}.user-field-editor__body{align-items:center;display:flex;flex-direction:column;gap:.5rem;margin:0 1.5rem 1.5rem;text-align:center}.user-field-editor__body__subtitle{margin-block:-.375rem .5rem}.user-field-editor__body__form{width:100%}.passkey-intro-view{align-items:center;display:flex;flex-direction:column;gap:1rem;padding-bottom:1.5rem;padding-left:1.5rem;padding-right:1.5rem;text-align:center}.passkey-intro-view__header{align-items:center;display:flex;justify-content:center;margin-bottom:-5rem;width:12.875rem}.passkey-intro-view__actions{display:flex;flex-direction:column;gap:.625rem;width:100%}.passkey-intro-view__inline-button{align-items:center;display:inline-flex;gap:.5rem;text-align:left}.passkey-intro-view__inline-button svg path{fill:var(--dynamic-base-2)!important}.passkey-intro-view__log-out{font-size:.875rem;justify-content:center;line-height:20px}.passkey-intro-view__log-out:hover{background-color:transparent}.passkey-intro-view__skip{color:var(--dynamic-text-secondary);font-size:.875rem;justify-content:center;line-height:1rem}.passkey-intro-view__skip:hover{background-color:transparent}.passkey-recovery-view{align-items:center;display:flex;flex-direction:column;gap:1rem;padding-bottom:1.5rem;padding-left:1.5rem;padding-right:1.5rem;text-align:center}.passkey-recovery-view__header{align-items:center;display:flex;justify-content:center;margin-bottom:-5rem;width:12.875rem}.passkey-recovery-view__actions{display:flex;flex-direction:column;gap:.625rem;width:100%}.passkey-recovery-view__input-valid{background:var(--dynamic-success-2)!important;border-color:var(--dynamic-success-1)!important}.passkey-recovery-view__input-valid,.passkey-recovery-view__input-valid~.input__label{color:var(--dynamic-success-1)!important}.passkey-recovery-view__inline-button{align-items:center;display:inline-flex;gap:.5rem;text-align:left}.passkey-recovery-view__inline-button svg path{fill:var(--dynamic-base-2)!important}.passkey-recovery-view__resend-code{align-items:center;display:flex;flex-direction:column}.passkey-recovery-view button.text-button{color:inherit}.edit-passkeys-widget-view,.edit-passkeys-widget-view__body{display:flex;flex-direction:column}.edit-passkeys-widget-view__body{flex:1;gap:.25rem;justify-content:space-between;margin-top:20px;padding:0 1.5rem 1.5rem}.edit-passkeys-widget-view__icon{height:100px;margin-left:auto;margin-right:auto;margin-top:-40px;width:100px}.edit-passkeys-widget-view__title{margin-left:auto;margin-right:auto;margin-top:20px}.passkey-new-domain-detected{align-items:center;display:flex;flex-direction:column;gap:1rem;padding-bottom:1.5rem;padding-left:1.5rem;padding-right:1.5rem;text-align:center}.passkey-new-domain-detected__header{align-items:center;display:flex;justify-content:center}.passkey-new-domain-detected__actions{display:flex;flex-direction:column;gap:.625rem;width:100%}.passkey-new-domain-detected__inline-button{align-items:center;display:inline-flex;gap:.5rem;text-align:left}.passkey-new-domain-detected__inline-button svg path{fill:var(--dynamic-base-2)!important}.passkey-new-domain-detected__log-out{font-size:.875rem;justify-content:center;line-height:20px}.passkey-new-domain-detected__log-out:hover{background-color:transparent}.embedded-reveal-view{display:flex;flex-direction:column;gap:var(--dynamic-wallet-list-tile-gap);height:100%;overflow:auto}.embedded-reveal-view__header{align-items:center;display:flex;justify-content:center}.embedded-reveal-view__body{display:flex;flex:1;flex-direction:column;gap:.75rem;justify-content:space-between;padding:0 1.5rem 1.5rem}.embedded-reveal-view__body__description{display:flex;justify-content:center;text-align:center}.embedded-reveal-view__body__badge{font-size:.75rem}.embedded-reveal-view__body__card{background:var(--dynamic-base-2);border:1px solid var(--dynamic-base-4);border-radius:.75rem;box-shadow:0 1px 2px 0 rgba(24,39,75,.04);display:flex;flex:1;flex-direction:column;gap:.625rem;max-height:21.875rem;overflow:auto;padding:.75rem}.embedded-reveal-view__body__card__statement{display:flex;gap:.5rem;letter-spacing:-.15px}.embedded-reveal-view__body__card__acknowledgement{display:flex;gap:.5rem;text-align:left}.embedded-reveal-view__body__card__icon{color:var(--dynamic-text-tertiary);height:1.5rem;min-width:1.5rem;width:1.5rem}.embedded-reveal-view__body__card__skeleton{border-radius:.75rem;height:3.75rem}.embedded-reveal-view__body__confirm_card{background:var(--dynamic-base-2);border:1px solid var(--dynamic-base-4);border-radius:.75rem;box-shadow:0 1px 2px 0 rgba(24,39,75,.04);display:flex;flex:1;flex-direction:column;gap:.75rem;letter-spacing:-.15px;max-height:21.875rem;overflow:auto;padding:1rem}.embedded-reveal-view__body__button{color:#fff}#dyn-turnkey-export-container-id{background:var(--dynamic-base-2);border:1px solid var(--dynamic-base-4);border-radius:.75rem;overflow:auto;padding:.75rem}#dyn-turnkey-export-element-id{word-wrap:break-word;max-height:-moz-min-content;max-height:min-content;width:100%}.embedded-auth-choice{align-items:center;display:flex;flex-direction:column;gap:1rem;padding-bottom:1.5rem;padding-left:1.5rem;padding-right:1.5rem;text-align:center}.embedded-auth-choice__header{align-items:center;display:flex;justify-content:center;width:100%}.embedded-auth-choice__skip-button{margin-top:-.25rem}.action-card{background-color:var(--dynamic-base-2);border-radius:.75rem;box-shadow:var(--dynamic-shadow-down-1);display:flex;padding:1rem;text-align:left;transition:all .2s ease}.action-card:hover{box-shadow:var(--dynamic-button-shadow)}.action-card__icon{height:1.75rem;min-width:1.75rem;width:1.75rem}.action-card__icon,.action-card__icon path{fill:var(--dynamic-text-tertiary)}.action-card__action-icon{margin-left:auto;min-width:1rem;transform:rotate(180deg);width:1rem}.action-card__content{display:flex;flex-direction:column;gap:.25rem;margin-left:8px}.action-card__content__row{align-items:flex-start;display:flex;gap:.375rem}.action-card__content__row__badge--primary{background:var(--dynamic-brand-primary-color);color:var(--dynamic-base-2)}.embedded-auth-choice-cards{display:flex;flex-direction:column;gap:.625rem;width:100%}.auth-choice-info{align-items:flex-start;align-self:stretch;background:var(--default-base-2,#fff);border:1px solid var(--default-base-4,#e7e8ed);border-radius:12px;display:flex;flex-direction:column;gap:12px;justify-content:center;padding:16px 12px 12px}.auth-choice-info__container-item{display:flex;flex-direction:row;gap:.5rem;text-align:start}.select-hardware-wallet-view__container{padding:var(--dynamic-layout-content-padding)}.select-hardware-wallet-view__icon{height:6rem;margin:0 auto .75rem;width:4rem}.select-hardware-wallet-view__text{padding-bottom:1rem;text-align:center}.wallet-redirect-view__container{align-items:center;display:flex;flex-direction:column;justify-content:center;padding:var(--dynamic-modal-padding)}.wallet-redirect-view__container .wallet-redirect-view__title{color:var(--dynamic-text-primary);line-height:2.25rem}.wallet-redirect-view__container .powered-by-dynamic{margin-top:1.5rem}.sign-message-confirmation__actions{align-items:center;display:flex;flex-direction:row;gap:.375rem;padding-bottom:1rem;width:100%}.sign-message-confirmation__body{align-items:stretch;display:flex;flex-direction:column;padding:.5rem 1.5rem 1.5rem}.sign-message-confirmation__message-container{align-items:center;background-color:var(--dynamic-base-2);border:1px solid var(--dynamic-base-4);border-radius:.75rem;box-shadow:var(--dynamic-shadow-down-1);margin-bottom:.5rem;margin-top:.75rem;max-height:18.75rem;overflow-y:scroll;padding:.75rem;width:100%}.sign-message-confirmation__secure-wallet{margin-block:.5rem}.sign-message-confirmation__message{overflow-wrap:break-word;padding-top:.75rem}.sign-message-confirmation__title{text-align:center}.sign-message-confirmation__error{padding-top:.75rem}.bridge-welcome-layout{display:flex;flex-direction:column;gap:.75rem}.bridge-welcome-layout__body{display:flex;flex-direction:column;gap:1.5rem;padding:0 1.5rem 1.5rem}.bridge-welcome-layout__message-container{display:flex;flex-direction:column;gap:.25rem;text-align:center}.bridge-welcome-layout__chain-icon-group{align-items:center;display:flex;flex-direction:row-reverse;padding-top:.875rem}.bridge-welcome-layout__chain-icon{background-color:var(--dynamic-base-1);border-radius:50%;height:4rem;margin-left:-1.375rem;outline:.25rem solid var(--dynamic-base-1);overflow:hidden;width:4rem}.bridge-welcome-layout__chain-icon:last-child{margin-left:0}.select-wallet-list-layout{display:flex;flex-direction:column;min-height:320px}.select-wallet-list-layout__wallet-list{display:flex;flex-direction:column;flex-grow:1;gap:var(--dynamic-wallet-list-tile-gap);max-height:var(--dynamic-wallet-list-max-height);overflow-y:auto;padding:.25rem 1.5rem 1.5rem}.connected-wallets-list-layout{display:flex;flex-direction:column}.connected-wallets-list-layout__body{display:flex;flex-direction:column;gap:1rem;padding:.25rem 1.5rem 1.5rem}.connected-wallets-list-layout__body__text{text-align:center}.bridge-next-wallet-to-connect-layout__chain-icon{height:4rem;margin:1rem 1rem 0;width:4rem}.bridge-next-wallet-to-connect-layout__body{align-items:center;display:flex;flex-direction:column;gap:1.5rem;padding:1rem 1.5rem 1.5rem;text-align:center}.account-control__name{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.account-control__icon{min-width:1rem}.account-control__container{align-items:center;border-radius:calc(var(--dynamic-border-radius)/3);color:var(--dynamic-text-primary);display:flex;gap:.375rem;min-height:100%;padding:.75rem;z-index:10}.account-control__container--multiwallet-disabled{border-bottom-left-radius:0;border-top-left-radius:0}.account-control__container--active,.account-control__container:hover{background-color:var(--dynamic-hover)}.dynamic-widget-inline-controls{background-color:var(--dynamic-base-1);border-radius:calc(var(--dynamic-border-radius)/3);display:flex;font-size:var(--dynamic-text-size-body-small);max-height:2.5rem;min-width:100%;position:relative}.dynamic-widget-inline-controls__network-picker-main{min-width:60px}.dynamic-widget-inline-controls__account-control{max-width:100%;min-width:max(100%,45px)}.dynamic-widget-inline-controls__account-control .account-control__icon{margin-left:auto}.dynamic-widget-inline-controls__account-control-container{min-width:60px;overflow:hidden}.dynamic-widget-inline-controls__network-picker{background:unset;border-bottom-left-radius:calc(var(--dynamic-border-radius)/3);border-bottom-right-radius:unset;border-top-left-radius:calc(var(--dynamic-border-radius)/3);border-top-right-radius:unset;min-width:100%;padding:.75rem;position:unset;transform:unset}.dynamic-widget-inline-controls__network-picker--active,.dynamic-widget-inline-controls__network-picker:hover{background:var(--dynamic-hover)}.dynamic-widget-inline-controls__network-picker-checkbox{margin:0 0 0 .5rem}.dynamic-widget-inline-controls__network-picker-list{top:2.5rem}@media (pointer:coarse){.dynamic-widget-inline-controls__network-picker-list{top:unset}}.dynamic-widget-dropdown{position:absolute;right:0;top:3.0625rem}.dynamic-widget-dropdown__root{min-width:22.5rem}.dynamic-widget-modal{left:50%;margin:0 auto;position:fixed;top:50%;transform:translate(-50%,-50%);width:min(100%,22.5rem)}@media (pointer:coarse){.dynamic-widget-modal{bottom:0;top:unset;transform:translate(-50%);width:100%}}.dynamic-widget-card{background-color:var(--dynamic-base-1);border:.0625rem solid var(--dynamic-base-4);border-radius:var(--dynamic-border-radius);box-shadow:var(--dynamic-shadow-down-3);height:100%;position:relative;transition:max-height .1s linear}@media (pointer:coarse){.dynamic-widget-card{border-bottom-left-radius:0;border-bottom-right-radius:0}}.dynamic-widget-header{padding:1.5rem 1.5rem 0;position:relative}.dynamic-widget-header__switcher{margin:0 0 1rem}.dynamic-widget-header__passkey-success{margin-inline:-1.5rem}.dynamic-widget-wallet-header{position:relative}.dynamic-widget-wallet-header__email{color:var(--dynamic-text-primary);margin:.5rem 0;text-align:center}.dynamic-widget-wallet-header__icon-container{height:4rem;margin:auto;position:relative;width:4rem}.dynamic-widget-wallet-header__icon-container img,.dynamic-widget-wallet-header__icon-container svg{height:100%;width:100%}.dynamic-widget-wallet-header__wallet-info{align-items:center;display:flex;flex-direction:column;justify-content:center;margin:0 0 1rem}.dynamic-widget-wallet-header__wallet-info .text-button{padding:0}.dynamic-widget-wallet-header__wallet-info__secure-wallet{margin-bottom:0;margin-top:1rem}.dynamic-widget-wallet-header__wallet-address{align-items:center;display:flex;justify-content:center}.dynamic-widget-wallet-header__balance{margin-bottom:.0625rem}.dynamic-widget-wallet-header__seperator{background-color:var(--dynamic-base-4);height:.5rem;margin:0 .5rem;width:.0625rem}.dynamic-widget-wallet-header__status-dot{margin-right:.375rem}.dynamic-widget-wallet-header__ens-name{max-width:12.5rem}.dynamic-widget-wallet-header__network-picker.evm-network-control__container{height:1.5rem}.dynamic-widget-wallet-header__network-picker.non-network-switching-supported-control{height:1.5rem;width:1.5rem}.dynamic-widget-wallet-header__network-picker.network-control-skeleton{bottom:0;height:1.5rem;position:absolute;right:0;width:1.5rem}.dynamic-widget-wallet-header__network-picker .evm-network-control__network-name,.dynamic-widget-wallet-header__network-picker .non-network-switching-supported-control__network-name{display:none}.dynamic-widget-wallet-header__wallet-avatar{border-radius:100%;overflow:hidden}.dynamic-widget-wallet-header__wallet-avatar img{height:4rem;width:4rem}.dynamic-widget-wallet-header__wallet-actions{align-items:center;display:flex;gap:.5rem;justify-content:stretch;margin-top:.5rem;width:100%}.empty-wallet__container{align-items:center;background:var(--dynamic-base-2);border:1px solid var(--dynamic-base-3);border-radius:calc(var(--dynamic-border-radius)/2);box-shadow:var(--dynamic-shadow-down-1);display:flex;flex-direction:column;gap:.75rem;justify-content:center;padding:.5rem;text-align:center;width:100%}.empty-wallet__container--big{margin:0 0 1rem;padding:.75rem}.empty-wallet__icon{height:1.5rem;width:1.5rem}.empty-wallet__icon--big{height:3rem;width:3rem}.empty-wallet__icon>path{fill:var(--dynamic-text-tertiary)}.empty-wallet__text-container{max-width:10rem}.wallet__container{background:var(--dynamic-base-2);border:1px solid var(--dynamic-base-3);border-radius:calc(var(--dynamic-border-radius)/2);display:flex;flex-direction:row;padding:.75rem}.wallet__container:not(:last-child){border-bottom-left-radius:0;border-bottom-right-radius:0;margin-bottom:-.75rem;padding-bottom:1.5rem}.wallet__container:hover .wallet__menu{opacity:1}.wallet__menu{color:var(--dynamic-text-tertiary);opacity:0;transition:opacity .15s ease-in-out}@media (pointer:coarse){.wallet__menu{opacity:1}}.wallet__row{align-items:center;display:flex;flex:1}.wallet__row__seperator{background-color:var(--dynamic-base-4);height:.5rem;margin:0 .5rem;width:.0625rem}.wallet__icon-container{margin-right:.375rem}.wallet__ens-name{max-width:9.375rem}.wallet__actions{max-height:0;overflow:hidden;transition:max-height .3s ease-in-out}.wallet__actions__expanded{max-height:6.25rem}.wallet__actions__inner{padding-top:.75rem}.dynamic-widget-footer{border-bottom-left-radius:var(--dynamic-border-radius);border-bottom-right-radius:var(--dynamic-border-radius);border-top:.0625rem solid var(--dynamic-base-4);color:var(--dynamic-text-primary);display:flex;gap:.5rem;margin-top:auto;padding:1rem 1.5rem}.dynamic-widget-footer__button:hover:enabled svg{color:var(--dynamic-text-secondary)}.dynamic-widget-footer__button svg{color:var(--dynamic-text-tertiary)}.dynamic-widget-footer__button-align-right{margin-left:auto}@media (pointer:coarse){.dynamic-widget-footer{border-bottom-left-radius:unset;border-bottom-right-radius:unset}}.wallet-icon-with-status__container{position:relative}.wallet-icon-with-status__dot-container{align-items:center;background-color:var(--dynamic-base-1);border-radius:100%;bottom:0;display:flex;height:.75rem;justify-content:center;position:absolute;right:0;width:.75rem}.wallet-icon-with-status__dot-container .dot{background-color:var(--dynamic-error-1);border-radius:100%;bottom:0;height:.5rem;right:0;width:.5rem}.wallet-icon-with-status__dot-container .dot--green{background-color:var(--dynamic-success-1)}.wallet-icon-with-status__dot-container--secondary{bottom:0;height:.625rem;right:0;transform:translate(25%,25%);width:.625rem}.wallet-icon-with-status__dot-container--secondary .dot{height:.375rem;width:.375rem}.wallet-icon-with-network__container{position:relative}.wallet-icon-with-network__network-container{align-items:center;background-color:var(--dynamic-base-1);border-radius:100%;bottom:0;display:flex;height:.75rem;justify-content:center;position:absolute;right:0;width:.75rem}.dots-menu-dropdown__container{padding:.375rem 0}.dots-menu-dropdown__item{align-items:center;cursor:pointer;display:flex;font-size:var(--dynamic-text-size-body-small);gap:.5rem;padding:.5rem .75rem;width:100%}.dots-menu-dropdown__item .typography{white-space:nowrap}.dots-menu-dropdown__item:hover{background-color:var(--dynamic-hover)}.dots-menu-dropdown__item:hover .typography{color:var(--dynamic-text-primary)}@media (pointer:coarse){.dots-menu-dropdown__item{font-size:var(--dynamic-text-size-body-normal)}}.dots-menu-dropdown__item-text{align-items:center;display:flex;gap:.5rem}@keyframes desktop-dropdown-entering-animation{0%{opacity:0;transform:scale(.8) translateY(0)}70%{transform:scale(1) translateY(0)}to{opacity:1;transform:scale(1) translateY(0)}}@keyframes desktop-dropdown-exiting-animation{0%{opacity:1;transform:scale(1) translateY(0)}25%{opacity:1}50%{transform:scale(1.01) translateY(0)}to{opacity:0;transform:scale(1.02) translateY(1.875rem)}}@keyframes mobile-dropdown-entering-animation{0%{opacity:0;transform:translateY(100%)}to{opacity:1;transform:translateY(0)}}@keyframes mobile-dropdown-exiting-animation{0%{transform:translateY(0)}50%{transform:translateY(0)}to{transform:translateY(200%)}}.dots-menu-wrapper{position:relative}.dots-menu-wrapper__container--entering{animation-fill-mode:both;animation-iteration-count:1;animation-name:desktop-dropdown-entering-animation;animation-timing-function:ease-out}@media (pointer:coarse){.dots-menu-wrapper__container--entering{animation-fill-mode:both;animation-iteration-count:1;animation-name:mobile-dropdown-entering-animation;animation-timing-function:ease-out}}.dots-menu-wrapper__container--exiting{animation-fill-mode:both;animation-iteration-count:1;animation-name:desktop-dropdown-exiting-animation;animation-timing-function:ease-out}@media (pointer:coarse){.dots-menu-wrapper__container--exiting{animation-fill-mode:both;animation-iteration-count:1;animation-name:mobile-dropdown-exiting-animation;animation-timing-function:ease-out}}.dots-menu-wrapper__container{background-color:var(--dynamic-base-2);border:.0625rem solid var(--dynamic-base-4);border-radius:calc(var(--dynamic-border-radius)/3);box-shadow:0 .5rem .75rem -.375rem rgba(24,39,75,.06),0 .5rem .75rem -.1875rem rgba(24,39,75,.06);margin-top:.5rem;position:absolute;right:0;z-index:2147483647}.dots-menu-wrapper__container__alignment__top{bottom:1.375rem}.dots-menu-wrapper__container__alignment__bottom{top:1.375rem}@media (min-width:768px){.dots-menu-wrapper__container{min-width:9.375rem}}@media (pointer:coarse){.dots-menu-wrapper__container{border:none;border-radius:var(--dynamic-border-radius);border-bottom-left-radius:0;border-bottom-right-radius:0;bottom:0;left:calc(50% - 18.75rem);margin:auto;max-width:37.5rem;padding-bottom:2rem;padding-top:0;position:fixed;right:calc(50% - 18.75rem);top:unset;width:100%}}.dots-menu-wrapper__header{display:none;padding:.75rem 1.5rem .25rem}@media (pointer:coarse){.dots-menu-wrapper__header{align-items:center;display:flex;justify-content:space-between}}.dots-menu-wrapper__header__icon{min-height:1.5rem;min-width:1.5rem}.dots-menu-wrapper__backdrop{cursor:default;display:none;height:100%;left:0;position:fixed;top:0;width:100%;z-index:10}@media (pointer:coarse){.dots-menu-wrapper__backdrop{background-color:var(--dynamic-overlay);display:block}}.dynamic-widget-wallets{overflow:auto;padding:0 1.5rem}.dynamic-widget-wallets__body{display:flex;flex-direction:column;gap:1rem}.dynamic-widget-wallets__body__wallet-list{max-height:13rem}.dynamic-widget-wallets__title{margin:0 0 .5rem}.widget-portal{background-color:var(--dynamic-overlay);top:0;z-index:50}.widget-portal,.widget-portal .widget-portal__container{border-radius:calc(var(--dynamic-border-radius)/1.5);bottom:0;left:0;position:absolute;right:0}.widget-portal .widget-portal__container{background-color:var(--dynamic-base-1);border-top:.0625rem solid var(--dynamic-base-4);padding:1.5rem}@media (pointer:coarse){.widget-portal .widget-portal__container{border-bottom-left-radius:0;border-bottom-right-radius:0}}.widget-portal .widget-portal__container--no-padding{padding:0}.widget-portal .widget-portal__container__header{position:relative}.widget-portal .widget-portal__container__close-button{position:absolute;right:0}.single-wallet-buttons{display:flex;gap:.625rem;padding:0 1.5rem 1.5rem}.single-wallet-buttons--center{align-items:center;display:flex;justify-content:center}.single-wallet-buttons__copied{align-items:center;display:flex;gap:8px}.single-wallet-buttons__copied svg{color:var(--dynamic-success-1)}.email-connector-pending-sign-modal-content{align-items:center;display:flex;flex-direction:column;text-align:center;width:100%}.email-connector-pending-sign-modal-content__body{align-items:center;display:flex;flex-direction:column;gap:.5rem}.active-wallet-information{border-bottom:1px solid var(--dynamic-base-3);display:flex;flex-flow:column;gap:.5rem;padding:.75rem}.active-wallet-information__header{display:flex;gap:.5rem}.active-wallet-information__handle{max-width:80px;overflow:hidden;text-overflow:ellipsis}.active-wallet-information__dots-menu{color:var(--dynamic-text-tertiary);margin-left:.375rem}.active-wallet-information__dots-menu .icon-with-status__container{margin-bottom:0}.active-wallet-information__dots-menu .icon-with-status__container .status-dot__container{right:-.05rem;top:-.05rem}.active-wallet-information-container{background:var(--dynamic-base-2);border-radius:calc(var(--dynamic-border-radius)/2)}.active-wallet-information__details{display:flex;flex:1;gap:.5rem;justify-content:space-between;overflow:hidden}.active-wallet-information__avatar img{height:2rem;min-height:2rem;min-width:2rem;width:2rem}.active-wallet-information__avatar__name-service{align-items:center;border-radius:100%;display:flex;overflow:hidden}.active-wallet-information__addresses-container{display:flex;flex-direction:column;gap:.5rem}.active-wallet-information__addresses-container--centered{justify-content:center}.active-wallet-information__address-container{display:flex}.active-wallet-information__address{align-items:center;display:flex}.active-wallet-information__network-picker{overflow:hidden}.active-wallet-information__network-picker-button{border:1px solid var(--dynamic-base-4);height:100%;position:relative;transform:translateX(0)}.active-wallet-information__network-picker-button:hover{background:var(--dynamic-hover)}.balance-container{align-items:center;display:flex;justify-content:space-between;padding:1rem .75rem;position:relative}.prompt-modal{padding:1.5rem}.prompt-modal__header{position:relative;width:100%}.prompt-modal__close-button{position:absolute;right:1rem;top:1rem}.dynamic-widget-index-view__email-container{display:flex;flex-direction:column;gap:1rem;text-align:center}.dynamic-widget-index-view__footer{display:flex;justify-content:space-between;width:100%}.dynamic-widget-index-view__user-profile{margin:0 0 1rem;padding:0 1.5rem}.dynamic-widget-index-view__user-profile-title{border-bottom:.0625rem solid var(--dynamic-base-4);margin:0 1.5rem .75rem;padding-bottom:.375rem}.profile-view{flex:1;overflow:auto;padding:0 1.5rem 1.5rem}.profile-view__footer{display:flex;justify-content:space-between;width:100%}.dynamic-widget-edit-profile-view{display:flex;flex:1;flex-direction:column;overflow:hidden}.dynamic-widget-edit-profile-view__fields{flex:1;overflow:auto;padding:0 1.5rem 1rem}.dynamic-widget-edit-profile-view__profile-title{border-bottom:.0625rem solid var(--dynamic-base-4);margin:0 1.5rem .75rem;padding-bottom:.375rem}.send-balance-widget-view{display:flex;flex:1;flex-direction:column;max-height:100%;max-width:22.5rem}.passkey-card{background:var(--dynamic-base-2);border:1px solid var(--dynamic-base-4);border-radius:.75rem;box-shadow:0 1px 2px 0 rgba(24,39,75,.04);padding:.75rem;width:100%}.passkey-card__body{display:flex;flex-direction:row;justify-content:space-between}.passkey-card__left{align-items:center;display:flex;gap:.5rem}.passkey-card__info{align-items:center;border-bottom:1px solid var(--dynamic-base-4);gap:.5rem;padding-bottom:.5rem}.passkey-card__info__icon{justify-self:start;width:1.5rem}.passkey-card__info__tooltip{display:none}@media (hover:none),(pointer:coarse){.passkey-card__info__tooltip{background-color:#555;border:1px solid;border-radius:6px;color:#fff;display:block;font-size:12px;opacity:0;padding:3px;position:absolute;transition:opacity .5s;visibility:hidden;width:-moz-fit-content;width:fit-content}.passkey-card__info__tooltip--visible{opacity:1;transition:opacity .3s;visibility:visible}}.passkey-card__date{padding-top:.5rem}.manage-passkeys-widget-view,.manage-passkeys-widget-view__body{display:flex;flex:1;flex-direction:column}.manage-passkeys-widget-view__body{gap:1rem;justify-content:space-between;padding:0 1.5rem 1.5rem}.manage-passkeys-widget-view__body__cards{display:flex;flex:1;flex-direction:column;gap:.5rem;max-height:23.75rem;overflow:auto}.manage-passkeys-widget-view__body__cards__skeleton{border-radius:.75rem;height:3.75rem}.manage-passkeys-widget-view__reveal{display:flex;flex:1;flex-direction:column;gap:.5rem}.manage-passkeys-widget-view__reveal-helper-text{color:var(--dynamic-text-secondary);font-size:.9375rem;line-height:1.25rem}.manage-passkeys-widget-view__reveal-button{border-radius:var(--dynamic-button-border-radius);justify-content:space-between}.manage-passkeys-widget-view__reveal-button__start-slot{align-items:center;display:flex;font-size:.9375rem}.manage-passkeys-widget-view__reveal-button__icon{color:var(--dynamic-text-tertiary);height:1.75rem;margin-right:.5rem}.manage-passkeys-widget-view__reveal-button__icon--rotate{color:var(--dynamic-text-tertiary);height:1rem;justify-content:end;transform:rotate(180deg)}.wallet-settings-view{display:flex;flex:1;flex-direction:column}.wallet-settings-view__header{align-items:center;display:flex;gap:.5rem}.wallet-settings-view__body{display:flex;flex-direction:column;gap:1rem;justify-content:space-between;padding:0 1.5rem 1.5rem}.wallet-settings-view__body__section{display:flex;flex-direction:column;gap:.75rem}.wallet-settings-view__body__section__title{color:var(--dynamic-text-secondary);font-size:.9375rem;line-height:1.25rem}.wallet-settings-view__body__section__button{border-radius:var(--dynamic-button-border-radius);justify-content:space-between}.wallet-settings-view__body__section__button__start-slot{align-items:center;display:flex;font-size:.9375rem}.wallet-settings-view__body__section__button__icon{color:var(--dynamic-text-tertiary);height:1.75rem!important;margin-right:.625rem;width:1.75rem!important}.wallet-settings-view__body__section__button__icon path{fill:var(--dynamic-text-tertiary)!important}.wallet-settings-view__body__section__button__icon__stroke{stroke:var(--dynamic-text-tertiary);height:1.75rem;margin-right:.625rem;width:1.75rem}.wallet-settings-view__body__section__button__icon-secondary{color:var(--dynamic-text-tertiary);height:1rem;justify-content:end;width:1rem}.wallet-settings-view__body__section__button__icon-secondary--success{color:var(--dynamic-success-1);height:1rem;justify-content:end;width:1rem}.wallet-settings-view__body__section__button__icon-secondary--rotate{color:var(--dynamic-text-tertiary);height:1rem;justify-content:end;transform:rotate(180deg);width:1rem}.default-prompt-modal{align-items:center;display:flex;flex-direction:column;text-align:center}.default-prompt-modal__icon-with-spinner{margin:0 auto .75rem}.default-prompt-modal__content{flex-direction:column}.default-prompt-modal__button .typography,.default-prompt-modal__content{align-items:center;display:flex;gap:.375rem;justify-content:center}.detected-new-wallet-modal__content{align-items:center;display:flex;flex-direction:column;gap:.75rem;text-align:center}.no-qr-code-not-installed-modal-view{align-items:center;display:flex;flex-direction:column;gap:1rem}.no-qr-code-not-installed-modal-view__links-section{width:100%}.qr-code-modal-view{display:flex;flex-direction:column;gap:.5rem}.qr-code-modal-view__title{text-align:center}.qr-code-modal-view .qrcode__container{height:10.9375rem;width:10.9375rem}.qr-code-modal-view__container{align-items:center;display:flex;justify-content:center}.qr-code-modal-view__wrapper{background:var(--dynamic-base-2);border-radius:calc(var(--dynamic-border-radius)*3/4);padding:.5rem}.qr-code-modal-view .info-item{margin-bottom:.75rem}.qr-code-modal-view .info-item__text{font-size:var(--dynamic-text-size-body-small)}.qr-code-modal-view .info-item svg path{fill:var(--dynamic-text-secondary)}.qr-code-modal-view .button__container{flex-direction:column}.qr-code-modal-view .button__container,.qr-code-modal-view .button__container span{align-items:center;display:flex;gap:.375rem}.unlink-wallet-popup__container{align-items:center;display:flex;flex-direction:column;width:100%}.unlink-wallet-popup__button,.unlink-wallet-popup__label,.unlink-wallet-popup__title{text-align:center}.unlink-wallet-popup__title{padding-bottom:.5rem}.unlink-wallet-popup__label{padding-bottom:.5rem;padding-top:.5rem}.unlink-wallet-popup__button{margin-top:.5rem}.unlink-wallet-popup__button--shadow{box-shadow:var(--dynamic-shadow-down-1)}.dynamic-widget__container{z-index:2147483646}.fund-wallet__backdrop{-webkit-backdrop-filter:blur(4px);backdrop-filter:blur(4px);background-color:rgba(0,0,0,.25);inset:0;position:fixed;z-index:2147483645}.fund-wallet__modal-container{align-items:center;display:flex;inset:0;justify-content:center;overflow-y:auto;padding:1rem;position:fixed;z-index:2147483646}@media (pointer:coarse){.fund-wallet__modal-container{padding:0}}.fund-wallet__modal{border-radius:1.5rem;margin:auto;max-width:470px;overflow:hidden;width:100%}@media (pointer:coarse){.fund-wallet__modal{border-bottom-left-radius:0;border-bottom-right-radius:0;margin:initial;margin-top:auto}}.fund-wallet__modal-content{text-align:center}#onramp-iframe{border:none;height:635px;width:100%;z-index:2147483647}.embedded-widget{max-width:100%;width:var(--dynamic-modal-width)}.embedded-widget--background-default,.embedded-widget--background-none{background:none}.dynamic-bridge-user-profile__switcher{margin:0 0 1rem;padding:1.5rem 1.5rem 0}.dynamic-bridge-wallet-card__network{margin:0 0 .5rem}.dynamic-bridge-wallet-card__network,.dynamic-bridge-wallet-card__network-icon,.dynamic-bridge-wallet-card__network-name{display:inline-block;vertical-align:middle}.dynamic-bridge-wallet-card__network-icon{height:1rem;margin-right:.375rem;width:1rem}.dynamic-bridge-widget-empty-card{background-color:var(--dynamic-base-2);border-radius:calc(var(--dynamic-border-radius)/2);box-shadow:var(--dynamic-shadow-down-1);padding:.75rem;transition:transform .1s linear}.dynamic-bridge-widget-empty-card:active{transform:scale(.98)}.dynamic-bridge-widget-empty-card__icon{display:inline-flex;height:1.75rem;margin-right:.63rem;vertical-align:middle;width:1.75rem}.dynamic-bridge-widget-empty-card__text{overflow:hidden;text-overflow:ellipsis;vertical-align:middle;white-space:nowrap}.dynamic-bridge-widget-wallets-view{display:flex;flex-direction:column;gap:1rem;padding:1.5rem}.dynamic-bridge-widget-wallets-view__logout-button{margin:0 auto}.dynamic-bridge-widget-wallets-view__unlink-button{color:var(--dynamic-text-secondary);margin:auto 0 0 auto}.footer-buttons-item{align-items:center;background:var(--dynamic-base-2);border:0;border-radius:calc(var(--dynamic-border-radius)/2);box-shadow:var(--dynamic-shadow-down-1);cursor:pointer;display:flex;padding:.75rem;transition:all .3s;width:100%}.footer-buttons-item__icon--left{margin-right:.625rem}.footer-buttons-item__icon--left img,.footer-buttons-item__icon--left svg{height:1.25rem;width:1.25rem}.new-to-web3-buttons__container{margin-top:1rem}.new-to-web3-buttons__container button{background:var(--dynamic-brand-primary-color);border-radius:calc(var(--dynamic-border-radius)/2);box-shadow:var(--dynamic-shadow-down-1);color:#fff;padding:.75rem;width:100%}.walletlist-help-content__container{color:var(--dynamic-text-secondary);padding:1.5rem}.walletlist-help-content__icon{align-items:center;display:flex;height:3.5rem;justify-content:center;margin:0 auto;width:3.5rem}.walletlist-help-content__typography-wrapper{color:var(--dynamic-text-primary);margin:1rem 0;text-align:center}.walletlist-help-content__typography-wrapper .walletlist-help-content__typography--label{margin-top:.375rem}.walletlist-help-content__buttons-wrapper{display:flex;flex-direction:column;gap:.375rem;margin-top:1rem}.walletlist-help-content__buttons-wrapper button{text-align:left;width:100%}.walletlist-help-content__custodial-wallet-area--title{margin:.75rem 0;text-align:center}.footer-more-info-content__wrapper{display:flex;flex-direction:column;gap:.75rem;padding:1.5rem}.footer-more-info-content__item--phantom-ledger{font-size:.6875rem;margin-bottom:.5rem}.footer-more-info-content__item--phantom-ledger p{margin-bottom:.5rem}.footer-more-info-content__item--phantom-ledger p:last-child,.footer-more-info-content__item:last-child{margin-bottom:0}.back-button{rotate:-90deg}.help-header{border-bottom:1px solid var(--dynamic-base-4)}.passkey-info-help-content__container{color:var(--dynamic-text-secondary);padding:1.5rem}.passkey-info-help-content__typography-wrapper{color:var(--dynamic-text-primary);display:flex;flex-direction:column;gap:1rem;text-align:left}.passkey-info-help-content__wrapper{flex:1}.passkey-info-help-content__details{display:flex;flex-direction:row;gap:1rem}.header__skeleton{width:7.5rem}.header__typography{margin:0;text-align:center}.header__typography img,.header__typography svg{display:inline-block}.header__tooltip{background-color:var(--dynamic-text-primary);color:var(--dynamic-base-2);font-size:.75rem}.header__icon svg{height:1.5rem;width:1.5rem}.tos-and-pp__footer{background:var(--dynamic-footer-background);border-top:var(--dynamic-footer-border-top);bottom:0;padding:var(--dynamic-footer-padding);position:relative;width:100%}.default-footer__footer{background:var(--dynamic-base-1);border-top:.0625rem solid var(--dynamic-base-4);box-shadow:var(--dynamic-shadow-up-1);height:var(--dynamic-border-radius);opacity:1;text-align:center;transition:opacity .15s,visibility .15s;visibility:visible;width:100%}.default-footer__footer--hidden{opacity:0;transition:opacity .15s,visibility .15s;visibility:hidden}.wallet-progress-stepper{padding:.5rem 1rem}.dynamic-user-profile-layout{display:flex;flex-direction:column;height:33.125rem;overflow:hidden}.dynamic-user-profile-layout--unset-max-height{height:unset}input:-webkit-autofill,input:-webkit-autofill:active,input:-webkit-autofill:focus,input:-webkit-autofill:hover{box-shadow:unset!important}.dynamic-modal{display:flex;flex-direction:column-reverse;left:50%;letter-spacing:0;position:absolute}.dynamic-shadow-dom-content{font-family:var(--dynamic-font-family-primary)}';
            let LegacySafariCssOverrides = () => (0, tb.jsx)("link", {
                    rel: "stylesheet",
                    href: "https://app.dynamic.xyz/assets/legacySafari/styles.css"
                }),
                isSSR = () => "undefined" == typeof window,
                isShadowDOMFlagEnabled = () => {
                    if (isSSR()) return !1;
                    let t = "shadowDOM.enabled",
                        r = new URLSearchParams(window.location.search);
                    return !r.has(t) || "true" === r.get(t)
                },
                iv = nt.createContext({}),
                ShadowDOMStyle = () => (0, tb.jsx)("style", {
                    children: ig
                }),
                ShadowDOM_ShadowDOM = ({
                    mode: t = "open",
                    id: r,
                    className: a,
                    children: s,
                    dataTestId: l,
                    zIndex: c
                }) => {
                    let {
                        shadowDOMEnabled: d,
                        cssOverrides: u
                    } = useInternalDynamicContext_useInternalDynamicContext(), m = isShadowDOMFlagEnabled(), p = m && d, h = (0, nt.useRef)(null), [f, y] = (0, nt.useState)(), b = (0, nt.useMemo)(() => u && "string" != typeof u ? () => u : u && "string" == typeof u ? () => (0, tb.jsx)("style", {
                        children: u
                    }) : null, [u]);
                    (0, nt.useLayoutEffect)(() => {
                        if (h.current && p) try {
                            let r = h.current.attachShadow({
                                mode: t
                            });
                            y(r)
                        } catch (t) {}
                    }, [p, h, t]);
                    let C = !!Object.keys(ig).length;
                    return p ? (0, tb.jsx)(iv.Provider, {
                        value: {
                            shadowRoot: f
                        },
                        children: (0, tb.jsx)("div", {
                            "data-testid": l,
                            ref: h,
                            id: r,
                            className: classNames_classNames("dynamic-shadow-dom", a),
                            style: {
                                zIndex: c
                            },
                            children: f && (0, nU.createPortal)((0, tb.jsxs)("div", {
                                className: "dynamic-shadow-dom-content",
                                children: [s, C && (0, tb.jsx)(ShadowDOMStyle, {}), (0, td.XS)() && (0, tb.jsx)(LegacySafariCssOverrides, {}), b && (0, tb.jsx)(b, {})]
                            }), f)
                        })
                    }) : (0, tb.jsxs)("div", {
                        "data-testid": l,
                        ref: h,
                        id: r,
                        className: classNames_classNames("dynamic-shadow-dom", a),
                        style: {
                            zIndex: c
                        },
                        children: [s, C && (0, tb.jsx)(ShadowDOMStyle, {}), (0, td.XS)() && (0, tb.jsx)(LegacySafariCssOverrides, {}), b && (0, tb.jsx)(b, {})]
                    })
                },
                useFields = () => {
                    let {
                        t
                    } = useTranslation_useTranslation(), r = {
                        alias: {
                            key: "dyn_collect_user_data.fields.alias.label",
                            label: t("dyn_collect_user_data.fields.alias.label"),
                            type: "string",
                            validation: string_create().trim()
                        },
                        country: {
                            key: "dyn_collect_user_data.fields.country.label",
                            label: t("dyn_collect_user_data.fields.country.label"),
                            type: "select",
                            validation: string_create().oneOf(nC.map(t => t.code))
                        },
                        email: {
                            key: "dyn_collect_user_data.fields.email.label",
                            label: t("dyn_collect_user_data.fields.email.label"),
                            type: "email",
                            validation: string_create().email(t("dyn_collect_user_data.fields.email.validation"))
                        },
                        firstName: {
                            key: "dyn_collect_user_data.fields.first_name.label",
                            label: t("dyn_collect_user_data.fields.first_name.label"),
                            type: "string",
                            validation: string_create().trim()
                        },
                        jobTitle: {
                            key: "dyn_collect_user_data.fields.job_title.label",
                            label: t("dyn_collect_user_data.fields.job_title.label"),
                            type: "string",
                            validation: string_create().trim()
                        },
                        lastName: {
                            key: "dyn_collect_user_data.fields.last_name.label",
                            label: t("dyn_collect_user_data.fields.last_name.label"),
                            type: "string",
                            validation: string_create().trim()
                        },
                        phoneNumber: {
                            key: "dyn_collect_user_data.fields.phone_number.label",
                            label: t("dyn_collect_user_data.fields.phone_number.label"),
                            type: "string",
                            validation: string_create().matches(/^((\\+[1-9]{1,4}[ \\-]*)|(\\([0-9]{2,3}\\)[ \\-]*)|([0-9]{2,4})[ \\-]*)*?[0-9]{3,4}?[ \\-]*[0-9]{3,4}?$/, t("dyn_collect_user_data.fields.phone_number.validation"))
                        },
                        policiesConsent: {
                            key: "dyn_collect_user_data.fields.policies_consent.label",
                            label: t("dyn_collect_user_data.fields.policies_consent.label"),
                            type: "boolean",
                            validation: boolean_create()
                        },
                        tShirtSize: {
                            key: "dyn_collect_user_data.fields.t_shirt_size.label",
                            label: t("dyn_collect_user_data.fields.t_shirt_size.label"),
                            type: "select",
                            validation: string_create().oneOf(nx)
                        },
                        team: {
                            key: "dyn_collect_user_data.fields.team.label",
                            label: t("dyn_collect_user_data.fields.team.label"),
                            type: "select",
                            validation: string_create().oneOf(nS)
                        },
                        username: {
                            key: "dyn_collect_user_data.fields.username.label",
                            label: t("dyn_collect_user_data.fields.username.label"),
                            type: "string",
                            validation: string_create().matches(/^(?!.*([$!#%?])\1)[A-Za-z0-9$!#%?]{3,20}$/, t("dyn_collect_user_data.fields.username.validation"))
                        }
                    };
                    return {
                        fieldsConfig: r
                    }
                },
                useUserDataForm = ({
                    onSubmit: t,
                    onError: r,
                    userProfile: a,
                    shouldEnforcePolicies: s = !0,
                    fields: l
                }) => {
                    var c;
                    let {
                        mockedSDK: d
                    } = useMockContext(), [u, m] = (0, nt.useState)(!1), {
                        fieldsConfig: p
                    } = useFields(), h = s && (null === (c = l.find(t => "policiesConsent" === t.name)) || void 0 === c ? void 0 : c.enabled), f = (0, nt.useMemo)(() => object_create().shape(Object.fromEntries(l.map(({
                        name: t,
                        required: r
                    }) => [t, r ? getValueByKey(p, t).validation.required("required") : getValueByKey(p, t).validation]))), [l]), y = (0, nt.useMemo)(() => Object.fromEntries(l.map(({
                        name: t
                    }) => {
                        var r, s, l;
                        let c = null != a ? a : {},
                            d = {
                                country: nC[0].code,
                                policiesConsent: !1,
                                tShirtSize: nx[0],
                                team: nS[0]
                            },
                            u = null !== (r = d[t]) && void 0 !== r ? r : "";
                        return [t, null !== (l = null === (s = getValueByKey(c, t)) || void 0 === s ? void 0 : s.toString()) && void 0 !== l ? l : u]
                    })) || {}, [l, a]), b = (0, nt.useCallback)((s, l) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        if (!d) try {
                            if (!(null == a ? void 0 : a.environmentId)) throw new td.kW("Invalid environment ID");
                            m(!0);
                            let r = s;
                            h && (r = Object.assign(Object.assign({}, r), {
                                policiesConsent: !0
                            }), delete r.policiesConsentArray), yield null == t ? void 0 : t(r)
                        } catch (t) {
                            tv.error(t), null == r || r(t), t instanceof td.l7 ? l.setErrors({
                                email: "Email already exists"
                            }) : t instanceof td.a$ ? l.setErrors({
                                username: "Username already exists"
                            }) : l.setErrors({
                                api: "Something went wrong. Please try again."
                            })
                        } finally {
                            m(!1)
                        }
                    }), [d, null == a ? void 0 : a.environmentId, h, t, r]);
                    return {
                        enforcePolicies: h,
                        fetch: u,
                        formikInitialValues: y,
                        formikValidationSchema: f,
                        onFormSubmit: b
                    }
                },
                getDisplayErrorMessage_getDisplayErrorMessage = (t, r) => {
                    var a;
                    if (!r) return;
                    let s = {
                        required: t => `${t} is required`
                    };
                    return (null === (a = s[r]) || void 0 === a ? void 0 : a.call(s, t)) || r
                },
                Checkbox = ({
                    ariaLabel: t,
                    checked: r,
                    className: a = "",
                    defaultChecked: s,
                    disabled: l,
                    id: c,
                    name: d,
                    onChange: u,
                    value: m
                }) => (0, tb.jsxs)("div", {
                    className: classNames_classNames("checkbox__container", a),
                    children: [(0, tb.jsx)("input", {
                        type: "checkbox",
                        id: c,
                        "aria-label": t,
                        "aria-checked": r,
                        className: "checkbox--hidden",
                        value: m,
                        checked: r,
                        name: d,
                        disabled: l,
                        defaultChecked: s,
                        onChange: t => !!u && (null == u ? void 0 : u(t, t.currentTarget.value)),
                        "data-testid": "input-checkbox"
                    }), (0, tb.jsx)("div", {
                        className: "checkbox--visible",
                        children: (0, tb.jsx)(SvgCheck, {
                            className: "checkbox__icon"
                        })
                    })]
                });
            var ib = ["title", "titleId"];

            function arrow_down_extends() {
                return (arrow_down_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgArrowDown = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, ib);
                return nt.createElement("svg", arrow_down_extends({
                    width: 24,
                    height: 24,
                    viewBox: "0 0 24 24",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, ec || (ec = nt.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M6.862 9.529c.26-.26.682-.26.943 0L12 13.724l4.195-4.195a.667.667 0 1 1 .943.942l-4.667 4.667a.667.667 0 0 1-.942 0l-4.667-4.667a.667.667 0 0 1 0-.942Z",
                    fill: "currentColor"
                })))
            };
            let getDisplayValue = t => {
                    if (!t) return;
                    let {
                        selectedIndex: r
                    } = t;
                    if (void 0 === r) return;
                    let a = t.options[r];
                    if (a.hasAttribute("value")) return a.text
                },
                Select = t => {
                    var {
                        children: r,
                        className: a = "",
                        id: s,
                        label: l,
                        value: c,
                        error: d = !1,
                        selectDataTestId: u,
                        message: m
                    } = t, p = _tslib_rest(t, ["children", "className", "id", "label", "value", "error", "selectDataTestId", "message"]);
                    let h = (0, nt.useRef)(null),
                        [f, y] = (0, nt.useState)();
                    return (0, nt.useLayoutEffect)(() => {
                        if (!c) return;
                        let t = h.current;
                        y(getDisplayValue(t))
                    }, [c, y]), (0, tb.jsxs)("div", {
                        className: "select__field",
                        children: [(0, tb.jsxs)("div", {
                            className: classNames_classNames(a, "select__container"),
                            children: [(0, tb.jsxs)("label", {
                                className: classNames_classNames("select__body", {
                                    select__error: d,
                                    select__has_value: !!f
                                }),
                                htmlFor: s,
                                children: [(0, tb.jsx)("span", {
                                    className: "select__value",
                                    children: f || (0, tb.jsx)("span", {
                                        children: "\xa0"
                                    })
                                }), (0, tb.jsx)("span", {
                                    className: "select__label",
                                    children: l
                                }), (0, tb.jsx)("div", {
                                    className: "select__control_icon",
                                    children: (0, tb.jsx)(Icon_Icon, {
                                        size: "medium",
                                        children: (0, tb.jsx)(SvgArrowDown, {})
                                    })
                                })]
                            }), (0, tb.jsx)("select", Object.assign({}, p, {
                                "data-testid": u,
                                ref: h,
                                id: s,
                                value: c,
                                placeholder: l,
                                className: "select",
                                children: r
                            }))]
                        }), m && (0, tb.jsx)(Typography_Typography, {
                            className: classNames_classNames("select__message", {
                                select__message__error: d
                            }),
                            variant: "body_mini",
                            children: m
                        })]
                    })
                },
                UserDataFields = ({
                    errors: t,
                    policiesConsentInnerComponentArray: r,
                    fields: a,
                    touched: s
                }) => {
                    let {
                        fieldsConfig: l
                    } = useFields(), {
                        t: c
                    } = useTranslation_useTranslation();
                    return (0, tb.jsx)("div", {
                        className: "user-data-fields__fields-column",
                        children: null == a ? void 0 : a.map(({
                            name: a,
                            required: d,
                            enabled: u
                        }) => {
                            let {
                                label: m,
                                type: p,
                                key: h
                            } = getValueByKey(l, a);
                            return "tShirtSize" === a ? (0, tb.jsx)(Field, {
                                copykey: h,
                                as: Select,
                                type: p,
                                id: a,
                                name: a,
                                label: m,
                                error: t[a] && s[a],
                                selectDataTestId: "tShirtSizeSelect",
                                message: s[a] && getDisplayErrorMessage_getDisplayErrorMessage(m, t[a]),
                                children: nx.map(t => (0, tb.jsx)("option", {
                                    value: t,
                                    children: t
                                }, t))
                            }, a) : "team" === a ? (0, tb.jsx)(Field, {
                                copykey: h,
                                as: Select,
                                type: p,
                                id: a,
                                name: a,
                                label: m,
                                error: t[a] && s[a],
                                selectDataTestId: "teamSelect",
                                message: s[a] && getDisplayErrorMessage_getDisplayErrorMessage(m, t[a]),
                                children: nS.map(t => (0, tb.jsx)("option", {
                                    value: t,
                                    children: t
                                }, t))
                            }, a) : "country" === a ? (0, tb.jsx)(Field, {
                                copykey: h,
                                as: Select,
                                type: p,
                                id: a,
                                name: a,
                                label: m,
                                error: t[a] && s[a],
                                selectDataTestId: "countrySelect",
                                message: s[a] && getDisplayErrorMessage_getDisplayErrorMessage(m, t[a]),
                                children: nC.map(t => (0, tb.jsx)("option", {
                                    value: t.code,
                                    children: t.name
                                }, t.code))
                            }, a) : "policiesConsent" === a ? (0, tb.jsx)("div", {
                                role: "group",
                                "aria-labelledby": "checkbox-group",
                                className: "user-data-fields__checkbox-container",
                                children: null == r ? void 0 : r.map((t, r) => (0, tb.jsxs)("div", {
                                    className: "user-data-fields__consent-checkbox",
                                    children: [(0, tb.jsx)(Field, {
                                        copykey: h,
                                        as: Checkbox,
                                        id: `policiesConsent_${r}`,
                                        name: "policiesConsentArray",
                                        type: "checkbox",
                                        value: `${r}`
                                    }, `policiesConsent_${r}`), (0, tb.jsx)("label", {
                                        htmlFor: `policiesConsent_${r}`,
                                        className: "user-data-fields__checkbox-label",
                                        children: (0, tb.jsx)(Typography_Typography, {
                                            variant: "body_small",
                                            color: "secondary",
                                            children: t
                                        })
                                    })]
                                }, `policiesConsent_${r}`))
                            }, "policiesConsentGroup") : "email" !== a || u ? (0, tb.jsx)(Field, {
                                copykey: h,
                                disabled: !u,
                                as: Input,
                                type: p,
                                id: a,
                                name: a,
                                label: m,
                                optional: u && !d,
                                error: t[a] && s[a],
                                message: s[a] && getDisplayErrorMessage_getDisplayErrorMessage(m, t[a])
                            }, a) : (0, tb.jsx)(Tooltip, {
                                content: c("dyn_collect_user_data.update_email_tooltip"),
                                className: "user-data-fields__tooltip",
                                copykey: "dyn_collect_user_data.update_email_tooltip",
                                children: (0, tb.jsx)(Field, {
                                    copykey: h,
                                    disabled: !0,
                                    as: Input,
                                    type: p,
                                    id: a,
                                    name: a,
                                    label: m
                                }, a)
                            }, "disabled-email-tooltip")
                        })
                    })
                },
                UserProfileForm = ({
                    filterFields: t,
                    formClassName: r,
                    fieldsContainerStyle: a,
                    onEditProfileSubmit: s,
                    onEditProfileCancel: l,
                    options: c = {
                        buttonsAsFooter: !0,
                        cancelText: "Cancel",
                        shouldEnforcePolicies: !1,
                        submitText: "Save"
                    }
                }) => {
                    let {
                        projectSettings: d,
                        user: u
                    } = useInternalDynamicContext_useInternalDynamicContext(), m = (0, nt.useMemo)(() => {
                        let r = getUserProfileFields({
                            projectSettingsKyc: null == d ? void 0 : d.kyc,
                            user: u
                        });
                        return t ? r.filter(({
                            name: r
                        }) => t.includes(r)) : r
                    }, [t, null == d ? void 0 : d.kyc, u]), {
                        fetch: p,
                        formikInitialValues: h,
                        formikValidationSchema: f,
                        onFormSubmit: y
                    } = useUserDataForm({
                        fields: m,
                        onSubmit: s,
                        shouldEnforcePolicies: c.shouldEnforcePolicies,
                        userProfile: u
                    }), makeButtonsContent = (t, r, a) => (0, tb.jsxs)(tb.Fragment, {
                        children: [!c.hideCancelButton && (0, tb.jsx)(Button_Button, Object.assign({
                            disabled: p,
                            expanded: !0,
                            buttonPadding: "medium",
                            buttonVariant: "secondary",
                            type: "button",
                            typographyProps: {
                                variant: "button_secondary"
                            },
                            onClick: l,
                            dataTestId: "cancel-button"
                        }, c.cancelButtonProps, {
                            children: c.cancelText
                        })), (0, tb.jsx)(Button_Button, Object.assign({
                            buttonClassName: "dynamic-widget-footer__button",
                            disabled: p || !r || !a,
                            expanded: !0,
                            type: "submit",
                            buttonPadding: "medium",
                            typographyProps: {
                                variant: "button_secondary"
                            },
                            loading: t,
                            startSlot: (0, tb.jsx)(SvgCheck, {}),
                            dataTestId: "submit-button"
                        }, c.submitButtonProps, {
                            children: c.submitText
                        }))]
                    });
                    return (0, tb.jsx)(Formik, {
                        onSubmit: y,
                        initialValues: h,
                        validationSchema: f,
                        validateOnChange: !0,
                        children: ({
                            errors: t,
                            touched: s,
                            isSubmitting: l,
                            isValid: d,
                            dirty: u
                        }) => (0, tb.jsxs)(r$, {
                            className: classNames_classNames("dynamic-widget-edit-profile-view", r),
                            "data-testid": "editUserProfileForm",
                            children: [(0, tb.jsx)("div", {
                                className: "dynamic-widget-edit-profile-view__fields",
                                style: a,
                                children: (0, tb.jsx)(UserDataFields, {
                                    errors: t,
                                    fields: m,
                                    touched: s
                                })
                            }), c.buttonsAsFooter ? (0, tb.jsx)(DynamicWidgetFooter, {
                                children: makeButtonsContent(l, d, u)
                            }) : makeButtonsContent(l, d, u)]
                        })
                    })
                },
                splitCamelCase = t => t.replace(/([a-z])([A-Z])/g, "$1 $2"),
                useAssignDefaultValues = (t, r) => {
                    let {
                        appName: a,
                        user: s
                    } = useInternalDynamicContext_useInternalDynamicContext(), l = a ? `${a} ` : "";
                    if (t.submitText || (t.submitText = "Update"), 1 !== r.length) return t.title || (t.title = "Update your info"), t.subtitle || (t.subtitle = `Fill out your info for your ${l}account`), t;
                    let [c] = r, d = splitCamelCase(c).toLowerCase(), u = (null == s ? void 0 : s[c]) ? "Update" : "Enter";
                    return t.title || (t.title = `${u} your ${d}`), t.subtitle || (t.subtitle = `Add your ${d} to your ${l}account`), t
                };
            var iw = ["title", "titleId"];

            function at_extends() {
                return (at_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var i_ = ["title", "titleId"];

            function justified_text_extends() {
                return (justified_text_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgJustifiedText = function(t) {
                    var r = t.title,
                        a = t.titleId,
                        s = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = function(t, r) {
                                if (null == t) return {};
                                var a, s, l = {},
                                    c = Object.keys(t);
                                for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                                return l
                            }(t, r);
                            if (Object.getOwnPropertySymbols) {
                                var c = Object.getOwnPropertySymbols(t);
                                for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                            }
                            return l
                        }(t, i_);
                    return nt.createElement("svg", justified_text_extends({
                        width: 24,
                        height: 24,
                        viewBox: "0 0 24 24",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        "aria-labelledby": a
                    }, s), r ? nt.createElement("title", {
                        id: a
                    }, r) : null, eu || (eu = nt.createElement("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M3 6a1 1 0 0 1 1-1h16a1 1 0 1 1 0 2H4a1 1 0 0 1-1-1Zm0 6a1 1 0 0 1 1-1h16a1 1 0 1 1 0 2H4a1 1 0 0 1-1-1Zm0 6a1 1 0 0 1 1-1h7a1 1 0 1 1 0 2H4a1 1 0 0 1-1-1Z",
                        fill: "currentColor"
                    })))
                },
                ik = ["title", "titleId"];

            function location_extends() {
                return (location_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var ix = ["title", "titleId"];

            function mail_extends() {
                return (mail_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgMail = function(t) {
                    var r = t.title,
                        a = t.titleId,
                        s = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = function(t, r) {
                                if (null == t) return {};
                                var a, s, l = {},
                                    c = Object.keys(t);
                                for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                                return l
                            }(t, r);
                            if (Object.getOwnPropertySymbols) {
                                var c = Object.getOwnPropertySymbols(t);
                                for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                            }
                            return l
                        }(t, ix);
                    return nt.createElement("svg", mail_extends({
                        width: 24,
                        height: 24,
                        viewBox: "0 0 24 24",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        "aria-labelledby": a
                    }, s), r ? nt.createElement("title", {
                        id: a
                    }, r) : null, ep || (ep = nt.createElement("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M2 7a3 3 0 0 1 3-3h14a3 3 0 0 1 3 3v10a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3V7Zm2 2.869V17a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V9.869l-6.336 4.223a3 3 0 0 1-3.328 0L4 9.87Zm16-2.404-7.445 4.963a1 1 0 0 1-1.11 0L4 7.465V7a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v.465Z",
                        fill: "currentColor"
                    })))
                },
                iC = ["title", "titleId"];

            function phone_extends() {
                return (phone_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var iS = ["title", "titleId"];

            function size_labels_extends() {
                return (size_labels_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var iE = ["title", "titleId"];

            function user_card_extends() {
                return (user_card_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgUserCard = function(t) {
                    var r = t.title,
                        a = t.titleId,
                        s = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = function(t, r) {
                                if (null == t) return {};
                                var a, s, l = {},
                                    c = Object.keys(t);
                                for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                                return l
                            }(t, r);
                            if (Object.getOwnPropertySymbols) {
                                var c = Object.getOwnPropertySymbols(t);
                                for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                            }
                            return l
                        }(t, iE);
                    return nt.createElement("svg", user_card_extends({
                        width: 24,
                        height: 24,
                        viewBox: "0 0 24 24",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        "aria-labelledby": a
                    }, s), r ? nt.createElement("title", {
                        id: a
                    }, r) : null, ey || (ey = nt.createElement("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M9 5a3 3 0 1 1 6 0h4a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3V8a3 3 0 0 1 3-3h4Zm.17 2H5a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V8a1 1 0 0 0-1-1h-4.17a3.001 3.001 0 0 1-5.66 0ZM12 4a1 1 0 0 0-1 1v1a1 1 0 1 0 2 0V5a1 1 0 0 0-1-1Zm-3 7a1 1 0 1 0 0 2 1 1 0 0 0 0-2Zm2.4 2.8a3 3 0 1 0-4.8 0 4.01 4.01 0 0 0-1.372 1.867 1 1 0 1 0 1.885.666 2.001 2.001 0 0 1 3.773 0 1 1 0 1 0 1.886-.666A4.01 4.01 0 0 0 11.4 13.8ZM14 11a1 1 0 0 1 1-1h3a1 1 0 1 1 0 2h-3a1 1 0 0 1-1-1Zm0 4a1 1 0 0 1 1-1h2a1 1 0 1 1 0 2h-2a1 1 0 0 1-1-1Z",
                        fill: "currentColor"
                    })))
                },
                ij = ["title", "titleId"];

            function user_extends() {
                return (user_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var iI = ["title", "titleId"];

            function work_suitcase_extends() {
                return (work_suitcase_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            let iT = {
                    alias: function(t) {
                        var r = t.title,
                            a = t.titleId,
                            s = function(t, r) {
                                if (null == t) return {};
                                var a, s, l = function(t, r) {
                                    if (null == t) return {};
                                    var a, s, l = {},
                                        c = Object.keys(t);
                                    for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                                    return l
                                }(t, r);
                                if (Object.getOwnPropertySymbols) {
                                    var c = Object.getOwnPropertySymbols(t);
                                    for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                                }
                                return l
                            }(t, ij);
                        return nt.createElement("svg", user_extends({
                            width: 24,
                            height: 24,
                            viewBox: "0 0 24 24",
                            fill: "none",
                            xmlns: "http://www.w3.org/2000/svg",
                            "aria-labelledby": a
                        }, s), r ? nt.createElement("title", {
                            id: a
                        }, r) : null, eg || (eg = nt.createElement("path", {
                            fillRule: "evenodd",
                            clipRule: "evenodd",
                            d: "M12 4a8 8 0 0 0-6.598 12.526A14.943 14.943 0 0 1 12 15c2.366 0 4.606.548 6.598 1.526A8 8 0 0 0 12 4Zm7.654 14.436A9.96 9.96 0 0 0 22 12c0-5.523-4.477-10-10-10S2 6.477 2 12a9.96 9.96 0 0 0 2.37 6.464A9.978 9.978 0 0 0 12 22a9.978 9.978 0 0 0 7.654-3.564ZM17.2 18.08A12.954 12.954 0 0 0 12 17c-1.85 0-3.607.386-5.199 1.08A7.968 7.968 0 0 0 12 20c1.985 0 3.8-.723 5.199-1.92ZM12 8a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm-4 2a4 4 0 1 1 8 0 4 4 0 0 1-8 0Z",
                            fill: "currentColor"
                        })))
                    },
                    country: function(t) {
                        var r = t.title,
                            a = t.titleId,
                            s = function(t, r) {
                                if (null == t) return {};
                                var a, s, l = function(t, r) {
                                    if (null == t) return {};
                                    var a, s, l = {},
                                        c = Object.keys(t);
                                    for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                                    return l
                                }(t, r);
                                if (Object.getOwnPropertySymbols) {
                                    var c = Object.getOwnPropertySymbols(t);
                                    for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                                }
                                return l
                            }(t, ik);
                        return nt.createElement("svg", location_extends({
                            width: 32,
                            height: 32,
                            viewBox: "0 0 32 32",
                            fill: "none",
                            xmlns: "http://www.w3.org/2000/svg",
                            "aria-labelledby": a
                        }, s), r ? nt.createElement("title", {
                            id: a
                        }, r) : null, em || (em = nt.createElement("path", {
                            fillRule: "evenodd",
                            clipRule: "evenodd",
                            d: "M22.6 8.067a9.333 9.333 0 0 0-13.2 13.2l5.658 5.657c.52.52 1.363.52 1.884 0l5.658-5.658a9.333 9.333 0 0 0 0-13.199ZM7.515 6.181c4.686-4.686 12.284-4.686 16.97 0 4.687 4.687 4.687 12.285 0 16.97l-4.67 4.67c-.041.042.019-.018-.023.024l-.964.964a3.998 3.998 0 0 1-5.655 0l-5.658-5.657c-4.687-4.686-4.687-12.284 0-16.97ZM16 12a2.667 2.667 0 1 0 0 5.333A2.667 2.667 0 0 0 16 12Zm-5.333 2.667a5.333 5.333 0 1 1 10.666 0 5.333 5.333 0 0 1-10.666 0Z",
                            fill: "currentColor"
                        })))
                    },
                    email: SvgMail,
                    firstName: SvgUserCard,
                    jobTitle: function(t) {
                        var r = t.title,
                            a = t.titleId,
                            s = function(t, r) {
                                if (null == t) return {};
                                var a, s, l = function(t, r) {
                                    if (null == t) return {};
                                    var a, s, l = {},
                                        c = Object.keys(t);
                                    for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                                    return l
                                }(t, r);
                                if (Object.getOwnPropertySymbols) {
                                    var c = Object.getOwnPropertySymbols(t);
                                    for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                                }
                                return l
                            }(t, iI);
                        return nt.createElement("svg", work_suitcase_extends({
                            width: 24,
                            height: 24,
                            viewBox: "0 0 24 24",
                            fill: "none",
                            xmlns: "http://www.w3.org/2000/svg",
                            "aria-labelledby": a
                        }, s), r ? nt.createElement("title", {
                            id: a
                        }, r) : null, ev || (ev = nt.createElement("path", {
                            fillRule: "evenodd",
                            clipRule: "evenodd",
                            d: "M7 4a3 3 0 0 1 3-3h4a3 3 0 0 1 3 3v1h2a3 3 0 0 1 3 3v10a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3V8a3 3 0 0 1 3-3h2V4ZM5 7a1 1 0 0 0-1 1v4.57A22.95 22.95 0 0 0 12 14c2.815 0 5.51-.505 8-1.43V8a1 1 0 0 0-1-1H5Zm10-2H9V4a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v1Zm5 9.692A24.971 24.971 0 0 1 12 16c-2.796 0-5.487-.46-8-1.308V18a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-3.308ZM11 12a1 1 0 0 1 1-1h.01a1 1 0 1 1 0 2H12a1 1 0 0 1-1-1Z",
                            fill: "currentColor"
                        })))
                    },
                    lastName: SvgUserCard,
                    phoneNumber: function(t) {
                        var r = t.title,
                            a = t.titleId,
                            s = function(t, r) {
                                if (null == t) return {};
                                var a, s, l = function(t, r) {
                                    if (null == t) return {};
                                    var a, s, l = {},
                                        c = Object.keys(t);
                                    for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                                    return l
                                }(t, r);
                                if (Object.getOwnPropertySymbols) {
                                    var c = Object.getOwnPropertySymbols(t);
                                    for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                                }
                                return l
                            }(t, iC);
                        return nt.createElement("svg", phone_extends({
                            width: 24,
                            height: 24,
                            viewBox: "0 0 24 24",
                            fill: "none",
                            xmlns: "http://www.w3.org/2000/svg",
                            "aria-labelledby": a
                        }, s), r ? nt.createElement("title", {
                            id: a
                        }, r) : null, eh || (eh = nt.createElement("path", {
                            fillRule: "evenodd",
                            clipRule: "evenodd",
                            d: "M5 5a3 3 0 0 1 3-3h8a3 3 0 0 1 3 3v14a3 3 0 0 1-3 3H8a3 3 0 0 1-3-3V5Zm3-1a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1H8Zm3 14a1 1 0 0 1 1-1h.01a1 1 0 1 1 0 2H12a1 1 0 0 1-1-1Z",
                            fill: "currentColor"
                        })))
                    },
                    tShirtSize: function(t) {
                        var r = t.title,
                            a = t.titleId,
                            s = function(t, r) {
                                if (null == t) return {};
                                var a, s, l = function(t, r) {
                                    if (null == t) return {};
                                    var a, s, l = {},
                                        c = Object.keys(t);
                                    for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                                    return l
                                }(t, r);
                                if (Object.getOwnPropertySymbols) {
                                    var c = Object.getOwnPropertySymbols(t);
                                    for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                                }
                                return l
                            }(t, iS);
                        return nt.createElement("svg", size_labels_extends({
                            width: 24,
                            height: 24,
                            viewBox: "0 0 24 24",
                            fill: "none",
                            xmlns: "http://www.w3.org/2000/svg",
                            "aria-labelledby": a
                        }, s), r ? nt.createElement("title", {
                            id: a
                        }, r) : null, ef || (ef = nt.createElement("path", {
                            fillRule: "evenodd",
                            clipRule: "evenodd",
                            d: "M2 5a3 3 0 0 1 3-3h4a3 3 0 0 1 3 2.93 3 3 0 0 1 4.192.05l2.829 2.828A3 3 0 0 1 19.069 12 3 3 0 0 1 22 15v4a3 3 0 0 1-3 3H7a5 5 0 0 1-5-5V5Zm9.071 15H19a1 1 0 0 0 1-1v-4a1 1 0 0 0-1-1h-1.929l-6 6Zm4.878-7.707h.001l1.657-1.657a1 1 0 0 0 0-1.414l-2.829-2.829a1 1 0 0 0-1.414 0L12 7.757v8.486l3.95-3.95ZM9.123 19.12A2.99 2.99 0 0 0 10 17V5a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1v12a3 3 0 0 0 5.123 2.12ZM6 17a1 1 0 0 1 1-1h.01a1 1 0 1 1 0 2H7a1 1 0 0 1-1-1Z",
                            fill: "currentColor"
                        })))
                    },
                    username: function(t) {
                        var r = t.title,
                            a = t.titleId,
                            s = function(t, r) {
                                if (null == t) return {};
                                var a, s, l = function(t, r) {
                                    if (null == t) return {};
                                    var a, s, l = {},
                                        c = Object.keys(t);
                                    for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                                    return l
                                }(t, r);
                                if (Object.getOwnPropertySymbols) {
                                    var c = Object.getOwnPropertySymbols(t);
                                    for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                                }
                                return l
                            }(t, iw);
                        return nt.createElement("svg", at_extends({
                            width: 24,
                            height: 24,
                            viewBox: "0 0 24 24",
                            fill: "none",
                            xmlns: "http://www.w3.org/2000/svg",
                            "aria-labelledby": a
                        }, s), r ? nt.createElement("title", {
                            id: a
                        }, r) : null, ed || (ed = nt.createElement("path", {
                            fillRule: "evenodd",
                            clipRule: "evenodd",
                            d: "M12 4a8 8 0 1 0 4 14.928 1 1 0 1 1 1 1.732A9.96 9.96 0 0 1 11.942 22C6.446 21.968 2 17.503 2 12 2 6.477 6.477 2 12 2s10 4.477 10 10v1.5a3.5 3.5 0 0 1-6.396 1.966A5 5 0 1 1 17 12v1.5a1.5 1.5 0 0 0 3 0V12a8 8 0 0 0-8-8Zm3 8a3 3 0 1 0-6 0 3 3 0 0 0 6 0Z",
                            fill: "currentColor"
                        })))
                    }
                },
                UserFieldsToIcon = ({
                    fields: t,
                    className: r
                }) => {
                    let a = 1 === t.length ? iT[t[0]] : void 0;
                    return a ? (0, tb.jsx)(a, {
                        className: r
                    }) : (0, tb.jsx)(SvgJustifiedText, {
                        className: r
                    })
                },
                UserFieldEditorView = ({
                    onClickClose: t,
                    onSubmit: r,
                    fields: a,
                    submitText: s,
                    subtitle: l,
                    title: c
                }) => {
                    ({
                        submitText: s,
                        subtitle: l,
                        title: c
                    } = useAssignDefaultValues({
                        submitText: s,
                        subtitle: l,
                        title: c
                    }, a));
                    let d = t && (0, tb.jsx)(rk, {
                        type: "button",
                        onClick: t,
                        "data-testid": "close-button",
                        children: (0, tb.jsx)(close_SvgClose, {})
                    });
                    return (0, tb.jsxs)(tb.Fragment, {
                        children: [(0, tb.jsx)(ModalHeader, {
                            alignContent: "bottom",
                            trailing: d,
                            children: (0, tb.jsxs)("div", {
                                className: "user-field-editor__header",
                                children: [(0, tb.jsx)("div", {
                                    className: "user-field-editor__header__icon",
                                    children: (0, tb.jsx)(Icon_Icon, {
                                        color: "brand-primary",
                                        size: "large",
                                        children: (0, tb.jsx)(UserFieldsToIcon, {
                                            fields: a
                                        })
                                    })
                                }), c && (0, tb.jsx)(Typography_Typography, {
                                    variant: "title",
                                    color: "primary",
                                    children: c
                                })]
                            })
                        }), (0, tb.jsxs)("div", {
                            className: "user-field-editor__body",
                            children: [l && (0, tb.jsx)(Typography_Typography, {
                                className: "user-field-editor__body__subtitle",
                                variant: "body_normal",
                                color: "secondary",
                                children: l
                            }), (0, tb.jsx)(UserProfileForm, {
                                filterFields: a,
                                onEditProfileSubmit: r,
                                formClassName: "user-field-editor__body__form",
                                fieldsContainerStyle: {
                                    padding: 0
                                },
                                options: {
                                    buttonsAsFooter: !1,
                                    hideCancelButton: !0,
                                    submitButtonProps: {
                                        buttonPadding: "large",
                                        startSlot: void 0,
                                        typographyProps: {
                                            variant: "button_primary"
                                        }
                                    },
                                    submitText: s
                                }
                            })]
                        }), (0, tb.jsx)(PoweredByDynamic, {
                            asFooter: !0
                        })]
                    })
                },
                UserFieldEditorModal = t => {
                    var {
                        onCancel: r,
                        onSubmit: a,
                        fields: s
                    } = t, l = _tslib_rest(t, ["onCancel", "onSubmit", "fields"]);
                    let [c, d] = (0, nt.useState)(!0), u = (0, nt.useRef)(!1), m = (0, nt.useCallback)(() => {
                        u.current || r("User cancelled"), u.current = !0
                    }, [r]), cancelAndClose = () => d(!1);
                    return (0, tb.jsx)(Portal_Portal, {
                        handleClose: cancelAndClose,
                        isShown: c,
                        zIndex: 2147483645,
                        withBackdrop: !0,
                        elementId: "dynamic-edit-user-field",
                        transitionEvents: {
                            onUnmount: m
                        },
                        children: (0, tb.jsx)(Modal_Modal, {
                            children: (0, tb.jsx)(ModalCard_ModalCard, {
                                children: (0, tb.jsx)(UserFieldEditorView, Object.assign({
                                    onSubmit: t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                                        return a(t).then(() => {
                                            u.current = !0, d(!1)
                                        })
                                    }),
                                    onClickClose: cancelAndClose,
                                    fields: s
                                }, l))
                            })
                        })
                    })
                },
                iO = (0, nt.createContext)(void 0),
                UserFieldEditorContextProvider = ({
                    children: t
                }) => {
                    let {
                        modal: r,
                        open: a
                    } = useConfirmationModal({
                        elementId: "dynamic-edit-user-field"
                    }), s = (0, nt.useCallback)((t, r) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        return a((a, s) => (0, tb.jsx)(UserFieldEditorModal, {
                            fields: t.fields,
                            submitText: t.submitText,
                            title: t.title,
                            subtitle: t.subtitle,
                            onCancel: s,
                            onSubmit: t => r(t).then(r => a({
                                fields: t,
                                updateUserResult: r
                            }))
                        }))
                    }), [a]);
                    return (0, tb.jsxs)(iO.Provider, {
                        value: {
                            open: s
                        },
                        children: [r, t]
                    })
                },
                useCreateUserProfileByJWTCallback = () => {
                    let {
                        setUser: t,
                        handleLogOut: r
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        goToInitialView: a
                    } = ViewContext_useViewContext(), s = (0, nt.useCallback)(s => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        let l = decodeJwt(s);
                        if (!l) {
                            yield r(), a();
                            return
                        }
                        storeAuthToken(s);
                        let c = createUserProfile(l);
                        t(c)
                    }), []);
                    return {
                        createUserProfileByJWT: s
                    }
                },
                useUpdateUserProfileByJWTCallback = () => {
                    let {
                        createUserProfileByJWT: t
                    } = useCreateUserProfileByJWTCallback(), {
                        setCallback: r
                    } = useInternalDynamicContext_useInternalDynamicContext(), a = (0, nt.useCallback)(a => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        yield t(a), r("userProfileUpdate")
                    }), []);
                    return {
                        updateUserProfileByJWT: a
                    }
                },
                useEmailVerificationRequest = () => {
                    let {
                        onboardingOnlyJwt: t,
                        authToken: r,
                        environmentId: a
                    } = useInternalDynamicContext_useInternalDynamicContext(), s = t || r, {
                        updateUserProfileByJWT: l
                    } = useUpdateUserProfileByJWTCallback(), {
                        verificationUUID: c
                    } = useEmailVerificationContext(), d = (0, nt.useCallback)((t, r) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        if (!s) throw Error("No JWT token provided");
                        if (!r && !c) throw Error("No verification UUID provided");
                        let d = yield verifyEmail({
                            environmentId: a,
                            verificationToken: t,
                            verificationUUID: String(r || c)
                        }, s);
                        return yield l(d.jwt), d
                    }), [c, a, s, l]);
                    return {
                        verifyEmail: d
                    }
                },
                isEmailVerificationRequired = t => t.nextView === tu.wgS.VerifyEmail,
                iN = object_create().shape({
                    alias: string_create(),
                    btcWallet: string_create(),
                    ckbWallet: string_create(),
                    country: string_create(),
                    discordNotification: boolean_create(),
                    dogeWallet: string_create(),
                    email: string_create(),
                    emailNotification: boolean_create(),
                    firstName: string_create(),
                    jobTitle: string_create(),
                    kasWallet: string_create(),
                    kdaWallet: string_create(),
                    lastName: string_create(),
                    ltcWallet: string_create(),
                    metadata: object_create(),
                    newsletterNotification: boolean_create(),
                    phoneNumber: string_create(),
                    tShirtSize: string_create(),
                    team: string_create(),
                    username: string_create()
                }),
                useUpdateUser = t => {
                    let {
                        authToken: r,
                        onboardingOnlyJwt: a,
                        environmentId: s
                    } = useInternalDynamicContext_useInternalDynamicContext(), l = a || r, {
                        setVerificationUUID: c,
                        setEmail: d
                    } = useEmailVerificationContext(), {
                        verifyEmail: u
                    } = useEmailVerificationRequest(), {
                        updateUserProfileByJWT: m
                    } = useUpdateUserProfileByJWTCallback();
                    return (0, nt.useCallback)((r, a) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        var p, h, f;
                        let {
                            metadata: y
                        } = r, b = yield iN.validate(r, {
                            stripUnknown: t
                        }), C = yield updateUserProfileFields(l, a || s, Object.assign(Object.assign({}, b), {
                            metadata: y
                        })), E = decodeJwt(C.jwt), j = null !== (p = null == E ? void 0 : E.missingFields) && void 0 !== p ? p : [], I = isEmailVerificationRequired(C);
                        return I ? (d(null === (h = C.emailVerification) || void 0 === h ? void 0 : h.email), c(null === (f = C.emailVerification) || void 0 === f ? void 0 : f.verificationUUID), {
                            isEmailVerificationRequired: !0,
                            missingFields: j,
                            updateUserProfileResponse: C,
                            verifyEmailFn: t => {
                                var r;
                                return u(t, null === (r = C.emailVerification) || void 0 === r ? void 0 : r.verificationUUID)
                            }
                        }) : (yield m(C.jwt), {
                            isEmailVerificationRequired: !1,
                            missingFields: j,
                            updateUserProfileResponse: C
                        })
                    }), [s, l, d, c, t, m, u])
                },
                VerticalAccordion = ({
                    children: t,
                    className: r,
                    style: a
                }) => (0, tb.jsx)("div", {
                    className: classNames_classNames(r, "vertical-accordion__container"),
                    style: a,
                    children: t
                }),
                AccordionItem = ({
                    children: t,
                    className: r = "",
                    isOpen: a,
                    dataTestId: s,
                    dimOnHide: l = !1
                }) => {
                    let c = (0, nt.useRef)(null),
                        d = (0, nt.useRef)(),
                        [u] = useResizeObserver(c),
                        m = (0, nt.useMemo)(() => a ? u ? u.height : d.current : 0, [a, u]);
                    return (0, nt.useEffect)(() => {
                        let t = null == u ? void 0 : u.height;
                        t && (d.current = t)
                    }, [u]), (0, tb.jsxs)("div", {
                        "data-testid": s,
                        style: {
                            maxHeight: m
                        },
                        className: classNames_classNames(r, "accordion-item", {
                            "accordion-item--full-height": !!m
                        }),
                        children: [l && (0, tb.jsx)("div", {
                            "data-testid": "accordion-item-curtain",
                            className: classNames_classNames("accordion-item__curtain", {
                                "accordion-item__curtain--dimmed": !a
                            })
                        }), (0, tb.jsx)("div", {
                            ref: c,
                            children: t
                        })]
                    })
                },
                OverlayCardTarget_OverlayCardTarget = ({
                    children: t
                }) => {
                    let {
                        Provider: r
                    } = r4, [a, s] = (0, nt.useState)(null);
                    return (0, tb.jsxs)(r, {
                        value: {
                            portal: a
                        },
                        children: [t, (0, tb.jsx)("div", {
                            ref: s
                        })]
                    })
                },
                DynamicFooter = () => (0, tb.jsx)("div", {
                    className: "dynamic-footer",
                    children: (0, tb.jsx)(PoweredByDynamic, {})
                });
            var iP = ["title", "titleId"];

            function arrow_left_extends() {
                return (arrow_left_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgArrowLeft = function(t) {
                    var r = t.title,
                        a = t.titleId,
                        s = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = function(t, r) {
                                if (null == t) return {};
                                var a, s, l = {},
                                    c = Object.keys(t);
                                for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                                return l
                            }(t, r);
                            if (Object.getOwnPropertySymbols) {
                                var c = Object.getOwnPropertySymbols(t);
                                for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                            }
                            return l
                        }(t, iP);
                    return nt.createElement("svg", arrow_left_extends({
                        width: 24,
                        height: 24,
                        viewBox: "0 0 24 24",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        "aria-labelledby": a
                    }, s), r ? nt.createElement("title", {
                        id: a
                    }, r) : null, eb || (eb = nt.createElement("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M10.707 4.293a1 1 0 0 1 0 1.414L5.414 11H21a1 1 0 1 1 0 2H5.414l5.293 5.293a1 1 0 0 1-1.414 1.414l-7-7a1 1 0 0 1 0-1.414l7-7a1 1 0 0 1 1.414 0Z",
                        fill: "currentColor"
                    })))
                },
                iA = ["title", "titleId"];

            function footer_info_icon_extends() {
                return (footer_info_icon_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgFooterInfoIcon = function(t) {
                    var r = t.title,
                        a = t.titleId,
                        s = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = function(t, r) {
                                if (null == t) return {};
                                var a, s, l = {},
                                    c = Object.keys(t);
                                for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                                return l
                            }(t, r);
                            if (Object.getOwnPropertySymbols) {
                                var c = Object.getOwnPropertySymbols(t);
                                for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                            }
                            return l
                        }(t, iA);
                    return nt.createElement("svg", footer_info_icon_extends({
                        width: 20,
                        height: 20,
                        viewBox: "0 0 20 20",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        "aria-labelledby": a
                    }, s), r ? nt.createElement("title", {
                        id: a
                    }, r) : null, ew || (ew = nt.createElement("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M10 3.333a6.667 6.667 0 1 0 0 13.334 6.667 6.667 0 0 0 0-13.334ZM1.667 10a8.333 8.333 0 1 1 16.666 0 8.333 8.333 0 0 1-16.666 0Zm7.5-3.333c0-.46.373-.834.833-.834h.008a.833.833 0 1 1 0 1.667H10a.833.833 0 0 1-.833-.833ZM8.333 10c0-.46.374-.833.834-.833H10c.46 0 .833.373.833.833v2.5a.833.833 0 1 1 0 1.667H10a.833.833 0 0 1-.833-.834v-2.5A.833.833 0 0 1 8.333 10Z",
                        fill: "currentcolor"
                    })))
                },
                iR = ["title", "titleId"];

            function question_mark_extends() {
                return (question_mark_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgQuestionMark = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, iR);
                return nt.createElement("svg", question_mark_extends({
                    width: 20,
                    height: 20,
                    viewBox: "0 0 20 20",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, e_ || (e_ = nt.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M10 3.25a6.75 6.75 0 1 0 0 13.5 6.75 6.75 0 0 0 0-13.5ZM1.667 10a8.333 8.333 0 1 1 16.666 0 8.333 8.333 0 0 1-16.666 0Z",
                    fill: "currentcolor"
                })), ek || (ek = nt.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M10.31 7.044a1.784 1.784 0 0 0-1.133.192 1.513 1.513 0 0 0-.699.783.792.792 0 0 1-1.481-.559c.26-.689.768-1.257 1.42-1.613a3.368 3.368 0 0 1 2.144-.367 3.262 3.262 0 0 1 1.908 1.023c.496.55.775 1.254.774 1.99 0 1.201-.948 1.972-1.587 2.369a6.63 6.63 0 0 1-1.354.635l-.028.01-.008.002h-.003l-.002.001-.235-.756.235.756A.792.792 0 0 1 9.789 10h.001m0 0 .014-.005.06-.021a5.054 5.054 0 0 0 .956-.456c.575-.357.84-.717.84-1.024 0-.332-.125-.66-.367-.928a1.68 1.68 0 0 0-.982-.521M9.265 13.77c0-.438.355-.792.792-.792h.01a.792.792 0 1 1 0 1.584h-.01a.792.792 0 0 1-.792-.792Z",
                    fill: "currentcolor"
                })))
            };
            let Header = ({
                    onClose: t,
                    heading: r,
                    projectSettings: a,
                    copykey: s
                }) => {
                    let {
                        setError: l
                    } = ErrorContext_useErrorContext(), {
                        isFooterExpanded: c,
                        setIsFooterExpanded: d
                    } = useFooterAnimationContext(), {
                        goToInitialView: u
                    } = ViewContext_useViewContext(), {
                        showBackButton: m,
                        showCloseButton: p,
                        showHelpContent: h,
                        isWalletListTypeView: f,
                        displayBorderBelowHeader: y
                    } = useAuthLayoutChecks(), {
                        setExistentAccountData: b
                    } = useAccountExistsContext(), C = (0, nt.useCallback)(() => {
                        u(), b(void 0), l(void 0)
                    }, [u, b, l]), E = p && t && (0, tb.jsx)(rk, {
                        onClick: t,
                        type: "button",
                        id: "close-button",
                        "data-testid": "close-button",
                        className: "header__icon",
                        children: (0, tb.jsx)(close_SvgClose, {})
                    }), j = h && (0, tb.jsx)(Tooltip, {
                        content: "Need some help?",
                        className: "header__tooltip",
                        children: (0, tb.jsx)(rk, {
                            type: "button",
                            onClick: () => d(!c),
                            "data-testid": "info-button",
                            className: "header__icon",
                            children: f ? (0, tb.jsx)(SvgQuestionMark, {}) : (0, tb.jsx)(SvgFooterInfoIcon, {})
                        })
                    }, "info-button"), I = [];
                    return m && I.push((0, tb.jsx)(rk, {
                        type: "button",
                        onClick: C,
                        "data-testid": "back-button",
                        className: "header__icon",
                        children: (0, tb.jsx)(SvgArrowLeft, {})
                    }, "back-button")), E && j && I.push(j), (0, tb.jsx)(ModalHeader, {
                        leading: I,
                        trailing: E || j,
                        displayBorder: y,
                        children: (0, tb.jsx)(Typography_Typography, {
                            as: "h1",
                            variant: "title",
                            color: "primary",
                            "data-testid": "dynamic-auth-modal-heading",
                            className: "header__typography",
                            copykey: s,
                            children: a ? r : (0, tb.jsx)(Skeleton, {
                                className: "header__skeleton"
                            })
                        })
                    })
                },
                EmptyHelpContent = () => (0, tb.jsx)("div", {
                    "data-testid": "empty-help-content"
                });
            var iF = ["title", "titleId"];

            function footer_eye_icon_extends() {
                return (footer_eye_icon_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgFooterEyeIcon = function(t) {
                    var r = t.title,
                        a = t.titleId,
                        s = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = function(t, r) {
                                if (null == t) return {};
                                var a, s, l = {},
                                    c = Object.keys(t);
                                for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                                return l
                            }(t, r);
                            if (Object.getOwnPropertySymbols) {
                                var c = Object.getOwnPropertySymbols(t);
                                for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                            }
                            return l
                        }(t, iF);
                    return nt.createElement("svg", footer_eye_icon_extends({
                        width: 20,
                        height: 20,
                        viewBox: "0 0 20 20",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        "aria-labelledby": a
                    }, s), r ? nt.createElement("title", {
                        id: a
                    }, r) : null, ex || (ex = nt.createElement("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M9.995 4.167c3.965 0 6.643 2.655 7.937 4.675a2.14 2.14 0 0 1 0 2.316c-1.294 2.02-3.972 4.675-7.937 4.675-3.965 0-6.643-2.655-7.937-4.675a2.14 2.14 0 0 1 0-2.316c1.294-2.02 3.972-4.675 7.937-4.675ZM14.16 10a4.167 4.167 0 1 1-8.333 0 4.167 4.167 0 0 1 8.333 0Zm-4.12 2.5a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Z",
                        fill: "currentColor"
                    })))
                },
                iW = ["title", "titleId"];

            function footer_gas_icon_extends() {
                return (footer_gas_icon_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgFooterGasIcon = function(t) {
                    var r = t.title,
                        a = t.titleId,
                        s = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = function(t, r) {
                                if (null == t) return {};
                                var a, s, l = {},
                                    c = Object.keys(t);
                                for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                                return l
                            }(t, r);
                            if (Object.getOwnPropertySymbols) {
                                var c = Object.getOwnPropertySymbols(t);
                                for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                            }
                            return l
                        }(t, iW);
                    return nt.createElement("svg", footer_gas_icon_extends({
                        width: 20,
                        height: 20,
                        viewBox: "0 0 20 20",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        "aria-labelledby": a
                    }, s), r ? nt.createElement("title", {
                        id: a
                    }, r) : null, eC || (eC = nt.createElement("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M9.667 18.333a2 2 0 0 0 2-2V3.667a2 2 0 0 0-2-2h-6a2 2 0 0 0-2 2v12.666a2 2 0 0 0 2 2h6ZM9 8.333a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1H4.333a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1H9ZM17.5 5.833c.46 0 .833.373.833.834v7.5H17.5h.833V14.186a1.201 1.201 0 0 1-.005.113 2.881 2.881 0 0 1-.29 1.075c-.155.307-.398.64-.779.893-.386.258-.863.4-1.426.4-.562 0-1.04-.142-1.425-.4a2.295 2.295 0 0 1-.778-.893 2.878 2.878 0 0 1-.296-1.16v-.045l.833-.001h-.834V9.185l-.001-.011a.2.2 0 0 0-.015-.051v-.001s.005.008.016.02V7.5c.354 0 .675.091.944.27.264.176.43.404.53.607A1.856 1.856 0 0 1 15 9.13v.035c0 .001 0 .002-.832.002H15v4.992l.001.02a1.228 1.228 0 0 0 .12.448c.054.11.123.194.211.253.083.055.23.12.501.12s.419-.065.502-.12a.633.633 0 0 0 .211-.253 1.218 1.218 0 0 0 .12-.468V6.667c0-.46.374-.834.834-.834ZM13.378 9.17h.002-.002Z",
                        fill: "currentColor"
                    })))
                },
                iM = ["title", "titleId"];

            function footer_key_icon_extends() {
                return (footer_key_icon_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgFooterKeyIcon = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, iM);
                return nt.createElement("svg", footer_key_icon_extends({
                    width: 20,
                    height: 20,
                    viewBox: "0 0 20 20",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, eS || (eS = nt.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M18.125 6.875a5 5 0 1 0-10 0 5 5 0 0 0 10 0Zm-2.5 0a2.5 2.5 0 1 0-5 0 2.5 2.5 0 0 0 5 0Zm-7.809 3.243a6.258 6.258 0 0 0 1.671 1.865L7.13 14.34l1.752 1.753-1.768 1.767-1.752-1.752-1.718 1.718-1.768-1.767 5.941-5.942Z",
                    fill: "currentColor"
                })))
            };
            let isHardwareWalletEnabled = t => null != t && (0, tl.UD)(t) && t.isHardwareWalletEnabled,
                EnterTileAnimation = ({
                    children: t,
                    className: r = "",
                    delay: a = 0,
                    dataTestId: s
                }) => {
                    let l = (0, nt.useMemo)(() => ({
                        animationDelay: a
                    }), [a]);
                    return (0, tb.jsx)("div", {
                        "data-testid": s,
                        className: classNames_classNames(r, "enter-list-tile-animation"),
                        style: l,
                        children: t
                    })
                },
                InfoItem = ({
                    title: t,
                    content: r,
                    Icon: a,
                    className: s = "",
                    iconClassName: l = "",
                    textClassName: c = ""
                }) => (0, tb.jsxs)("div", {
                    className: classNames_classNames("info-item__container", s),
                    children: [(0, tb.jsx)("div", {
                        className: classNames_classNames("info-item__icon-container", l, {
                            "icon-container--has-content": !!r
                        }),
                        children: (0, tb.jsx)(a, {})
                    }), (0, tb.jsxs)("div", {
                        children: [(0, tb.jsx)(Typography_Typography, {
                            as: "h2",
                            className: c,
                            variant: "body_normal",
                            color: "primary",
                            weight: "medium",
                            children: t
                        }), r && (0, tb.jsx)(Typography_Typography, {
                            variant: "body_normal",
                            color: "secondary",
                            weight: "regular",
                            className: "info-item__secondary-text",
                            children: r
                        })]
                    })]
                }),
                WalletMoreInfoContent = ({
                    variant: t,
                    wallet: r
                }) => {
                    let a = isHardwareWalletEnabled(r) ? {
                        info: [{
                            content: "By connecting a wallet to a website, you are allowing the site to read the contents of your wallet. This does not approve a transaction.",
                            icon: SvgFooterEyeIcon,
                            title: "Allows read access"
                        }, {
                            content: (0, tb.jsxs)("div", {
                                className: "footer-more-info-content__item--phantom-ledger",
                                children: [(0, tb.jsx)(Typography_Typography, {
                                    as: "p",
                                    variant: "body_small",
                                    weight: "regular",
                                    children: "Ledger does not support message signing functionality, commonly used to log in to sites. Instead, we sign a transaction as a proxy to prove ownership of the wallet."
                                }), (0, tb.jsxs)(Typography_Typography, {
                                    as: "p",
                                    variant: "body_small",
                                    weight: "regular",
                                    children: [(0, tb.jsx)("strong", {
                                        children: "Important"
                                    }), ": we do not", " ", (0, tb.jsx)("strong", {
                                        children: "broadcast"
                                    }), " this transaction, meaning Ledger based login will still be gasless."]
                                }), (0, tb.jsx)(Typography_Typography, {
                                    as: "p",
                                    variant: "body_small",
                                    weight: "regular",
                                    children: "Phantom in turn shows that a fee may apply as part of the “transaction”."
                                }), (0, tb.jsx)(Typography_Typography, {
                                    as: "p",
                                    variant: "body_small",
                                    weight: "regular",
                                    children: "As always, please be cautious of the extensions and websites you use to prevent unwanted transactions from being broadcasted to the network."
                                })]
                            }),
                            icon: SvgFooterGasIcon,
                            title: "Why do I see a fee when using ledger"
                        }]
                    } : {
                        info: [{
                            content: "Signing proves you have access to your wallet. It’s a bit like verifying your email by clicking an email confirmation link in your inbox during signup. This does not approve a transaction.",
                            icon: SvgFooterKeyIcon,
                            title: "Confirms you own your wallet"
                        }, {
                            icon: SvgFooterGasIcon,
                            title: "There are no associated gas costs"
                        }]
                    };
                    return (0, tb.jsx)("div", {
                        className: "footer-more-info-content__wrapper",
                        children: ({
                            connect: {
                                info: [{
                                    content: "By connecting a wallet to a website, you are allowing the site to read the contents of your wallet. This does not approve a transaction.",
                                    icon: SvgFooterEyeIcon,
                                    title: "Allows read access"
                                }, {
                                    icon: SvgFooterGasIcon,
                                    title: "There are no associated gas costs"
                                }]
                            },
                            sign: a
                        })[t].info.map((t, r) => (0, tb.jsx)("div", {
                            className: "footer-more-info-content__item",
                            children: (0, tb.jsx)(EnterTileAnimation, {
                                delay: `${.3+.2*r}s`,
                                children: (0, tb.jsx)(InfoItem, {
                                    Icon: t.icon,
                                    title: t.title,
                                    content: t.content
                                })
                            })
                        }, r))
                    })
                };
            var iD = ["title", "titleId"];

            function puzzle_extends() {
                return (puzzle_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgPuzzle = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, iD);
                return nt.createElement("svg", puzzle_extends({
                    width: 24,
                    height: 24,
                    viewBox: "0 0 24 24",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, eE || (eE = nt.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M16.044 20.998a.693.693 0 0 0 .7-.68V16.59c.239-2.01 1.121-1.413 2.16-.791 2.51 1.502 4.177-2.45 2.148-3.67-1.592-.956-2.281.689-3.448.52-.45-.067-.763-.54-.862-1.261V8.693a.692.692 0 0 0-.7-.68h-3.21c-2.65-.327-.297-1.755-.297-3.083.001-1.066-.99-1.93-2.214-1.93-1.222 0-2.344.864-2.344 1.93 0 1.253 2.435 2.756-.253 3.083H3.7a.692.692 0 0 0-.699.68v2.688c.205 1.146 1.001 1.411 2.021.655.344-.256.924-.554 1.344-.554 1.094 0 1.982.965 1.982 2.154 0 1.19-.887 2.416-1.982 2.416-.39 0-.755-.123-1.063-.338 0 .091-1.913-1.674-2.302.486v4.121c0 .375.315.68.699.68L10.16 21c.085-.393-.191-.844-.45-1.234-2.04-3.075 5.895-3.382 3.855.095-.1.172-.2.338-.277.5-.098.202-.162.45-.149.639l2.905-.002Z",
                    fill: "currentColor"
                })))
            };
            let parseWalletLinks_parseWalletLinks = t => {
                    let r;
                    let a = (0, td.IN)() || (0, td.zc)(),
                        s = detectBrowserName() || "chrome";
                    switch (s) {
                        case "edge":
                            r = t.edge;
                            break;
                        case "firefox":
                            r = t.firefox;
                            break;
                        default:
                            r = t.chrome
                    }
                    let l = !a && !!t.android,
                        c = (a || !(0, td.tq)()) && !!t.ios;
                    return {
                        canShowAndroidAppButton: l,
                        canShowIosAppButton: c,
                        currentDesktopUrl: r,
                        hasMobileAppUrl: l || c,
                        userBrowser: s
                    }
                },
                NewToWeb3WalletItem = ({
                    children: t,
                    style: r,
                    wallet: a
                }) => (0, tb.jsx)(WalletListItem, {
                    wallet: a,
                    tile: t ? ({
                        onClick: a
                    }) => (0, tb.jsx)("button", {
                        className: "new-to-web3--button",
                        style: r,
                        onClick: a,
                        children: t
                    }) : void 0
                }),
                Item_Item = ({
                    heading: t,
                    StartIcon: r,
                    EndIcon: a,
                    message: s,
                    url: l
                }) => (0, tb.jsxs)("a", {
                    className: "footer-buttons-item",
                    href: l,
                    rel: "noopener noreferrer",
                    target: "_blank",
                    children: [(0, tb.jsx)("div", {
                        className: "footer-buttons-item__icon--left",
                        children: (0, tb.jsx)(r, {})
                    }), (0, tb.jsxs)("div", {
                        className: "footer-buttons-item__typography",
                        children: [(0, tb.jsx)(Typography_Typography, {
                            as: "h2",
                            weight: "regular",
                            color: "primary",
                            variant: "body_normal",
                            children: t
                        }), s && (0, tb.jsx)(Typography_Typography, {
                            as: "p",
                            weight: "regular",
                            color: "secondary",
                            children: s
                        })]
                    }), a && (0, tb.jsx)(a, {
                        style: {
                            height: "1.5rem",
                            width: "1.5rem"
                        }
                    })]
                }),
                WalletExtensionOrAppContinueButton = ({
                    wallet: t,
                    selectedUrl: r
                }) => {
                    let a = !!r.length && !(null == t ? void 0 : t.isInstalledOnBrowser);
                    return (0, tb.jsxs)("div", {
                        className: "new-to-web3-buttons__container",
                        children: [!(0, td.tq)() && (0, tb.jsxs)(tb.Fragment, {
                            children: [(null == t ? void 0 : t.isInstalledOnBrowser) && (0, tb.jsx)(NewToWeb3WalletItem, {
                                wallet: t,
                                children: (0, tb.jsx)(Typography_Typography, {
                                    as: "p",
                                    "data-testid": "desktop-interactive-wallet-item",
                                    variant: "body_normal",
                                    weight: "bold",
                                    children: "Continue"
                                })
                            }), a && (0, tb.jsx)("button", {
                                onClick: () => {
                                    (null == t ? void 0 : t.key) && (LocalStorage.setToLS(nh, t.key), window.location.reload())
                                },
                                children: (0, tb.jsx)(Typography_Typography, {
                                    as: "p",
                                    "data-testid": "refresh-once-installed-button",
                                    variant: "body_normal",
                                    weight: "bold",
                                    children: "Continue once installed"
                                })
                            })]
                        }), t && (0, td.tq)() && (0, tb.jsx)(NewToWeb3WalletItem, {
                            wallet: t,
                            children: (0, tb.jsx)("p", {
                                "data-testid": "mobile-interactive-wallet-item",
                                children: "Continue once installed"
                            })
                        })]
                    })
                },
                WalletListHelpContent = ({
                    chains: t,
                    newToWeb3WalletChainMap: r
                }) => {
                    var a, s;
                    let {
                        walletConnectorOptions: l
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        walletBook: c
                    } = (0, tc.yw)(), [d, u] = (0, nt.useState)(""), m = (null === (a = null == t ? void 0 : t.filter(t => !!t.enabled).find(t => t.name === r.primary_chain)) || void 0 === a ? void 0 : a.name) || "evm", p = getValueByKey(null == r ? void 0 : r.wallets, m), h = l.find(t => t.key === p), f = null == h ? void 0 : h.walletConnector.canConnectViaCustodialService, y = (0, tc.oq)(c, p), {
                        currentDesktopUrl: b,
                        canShowAndroidAppButton: C,
                        canShowIosAppButton: E
                    } = parseWalletLinks_parseWalletLinks(y), j = [{
                        content: "Install Desktop extension",
                        icon: SvgPuzzle,
                        isEnabled: !!(null == b ? void 0 : b.length) && !(0, td.tq)(),
                        url: b
                    }, {
                        content: "Install iOS app",
                        icon: tM,
                        isEnabled: E,
                        url: y.ios
                    }, {
                        content: "Install Android app",
                        icon: tD,
                        isEnabled: C,
                        url: y.android
                    }];
                    return Object.keys(null !== (s = null == c ? void 0 : c.wallets) && void 0 !== s ? s : {}).length ? (0, tb.jsx)("div", {
                        className: "walletlist-help-content__container",
                        children: (0, tb.jsxs)(EnterTileAnimation, {
                            delay: "300ms",
                            children: [(0, tb.jsx)("div", {
                                className: "walletlist-help-content__icon",
                                children: (0, tb.jsx)(tc.o, {
                                    walletKey: p,
                                    style: {
                                        height: pixelToRem_pixelToRem(56),
                                        width: pixelToRem_pixelToRem(56)
                                    }
                                })
                            }), (0, tb.jsxs)("div", {
                                className: "walletlist-help-content__typography-wrapper",
                                children: [(0, tb.jsxs)(Typography_Typography, {
                                    as: "p",
                                    variant: "title",
                                    weight: "medium",
                                    children: ["We recommend installing", " ", (0, tc.MO)(c, p).name]
                                }), (0, tb.jsx)(Typography_Typography, {
                                    as: "label",
                                    variant: "body_normal",
                                    weight: "regular",
                                    color: "secondary",
                                    className: "walletlist-help-content__typography--label",
                                    children: "Select your preferred option below:"
                                })]
                            }), (0, tb.jsx)("div", {
                                className: "walletlist-help-content__buttons-wrapper",
                                children: j.map((t, r) => t.isEnabled ? (0, tb.jsx)("button", {
                                    onClick: () => u(t.url),
                                    children: (0, tb.jsx)(Item_Item, {
                                        StartIcon: t.icon,
                                        heading: t.content,
                                        url: t.url
                                    })
                                }, r) : void 0)
                            }), f && (0, tb.jsxs)("div", {
                                className: "walletlist-help-content__custodial-wallet-area",
                                children: [(0, tb.jsx)(Typography_Typography, {
                                    className: "walletlist-help-content__custodial-wallet-area--title",
                                    as: "p",
                                    color: "secondary",
                                    variant: "body_normal",
                                    weight: "regular",
                                    children: "If you don't want to install a wallet, then use:"
                                }), (0, tb.jsx)(NewToWeb3WalletItem, {
                                    wallet: h
                                })]
                            }), (0, tb.jsx)(WalletExtensionOrAppContinueButton, {
                                selectedUrl: d,
                                wallet: h
                            })]
                        })
                    }) : (0, tb.jsx)(Skeleton, {
                        className: "walletlist-footer-content__container"
                    })
                },
                HelpHeader = () => {
                    let {
                        authMode: t
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        setIsFooterExpanded: r
                    } = useFooterAnimationContext(), {
                        view: a
                    } = ViewContext_useViewContext(), {
                        helpHeaderData: s
                    } = useDynamicLayoutData({
                        authMode: t,
                        view: a.type
                    }), {
                        displayBorderBelowHeader: l
                    } = useAuthLayoutChecks(), c = (0, tb.jsx)(rk, {
                        type: "button",
                        onClick: () => r(!1),
                        "data-testid": "back-button",
                        className: "header__icon",
                        children: (0, tb.jsx)(SvgChevronLeft, {
                            className: "back-button "
                        })
                    });
                    return (0, tb.jsx)("div", {
                        className: "help-header",
                        children: (0, tb.jsx)(ModalHeader, {
                            trailing: c,
                            displayLeading: !1,
                            displayBorder: l,
                            children: (0, tb.jsx)(Typography_Typography, {
                                as: "h1",
                                variant: "title",
                                color: "primary",
                                "data-testid": "dynamic-auth-help-heading",
                                className: "header__typography",
                                copykey: null == s ? void 0 : s.copykey,
                                children: null == s ? void 0 : s.heading
                            })
                        })
                    })
                };
            var iL = ["title", "titleId"];

            function user_account_2_extends() {
                return (user_account_2_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgUserAccount2 = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, iL);
                return nt.createElement("svg", user_account_2_extends({
                    width: 60,
                    height: 50,
                    viewBox: "0 0 60 50",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, ej || (ej = nt.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M51.931 49.48A29.223 29.223 0 0 0 59.333 30C59.333 13.8 46.2.667 30 .667S.667 13.8.667 30A29.224 29.224 0 0 0 8.07 49.483c5.52-6.63 16.005-9.007 22.387-9.007 6.383 0 15.962 1.903 21.473 9.004ZM19 22.667c0-6.076 4.925-11 11-11s11 4.924 11 11c0 6.075-4.925 11-11 11s-11-4.925-11-11Z",
                    fill: "#4779FF"
                })))
            };
            let PasskeyInfoHelper = () => {
                    let {
                        t
                    } = useTranslation_useTranslation();
                    return (0, tb.jsx)("div", {
                        className: "passkey-info-help-content__container",
                        children: (0, tb.jsx)(EnterTileAnimation, {
                            delay: "300ms",
                            children: (0, tb.jsxs)("div", {
                                className: "passkey-info-help-content__typography-wrapper",
                                children: [(0, tb.jsxs)("div", {
                                    className: "passkey-info-help-content__details",
                                    children: [(0, tb.jsx)(Icon_Icon, {
                                        size: "medium",
                                        color: "text-tertiary",
                                        children: (0, tb.jsx)(SvgUserAccount2, {})
                                    }), (0, tb.jsxs)("div", {
                                        className: "passkey-info-help-content__wrapper",
                                        children: [(0, tb.jsx)(Typography_Typography, {
                                            variant: "title",
                                            weight: "medium",
                                            copykey: "dyn_passkey_intro.helper.section_1.title",
                                            children: t("dyn_passkey_intro.helper.section_1.title")
                                        }), (0, tb.jsx)(Typography_Typography, {
                                            as: "p",
                                            variant: "body_normal",
                                            weight: "regular",
                                            color: "secondary",
                                            className: "passkey-info-help-content__typography--label",
                                            copykey: "dyn_passkey_intro.helper.section_1.description",
                                            children: t("dyn_passkey_intro.helper.section_1.description")
                                        })]
                                    })]
                                }), (0, tb.jsxs)("div", {
                                    className: "passkey-info-help-content__details",
                                    children: [(0, tb.jsx)(Icon_Icon, {
                                        size: "medium",
                                        color: "text-tertiary",
                                        children: (0, tb.jsx)(SvgFooterKeyIcon, {})
                                    }), (0, tb.jsxs)("div", {
                                        className: "passkey-info-help-content__wrapper",
                                        children: [(0, tb.jsx)(Typography_Typography, {
                                            variant: "title",
                                            weight: "medium",
                                            copykey: "dyn_passkey_intro.helper.section_2.title",
                                            children: t("dyn_passkey_intro.helper.section_2.title")
                                        }), (0, tb.jsx)(Typography_Typography, {
                                            as: "p",
                                            variant: "body_normal",
                                            weight: "regular",
                                            color: "secondary",
                                            className: "passkey-info-help-content__typography--label",
                                            copykey: "dyn_passkey_intro.helper.section_2.description",
                                            children: t("dyn_passkey_intro.helper.section_2.description")
                                        })]
                                    })]
                                })]
                            })
                        })
                    })
                },
                HelpContent = () => (0, tb.jsxs)("div", {
                    children: [(0, tb.jsx)(HelpHeader, {}), (0, tb.jsx)(HelpContentSwitch, {})]
                }),
                HelpContentSwitch = () => {
                    let {
                        view: t
                    } = ViewContext_useViewContext(), {
                        projectSettings: r,
                        newToWeb3WalletChainMap: a,
                        selectedWalletConnector: s
                    } = useInternalDynamicContext_useInternalDynamicContext(), l = (0, nt.useMemo)(() => "wallet-connect-mobile-wallets-list" === t.type || "wallet-list" === t.type || "login-with-email-or-wallet-full-wallet-list" === t.type || "login-with-wallet-only" === t.type, [t]), c = (0, nt.useMemo)(() => "pending-signature-without-back-button" === t.type || "pending-signature" === t.type, [t]), d = (0, nt.useMemo)(() => "pending-connect" === t.type || "qr-code" === t.type, [t]), u = (0, nt.useMemo)(() => "passkey-intro" === t.type, [t]);
                    return l ? (0, tb.jsx)(WalletListHelpContent, {
                        chains: null == r ? void 0 : r.chains,
                        newToWeb3WalletChainMap: a
                    }) : c ? (0, tb.jsx)(WalletMoreInfoContent, {
                        variant: "sign",
                        wallet: s || void 0
                    }) : d ? (0, tb.jsx)(WalletMoreInfoContent, {
                        variant: "connect"
                    }) : u ? (0, tb.jsx)(PasskeyInfoHelper, {}) : (0, tb.jsx)(EmptyHelpContent, {})
                },
                TosAndPp = () => {
                    let {
                        user: t,
                        authMode: r,
                        customPrivacyPolicy: a,
                        customTermsOfServices: s,
                        privacyPolicyUrl: l,
                        termsOfServiceUrl: c
                    } = useInternalDynamicContext_useInternalDynamicContext(), d = isConnectOnly(t, r) ? "connecting" : "logging in";
                    return (0, tb.jsxs)(tb.Fragment, {
                        children: [(l || c) && (0, tb.jsxs)(Typography_Typography, {
                            variant: "body_small",
                            weight: "regular",
                            className: "tos-and-pp__text",
                            children: ["By ", d, ", you agree to", (0, tb.jsx)("br", {}), "our\xa0", (() => {
                                if (c) return (0, tb.jsx)("a", {
                                    className: "tos-and-pp__link",
                                    href: c,
                                    target: "_blank",
                                    rel: "noreferrer",
                                    children: "Terms of Service"
                                })
                            })(), (() => {
                                if (l) return (0, tb.jsxs)(tb.Fragment, {
                                    children: [c && (0, tb.jsx)(tb.Fragment, {
                                        children: "\xa0&\xa0"
                                    }), (0, tb.jsx)("a", {
                                        className: "tos-and-pp__link",
                                        href: l,
                                        target: "_blank",
                                        rel: "noreferrer",
                                        children: "Privacy Policy"
                                    })]
                                })
                            })(), "."]
                        }), s, a]
                    })
                },
                ToSFooter = () => {
                    let {
                        showToSFooter: t
                    } = useAuthLayoutChecks();
                    return (0, tb.jsx)("div", {
                        className: "tos-and-pp__footer",
                        children: t && (0, tb.jsx)(TosAndPp, {})
                    })
                },
                getChainStepState = (t, r) => {
                    let a = t === r[0],
                        s = !r.includes(t);
                    return a ? "current" : s ? "done" : "upcoming"
                },
                iz = {
                    current: "1",
                    default: "1",
                    done: "0.4",
                    upcoming: "0.15"
                },
                Step = ({
                    children: t,
                    className: r,
                    icon: a,
                    state: s = "default"
                }) => {
                    let l = (0, nt.useMemo)(() => ({
                            opacity: "upcoming" === s ? .5 : 1
                        }), [s]),
                        c = (0, nt.useMemo)(() => "done" === s ? (0, tb.jsx)("div", {
                            className: "step__icon step__icon--done",
                            children: (0, tb.jsx)(Icon_Icon, {
                                className: "step__icon__check-mark",
                                children: (0, tb.jsx)(SvgCheck, {
                                    style: l
                                })
                            })
                        }) : a ? (0, tb.jsx)(Icon_Icon, {
                            className: "step__icon",
                            children: (0, tb.jsx)("div", {
                                style: l,
                                children: a
                            })
                        }) : (0, tb.jsx)("div", {
                            className: "step__index",
                            children: (0, tb.jsx)(Typography_Typography, {
                                color: "primary",
                                variant: "body_small",
                                style: l,
                                children: (0, tb.jsx)("span", {
                                    className: "step__index-label"
                                })
                            })
                        }), [a, s, l]);
                    return (0, tb.jsxs)("div", {
                        className: classNames_classNames("step", r),
                        children: [c, (0, tb.jsx)(Typography_Typography, {
                            color: "primary",
                            variant: "body_small",
                            style: {
                                opacity: iz[s]
                            },
                            children: t
                        })]
                    })
                },
                Divider_Divider = ({
                    text: t,
                    className: r = "",
                    fullWidth: a = !1
                }) => (0, tb.jsxs)("div", {
                    className: classNames_classNames("divider", r, {
                        "divider__full-width": a
                    }),
                    children: [(0, tb.jsx)("div", {
                        className: "divider__dash"
                    }), !!t && (0, tb.jsxs)(tb.Fragment, {
                        children: [(0, tb.jsx)(Typography_Typography, {
                            className: "divider__text",
                            variant: "body_small",
                            color: "secondary",
                            children: t
                        }), (0, tb.jsx)("div", {
                            className: "divider__dash"
                        })]
                    })]
                }),
                Stepper = ({
                    children: t
                }) => (0, tb.jsx)("div", {
                    className: "stepper",
                    children: nt.Children.map(t, (t, r) => {
                        let a = 0 === r ? void 0 : (0, tb.jsx)(Divider_Divider, {
                            className: "stepper__divider"
                        });
                        return (0, tb.jsxs)(tb.Fragment, {
                            children: [a, t]
                        })
                    })
                }),
                WalletProgressStepper = () => {
                    let {
                        bridgeChainsToConnect: t = [],
                        bridgeChains: r = []
                    } = useInternalDynamicContext_useInternalDynamicContext(), a = r.map(({
                        chain: t
                    }) => t), s = [...t].map(({
                        chain: t
                    }) => t);
                    return (0, tb.jsx)("div", {
                        className: "wallet-progress-stepper",
                        "data-testid": "wallet-progress-stepper",
                        children: (0, tb.jsx)(Stepper, {
                            children: a.map((t, r) => {
                                var a;
                                let l = (0, tl.bt)(t),
                                    c = getChainIcon_getChainIcon(t);
                                return (0, tb.jsx)(Step, {
                                    state: getChainStepState(t, s),
                                    icon: (0, tb.jsx)(c, {}),
                                    children: null !== (a = null == l ? void 0 : l.blockchainName) && void 0 !== a ? a : null == l ? void 0 : l.displayName
                                }, t)
                            })
                        })
                    })
                },
                DynamicAuthLayout_DynamicAuthLayout = ({
                    children: t,
                    className: r,
                    style: a,
                    onClose: s,
                    projectSettings: l,
                    hideBridgeProgressSteppers: c
                }) => {
                    let {
                        view: d
                    } = ViewContext_useViewContext(), {
                        authMode: u
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        isFooterExpanded: m
                    } = useFooterAnimationContext(), {
                        headerData: p,
                        helpHeaderData: h
                    } = useDynamicLayoutData({
                        authMode: u,
                        view: d.type
                    }), {
                        showConnectedWalletProgress: f,
                        showHeader: y,
                        showHelpContent: b,
                        showToSFooter: C,
                        showDynamicFooter: E
                    } = useAuthLayoutChecks();
                    return (0, tb.jsx)(OverlayCardTarget_OverlayCardTarget, {
                        children: (0, tb.jsxs)(VerticalAccordion, {
                            style: a,
                            className: r,
                            children: [(0, tb.jsxs)(AccordionItem, {
                                isOpen: !m,
                                dimOnHide: !0,
                                children: [f && !c && (0, tb.jsx)(WalletProgressStepper, {}), y && (0, tb.jsx)(Header, {
                                    onClose: s,
                                    heading: (null == p ? void 0 : p.heading) || "",
                                    projectSettings: l,
                                    copykey: null == p ? void 0 : p.copykey
                                }), t, E && (0, tb.jsx)(DynamicFooter, {}), C && (0, tb.jsx)(ToSFooter, {})]
                            }), h && b && (0, tb.jsx)(AccordionItem, {
                                isOpen: m,
                                children: (0, tb.jsx)("div", {
                                    children: (0, tb.jsx)(HelpContent, {})
                                }, m.toString())
                            })]
                        })
                    })
                },
                DynamicAuthModal_DynamicAuthModal = ({
                    children: t,
                    onClose: r,
                    transitionProps: a,
                    projectSettings: s,
                    className: l
                }) => {
                    let {
                        showConnectedWalletProgress: c
                    } = useAuthLayoutChecks();
                    return (0, tb.jsxs)(Modal_Modal, {
                        isShown: !!(null == a ? void 0 : a.isShown),
                        children: [c && (0, tb.jsx)(ModalCard_ModalCard, {
                            borderRadius: "small",
                            children: (0, tb.jsx)(WalletProgressStepper, {})
                        }), (0, tb.jsx)(ModalCard_ModalCard, {
                            dataTestId: "dynamic-auth-modal",
                            children: (0, tb.jsx)(DynamicAuthLayout_DynamicAuthLayout, {
                                className: l,
                                projectSettings: s,
                                onClose: r,
                                hideBridgeProgressSteppers: !0,
                                children: t
                            })
                        })]
                    })
                },
                iU = (0, nt.createContext)(void 0),
                useMockContext = () => {
                    let t = (0, nt.useContext)(iU);
                    return void 0 === t ? {
                        mockedSDK: !1
                    } : t
                },
                Captcha = ({
                    handleSuccess: t
                }) => {
                    var r;
                    let {
                        projectSettings: a
                    } = useInternalDynamicContext_useInternalDynamicContext();
                    return (null === (r = null == a ? void 0 : a.security.hCaptcha) || void 0 === r ? void 0 : r.siteKey) ? (0, tb.jsx)("form", {
                        "data-testid": "captcha-form",
                        children: (0, tb.jsx)(ai, {
                            sitekey: a.security.hCaptcha.siteKey,
                            onVerify: r => t(r),
                            theme: document.body.dataset.dynamicTheme
                        })
                    }) : null
                };
            var iq = ["title", "titleId"];

            function check_connection_extends() {
                return (check_connection_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgCheckConnection = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, iq);
                return nt.createElement("svg", check_connection_extends({
                    width: 65,
                    height: 64,
                    viewBox: "0 0 65 64",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, eI || (eI = nt.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M32.5 64c17.673 0 32-14.327 32-32 0-17.673-14.327-32-32-32C14.827 0 .5 14.327.5 32c0 17.673 14.327 32 32 32Zm12.845-39.155a1.667 1.667 0 1 0-2.357-2.357L27.5 37.976l-5.488-5.488a1.667 1.667 0 1 0-2.357 2.357l6.666 6.667c.651.65 1.707.65 2.357 0l16.667-16.667Z",
                    fill: "#4779FF"
                })))
            };
            let validateUpdateRequest = (t, r, a) => {
                    if (!t.length) return "At least one field must be provided for editing";
                    if (!r) return "No signed-in user";
                    let s = getUserProfileFields({
                        projectSettingsKyc: null == a ? void 0 : a.kyc,
                        user: r
                    });
                    for (let r of t)
                        if (!s.find(({
                                name: t
                            }) => t === r)) return `Please ensure field "${r}" is enabled under "Configurations > Onboarding > Information capture" in your app's dashboard before using it with updateUserWithModal`;
                    return ""
                },
                saveUserValues = ({
                    fields: t,
                    updateUserResult: {
                        isEmailVerificationRequired: r
                    }
                }, a, s, l, c) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    if (!r) {
                        l(t);
                        return
                    }
                    a(!0, {
                        ignoreIfIsEmbeddedWidget: !1,
                        performMultiWalletChecks: !1
                    }), s("verify-email"), nr.once("emailVerificationResult", (r, a) => {
                        t.email = a, r ? l(t) : c("Failed to verify email, no fields were updated")
                    })
                }),
                useUpdateUserWithModal = t => {
                    let {
                        user: r,
                        projectSettings: a,
                        setShowAuthFlow: s
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        setView: l
                    } = ViewContext_useViewContext(), c = (0, nt.useContext)(iO);
                    if (!c) throw new td.kW("useUserUpdateRequest can only be used inside the context of DynamicContextProvider");
                    let {
                        open: d
                    } = c, u = (0, nt.useCallback)((c, u) => new Promise((m, p) => {
                        let h = validateUpdateRequest(c, r, a);
                        if (h) {
                            p(h);
                            return
                        }
                        d({
                            fields: c,
                            submitText: null == u ? void 0 : u.submitText,
                            subtitle: null == u ? void 0 : u.subtitle,
                            title: null == u ? void 0 : u.title
                        }, t).then(t => saveUserValues(t, s, l, m, p)).catch(t => {
                            if (/email already exists/gi.test(t)) throw t;
                            p(t)
                        })
                    }), [r, a, d, t, s, l]);
                    return u
                },
                useUserUpdateRequestInternal = ({
                    validationSchemaStripUnknown: t
                }) => {
                    let r = useUpdateUser(t),
                        a = useUpdateUserWithModal(r);
                    return {
                        updateUser: r,
                        updateUserWithModal: a
                    }
                },
                OnboardingUserDataForm = ({
                    children: t,
                    userProfile: r,
                    disableSubmit: a
                }) => {
                    let {
                        policiesConsentInnerComponent: s,
                        onboardingOnlyJwt: l,
                        setShowAuthFlow: c,
                        setCallback: d,
                        projectSettings: u
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        setView: m,
                        view: p
                    } = ViewContext_useViewContext(), {
                        createEmbeddedWallet: h
                    } = useEmbeddedWallet(), f = decodeJwt(l), {
                        updateUser: y
                    } = useUserUpdateRequestInternal({
                        validationSchemaStripUnknown: !1
                    }), b = (0, nt.useCallback)(t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        var r, a;
                        let {
                            isEmailVerificationRequired: s,
                            missingFields: l
                        } = yield y(t);
                        if (s && "email" === l.map(t => t.name).toString()) {
                            m("verify-email");
                            return
                        }
                        if (l.length > 0) {
                            m(p.type);
                            return
                        }
                        if (d("authSuccess"), !(null === (a = null === (r = null == u ? void 0 : u.sdk) || void 0 === r ? void 0 : r.embeddedWallets) || void 0 === a ? void 0 : a.automaticEmbeddedWalletCreation)) {
                            c(!1);
                            return
                        }
                        try {
                            yield h()
                        } catch (t) {
                            c(!1)
                        }
                    }), [y, d, m, p, h, c, u]), {
                        fetch: C,
                        formikInitialValues: E,
                        formikValidationSchema: j,
                        enforcePolicies: I,
                        onFormSubmit: O
                    } = useUserDataForm({
                        fields: (null == f ? void 0 : f.missingFields) || [],
                        onSubmit: b,
                        userProfile: r
                    }), P = [s].flat();
                    return (0, tb.jsx)(Formik, {
                        onSubmit: O,
                        initialValues: E,
                        validationSchema: j,
                        children: ({
                            errors: r,
                            touched: s,
                            values: l
                        }) => {
                            var c;
                            let d = a || I && (null == P ? void 0 : P.length) !== (null === (c = l.policiesConsentArray) || void 0 === c ? void 0 : c.length);
                            return (0, tb.jsx)(r$, {
                                className: "user-data-form__form",
                                children: (0, tb.jsxs)(tb.Fragment, {
                                    children: [t, (0, tb.jsx)(UserDataFields, {
                                        fields: null == f ? void 0 : f.missingFields,
                                        errors: r,
                                        touched: s,
                                        policiesConsentInnerComponentArray: P
                                    }), (0, tb.jsx)(Button_Button, {
                                        type: "submit",
                                        loading: C,
                                        disabled: d,
                                        buttonVariant: "primary",
                                        expanded: !0,
                                        buttonPadding: "login-screen-height",
                                        children: "Continue"
                                    })]
                                })
                            })
                        }
                    })
                };
            var iB = ["title", "titleId"];

            function pencil_alt_icon_extends() {
                return (pencil_alt_icon_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgPencilAltIcon = function(t) {
                    var r = t.title,
                        a = t.titleId,
                        s = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = function(t, r) {
                                if (null == t) return {};
                                var a, s, l = {},
                                    c = Object.keys(t);
                                for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                                return l
                            }(t, r);
                            if (Object.getOwnPropertySymbols) {
                                var c = Object.getOwnPropertySymbols(t);
                                for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                            }
                            return l
                        }(t, iB);
                    return nt.createElement("svg", pencil_alt_icon_extends({
                        width: 17,
                        height: 16,
                        viewBox: "0 0 17 16",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        "aria-labelledby": a
                    }, s), r ? nt.createElement("title", {
                        id: a
                    }, r) : null, eT || (eT = nt.createElement("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M13.638 2.862a.667.667 0 0 0-.943 0L7.167 8.391v.943h.942l5.53-5.53a.667.667 0 0 0 0-.942Zm-1.886-.943a2 2 0 1 1 2.829 2.829l-5.724 5.724a.667.667 0 0 1-.471.195H6.5A.667.667 0 0 1 5.833 10V8.115c0-.177.07-.347.196-.472l5.723-5.724ZM4.5 4a.667.667 0 0 0-.667.667V12c0 .368.299.667.667.667h7.333A.667.667 0 0 0 12.5 12V8.667a.667.667 0 0 1 1.333 0V12a2 2 0 0 1-2 2H4.5a2 2 0 0 1-2-2V4.667a2 2 0 0 1 2-2h3.333a.667.667 0 0 1 0 1.333H4.5Z",
                        fill: "currentColor"
                    })))
                },
                iV = ["title", "titleId"];

            function sign_in_with_email_extends() {
                return (sign_in_with_email_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgSignInWithEmail = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, iV);
                return nt.createElement("svg", sign_in_with_email_extends({
                    width: 64,
                    height: 64,
                    viewBox: "0 0 64 64",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, eO || (eO = nt.createElement("circle", {
                    cx: 32,
                    cy: 32,
                    r: 32,
                    fill: "currentColor"
                })), eN || (eN = nt.createElement("path", {
                    d: "M51 29.333a1.333 1.333 0 0 0-1.333 0l-17.334 9.8L15 29.333a1.333 1.333 0 0 0-2 1.16V42a4 4 0 0 0 4 4h30.667a4 4 0 0 0 4-4V30.5A1.333 1.333 0 0 0 51 29.333Z",
                    fill: "#fff"
                })), eP || (eP = nt.createElement("path", {
                    d: "M47.667 18H17a4 4 0 0 0-4 4v2.5a1.334 1.334 0 0 0 .667 1.16l18 10.167a1.333 1.333 0 0 0 1.333 0L51 25.66a1.334 1.334 0 0 0 .667-1.16V22a4 4 0 0 0-4-4Z",
                    fill: "#fff"
                })))
            };
            let useEffectOnce = t => {
                    (0, nt.useEffect)(t, [])
                },
                useOnUnmount = t => {
                    (0, nt.useEffect)(() => {
                        let r = new Date;
                        return () => {
                            new Date().getTime() - r.getTime() < 10 || t()
                        }
                    }, [])
                },
                normalizeNewValue = (t, r) => !t || r.length > 2 ? r.split("") : "" === r ? [] : t[0] === r[0] ? [r[1]] : [r[0]],
                PinInput = ({
                    autoFocus: t,
                    disabled: r,
                    inputIndex: a,
                    inputMode: s,
                    isValidated: l,
                    name: c,
                    onChange: d,
                    pattern: u,
                    type: m,
                    value: p,
                    values: h,
                    hasError: f
                }) => {
                    let y = (0, nt.useRef)(null);
                    return (0, nt.useEffect)(() => {
                        var r;
                        t && 0 === a && (null === (r = null == y ? void 0 : y.current) || void 0 === r || r.focus())
                    }, [t, a]), (0, tb.jsx)("input", {
                        ref: y,
                        className: classNames_classNames("pin-input__input", {
                            "pin-input__input--error": !!f,
                            "pin-input__input--success": !!l
                        }),
                        disabled: r,
                        name: c,
                        value: p,
                        onChange: t => {
                            let r = h[a],
                                s = t.target.value.replace(/\s+/g, ""),
                                l = [...h],
                                c = normalizeNewValue(r, s).slice(0, l.length - a),
                                u = "number" === m ? /(^$)|(\d+)/ : /.*/,
                                p = c.every(t => u.test(t)),
                                f = y.current;
                            if (p) {
                                c.length ? c.forEach((t, r) => l[a + r] = t) : l[a] = "", d(l);
                                for (let t = 0; t < c.length; t++) f = null == f ? void 0 : f.nextElementSibling;
                                c && f instanceof HTMLInputElement && f.focus()
                            }
                        },
                        onKeyDown: ({
                            key: t
                        }) => {
                            var r;
                            if ("Backspace" === t && "" === h[a] && a > 0) {
                                let t = null === (r = y.current) || void 0 === r ? void 0 : r.previousElementSibling;
                                t instanceof HTMLInputElement && t.focus()
                            }
                        },
                        "data-testid": a,
                        pattern: u,
                        inputMode: s
                    })
                },
                isComplete = t => t.every(t => t),
                PinField = ({
                    handleComplete: t,
                    initialValue: r,
                    inputMode: a,
                    isLoading: s,
                    isValidated: l,
                    pattern: c,
                    type: d = "number",
                    hasError: u,
                    onChange: m
                }) => {
                    let [p, h] = (0, nt.useState)(r), handleOnChange = r => {
                        let a = r.join("");
                        h(r), null == m || m(a), isComplete(r) && t(a)
                    };
                    return (0, tb.jsx)("div", {
                        className: "pin-field__container",
                        children: p.map((t, r) => (0, tb.jsx)(PinInput, {
                            values: p,
                            inputIndex: r,
                            value: t,
                            onChange: handleOnChange,
                            disabled: s,
                            inputMode: a,
                            isValidated: l,
                            pattern: c,
                            type: d,
                            autoFocus: !0,
                            hasError: u
                        }, `pin_input_${r}`))
                    })
                },
                useCountdown = ({
                    callback: t,
                    seconds: r
                }) => {
                    let [a, s] = (0, nt.useState)(r), l = (0, nt.useRef)(), runCountdown = () => {
                        l.current = setTimeout(() => {
                            s(t => t - 1)
                        }, 1e3)
                    };
                    return (0, nt.useEffect)(() => {
                        if (l.current) {
                            if (a <= 0) {
                                t && t();
                                return
                            }
                            return runCountdown(), () => clearTimeout(l.current)
                        }
                    }, [a, t]), {
                        remainingSeconds: a,
                        startCountdown: () => {
                            if (l.current) return s(r);
                            runCountdown()
                        },
                        stopCountdown: () => {
                            clearTimeout(l.current), l.current = void 0
                        }
                    }
                },
                RetrySendVerificationCodeSection = ({
                    retryHandler: t,
                    secondsToRetry: r = 15,
                    disabled: a = !1,
                    className: s
                }) => {
                    let {
                        t: l
                    } = useTranslation_useTranslation(), [c, d] = (0, nt.useState)(!1), {
                        remainingSeconds: u,
                        startCountdown: m
                    } = useCountdown({
                        callback: () => d(!1),
                        seconds: r
                    }), {
                        isLoading: p,
                        mutate: h
                    } = useMutation_useMutation(t, {
                        onSuccess: () => {
                            d(!0), m()
                        }
                    }), f = classNames_classNames("retry-send-verification-code-section", s);
                    return c ? (0, tb.jsxs)("div", {
                        className: f,
                        children: [(0, tb.jsx)(Typography_Typography, {
                            variant: "body_small",
                            color: "secondary",
                            copykey: "dyn_email_verification.resend_code_in",
                            children: l("dyn_email_verification.resend_code_in", {
                                remainingSeconds: u
                            })
                        }), (0, tb.jsxs)("span", {
                            className: "retry-send-verification-code-section__confirmation",
                            children: [(0, tb.jsx)(Icon_Icon, {
                                color: "success-1",
                                children: (0, tb.jsx)(SvgCheckCircle, {})
                            }), (0, tb.jsx)(Typography_Typography, {
                                variant: "body_small",
                                weight: "medium",
                                color: "primary",
                                copykey: "dyn_email_verification.code_sent",
                                children: l("dyn_email_verification.code_sent")
                            })]
                        })]
                    }) : (0, tb.jsxs)("div", {
                        className: f,
                        children: [(0, tb.jsx)(Typography_Typography, {
                            variant: "body_small",
                            weight: "medium",
                            color: "secondary",
                            copykey: "dyn_email_verification.code_not_received",
                            children: l("dyn_email_verification.code_not_received")
                        }), (0, tb.jsx)(TextButton_TextButton, {
                            className: "email-verification__text-button",
                            disabled: p || a,
                            onClick: () => h(),
                            copykey: "dyn_email_verification.resend_code",
                            children: l("dyn_email_verification.resend_code")
                        })]
                    })
                },
                sleepToShowSuccessMessage = () => (0, td._v)(1500),
                EmailVerification = () => {
                    var t, r, a, s;
                    let [l, c] = (0, nt.useState)(!0), [d, u] = (0, nt.useState)(!1), [m, p] = (0, nt.useState)(!1), h = (0, nt.useRef)(m), setIsValidated = t => {
                        p(t), h.current = t
                    }, {
                        view: f,
                        setView: y,
                        goToInitialView: b
                    } = ViewContext_useViewContext(), {
                        error: C,
                        setError: E,
                        setErrorMessage: j
                    } = ErrorContext_useErrorContext(), {
                        setExistentAccountData: I
                    } = useAccountExistsContext(), {
                        environmentId: O,
                        onboardingOnlyJwt: P,
                        handleLogOut: R,
                        authToken: F,
                        setOnboardingOnlyJwt: W,
                        setShowAuthFlow: M,
                        setCallback: D,
                        setIsVerificationInProgress: L,
                        projectSettings: U
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        email: B,
                        verificationUUID: $,
                        setVerificationUUID: K
                    } = useEmailVerificationContext(), {
                        loading: G,
                        setLoading: J
                    } = LoadingContext_useLoadingContext(), {
                        t: Y
                    } = useTranslation_useTranslation(), {
                        createEmbeddedWallet: Q
                    } = useEmbeddedWallet(), ee = (0, nt.useRef)(!0);
                    useOnUnmount(() => {
                        ee.current && nr.emit("emailVerificationResult", h.current, null != B ? B : "")
                    }), useEffectOnce(() => {
                        L(!0)
                    });
                    let et = "login-with-email-verification" === f.type,
                        {
                            verifyEmail: en
                        } = useEmailVerificationRequest(),
                        {
                            createUserProfileByJWT: er
                        } = useCreateUserProfileByJWTCallback(),
                        ea = isTurnkeyEnabled(U),
                        ei = (0, nt.useCallback)(t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            var r, a;
                            if (E(void 0), J(!0), !$ || !F && !P) {
                                yield R(), b();
                                return
                            }
                            try {
                                let {
                                    nextView: s
                                } = yield en(t, $);
                                if (P && (W(void 0), D("authSuccess")), setIsValidated(!0), "verified-and-transferred" === s && u(!0), ea && !(null === (a = null === (r = null == U ? void 0 : U.sdk) || void 0 === r ? void 0 : r.embeddedWallets) || void 0 === a ? void 0 : a.automaticEmbeddedWalletCreation)) {
                                    M(!1);
                                    return
                                }
                                try {
                                    yield Q()
                                } catch (t) {
                                    M(!1, {
                                        emitCancelAuth: !0
                                    })
                                }
                            } catch (t) {
                                if (tv.debug(t), t instanceof td.In) {
                                    y("merge-user-accounts");
                                    return
                                }
                                j(t.code)
                            } finally {
                                J(!1)
                            }
                        }), [E, J, $, F, P, R, b, en, W, D, null === (r = null === (t = null == U ? void 0 : U.sdk) || void 0 === t ? void 0 : t.embeddedWallets) || void 0 === r ? void 0 : r.automaticEmbeddedWalletCreation, Q, M, j, y]),
                        eo = (0, nt.useCallback)(t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            var r, a;
                            if (E(void 0), J(!0), !$) {
                                yield R(), b();
                                return
                            }
                            try {
                                let {
                                    jwt: s
                                } = yield signInWithEmailVerification({
                                    environmentId: O,
                                    verificationToken: t,
                                    verificationUUID: $
                                });
                                if (!s) {
                                    yield R(), b();
                                    return
                                }
                                let l = decodeJwt(s);
                                if (setIsValidated(!0), null == l ? void 0 : l.missingFields.length) {
                                    W(s), yield sleepToShowSuccessMessage(), y("collect-user-data-login-with-email");
                                    return
                                }
                                if (D("authSuccess"), yield sleepToShowSuccessMessage(), yield er(s), ea && !(null === (a = null === (r = null == U ? void 0 : U.sdk) || void 0 === r ? void 0 : r.embeddedWallets) || void 0 === a ? void 0 : a.automaticEmbeddedWalletCreation)) {
                                    M(!1);
                                    return
                                }
                                try {
                                    yield Q()
                                } catch (t) {
                                    M(!1)
                                }
                            } catch (t) {
                                t instanceof td.U8 && y("no-access"), t instanceof td.uk && (I(t.errorPayload), y("account-exists")), tv.debug(t), j(t.code)
                            } finally {
                                J(!1)
                            }
                        }), [E, J, $, R, b, O, D, er, W, y, null === (s = null === (a = null == U ? void 0 : U.sdk) || void 0 === a ? void 0 : a.embeddedWallets) || void 0 === s ? void 0 : s.automaticEmbeddedWalletCreation, Q, M, j, I]),
                        es = (0, nt.useMemo)(() => t => (0, tb.jsx)(Icon_Icon, {
                            color: "brand-primary",
                            children: (0, tb.jsx)(SvgSignInWithEmail, Object.assign({}, t))
                        }), []);
                    return (0, tb.jsxs)(tb.Fragment, {
                        children: [C && (0, tb.jsx)(ErrorContainer, {
                            withIcon: !1,
                            className: "email-verification__error-message",
                            children: C
                        }), (0, tb.jsxs)("div", {
                            className: classNames_classNames("email-verification__container", {
                                "email-verification__container--error": !!C
                            }),
                            children: [d && (0, tb.jsx)("div", {
                                className: "email-verification__transfer-message",
                                copykey: "dyn_email_verification.complete",
                                children: Y("dyn_email_verification.complete")
                            }), m ? (0, tb.jsx)("div", {
                                className: "email-verification__icon-container",
                                children: (0, tb.jsx)(IconWithStatus, {
                                    containerClassName: "email-verification__icon--verified",
                                    Icon: es,
                                    iconSize: 64,
                                    InnerIcon: SvgCheck
                                })
                            }) : (0, tb.jsx)(IconWithSpinner_IconWithSpinner, {
                                Icon: es,
                                iconSize: 96,
                                isSpinning: !0,
                                className: "email-verification__icon-with-spinner"
                            }), (0, tb.jsxs)("div", {
                                className: "email-verification__copy-text-container",
                                children: [(0, tb.jsx)(Typography_Typography, {
                                    variant: "body_normal",
                                    weight: "regular",
                                    color: "secondary",
                                    copykey: "dyn_email_verification.description",
                                    children: Y("dyn_email_verification.description")
                                }), (0, tb.jsx)(Typography_Typography, {
                                    variant: "body_normal",
                                    weight: "bold",
                                    color: "secondary",
                                    children: shortenEmail_shortenEmail(B)
                                })]
                            }), !et && !m && (0, tb.jsx)(TextButton_TextButton, {
                                onClick: () => {
                                    ee.current = !1, y("update-email")
                                },
                                className: "email-verification__text-button",
                                disabled: G,
                                copykey: "dyn_email_verification.edit_email",
                                children: Y("dyn_email_verification.edit_email")
                            }), (0, tb.jsx)(PinField, {
                                initialValue: Array(6).join(".").split("."),
                                isLoading: G,
                                handleComplete: et ? eo : ei,
                                isValidated: m,
                                inputMode: "numeric",
                                pattern: "[0-9]*",
                                hasError: !!C,
                                onChange: () => E(void 0)
                            }), l && (0, tb.jsx)(RetrySendVerificationCodeSection, {
                                className: "email-verification__retry-container",
                                retryHandler: () => _tslib_awaiter(void 0, void 0, void 0, function*() {
                                    try {
                                        if (!$ || !B) return;
                                        J(!0);
                                        let {
                                            verificationUUID: t
                                        } = yield retryEmailVerification({
                                            email: B,
                                            environmentId: O,
                                            verificationUUID: $
                                        });
                                        K(t), E(void 0)
                                    } catch (t) {
                                        tv.debug(t), j(t.code), "too_many_email_verification_attempts" === t.code && c(!1), "invalid_email_verification" === t.code && b()
                                    } finally {
                                        J(!1)
                                    }
                                }),
                                secondsToRetry: 15
                            }), !et && (0, tb.jsx)(TextButton_TextButton, {
                                className: "email-verification__log-out",
                                onClick: R,
                                copykey: "dyn_email_verification.log_out_button",
                                children: Y("dyn_email_verification.log_out_button")
                            })]
                        })]
                    })
                },
                iH = {
                    error: "error-1",
                    notice: "brand-primary",
                    success: "green-1"
                },
                ModalHeaderBanner = ({
                    messageKey: t,
                    type: r = "error",
                    disableTruncate: a = !1
                }) => {
                    let {
                        t: s
                    } = useTranslation_useTranslation();
                    return (0, tb.jsx)(AnimatePresence, {
                        animationComponent: (0, tb.jsx)(VerticalDrawerTransition, {
                            style: {
                                width: "100%"
                            }
                        }),
                        children: !!t && (0, tb.jsx)("div", {
                            className: classNames_classNames("modal-header-banner", {
                                "modal-header-banner__error": "error" === r,
                                "modal-header-banner__notice": "notice" === r,
                                "modal-header-banner__success": "success" === r
                            }),
                            children: (0, tb.jsx)(Typography_Typography, {
                                variant: "body_small",
                                color: iH[r],
                                truncate: !1 === a,
                                copykey: t,
                                children: s(t || "")
                            })
                        })
                    })
                },
                OTPVerificationView_OTPVerificationView = ({
                    onClickBack: t,
                    onClickEditEmail: r,
                    isLoading: a,
                    email: s,
                    onPinComplete: l,
                    isValid: c,
                    error: d,
                    retryHandler: u,
                    onPinChange: m,
                    successBannerTextKey: p
                }) => {
                    let {
                        t: h
                    } = useTranslation_useTranslation(), f = t && (0, tb.jsx)(rk, {
                        type: "button",
                        onClick: t,
                        "data-testid": "back-button",
                        children: (0, tb.jsx)(SvgChevronLeft, {})
                    }), y = (0, nt.useMemo)(() => t => (0, tb.jsx)(Icon_Icon, {
                        color: "brand-primary",
                        children: (0, tb.jsx)(SvgSignInWithEmail, Object.assign({}, t, {
                            "data-testid": "sign-in-with-email-icon"
                        }))
                    }), []), titleCopyKey = () => c ? "dyn_otp_verification.verification_succeeded" : "dyn_otp_verification.confirm_code";
                    return (0, tb.jsxs)(tb.Fragment, {
                        children: [(0, tb.jsx)(ModalHeader, {
                            alignContent: "bottom",
                            leading: t && f,
                            children: (0, tb.jsx)("div", {
                                className: "otp-verification-view__status-header",
                                children: (0, tb.jsx)(Typography_Typography, {
                                    weight: "medium",
                                    variant: "title",
                                    color: "primary",
                                    className: "otp-verification-view__title",
                                    copykey: titleCopyKey(),
                                    children: h(titleCopyKey())
                                })
                            })
                        }), p && (0, tb.jsx)(ModalHeaderBanner, {
                            type: "notice",
                            messageKey: p,
                            disableTruncate: !0
                        }), (0, tb.jsx)(ModalHeaderBanner, {
                            type: "error",
                            messageKey: null == d ? void 0 : d.message
                        }), (0, tb.jsxs)("div", {
                            className: classNames_classNames("otp-verification-view", {
                                "otp-verification-view--message": !!(p || d)
                            }),
                            children: [c && (0, tb.jsx)(IconWithStatus, {
                                Icon: y,
                                iconSize: 96,
                                InnerIcon: SvgCheck
                            }), !c && (0, tb.jsx)(IconWithSpinner_IconWithSpinner, {
                                Icon: y,
                                iconSize: 96,
                                isSpinning: a,
                                className: "otp-verification-view__icon-with-spinner",
                                treatAsFunctionComponent: !0
                            }), (0, tb.jsxs)("div", {
                                className: "otp-verification-view__body",
                                children: [c && (0, tb.jsx)(Typography_Typography, {
                                    variant: "body_normal",
                                    weight: "regular",
                                    color: "secondary",
                                    copykey: "dyn_otp_verification.hang_tight",
                                    children: h("dyn_otp_verification.hang_tight")
                                }), !c && (0, tb.jsxs)(tb.Fragment, {
                                    children: [(0, tb.jsx)(Typography_Typography, {
                                        variant: "body_normal",
                                        weight: "regular",
                                        color: "secondary",
                                        copykey: "dyn_otp_verification.code_sent",
                                        children: h("dyn_otp_verification.code_sent")
                                    }), (0, tb.jsxs)("div", {
                                        className: "otp-verification-view__email-container",
                                        children: [(0, tb.jsx)(Typography_Typography, {
                                            variant: "body_normal",
                                            weight: "bold",
                                            color: "secondary",
                                            children: shortenEmail_shortenEmail(s)
                                        }), r && (0, tb.jsx)(rk, {
                                            onClick: r,
                                            "data-testid": "otp-verification-view__edit-button",
                                            children: (0, tb.jsx)(Icon_Icon, {
                                                color: "text-tertiary",
                                                children: (0, tb.jsx)(SvgPencilAltIcon, {})
                                            })
                                        })]
                                    })]
                                })]
                            }), (0, tb.jsx)(PinField, {
                                initialValue: Array(6).join(".").split("."),
                                isLoading: a,
                                handleComplete: l,
                                isValidated: c,
                                inputMode: "numeric",
                                pattern: "[0-9]*",
                                hasError: !!d,
                                onChange: m
                            }), (0, tb.jsx)(RetrySendVerificationCodeSection, {
                                className: "otp-verification-view__retry-container",
                                retryHandler: u
                            })]
                        })]
                    })
                },
                useWalletConnectorNetwork = t => {
                    let [r, a] = (0, nt.useState)();
                    return usePromise_usePromise(() => null == t ? void 0 : t.getNetwork(), {
                        onResolve: t => a(t)
                    }), useWalletConnectorEvent(t || void 0, "chainChange", ({
                        chain: t
                    }) => a(t)), useWalletConnectorEvent(t || void 0, "disconnect", () => {
                        (null == t ? void 0 : t.key) === "argentx" && t.getNetwork().then(a)
                    }), {
                        network: r
                    }
                },
                UserAddress = ({
                    userProfile: t,
                    walletConnector: r
                }) => {
                    var a;
                    let s = null === (a = null == t ? void 0 : t.verifiedCredentials.find(r => r.id === t.lastVerifiedCredentialId)) || void 0 === a ? void 0 : a.address,
                        l = useFetchNameService_useFetchNameService(s),
                        {
                            data: c
                        } = usePromise_usePromise(() => null == r ? void 0 : r.fetchPublicAddress(), {
                            enabled: !t && !!r
                        });
                    return (0, tb.jsxs)("div", {
                        className: "user-address__container",
                        children: [(0, tb.jsx)(StatusDot, {
                            variant: "green",
                            containerClassName: "user-address__status-dot"
                        }), (null == l ? void 0 : l.name) ? (0, tb.jsxs)(tb.Fragment, {
                            children: [(0, tb.jsx)(Typography_Typography, {
                                variant: "numbers_big",
                                color: "primary",
                                className: "user-address",
                                children: l.name
                            }), (0, tb.jsx)("div", {
                                className: "dynamic-widget-wallet-header__seperator"
                            }), (0, tb.jsx)(Typography_Typography, {
                                variant: "numbers_medium",
                                color: "secondary",
                                className: "user-address",
                                children: shortenWalletAddress_shortenWalletAddress(s, 3, 3)
                            })]
                        }) : (0, tb.jsx)(Typography_Typography, {
                            variant: "numbers_big",
                            color: "primary",
                            className: "user-address",
                            children: shortenWalletAddress_shortenWalletAddress(s || c, 4, 4)
                        })]
                    })
                },
                SelectNetworkButton = ({
                    networkId: t,
                    networkName: r,
                    networkIconUrl: a,
                    onClick: s
                }) => {
                    let l = (0, tb.jsx)("img", {
                        alt: r,
                        className: "select-network-button__icon",
                        src: a
                    });
                    return (0, tb.jsxs)(Button_Button, {
                        dataTestId: "SelectNetworkButton",
                        onClick: () => s(t),
                        expanded: !0,
                        className: "select-network-button",
                        children: ["Select", l, r, " network"]
                    })
                },
                i$ = {
                    brave: t_,
                    chrome: tk,
                    edge: tx,
                    firefox: tC,
                    safari: tE
                },
                getBrowserIcon_getBrowserIcon = t => i$[t],
                WalletHelpLink_capitalize = t => t[0].toUpperCase() + t.slice(1),
                WalletHelpLink_WalletHelpLink = ({
                    name: t,
                    link: r,
                    Icon: a
                }) => {
                    let {
                        t: s
                    } = useTranslation_useTranslation();
                    return (0, tb.jsx)("div", {
                        className: "wallet-help-link",
                        children: (0, tb.jsxs)("a", {
                            className: "wallet-help-link__anchor",
                            href: r,
                            target: "_blank",
                            rel: "noreferrer",
                            children: [(0, tb.jsx)(a, {
                                style: {
                                    height: "1.5rem",
                                    width: "1.5rem"
                                }
                            }), (0, tb.jsx)(Typography_Typography, {
                                variant: "button_primary",
                                weight: "medium",
                                copykey: "dyn_qr_code.wallet_not_installed.browser_install",
                                children: s("dyn_qr_code.wallet_not_installed.browser_install", {
                                    browser: WalletHelpLink_capitalize(t)
                                })
                            })]
                        })
                    })
                },
                PendingSignatureView = () => {
                    let [t, r] = (0, nt.useState)(!1), {
                        selectedWalletConnector: a
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        signAlreadyConnectedUser: s
                    } = useConnectAndSignSplitSteps_useConnectAndSignSplitSteps(), {
                        t: l
                    } = useTranslation_useTranslation(), c = isHardwareWalletEnabled(a);
                    if (!a) return null;
                    let d = (0, tb.jsx)(tc.o, {
                            walletKey: a.key,
                            style: {
                                height: pixelToRem_pixelToRem(96 * a9),
                                width: pixelToRem_pixelToRem(96 * a9)
                            }
                        }),
                        u = l(c ? "dyn_pending_signature.phantom_ledger_sign" : "dyn_pending_signature.regular_sign_description");
                    return (0, tb.jsxs)("div", {
                        className: "pending-signature__container",
                        "data-testid": "pending-signature-view",
                        children: [(0, tb.jsx)(IconWithSpinner_IconWithSpinner, {
                            Icon: d,
                            iconSize: 96,
                            isSpinning: !0,
                            indicator: "connected",
                            className: "pending-signature__icon-with-spinner"
                        }), (0, tb.jsx)(Typography_Typography, {
                            variant: "body_normal",
                            weight: "regular",
                            className: classNames_classNames("pending-signature__copy"),
                            copykey: c ? "dyn_pending_signature.phantom_ledger_sign" : "dyn_pending_signature.regular_sign_description",
                            children: u
                        }), c && (0, tb.jsxs)(Typography_Typography, {
                            variant: "body_small",
                            weight: "regular",
                            className: classNames_classNames("pending-signature__copy", "pending-signature__copy--mini"),
                            copykey: "dyn_pending_signature.phantom_ledger_warning",
                            children: [(0, tb.jsx)("strong", {
                                children: l("dyn_pending_signature.note")
                            }), l("dyn_pending_signature.phantom_ledger_warning")]
                        }), requiresTwoStepAuthentication(a) && (0, tb.jsx)(Button_Button, {
                            buttonClassName: "pending-signature__button",
                            onClick: () => _tslib_awaiter(void 0, void 0, void 0, function*() {
                                try {
                                    r(!0), yield s({
                                        walletConnector: a
                                    })
                                } catch (t) {
                                    tv.error(t)
                                } finally {
                                    r(!1)
                                }
                            }),
                            loading: t,
                            buttonVariant: "primary",
                            buttonPadding: "large",
                            expanded: !0,
                            typographyProps: {
                                variant: "button_primary",
                                weight: "medium"
                            },
                            copykey: "dyn_pending_signature.click_to_sign",
                            children: l("dyn_pending_signature.click_to_sign")
                        })]
                    })
                },
                useTimeout = (t, r) => {
                    let a = (0, nt.useRef)(t);
                    ah(() => {
                        a.current = t
                    }, [t]), (0, nt.useEffect)(() => {
                        if (!r && 0 !== r) return;
                        let t = setTimeout(() => a.current(), r);
                        return () => clearTimeout(t)
                    }, [r])
                },
                generateMatrix = (t, r) => {
                    let a = Array.prototype.slice.call(r9.create(t, {
                            errorCorrectionLevel: r
                        }).modules.data, 0),
                        s = Math.sqrt(a.length);
                    return a.reduce((t, r, a) => (a % s == 0 ? t.push([r]) : t[t.length - 1].push(r)) && t, [])
                },
                QRCode_QRCode = ({
                    ecl: t = "M",
                    Icon: r,
                    logoMargin: a = 0,
                    logoSize: s = 40,
                    size: l = 250,
                    value: c,
                    accentColor: d,
                    walletKey: u,
                    showQrCodeImage: m
                }) => {
                    let {
                        data: p
                    } = usePromise_usePromise(() => r9.toDataURL(c)), h = (0, nt.useMemo)(() => {
                        let r = [],
                            a = generateMatrix(c || "QR Code value", t),
                            u = l / a.length;
                        [{
                            x: 0,
                            y: 0
                        }, {
                            x: 1,
                            y: 0
                        }, {
                            x: 0,
                            y: 1
                        }].forEach(({
                            x: t,
                            y: s
                        }) => {
                            let l = (a.length - 7) * u * t,
                                c = (a.length - 7) * u * s;
                            for (let a = 0; a < 3; a++) r.push((0, tb.jsx)("rect", {
                                fill: a % 2 != 0 ? "currentColor" : d,
                                height: u * (7 - 2 * a),
                                rx: 0 === a ? 10 : 1 === a ? 7 : 20,
                                ry: 0 === a ? 10 : 1 === a ? 7 : 20,
                                width: u * (7 - 2 * a),
                                x: l + u * a,
                                y: c + u * a
                            }, `corner-square-${t}-${s}-${a}`))
                        });
                        let m = Math.floor(1.5 * s / u),
                            p = a.length / 2 - m / 2,
                            h = a.length / 2 + m / 2 - 1;
                        for (let t = 0; t < a.length; t++)
                            for (let s = 0; s < a[t].length; s++) !a[t][s] || t < 7 && s < 7 || t > a.length - 8 && s < 7 || t < 7 && s > a.length - 8 || t > p && t < h && s > p && s < h || r.push((0, tb.jsx)("circle", {
                                className: "qrcode__dot-circle",
                                cx: t * u + u / 2,
                                cy: s * u + u / 2,
                                fill: Math.random() > .9 ? d : "currentColor",
                                r: u / 2.25
                            }, `dot-${t}-${s}`));
                        return r
                    }, [t, s, l, c, d]), f = l / 2 - s / 2 - a, y = !u || ["coinbase", "walletconnect"].includes(u) ? void 0 : "walletConnect";
                    return (0, tb.jsx)("div", {
                        className: "qrcode__container",
                        children: (0, tb.jsx)("div", {
                            className: "qrcode",
                            children: m ? (0, tb.jsx)("img", {
                                "data-testid": "qr-code-image",
                                src: p,
                                alt: ""
                            }) : (0, tb.jsxs)(tb.Fragment, {
                                children: [(0, tb.jsxs)("svg", {
                                    height: "100%",
                                    width: "100%",
                                    viewBox: `0 0 ${l} ${l}`,
                                    "data-testid": "qr-code",
                                    children: [(0, tb.jsx)("defs", {
                                        children: (0, tb.jsx)("clipPath", {
                                            id: "clip-logo",
                                            children: (0, tb.jsx)("rect", {
                                                height: s,
                                                width: s,
                                                x: f,
                                                y: f,
                                                rx: 7,
                                                ry: 7
                                            })
                                        })
                                    }), (0, tb.jsx)("rect", {
                                        fill: "none",
                                        height: l,
                                        width: l
                                    }), h]
                                }), (0, tb.jsx)(IconWithSpinner_IconWithSpinner, {
                                    Icon: r,
                                    iconSize: s,
                                    isSpinning: !0,
                                    className: "qrcode__icon",
                                    indicator: y
                                })]
                            })
                        })
                    })
                },
                MockedQrCode = () => {
                    let {
                        mockedSDK: t
                    } = useMockContext(), {
                        theme: r
                    } = ThemeContext_useThemeContext();
                    if (!t) return null;
                    let a = "dark" === r.theme.name ? "#FFF" : "#1648F9";
                    return (0, tb.jsx)(QRCode_QRCode, {
                        Icon: (0, tb.jsx)(tR, {}),
                        logoSize: 50,
                        accentColor: a,
                        value: "hello world!".repeat(20),
                        walletKey: "coinbase"
                    })
                };
            var iK = ["title", "titleId"];

            function externalLink_extends() {
                return (externalLink_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var externalLink_SvgExternalLink = function(t) {
                    var r = t.title,
                        a = t.titleId,
                        s = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = function(t, r) {
                                if (null == t) return {};
                                var a, s, l = {},
                                    c = Object.keys(t);
                                for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                                return l
                            }(t, r);
                            if (Object.getOwnPropertySymbols) {
                                var c = Object.getOwnPropertySymbols(t);
                                for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                            }
                            return l
                        }(t, iK);
                    return nt.createElement("svg", externalLink_extends({
                        width: 12,
                        height: 12,
                        viewBox: "0 0 12 12",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        "aria-labelledby": a
                    }, s), r ? nt.createElement("title", {
                        id: a
                    }, r) : null, eA || (eA = nt.createElement("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M7.333 1.333a.667.667 0 1 1 0-1.333h4c.368 0 .667.298.667.667v4a.667.667 0 0 1-1.333 0v-2.39L5.138 7.804a.667.667 0 1 1-.943-.943l5.529-5.529h-2.39ZM2 2.667a.667.667 0 0 0-.667.666V10c0 .368.299.667.667.667h6.667A.667.667 0 0 0 9.333 10V7.333a.667.667 0 0 1 1.334 0V10a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3.333a2 2 0 0 1 2-2h2.667a.667.667 0 0 1 0 1.334H2Z",
                        fill: "currentColor"
                    })))
                },
                iG = ["title", "titleId"];

            function link_extends() {
                return (link_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var link_SvgLink = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, iG);
                return nt.createElement("svg", link_extends({
                    width: 17,
                    height: 16,
                    viewBox: "0 0 17 16",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, eR || (eR = nt.createElement("path", {
                    d: "M11.833 4.667H9.167V6h2.666c1.1 0 2 .9 2 2s-.9 2-2 2H9.167v1.333h2.666a3.335 3.335 0 0 0 0-6.666Zm-4 5.333H5.167c-1.1 0-2-.9-2-2s.9-2 2-2h2.666V4.667H5.167a3.335 3.335 0 0 0 0 6.666h2.666V10Zm-2-2.667h5.334v1.334H5.833V7.333Z",
                    fill: "currentColor"
                })))
            };
            let QrCodeContainer = ({
                    accentColor: t,
                    walletKey: r,
                    walletName: a,
                    qrcodeValue: s,
                    Icon: l,
                    showCopyToClipboardButton: c = !1,
                    desktopUri: d,
                    showQrCodeMessage: u,
                    showQrCodeImage: m
                }) => {
                    let {
                        t: p
                    } = useTranslation_useTranslation();
                    return (0, tb.jsxs)("div", {
                        className: classNames_classNames("qrcode-container__container", {
                            "qrcode-container__container--message": u
                        }),
                        children: [(0, tb.jsxs)("div", {
                            className: "qrcode-container__top",
                            children: [s ? (0, tb.jsx)(QRCode_QRCode, {
                                Icon: l,
                                accentColor: t,
                                value: s,
                                logoSize: 50,
                                walletKey: r,
                                showQrCodeImage: m
                            }) : (0, tb.jsx)("div", {}), (0, tb.jsx)(MockedQrCode, {}), (c && s || d) && (0, tb.jsxs)("div", {
                                className: "button-container",
                                children: [c && s && (0, tb.jsx)(CopyButton_CopyButton, {
                                    textToCopy: s,
                                    copykey: "dyn_qr_code.copy_button",
                                    children: (0, tb.jsxs)("div", {
                                        className: "button__content",
                                        children: [(0, tb.jsx)(Icon_Icon, {
                                            size: "small",
                                            color: "text-tertiary",
                                            children: (0, tb.jsx)(link_SvgLink, {})
                                        }), p("dyn_qr_code.copy_button")]
                                    })
                                }), d && (0, tb.jsxs)(TextButton_TextButton, {
                                    className: "desktop-button",
                                    onClick: () => window.open(d),
                                    copykey: "dyn_qr_code.open_button",
                                    children: [(0, tb.jsx)(Icon_Icon, {
                                        size: "xsmall",
                                        color: "text-tertiary",
                                        children: (0, tb.jsx)(externalLink_SvgExternalLink, {})
                                    }), p("dyn_qr_code.open_button", {
                                        wallet: a
                                    })]
                                })]
                            })]
                        }), (0, tb.jsx)(Typography_Typography, {
                            variant: "body_normal",
                            color: "secondary",
                            weight: "regular",
                            className: "qrcode-container__content",
                            copykey: "dyn_qr_code.scan_title",
                            children: p("dyn_qr_code.scan_title")
                        })]
                    })
                },
                iZ = {
                    discord: tz,
                    helpdesk: t$,
                    slack: tZ,
                    twitter: tX
                },
                getSocialNetworkIcon = t => iZ[t],
                useNoAccessText = () => {
                    let {
                        socialMediaLinkText: t,
                        socialMediaUrl: r,
                        accessDeniedMessagePrimary: a,
                        accessDeniedMessageSecondary: s
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        view: l
                    } = ViewContext_useViewContext(), {
                        t: c
                    } = useTranslation_useTranslation(), d = "chainalysis-blocked-wallet" === l.type, u = "gate-blocked-wallet" === l.type, m = "no-access" === l.type;
                    return {
                        _socialMediaLinkText: d ? c(iJ.chainalysis._socialMediaLinkText) : u ? void 0 : t,
                        _socialMediaUrl: d ? c(iJ.chainalysis._socialMediaUrl) : u ? void 0 : r,
                        buttonTitle: c(d ? iJ.chainalysis.buttonTitle : u ? iJ.gate.buttonTitle : iJ.default.buttonTitle),
                        isAccessListView: m,
                        isChainalysisView: d,
                        isGateBlockedView: u,
                        subtitle: d ? c(iJ.chainalysis.subtitle) : u ? c(iJ.gate.subtitle) : s || c(iJ.default.subtitle),
                        title: d ? c(iJ.chainalysis.title) : u ? c(iJ.gate.title) : a || c(iJ.default.title)
                    }
                },
                iJ = {
                    chainalysis: {
                        _socialMediaLinkText: "dyn_no_access.chainalysis.social_media_link_text",
                        _socialMediaUrl: "dyn_no_access.chainalysis.social_media_link_url",
                        buttonTitle: "dyn_no_access.chainalysis.button_text",
                        subtitle: "dyn_no_access.chainalysis.description",
                        title: "dyn_no_access.chainalysis.title"
                    },
                    default: {
                        buttonTitle: "dyn_no_access.default.button_text",
                        subtitle: "dyn_no_access.default.description",
                        title: "dyn_no_access.default.title"
                    },
                    gate: {
                        _socialMediaLinkText: void 0,
                        _socialMediaUrl: void 0,
                        buttonTitle: "dyn_no_access.gate.button_text",
                        subtitle: "dyn_no_access.gate.description",
                        title: "dyn_no_access.gate.title"
                    }
                },
                NoAccess = () => {
                    let {
                        deniedAddress: t,
                        setDeniedAddress: r,
                        setDeniedOauthProvider: a
                    } = useAccessDeniedContext(), {
                        t: s
                    } = useTranslation_useTranslation(), {
                        selectedWalletConnector: l,
                        socialMediaIconUrl: c,
                        notInTheListImageUrl: d,
                        onboardingOnlyJwt: u,
                        accessDeniedButton: m
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        email: p
                    } = useEmailVerificationContext(), {
                        goToInitialView: h
                    } = ViewContext_useViewContext(), {
                        _socialMediaLinkText: f,
                        _socialMediaUrl: y,
                        isAccessListView: b,
                        isGateBlockedView: C,
                        subtitle: E,
                        title: j,
                        buttonTitle: I
                    } = useNoAccessText(), O = c && "string" != typeof c ? getSocialNetworkIcon(Object.keys(c)[0]) : null, P = (0, nt.useMemo)(() => l ? (0, tb.jsx)(AuthProviderIcon_AuthProviderIcon, {
                        jwt: u
                    }) : (0, tb.jsx)(IconWithStatus, {
                        containerClassName: "wallet-no-access__icon--verified",
                        Icon: tF,
                        iconSize: 50,
                        InnerIcon: SvgError,
                        variant: "red"
                    }), [u, l]), R = shortenWalletAddress_shortenWalletAddress(t, 6, 4), F = (null == m ? void 0 : m.title) || I, W = (null == m ? void 0 : m.action) || (() => {
                        h(), r(""), a(void 0), null == l || l.endSession()
                    }), M = O && (b || C);
                    return (0, tb.jsxs)("div", {
                        className: "wallet-no-access__container",
                        children: [!!d && (b || C) && (0, tb.jsx)("img", {
                            src: d,
                            alt: s("dyn_no_access.not_in_the_list_image_alt"),
                            className: "wallet-no-access__image",
                            copykey: "dyn_no_access.not_in_the_list_image_alt"
                        }), (0, tb.jsxs)("div", {
                            className: "wallet-no-access__main",
                            children: [(0, tb.jsxs)("div", {
                                className: "wallet-no-access__user-info-container",
                                children: [P, (0, tb.jsxs)("div", {
                                    "data-testid": "walletAddress",
                                    className: "wallet-no-access__wallet-address-container",
                                    children: [l && (0, tb.jsx)(StatusDot, {
                                        variant: "red",
                                        containerClassName: "user-info__status-dot"
                                    }), (0, tb.jsx)(Typography_Typography, {
                                        variant: "body_normal",
                                        color: "primary",
                                        weight: "medium",
                                        className: "wallet-no-access__wallet-address",
                                        children: null != p ? p : R
                                    })]
                                })]
                            }), (0, tb.jsxs)("div", {
                                className: "wallet-no-access__content",
                                children: [(0, tb.jsx)(Typography_Typography, {
                                    variant: "title",
                                    color: "primary",
                                    className: "wallet-no-access__content--primary",
                                    children: j
                                }), (0, tb.jsx)(Typography_Typography, {
                                    variant: "body_normal",
                                    weight: "regular",
                                    color: "secondary",
                                    className: "wallet-no-access__content--secondary",
                                    children: E
                                })]
                            }), (0, tb.jsx)(Button_Button, {
                                onClick: W,
                                className: "wallet-no-access__button--primary",
                                expanded: !0,
                                buttonPadding: "large",
                                children: F
                            }), y && f && (0, tb.jsxs)("div", {
                                className: "wallet-no-access__social-info-container",
                                children: [(0, tb.jsxs)("a", {
                                    href: y,
                                    className: "wallet-no-access__waitlist-link",
                                    children: [(0, tb.jsx)(Typography_Typography, {
                                        variant: "button_primary",
                                        color: "primary",
                                        children: f
                                    }), M && (0, tb.jsx)(O, {
                                        className: "wallet-no-access__social-icon",
                                        style: {
                                            height: pixelToRem_pixelToRem(24),
                                            width: pixelToRem_pixelToRem(24)
                                        }
                                    })]
                                }), "string" == typeof c && (0, tb.jsx)("img", {
                                    alt: "social media",
                                    src: c,
                                    style: {
                                        height: "1.5rem",
                                        width: "1.5rem"
                                    }
                                })]
                            })]
                        })]
                    })
                },
                Toggle = t => {
                    var {
                        icon: r,
                        variant: a = "primary",
                        className: s
                    } = t, l = _tslib_rest(t, ["icon", "variant", "className"]);
                    return (0, tb.jsxs)("label", {
                        className: classNames_classNames("toggle", s),
                        children: [(0, tb.jsx)("input", Object.assign({
                            type: "checkbox",
                            className: "toggle--input"
                        }, l)), (0, tb.jsx)("div", {
                            className: classNames_classNames("toggle--content", `toggle--content__variant-${a}`),
                            children: (0, tb.jsx)("div", {
                                className: "toggle--knob",
                                children: r
                            })
                        })]
                    })
                },
                HardwareWalletToggle = ({
                    connectors: t,
                    label: r,
                    copykey: a
                }) => {
                    let s = (0, tb.jsx)(Toggle, {
                        defaultChecked: t.some(t => t.isHardwareWalletEnabled),
                        onChange: r => {
                            t.forEach(t => {
                                t.isHardwareWalletEnabled = r.target.checked
                            })
                        },
                        "data-testid": "hardware-wallet-toggle",
                        icon: (0, tb.jsx)(Icon_Icon, {
                            size: "small",
                            children: (0, tb.jsx)(SvgCheck, {})
                        })
                    });
                    return (0, tb.jsx)(ListTile, {
                        disabled: !0,
                        trailing: s,
                        children: (0, tb.jsx)("span", {
                            copykey: a,
                            children: r
                        })
                    })
                },
                WalletGroupViewLayout = ({
                    icon: t,
                    title: r,
                    titleCopyKey: a,
                    children: s
                }) => (0, tb.jsxs)("div", {
                    className: "wallet-group-view-layout__container",
                    children: [(0, tb.jsx)(IconWithSpinner_IconWithSpinner, {
                        className: "wallet-group-view-layout__icon",
                        Icon: t,
                        iconSize: 96
                    }), (0, tb.jsxs)("div", {
                        className: "wallet-group-view-layout__body",
                        children: [(0, tb.jsx)(Typography_Typography, {
                            className: "wallet-group-view-layout__title",
                            as: "p",
                            color: "secondary",
                            variant: "body_normal",
                            copykey: a,
                            children: r
                        }), (0, tb.jsx)("div", {
                            className: "wallet-group-view-layout__list",
                            children: s
                        })]
                    })]
                }),
                WalletGroupItem = ({
                    wallet: t,
                    onClick: r
                }) => {
                    let [a] = t.walletConnector.supportedChains, {
                        walletBook: s
                    } = (0, tc.yw)(), l = (0, tl.bt)(a), c = t.group ? (0, tc.oH)(s, t.group, t.key) : void 0, d = getWalletListItemLabel({
                        wallet: t
                    }), u = (0, tb.jsx)(ListTileAnimatedTrailing, {
                        hoverElement: (0, tb.jsx)(Icon_Icon, {
                            color: "text-tertiary",
                            size: "mini",
                            children: (0, tb.jsx)(SvgStroke, {})
                        }),
                        children: d && (0, tb.jsx)(Badge, {
                            dot: !0,
                            text: (0, tb.jsx)(Typography_Typography, {
                                variant: "body_small",
                                children: d
                            })
                        })
                    }), m = (0, nt.useMemo)(() => {
                        let r = {
                            height: pixelToRem_pixelToRem(28),
                            width: pixelToRem_pixelToRem(28)
                        };
                        if (null == c ? void 0 : c.brand) return (0, tb.jsx)(tc.Vr, {
                            brand: c.brand,
                            walletKey: t.key,
                            style: r
                        });
                        let s = getChainIcon_getChainIcon(a);
                        return (0, tb.jsx)(s, {
                            style: r
                        })
                    }, [a, t.key, c]), p = (null == c ? void 0 : c.name) || (null == l ? void 0 : l.displayName) || t.name;
                    return (0, tb.jsx)(ListTile, {
                        className: "chain-card",
                        onClick: r,
                        leading: m,
                        trailing: u,
                        children: p
                    }, t.key)
                },
                BridgeWelcomeLayout = ({
                    body: t,
                    chains: r = [],
                    onClickAction: a,
                    onClickClose: s,
                    title: l,
                    actionButtonText: c,
                    copykey: d
                }) => {
                    let u = s && (0, tb.jsx)(rk, {
                        type: "button",
                        onClick: s,
                        "data-testid": "close-button",
                        children: (0, tb.jsx)(close_SvgClose, {})
                    });
                    return (0, tb.jsxs)("div", {
                        className: "bridge-welcome-layout",
                        children: [(0, tb.jsx)(ModalHeader, {
                            trailing: u,
                            alignContent: "bottom",
                            children: (0, tb.jsx)("div", {
                                className: "bridge-welcome-layout__chain-icon-group",
                                children: [...r].reverse().map((t, r) => (0, tb.jsx)("div", {
                                    className: "bridge-welcome-layout__chain-icon",
                                    style: {
                                        zIndex: r
                                    },
                                    children: t.icon
                                }, t.id))
                            })
                        }), (0, tb.jsxs)("div", {
                            className: "bridge-welcome-layout__body",
                            children: [(0, tb.jsxs)("div", {
                                className: "bridge-welcome-layout__message-container",
                                children: [(0, tb.jsx)(Typography_Typography, {
                                    variant: "title",
                                    color: "primary",
                                    copykey: d,
                                    children: l
                                }), (0, tb.jsx)(Typography_Typography, {
                                    variant: "body_normal",
                                    color: "secondary",
                                    children: t
                                })]
                            }), (0, tb.jsx)("div", {
                                children: (0, tb.jsx)(Stepper, {
                                    children: r.map(t => (0, tb.jsx)(Step, {
                                        children: t.name
                                    }, t.id))
                                })
                            }), (0, tb.jsx)(Button_Button, {
                                buttonVariant: "primary",
                                buttonPadding: "large",
                                onClick: a,
                                children: c
                            })]
                        })]
                    })
                },
                isChainInfoDefined = t => void 0 !== t,
                ConnectedWalletsListLayout = ({
                    title: t,
                    body: r,
                    onClickBack: a,
                    onClickClose: s,
                    onClickAction: l,
                    actionButtonText: c = "Continue",
                    children: d,
                    copykey: u
                }) => {
                    let m = s && (0, tb.jsx)(rk, {
                            type: "button",
                            onClick: s,
                            "data-testid": "close-button",
                            children: (0, tb.jsx)(close_SvgClose, {})
                        }),
                        p = a && (0, tb.jsx)(rk, {
                            type: "button",
                            onClick: a,
                            "data-testid": "back-button",
                            children: (0, tb.jsx)(SvgChevronLeft, {})
                        });
                    return (0, tb.jsxs)("div", {
                        className: "connected-wallets-list-layout",
                        children: [(0, tb.jsx)(ModalHeader, {
                            leading: p,
                            trailing: m,
                            children: (0, tb.jsx)(Typography_Typography, {
                                variant: "title",
                                color: "primary",
                                copykey: u,
                                children: t
                            })
                        }), (0, tb.jsxs)("div", {
                            className: "connected-wallets-list-layout__body",
                            children: [(0, tb.jsx)(Typography_Typography, {
                                variant: "body_normal",
                                color: "secondary",
                                className: "connected-wallets-list-layout__body__text",
                                children: r
                            }), d, (0, tb.jsx)(Button_Button, {
                                buttonPadding: "large",
                                buttonVariant: "primary",
                                onClick: l,
                                children: c
                            })]
                        })]
                    })
                },
                BridgeNextWalletToConnectLayout = ({
                    chainName: t,
                    chainIcon: r,
                    onClickAction: a,
                    onClickClose: s
                }) => {
                    let l = s && (0, tb.jsx)(rk, {
                        type: "button",
                        onClick: s,
                        "data-testid": "close-button",
                        children: (0, tb.jsx)(close_SvgClose, {})
                    });
                    return (0, tb.jsxs)("div", {
                        className: "bridge-next-wallet-to-connect-layout",
                        children: [(0, tb.jsx)(ModalHeader, {
                            trailing: l,
                            alignContent: "bottom",
                            children: r && (0, tb.jsx)("div", {
                                className: "bridge-next-wallet-to-connect-layout__chain-icon",
                                children: r
                            })
                        }), (0, tb.jsxs)("div", {
                            className: "bridge-next-wallet-to-connect-layout__body",
                            children: [(0, tb.jsxs)(Typography_Typography, {
                                color: "primary",
                                variant: "title",
                                children: ["Nice! Now let’s connect your ", t, " wallet"]
                            }), (0, tb.jsx)(Button_Button, {
                                expanded: !0,
                                buttonPadding: "large",
                                onClick: a,
                                children: `Connect ${t} wallet`
                            })]
                        })]
                    })
                },
                getSocialSignInProviderForProviderEnum = t => {
                    if (!t) return;
                    let r = Object.values(tu.VzA);
                    for (let a of r)
                        if (a === t) return a
                },
                IconListTile = t => {
                    var {
                        children: r,
                        className: a
                    } = t, s = _tslib_rest(t, ["children", "className"]);
                    return (0, tb.jsx)(ListTile, Object.assign({}, s, {
                        className: classNames_classNames(a, "icon-list-tile"),
                        children: (0, tb.jsx)("div", {
                            className: "icon-list-tile--children",
                            children: r
                        })
                    }))
                };
            var iY = ["title", "titleId"];

            function arrow_right_background_extends() {
                return (arrow_right_background_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgArrowRightBackground = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, iY);
                return nt.createElement("svg", arrow_right_background_extends({
                    width: 25,
                    height: 24,
                    viewBox: "0 0 25 24",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, eF || (eF = nt.createElement("rect", {
                    x: .5,
                    width: 24,
                    height: 24,
                    rx: 12,
                    fill: "var(--icon-background, var(--dynamic-hover))"
                })), eW || (eW = nt.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M13.22 7.47a.75.75 0 0 1 1.06 0l3.75 3.75a.75.75 0 0 1 0 1.06l-3.75 3.75a.75.75 0 1 1-1.06-1.06l2.47-2.47H7.5a.75.75 0 0 1 0-1.5h8.19l-2.47-2.47a.75.75 0 0 1 0-1.06Z",
                    fill: "var(--icon-arrow, var(--dynamic-text-secondary))"
                })))
            };
            let isEmailProviderEnabled = t => isProviderEnabled(t, tu.ml9.EmailOnly) || isProviderEnabled(t, tu.ml9.Dynamic) || isProviderEnabled(t, tu.ml9.Blocto) || isProviderEnabled(t, tu.ml9.MagicLink),
                iQ = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
                isEmailValid = t => iQ.test(t),
                findEmailOtpWalletConnector = t => {
                    let r = t.map(({
                        walletConnector: t
                    }) => t).find(t => (0, tl.dE)(t) && t.canConnectViaEmail);
                    return r
                },
                useConnectWithEmail = ({
                    emailWalletConnector: t,
                    handleConnect: r
                }) => {
                    let {
                        error: a
                    } = ErrorContext_useErrorContext(), [s, l] = (0, nt.useState)(!1), {
                        setIsVerificationInProgress: c
                    } = useInternalDynamicContext_useInternalDynamicContext();
                    return (0, nt.useEffect)(() => {
                        a && s && l(!1)
                    }, [a, s]), {
                        connectWithEmail: a => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            if (a && t && !s) {
                                c(!0), l(!0), t.setEmail(a);
                                try {
                                    yield r(t)
                                } catch (t) {
                                    tv.error(t), c(!1), l(!1)
                                }
                            }
                        }),
                        loading: s
                    }
                },
                useEmailProvider = ({
                    emailWalletConnector: t
                }) => {
                    let {
                        projectSettings: r,
                        environmentId: a
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        setEmail: s,
                        setVerificationUUID: l
                    } = useEmailVerificationContext(), {
                        setView: c
                    } = ViewContext_useViewContext(), {
                        handleInstalledExtensionClick: d
                    } = useWalletItemActions(), {
                        connectWithEmail: u,
                        loading: m
                    } = useConnectWithEmail({
                        emailWalletConnector: t,
                        handleConnect: d
                    }), {
                        providers: p
                    } = r || {}, h = void 0 !== t, f = h && (isProviderEnabled(p || [], tu.ml9.MagicLink) || isProviderEnabled(p || [], tu.ml9.Blocto)), handleEmailOnlyLoginSubmit = (t, r) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        let {
                            email: d,
                            verificationUUID: u
                        } = yield createEmailVerification({
                            captchaToken: r,
                            email: t,
                            environmentId: a
                        });
                        c("login-with-email-verification"), s(d), l(u)
                    }), handleMagicLinkOrBloctoSubmit = t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        yield u(t)
                    }), submitEmail = (t, r) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        if (f) {
                            yield handleMagicLinkOrBloctoSubmit(t);
                            return
                        }
                        yield handleEmailOnlyLoginSubmit(t, r)
                    });
                    return {
                        handleEmailSubmitWithOptionalCaptcha: (s, l) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            if ((void 0 !== t || isTurnkeyEnabled(r)) && (null == r ? void 0 : r.sdk.confirmEmailProviderForVerify)) {
                                let {
                                    emailProvider: t
                                } = yield getEmailProvider({
                                    email: s,
                                    environmentId: a
                                });
                                if (t === tu.ml9.EmailOnly || t === tu.ml9.Dynamic) {
                                    yield handleEmailOnlyLoginSubmit(s, l);
                                    return
                                }
                            }
                            yield submitEmail(s, l)
                        }),
                        isEmailProviderLoading: m
                    }
                },
                LoginEmailForm = ({
                    isLoading: t,
                    onSubmit: r,
                    onSubmitError: a,
                    currentEmail: s
                }) => {
                    var l, c, d;
                    let {
                        t: u
                    } = useTranslation_useTranslation(), {
                        walletConnectorOptions: m,
                        projectSettings: p
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        view: h,
                        setView: f
                    } = ViewContext_useViewContext(), {
                        setErrorMessage: y
                    } = ErrorContext_useErrorContext(), {
                        engageCaptcha: b
                    } = CaptchaContext_useCaptchaContext(), [C, E] = (0, nt.useState)(null != s ? s : ""), [j, I] = (0, nt.useState)(!1), O = findEmailOtpWalletConnector(m), {
                        handleEmailSubmitWithOptionalCaptcha: P,
                        isEmailProviderLoading: R
                    } = useEmailProvider({
                        emailWalletConnector: O
                    }), F = (0, nt.useMemo)(() => R || t, [R, t]), handleEmailSubmitError = t => {
                        "invalid_email_address" === t.code ? I(!0) : y(t.code), tv.debug(t), null == a || a()
                    }, [W, M] = (0, nt.useReducer)((t, r) => {
                        let [a, s] = r;
                        return Object.assign(Object.assign({}, t), {
                            [a]: s
                        })
                    }, {
                        focused: !1,
                        hovered: !1
                    }), D = (0, tb.jsx)(rk, {
                        "data-testid": "email_submit_button",
                        type: "submit",
                        className: classNames_classNames("icon-button", {
                            "icon-button--active": W.focused || W.hovered,
                            "icon-button--has-content": C.length > 0
                        }),
                        disabled: F,
                        children: (0, tb.jsx)(SvgArrowRightBackground, {})
                    }), handleSubmit = t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        var a;
                        if (t.preventDefault(), !isEmailValid(C)) {
                            I(!0);
                            return
                        }
                        try {
                            if (null == r || r(), (null === (a = null == p ? void 0 : p.security.hCaptcha) || void 0 === a ? void 0 : a.enabled) && (null == O ? void 0 : O.key) !== "magicemailotp") {
                                b({
                                    authMethod: "email",
                                    onCaptchaSuccess: t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                                        try {
                                            yield P(C, t)
                                        } catch (t) {
                                            f(h.type), handleEmailSubmitError(t)
                                        }
                                    })
                                });
                                return
                            }
                            yield P(C)
                        } catch (t) {
                            handleEmailSubmitError(t)
                        }
                    });
                    return isEmailProviderEnabled(null !== (l = null == p ? void 0 : p.providers) && void 0 !== l ? l : []) ? (0, tb.jsxs)("form", {
                        className: "login-with-email-form",
                        onSubmit: t => handleSubmit(t),
                        children: [(0, tb.jsx)(Input, {
                            id: "email_field",
                            value: C,
                            onChange: t => {
                                let {
                                    value: r
                                } = t.currentTarget;
                                E(r)
                            },
                            label: "Enter your email",
                            error: j,
                            message: j && u("dyn_login.helper.email_form.invalid_email"),
                            suffix: (null === (c = null == p ? void 0 : p.design.modal) || void 0 === c ? void 0 : c.emailSubmitButtonInsideInput) ? D : null,
                            disabled: F,
                            type: "email",
                            onPointerEnter: () => M(["hovered", !0]),
                            onPointerLeave: () => M(["hovered", !1]),
                            onFocus: () => M(["focused", !0]),
                            onBlur: () => M(["focused", !1])
                        }), !(null === (d = null == p ? void 0 : p.design.modal) || void 0 === d ? void 0 : d.emailSubmitButtonInsideInput) && (0, tb.jsx)(Button_Button, {
                            dataTestId: "email_submit_button",
                            buttonClassName: "login-with-email-form__button",
                            type: "submit",
                            loading: F,
                            disabled: F,
                            buttonVariant: "brand-primary",
                            buttonPadding: "login-screen-height",
                            expanded: !0,
                            typographyProps: {
                                color: "inherit"
                            },
                            children: "Continue"
                        })]
                    }) : (tv.error("Failed to render EmailSignInSection - no sign in provider enabled"), null)
                };
            var iX = ["title", "titleId"];

            function double_arrow_right_extends() {
                return (double_arrow_right_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgDoubleArrowRight = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, iX);
                return nt.createElement("svg", double_arrow_right_extends({
                    width: 16,
                    height: 16,
                    viewBox: "0 0 16 16",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, eM || (eM = nt.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M2.862 2.862c.26-.26.682-.26.943 0L8.47 7.529a.667.667 0 0 1 0 .942l-4.666 4.667a.667.667 0 0 1-.943-.943L7.057 8 2.862 3.805a.667.667 0 0 1 0-.943Zm5.333 0c.26-.26.683-.26.943 0l4.667 4.667c.26.26.26.682 0 .942l-4.667 4.667a.667.667 0 0 1-.943-.943L12.39 8 8.195 3.805a.667.667 0 0 1 0-.943Z",
                    fill: "currentColor"
                })))
            };
            let ListItemButton = ({
                    text: t,
                    onClick: r,
                    numberOfWallets: a,
                    disabled: s = !1,
                    copykey: l
                }) => {
                    let c = (0, nt.useMemo)(() => a <= 10 ? a : `${10*Math.floor(a/10)}+`, [a]),
                        d = (0, tb.jsxs)("div", {
                            className: "list-item-button__trailing",
                            children: [(0, tb.jsx)("div", {
                                className: classNames_classNames("list-item-button__trailing-child", "list-item-button__trailing-label"),
                                children: (0, tb.jsx)(Badge, {
                                    text: `${c} available`
                                })
                            }), (0, tb.jsx)("div", {
                                className: classNames_classNames("list-item-button__trailing-child", "list-item-button__trailing-icon"),
                                children: (0, tb.jsx)(Icon_Icon, {
                                    color: "text-primary",
                                    size: "small",
                                    children: (0, tb.jsx)(SvgStroke, {})
                                })
                            })]
                        });
                    return (0, tb.jsx)(ListTile, {
                        trailing: d,
                        onClick: r,
                        className: "list-item-button",
                        disabled: s,
                        copykey: l,
                        children: t
                    })
                },
                WalletSimpleSignIn = ({
                    previewWalletsNumber: t,
                    disabled: r = !1,
                    onshowAllWallets: a
                }) => {
                    let {
                        t: s
                    } = useTranslation_useTranslation(), {
                        walletConnectorOptions: l,
                        projectSettings: c,
                        walletsFilter: d,
                        signWithEmailWalletName: u,
                        authMode: m,
                        multiWallet: p,
                        connectedWallets: h
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        walletBook: f
                    } = (0, tc.yw)(), {
                        numberOfWallets: y,
                        walletsList: b
                    } = walletListBuilder({
                        authMode: m,
                        connectedWallets: h,
                        groupWallets: !0,
                        inputList: l,
                        isWalletConnectList: !1,
                        lastUsedWalletKey: LocalStorage.getFromLS(nu),
                        loginWithEmail: !0,
                        multiWallet: p,
                        numberOfWalletsToShow: t,
                        searchFilter: void 0,
                        signWithEmailWalletName: u,
                        walletBook: f,
                        walletsFilter: d
                    });
                    return c ? (0, tb.jsxs)("div", {
                        className: "login-with-email-wallet-list__container",
                        "data-testid": "top-wallets-list",
                        children: [b.map((t, a) => (0, tb.jsx)(WalletListItem, {
                            wallet: t,
                            disabled: r
                        }, `${t.key}_${a}`)), (0, tb.jsx)(ListItemButton, {
                            copykey: "dyn_wallet_list.view_all",
                            text: s("dyn_wallet_list.view_all"),
                            onClick: a,
                            numberOfWallets: y,
                            disabled: r
                        })]
                    }) : (0, tb.jsx)(Skeleton, {
                        count: t + 1,
                        className: "login-with-email-wallet-list__skeleton"
                    })
                },
                WalletSignInSection = ({
                    numberOfItensToShow: t,
                    isLoading: r,
                    onSubmit: a
                }) => {
                    let {
                        t: s
                    } = useTranslation_useTranslation();
                    return t > 0 ? (0, tb.jsx)(WalletSimpleSignIn, {
                        previewWalletsNumber: t,
                        onshowAllWallets: () => null == a ? void 0 : a(),
                        disabled: r
                    }) : (0, tb.jsx)(IconListTile, {
                        onClick: () => null == a ? void 0 : a(),
                        disabled: r,
                        className: "connect-with-wallet-button",
                        children: (0, tb.jsx)(Typography_Typography, {
                            variant: "button_primary",
                            copykey: "dyn_login.wallet_list.button_only",
                            children: s("dyn_login.wallet_list.button_only")
                        })
                    })
                },
                getSocialSignInProviderFromString = t => {
                    if (!t) return;
                    let r = Object.values(tu.VzA);
                    for (let a of r)
                        if (a === t) return a
                };
            var i0 = ["title", "titleId"];

            function dots_horizontal_extends() {
                return (dots_horizontal_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgDotsHorizontal = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, i0);
                return nt.createElement("svg", dots_horizontal_extends({
                    width: 21,
                    height: 20,
                    viewBox: "0 0 21 20",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, eD || (eD = nt.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M2.7 10a1.667 1.667 0 1 1 3.333 0A1.667 1.667 0 0 1 2.7 10Zm5.833 0a1.667 1.667 0 1 1 3.334 0 1.667 1.667 0 0 1-3.334 0Zm5.834 0a1.667 1.667 0 1 1 3.333 0 1.667 1.667 0 0 1-3.333 0Z",
                    fill: "currentColor",
                    fillOpacity: .4
                })))
            };
            let providerLabel = t => t ? t === tu.VzA.Coinbasesocial ? "Coinbase" : capitalize_capitalize_capitalize(t) : void 0,
                SocialSignIn = ({
                    providers: t,
                    onSelectProvider: r,
                    isLoading: a,
                    selectedProvider: s,
                    testId: l,
                    defaultProvider: c,
                    numOfItemsToDisplay: d = 5,
                    collapsedLayout: u
                }) => {
                    let m = useIconThemeVariant();
                    c && !t.includes(c) && ([c] = t);
                    let p = t.filter(t => t !== c),
                        h = Math.min(d, 5),
                        f = p.length > h,
                        y = f ? p.slice(0, h - 1) : p.slice(0, h),
                        [b, C] = (0, nt.useState)(!1),
                        closeAllProvidersCard = () => !a && C(!1),
                        E = 1 === t.length || !u && t.length < 4,
                        getProviderAsString = t => t,
                        j = (0, tb.jsx)(rk, {
                            onClick: closeAllProvidersCard,
                            type: "button",
                            id: "close-button",
                            disabled: a,
                            "data-testid": "close-button",
                            children: (0, tb.jsx)(close_SvgClose, {})
                        }),
                        renderProviderItem = (t, a = !1, l = !1) => (0, tb.jsxs)(IconListTile, {
                            dataTestId: l ? `card-${t}` : `inline-${t}`,
                            onClick: () => r(t),
                            disabled: !!s,
                            className: classNames_classNames({
                                "social-sign-in--card--tile": l,
                                "social-sign-in--tile": !l,
                                "social-sign-in--tile__full-width": a
                            }),
                            children: [(0, tb.jsx)(IconWithSpinner_IconWithSpinner, {
                                Icon: (0, tb.jsx)(SocialIcon, {
                                    name: getProviderAsString(t),
                                    variant: m
                                }),
                                isSpinning: s === t,
                                iconSize: 32
                            }), !l && a && (0, tb.jsxs)(Typography_Typography, {
                                variant: "button_primary",
                                children: ["Continue with ", providerLabel(t)]
                            })]
                        }, getProviderAsString(t));
                    return t.length ? (0, tb.jsxs)(tb.Fragment, {
                        children: [(0, tb.jsxs)("div", {
                            className: "social-sign-in",
                            "data-testid": l,
                            children: [c && renderProviderItem(c, !0), y.map(t => renderProviderItem(t, E)), f && (0, tb.jsx)(IconListTile, {
                                dataTestId: "show-more-options",
                                onClick: () => C(!0),
                                className: "social-sign-in--tile",
                                children: (0, tb.jsx)(Icon_Icon, {
                                    color: "text-primary",
                                    children: (0, tb.jsx)(SvgDotsHorizontal, {})
                                })
                            }, "show-more-options")]
                        }), (0, tb.jsx)(OverlayCard, {
                            isOpen: b,
                            onClickOverlay: closeAllProvidersCard,
                            children: (0, tb.jsxs)("div", {
                                className: "social-sign-in--card",
                                children: [(0, tb.jsx)(ModalHeader, {
                                    trailing: j,
                                    children: (0, tb.jsx)(Typography_Typography, {
                                        weight: "medium",
                                        variant: "body_normal",
                                        color: "primary",
                                        as: "span",
                                        children: "Choose a social account"
                                    })
                                }), (0, tb.jsx)("div", {
                                    className: "social-sign-in--card--body",
                                    children: t.map(t => renderProviderItem(t, !1, !0))
                                })]
                            })
                        })]
                    }) : (tv.error("Failed to render SocialSignInSection - no social providers enabled"), null)
                },
                MagicSocialSignIn = ({
                    defaultProvider: t,
                    numOfItemsToDisplay: r,
                    collapsedLayout: a
                }) => {
                    let {
                        projectSettings: s
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        socialProvider: l,
                        setSocialProvider: c,
                        socialWalletConnector: d,
                        enabledSocialProviders: u
                    } = useSocialRedirectContext(), {
                        engageCaptcha: m,
                        setCaptchaTokenInLS: p
                    } = CaptchaContext_useCaptchaContext(), {
                        mutate: h,
                        isLoading: f
                    } = useMutation_useMutation(t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        var r;
                        if (null === (r = null == s ? void 0 : s.security.hCaptcha) || void 0 === r ? void 0 : r.enabled) {
                            m({
                                authMethod: "social",
                                onCaptchaSuccess: r => _tslib_awaiter(void 0, void 0, void 0, function*() {
                                    return p(r), c(t), yield null == d ? void 0 : d.endSession(), null == d ? void 0 : d.connect(t)
                                })
                            });
                            return
                        }
                        return c(t), yield null == d ? void 0 : d.endSession(), null == d ? void 0 : d.connect(t)
                    }));
                    return (0, tb.jsx)(SocialSignIn, {
                        onSelectProvider: h,
                        providers: u,
                        selectedProvider: l,
                        isLoading: f,
                        testId: "magic-social-sign-in",
                        defaultProvider: t,
                        numOfItemsToDisplay: r,
                        collapsedLayout: a
                    })
                },
                getProviderEnumForSocialSignInProvider = t => {
                    if (!t) return null;
                    let r = Object.values(tu.ml9);
                    for (let a of r)
                        if (a === t) return a;
                    return null
                },
                digestSHA256 = t => {
                    let r = new TextEncoder,
                        a = r.encode(t);
                    return window.crypto.subtle.digest("SHA-256", a)
                },
                encodeBase64URL = t => {
                    let r = [];
                    return new Uint8Array(t).forEach(t => r.push(t)), btoa(String.fromCharCode.apply(null, r)).replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_")
                },
                stringifyURIQuery = t => {
                    let r = [];
                    for (let a in t) r.push(encodeURIComponent(a) + "=" + encodeURIComponent(t[a]));
                    return r.join("&")
                },
                getProviderByType = (t, r) => t.find(t => t.provider === r),
                i1 = {
                    apple: {
                        customMobileUrl: !0,
                        response_mode: "form_post",
                        response_type: ["code", "id_token"],
                        scope: ["name", "email"],
                        url: "https://appleid.apple.com/auth/authorize"
                    },
                    coinbasesocial: {
                        scope: ["wallet:accounts:read", "wallet:user:email"],
                        url: "https://www.coinbase.com/oauth/authorize"
                    },
                    discord: {
                        scope: ["identify", "email"],
                        url: "https://discord.com/api/oauth2/authorize"
                    },
                    facebook: {
                        scope: ["email", "public_profile"],
                        url: "https://www.facebook.com/v3.2/dialog/oauth"
                    },
                    github: {
                        scope: ["user:email", "read:user"],
                        url: "https://github.com/login/oauth/authorize"
                    },
                    google: {
                        prompt: ["select_account", "consent"],
                        scope: ["profile", "email"],
                        url: "https://accounts.google.com/o/oauth2/v2/auth"
                    },
                    instagram: {
                        scope: ["user_profile", "user_media"],
                        url: "https://api.instagram.com/oauth/authorize"
                    },
                    twitch: {
                        scope: ["user_read"],
                        url: "https://id.twitch.tv/oauth2/authorize"
                    },
                    twitter: {
                        scope: ["users.read", "tweet.read"],
                        url: "https://twitter.com/i/oauth2/authorize"
                    }
                },
                getProviderData = t => {
                    let r = Object.entries(i1);
                    for (let [a, s] of r)
                        if (a === t) return s;
                    return null
                },
                getMobileOauthUrl = (t, r) => {
                    if (r.customMobileUrl && (0, td.tq)() && t.redirectUrl) return t.redirectUrl.replace("redirect", "authorizeHtml")
                },
                getOauthLoginUrl = (t, r) => {
                    var a;
                    let s = getProviderByType(t, r);
                    if (!(null == s ? void 0 : s.clientId)) return "";
                    let l = getProviderData(r);
                    if (!l) return "";
                    let c = getMobileOauthUrl(s, l),
                        d = {
                            client_id: s.clientId,
                            redirect_uri: null !== (a = s.redirectUrl) && void 0 !== a ? a : "",
                            response_type: "code"
                        };
                    l.scope && (d.scope = l.scope.join(" ")), l.prompt && (d.prompt = l.prompt.join(" ")), l.response_mode && (d.response_mode = l.response_mode), l.response_type && (d.response_type = l.response_type.join(" "));
                    let u = stringifyURIQuery(d);
                    return `${null!=c?c:l.url}?${u}`
                },
                randomString = t => {
                    let r = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
                        a = "";
                    for (let s = t; s > 0; --s) a += r[Math.floor(Math.random() * r.length)];
                    return a
                },
                i2 = ["apple", "coinbasesocial", "discord", "facebook", "github", "google", "instagram", "twitch", "twitter"],
                i3 = ["twitter", "github"],
                i5 = ["twitter"],
                useSocialAuth = ({
                    sessionTimeout: t,
                    authMode: r,
                    onSettled: a,
                    onError: s
                }) => {
                    var l;
                    let {
                        environmentId: c,
                        onboardingOnlyJwt: d,
                        setOnboardingOnlyJwt: u,
                        setCallback: m,
                        setShowAuthFlow: p,
                        setIsVerificationInProgress: h,
                        projectSettings: y
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        setView: b
                    } = ViewContext_useViewContext(), {
                        setExistentAccountData: C
                    } = useAccountExistsContext(), {
                        setErrorMessage: E,
                        setError: j
                    } = ErrorContext_useErrorContext(), {
                        updateUserProfileByJWT: I
                    } = useUpdateUserProfileByJWTCallback(), {
                        createUserProfileByJWT: O
                    } = useCreateUserProfileByJWTCallback(), {
                        createEmbeddedWallet: P
                    } = useEmbeddedWallet(), [R, F] = (0, nt.useState)(!1), [W, M] = (0, nt.useState)(), D = (0, nt.useRef)({}), L = (0, nt.useRef)(), U = (0, nt.useRef)(!1), B = null !== (l = getAuthToken()) && void 0 !== l ? l : d, clearError = () => {
                        M(void 0), j(void 0)
                    }, handleError = (t, r) => {
                        tv.error(r), F(!1), M({
                            code: t,
                            message: r
                        }), E(t), null == s || s(), null == a || a()
                    }, poolOauthResult = (t, r) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        if (!U.current) return;
                        let a = yield getOAuthResult(c, t, {
                            state: r
                        });
                        if ((null == a ? void 0 : a.status) !== tu.JXN.Completed) {
                            setTimeout(() => poolOauthResult(t, r), 1e3);
                            return
                        }
                        U.current = !1;
                        let s = {
                            code: null == a ? void 0 : a.code,
                            error: null == a ? void 0 : a.error,
                            provider: t,
                            type: "authorization_response"
                        };
                        window.postMessage(s, "*")
                    }), checkValidProvider = t => t ? !!i2.includes(t) || (handleError(f.INVALID_PROVIDER, `Invalid social provider. Valid providers are: ${i2.join(", ")}`), !1) : (handleError(f.NO_PROVIDER, "Provider is required"), !1), linkAccount = (t, r, s, l) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        try {
                            let d = yield verifyOAuth(c, t, {
                                code: r,
                                codeVerifier: s,
                                state: l
                            }, String(B));
                            if (!d) {
                                handleError(f.VERIFICATION_ERROR, `Failed to link social account: ${t}`);
                                return
                            }
                            yield I(d), null == a || a()
                        } catch (r) {
                            r instanceof td.qi && handleError(f.ACCOUNT_ALREADY_LINKED_TO_DIFFERENT_PROFILE, `Social account already linked to a different profile: ${t}`)
                        }
                    }), signInAccount = (t, r, s, l, d) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        var E;
                        try {
                            let C = yield signInOAuth(c, t, {
                                captchaToken: d,
                                code: r,
                                codeVerifier: s,
                                state: l
                            });
                            if (!C) {
                                handleError(f.SIGNIN_ERROR, `Failed to sign-in with social account: ${t}`);
                                return
                            }
                            h(!0);
                            let j = decodeJwt(C);
                            if (null == j ? void 0 : j.missingFields.length) {
                                u(C), b("collect-user-data-login-with-email"), null == a || a();
                                return
                            }
                            if (m("authSuccess"), yield O(C), !(null === (E = null == y ? void 0 : y.sdk) || void 0 === E ? void 0 : E.automaticEmbeddedWalletCreation)) {
                                p(!1), null == a || a();
                                return
                            }
                            try {
                                yield P(), null == a || a()
                            } catch (t) {
                                p(!1, {
                                    emitCancelAuth: !0
                                }), null == a || a()
                            }
                        } catch (t) {
                            if (t instanceof td.U8 && b("no-access"), t instanceof td.uk) {
                                C(t.errorPayload), b("account-exists");
                                return
                            }
                            handleError(f.GENERAL_ERROR, t)
                        }
                    });
                    return {
                        checkValidProvider,
                        connectSocialAccount: ({
                            provider: l,
                            validator: c,
                            captchaToken: d
                        }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            var u, m;
                            if (clearInterval(L.current), clearError(), F(!0), !checkValidProvider(l) || c && !c(l)) return;
                            let p = window.open("", "_blank", "width=500,height=600"),
                                h = randomString(8),
                                b = randomString(43),
                                clearListeners = () => {
                                    window.removeEventListener("message", handleAuthWindowMessage), D.current = Object.assign(Object.assign({}, D.current), {
                                        [l]: !1
                                    })
                                },
                                handleAuthWindowMessage = t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                                    var a, s;
                                    let c = t.data,
                                        u = getProviderByType(null !== (a = null == y ? void 0 : y.providers) && void 0 !== a ? a : [], l);
                                    if (!(null == u ? void 0 : u.redirectUrl)) return;
                                    let m = window.location.origin;
                                    if (!i5.includes(l)) try {
                                        let t = new URL(u.redirectUrl);
                                        m = t.origin
                                    } catch (t) {
                                        tv.error("Failed to parse social provider redirect url", {
                                            error: t
                                        });
                                        return
                                    }
                                    if ((null == c ? void 0 : c.type) === "origin_check" && p) {
                                        tv.debug("Origin check message received. Sending response now.", {
                                            data: c,
                                            expectedOrigin: m
                                        }), p.postMessage("origin_check_response", m);
                                        return
                                    }
                                    let C = (null == c ? void 0 : c.type) === "authorization_response";
                                    C && tv.debug("Message received", {
                                        data: c
                                    });
                                    let E = t.origin === m,
                                        j = C && (null == c ? void 0 : c.provider) === l && E;
                                    if (!j) return;
                                    if (F(!0), !(null === (s = D.current) || void 0 === s ? void 0 : s[l])) {
                                        handleError(f.SESSION_TIMEOUT, `Connecting ${l} account session timeout.`);
                                        return
                                    }
                                    clearListeners();
                                    let {
                                        code: I,
                                        error: O,
                                        state: P
                                    } = c;
                                    if (O && "undefined" !== O) {
                                        handleError(f.OAUTH_ERROR, `Failed to connect ${l} social account: ${O}`);
                                        return
                                    }
                                    if (!i5.includes(l) && h !== P) {
                                        handleError(f.OAUTH_ERROR, `Failed to connect ${l} social account: Invalid random state`);
                                        return
                                    }
                                    if (!I) {
                                        handleError(f.NO_AUTH_CODE, `Failed to connect ${l} social account: no authorization code`);
                                        return
                                    }
                                    "signin" === r ? yield signInAccount(l, I, b, h, d): yield linkAccount(l, I, b, h), F(!1)
                                }),
                                C = getOauthLoginUrl(null !== (u = null == y ? void 0 : y.providers) && void 0 !== u ? u : [], l);
                            if (!C) {
                                handleError(f.NO_OAUTH_URL, `Failed to get login url to connect social account: ${l}`);
                                return
                            }(null === (m = D.current) || void 0 === m ? void 0 : m[l]) || (window.addEventListener("message", handleAuthWindowMessage), D.current = Object.assign(Object.assign({}, D.current), {
                                [l]: !0
                            }));
                            let E = stringifyURIQuery({
                                    state: h
                                }),
                                j = `${C}&${E}`;
                            if (i3.includes(l)) {
                                let t = yield digestSHA256(b), r = stringifyURIQuery({
                                    code_challenge: encodeBase64URL(t),
                                    code_challenge_method: "S256"
                                });
                                j = `${j}&${r}`
                            }
                            if (null == p || p.location.assign(j), i5.includes(l)) {
                                U.current = !0, poolOauthResult(l, h);
                                let r = t;
                                (0, td.tq)() && (r *= 3), L.current = setInterval(() => _tslib_awaiter(void 0, void 0, void 0, function*() {
                                    var t;
                                    U.current = !1, (null === (t = D.current) || void 0 === t ? void 0 : t[l]) && (clearListeners(), handleError(f.OAUTH_WINDOW_TIMEOUT, `Connecting ${l} account window timeout.`)), clearInterval(L.current), F(!1), null == a || a()
                                }), r)
                            } else L.current = setInterval(() => {
                                var t;
                                (null == p ? void 0 : p.closed) && (clearInterval(L.current), F(!1), (null === (t = D.current) || void 0 === t ? void 0 : t[l]) && (null == s || s(), null == a || a()))
                            }, 2e3)
                        }),
                        error: W,
                        handleError,
                        isProcessing: R,
                        setError: M,
                        setIsProcessing: F
                    }
                },
                DynamicSocialSignIn = ({
                    defaultProvider: t,
                    numOfItemsToDisplay: r,
                    collapsedLayout: a
                }) => {
                    let {
                        setShowAuthFlow: s,
                        projectSettings: l
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        setSocialProvider: c,
                        socialProvider: d,
                        enabledSocialProviders: u
                    } = useSocialRedirectContext(), {
                        setView: m,
                        goToInitialView: p
                    } = ViewContext_useViewContext(), {
                        engageCaptcha: h
                    } = CaptchaContext_useCaptchaContext(), {
                        isProcessing: f,
                        connectSocialAccount: y
                    } = useSocialAuth({
                        authMode: "signin",
                        onError: () => {
                            p()
                        },
                        onSettled: () => {
                            c(void 0)
                        },
                        sessionTimeout: 1e4
                    });
                    return (0, tb.jsx)(SocialSignIn, {
                        onSelectProvider: t => {
                            var r;
                            let a = getProviderEnumForSocialSignInProvider(t);
                            if (c(t), null === (r = null == l ? void 0 : l.security.hCaptcha) || void 0 === r ? void 0 : r.enabled) {
                                h({
                                    authMethod: "social",
                                    onCaptchaSuccess: t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                                        m("social-redirect-view"), s(!0), y({
                                            captchaToken: t,
                                            provider: a
                                        })
                                    })
                                });
                                return
                            }
                            m("social-redirect-view"), s(!0), y({
                                provider: a
                            })
                        },
                        providers: u,
                        selectedProvider: d,
                        isLoading: f,
                        testId: "dynamic-social-sign-in",
                        defaultProvider: t,
                        numOfItemsToDisplay: r,
                        collapsedLayout: a
                    })
                },
                SocialSignInSection = ({
                    sectionData: t,
                    collapsedLayout: r
                }) => {
                    var a, s, l;
                    let {
                        projectSettings: c
                    } = useInternalDynamicContext_useInternalDynamicContext(), d = null !== (a = null == c ? void 0 : c.providers) && void 0 !== a ? a : [], u = {
                        collapsedLayout: r,
                        defaultProvider: getSocialSignInProviderFromString(t.defaultItem),
                        numOfItemsToDisplay: t.numOfItemsToDisplay
                    }, m = isProviderEnabled(d, tu.ml9.MagicLink);
                    return m && (null === (s = null == c ? void 0 : c.sdk.socialSignIn) || void 0 === s ? void 0 : s.signInProvider) === tu.Cu6.MagicLink ? (0, tb.jsx)(MagicSocialSignIn, Object.assign({}, u)) : (null === (l = null == c ? void 0 : c.sdk.socialSignIn) || void 0 === l ? void 0 : l.signInProvider) === tu.Cu6.Dynamic ? (0, tb.jsx)(DynamicSocialSignIn, Object.assign({}, u)) : (tv.error("Failed to render SocialSignInSection - no sign in provider enabled"), null)
                },
                useLoginView = () => {
                    var t, r, a, s, l, c;
                    let {
                        projectSettings: d,
                        authorizationViewDisplayOrder: u,
                        loginWithEmail: m,
                        walletConnectorOptions: p,
                        walletsFilter: h
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        t: f
                    } = useTranslation_useTranslation(), {
                        enabledSocialProviders: y
                    } = useSocialRedirectContext(), b = !!(null == y ? void 0 : y.length), C = (null === (t = null == d ? void 0 : d.providers) || void 0 === t ? void 0 : t.length) && isEmailProviderEnabled(null == d ? void 0 : d.providers), E = null === (a = null === (r = null == d ? void 0 : d.design) || void 0 === r ? void 0 : r.modal) || void 0 === a ? void 0 : a.emailOnly, j = (h ? h(p) : p).filter(({
                        key: t
                    }) => "turnkey" !== t), I = (0, nt.useMemo)(() => ({
                        label: f("dyn_login.separators.default"),
                        type: tu.Fv5.Separator
                    }), [f]), O = (0, nt.useMemo)(() => {
                        var t, r, a;
                        if (!d) return !1;
                        if (!m && !b) return !0;
                        let s = null === (r = null === (t = null == d ? void 0 : d.sdk) || void 0 === t ? void 0 : t.views) || void 0 === r ? void 0 : r.find(t => t.type === tu.VbR.Login);
                        return (null === (a = null == s ? void 0 : s.sections) || void 0 === a ? void 0 : a.length) ? 1 === s.sections.length && "wallet" === s.sections[0].type : !C && !b
                    }, [d, m, b, C, null == y ? void 0 : y.length]), P = (0, nt.useCallback)(() => C ? [{
                        type: tu.Fv5.Email
                    }] : [], [C]), R = (0, nt.useCallback)(() => (null == y ? void 0 : y.length) ? [{
                        numOfItemsToDisplay: 5,
                        type: tu.Fv5.Social
                    }] : [], [null == y ? void 0 : y.length]), F = (0, nt.useCallback)(() => {
                        var t, r;
                        if (!(null == j ? void 0 : j.length)) return [];
                        let a = (null === (r = null === (t = null == d ? void 0 : d.design) || void 0 === t ? void 0 : t.modal) || void 0 === r ? void 0 : r.showWalletsButton) ? 0 : 3;
                        return [{
                            numOfItemsToDisplay: a,
                            type: tu.Fv5.Wallet
                        }]
                    }, [null === (l = null === (s = null == d ? void 0 : d.design) || void 0 === s ? void 0 : s.modal) || void 0 === l ? void 0 : l.showWalletsButton, null == j ? void 0 : j.length]), W = (0, nt.useCallback)(t => {
                        if (t.length < 2) return t;
                        let {
                            splitEmailAndSocial: r,
                            socialAboveEmail: a
                        } = (null == d ? void 0 : d.design.modal) || {};
                        return r && (t.splice(1, 0, I), t[2].defaultItem = y[0]), a && t.reverse(), t
                    }, [y, null == d ? void 0 : d.design.modal, I]), M = (0, nt.useCallback)(t => {
                        var r;
                        let hasEnabledNetwork = t => {
                                var r;
                                return null === (r = t.networks) || void 0 === r ? void 0 : r.some(t => t.enabled)
                            },
                            a = null === (r = null == d ? void 0 : d.chains) || void 0 === r ? void 0 : r.some(t => t.enabled && hasEnabledNetwork(t));
                        return (!a && t.find(t => "wallet" === t.type) && tv.error("Failed to render WalletSignInSection - no chains enabled"), null == j ? void 0 : j.length) ? t : t.filter(t => "wallet" !== t.type)
                    }, [null == j ? void 0 : j.length, null == d ? void 0 : d.chains]), D = (0, nt.useCallback)(t => {
                        var r;
                        let a = [];
                        return null == t || t.forEach(t => {
                            if (a.length && a.push(I), "email" === t) {
                                let t = [...P(), ...R()];
                                a.push(...W(t))
                            }
                            "wallet" === t && a.push(...F())
                        }), (null === (r = a[a.length - 1]) || void 0 === r ? void 0 : r.type) === "separator" && a.pop(), a
                    }, [W, P, R, F, I]), L = (0, nt.useMemo)(() => {
                        var t, r, a;
                        let s = null === (r = null === (t = null == d ? void 0 : d.sdk) || void 0 === t ? void 0 : t.views) || void 0 === r ? void 0 : r.find(t => t.type === tu.VbR.Login);
                        if (null === (a = null == s ? void 0 : s.sections) || void 0 === a ? void 0 : a.length) return M(null == s ? void 0 : s.sections);
                        let l = u;
                        return E && (l = ["email"]), D(l)
                    }, [null === (c = null == d ? void 0 : d.sdk) || void 0 === c ? void 0 : c.views, u, E, D, M]);
                    return {
                        isWalletOnly: O,
                        logingViewSections: L
                    }
                },
                LoginView = () => {
                    var t;
                    let {
                        error: r
                    } = ErrorContext_useErrorContext(), {
                        loading: a
                    } = LoadingContext_useLoadingContext(), {
                        view: s,
                        setView: l
                    } = ViewContext_useViewContext(), {
                        isWalletOnly: c,
                        logingViewSections: d
                    } = useLoginView(), [u, m] = (0, nt.useState)(c), [p, h] = (0, nt.useState)(a);
                    (0, nt.useEffect)(() => {
                        c && (l("login-with-wallet-only"), m(!0)), c || "login-with-email-or-wallet" !== s.type || m(!1), c || u && "login-with-wallet-only" !== s.type || (l("login-with-email-or-wallet"), m(!1))
                    }, [c, s.type]);
                    let {
                        showDefaultFooter: f
                    } = useAuthLayoutChecks(), y = (null === (t = d.find(t => t.type === tu.Fv5.Wallet)) || void 0 === t ? void 0 : t.numOfItemsToDisplay) || 0, b = (0, nt.useMemo)(() => d.map((t, r) => {
                        switch (t.type) {
                            case tu.Fv5.Separator:
                                return (0, tb.jsx)(Divider_Divider, {
                                    text: t.label
                                }, `${t.type}_${r}`);
                            case tu.Fv5.Email:
                                return (0, tb.jsx)(LoginEmailForm, {
                                    onSubmit: () => h(!0),
                                    onSubmitError: () => h(!1),
                                    isLoading: p
                                }, `${t.type}_${r}`);
                            case tu.Fv5.Wallet:
                                return (0, tb.jsx)(WalletSignInSection, {
                                    numberOfItensToShow: t.numOfItemsToDisplay || 0,
                                    onSubmit: () => {
                                        l("login-with-email-or-wallet-full-wallet-list"), m(!0)
                                    },
                                    isLoading: p
                                }, `${t.type}_${r}`);
                            case tu.Fv5.Social:
                                return (0, tb.jsx)(SocialSignInSection, {
                                    collapsedLayout: y > 1,
                                    sectionData: t
                                }, `${t.type}_${r}`);
                            case tu.Fv5.Text:
                                return (0, tb.jsx)(Typography_Typography, {
                                    variant: "body_normal",
                                    color: "secondary",
                                    align: t.alignment,
                                    className: "login-view__text",
                                    children: t.label
                                }, `${t.type}_${r}`);
                            default:
                                return null
                        }
                    }), [d, p, y, l]);
                    if (u) return (0, tb.jsx)(WalletList, {});
                    let C = (0, td.tq)() && f;
                    return (0, tb.jsxs)(tb.Fragment, {
                        children: [r && (0, tb.jsx)(ErrorContainer, {
                            className: "login-view__error-container",
                            withIcon: !1,
                            children: r
                        }), (0, tb.jsx)("div", {
                            className: classNames_classNames("login-view__container", {
                                "login-view__container--error": !!r
                            }),
                            children: (0, tb.jsx)("div", {
                                className: "login-view__scroll",
                                "data-testid": "login-view-scroll",
                                children: b
                            })
                        }), C && (0, tb.jsx)(DefaultFooter, {
                            hideBorder: !0
                        })]
                    })
                };
            var i4 = ["title", "titleId"];

            function passkey_intro_icon_extends() {
                return (passkey_intro_icon_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgPasskeyIntroIcon = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, i4);
                return nt.createElement("svg", passkey_intro_icon_extends({
                    width: 206,
                    height: 206,
                    viewBox: "0 0 206 206",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, eL || (eL = nt.createElement("circle", {
                    cx: 103,
                    cy: 103,
                    r: 103,
                    fill: "url(#passkey-intro-icon_svg__a)",
                    fillOpacity: .12
                })), ez || (ez = nt.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M101.59 42.066a6.37 6.37 0 0 1 1.822 0c.696.1 1.343.345 1.858.54l.138.051 17.072 6.402.416.156c1.967.734 3.695 1.38 5.025 2.551a9.553 9.553 0 0 1 2.612 3.77c.631 1.657.628 3.501.625 5.6v15.672c0 9-4.895 16.504-10.187 22.016-5.326 5.55-11.421 9.469-14.643 11.349l-.131.077c-.588.345-1.351.793-2.361 1.01a6.78 6.78 0 0 1-2.67 0c-1.01-.217-1.774-.665-2.362-1.01l-.13-.077c-3.223-1.88-9.317-5.799-14.644-11.349-5.291-5.512-10.186-13.015-10.186-22.016V61.137c-.003-2.1-.006-3.944.625-5.601a9.553 9.553 0 0 1 2.612-3.77c1.33-1.172 3.058-1.817 5.025-2.551l.416-.156 17.072-6.402.138-.052c.514-.194 1.162-.439 1.858-.54ZM94.382 69.11v-4.037a8.073 8.073 0 1 1 16.147 0v4.036a13.434 13.434 0 0 1 5.383 10.766c0 7.431-6.024 13.456-13.456 13.456C95.025 93.33 89 87.306 89 79.875c0-4.402 2.114-8.31 5.382-10.765Zm13.147-1.702v-2.335a5.073 5.073 0 1 0-10.147 0v2.336a13.414 13.414 0 0 1 5.074-.99c1.795 0 3.508.352 5.073.99ZM106 77.5a3.5 3.5 0 0 1-2 3.163V83.5a1.5 1.5 0 1 1-3 0v-2.837a3.5 3.5 0 1 1 5-3.163ZM126 22a4 4 0 0 1 4-4h45a4 4 0 0 1 4 4v10a4 4 0 0 1-4 4h-45a4 4 0 0 1-4-4V22Zm15 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm7 3a3 3 0 1 0 0-6 3 3 0 0 0 0 6Zm13-3a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm9 0a2 2 0 1 1-4 0 2 2 0 0 1 4 0Zm1 0a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z",
                    fill: "#4779FF"
                })), eU || (eU = nt.createElement("g", {
                    clipPath: "url(#passkey-intro-icon_svg__b)"
                }, nt.createElement("g", {
                    clipPath: "url(#passkey-intro-icon_svg__c)"
                }, nt.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M59.731 54.983a15.068 15.068 0 0 0 1.087-10.69C58.656 36.226 50.362 31.438 42.294 33.6c-8.069 2.162-12.857 10.455-10.695 18.524a15.068 15.068 0 0 0 6.288 8.715c1.864-4.039 6.77-6.622 9.948-7.473 3.179-.852 8.204-1.183 11.896 1.618Zm-19.98-8.96a5.672 5.672 0 1 1 10.957-2.935 5.672 5.672 0 0 1-10.957 2.936Z",
                    fill: "#4779FF"
                })))), eq || (eq = nt.createElement("defs", null, nt.createElement("clipPath", {
                    id: "passkey-intro-icon_svg__b"
                }, nt.createElement("path", {
                    fill: "#fff",
                    transform: "rotate(-15 151.778 -80.474)",
                    d: "M0 0h33v33H0z"
                })), nt.createElement("clipPath", {
                    id: "passkey-intro-icon_svg__c"
                }, nt.createElement("rect", {
                    x: 27.684,
                    y: 37.513,
                    width: 30.25,
                    height: 30.25,
                    rx: 15.125,
                    transform: "rotate(-15 27.684 37.513)",
                    fill: "#fff"
                })), nt.createElement("linearGradient", {
                    id: "passkey-intro-icon_svg__a",
                    x1: 103,
                    y1: 0,
                    x2: 103,
                    y2: 105.711,
                    gradientUnits: "userSpaceOnUse"
                }, nt.createElement("stop", {
                    stopColor: "#4779FF"
                }), nt.createElement("stop", {
                    offset: 1,
                    stopColor: "#4779FF",
                    stopOpacity: 0
                })))))
            };
            let i6 = {
                    0: "Operation was canceled.",
                    16: "Invalid Passkey signature. Select the passkey for this account and device.",
                    3: "You reached the limit of passkeys for this account.",
                    7: "The code is invalid or expired."
                },
                i7 = {
                    NotAllowedError: "Request Cancelled. Select a device or password manager to set up a passkey."
                },
                getProperErrorMessage = t => {
                    var r;
                    return "string" == typeof t ? t : "reason" in t ? t.reason : t instanceof DOMException ? i7[t.name] || "Something went wrong" : "cause" in t && (null === (r = null == t ? void 0 : t.cause) || void 0 === r ? void 0 : r.code) !== void 0 ? i6[t.cause.code] : "code" in t && t.code ? i6[t.code] : "Something went wrong"
                };
            var i8 = ["title", "titleId"];

            function android_face_id_extends() {
                return (android_face_id_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgAndroidFaceId = function(t) {
                    var r = t.title,
                        a = t.titleId,
                        s = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = function(t, r) {
                                if (null == t) return {};
                                var a, s, l = {},
                                    c = Object.keys(t);
                                for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                                return l
                            }(t, r);
                            if (Object.getOwnPropertySymbols) {
                                var c = Object.getOwnPropertySymbols(t);
                                for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                            }
                            return l
                        }(t, i8);
                    return nt.createElement("svg", android_face_id_extends({
                        width: 64,
                        height: 64,
                        viewBox: "0 0 64 64",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        "aria-labelledby": a
                    }, s), r ? nt.createElement("title", {
                        id: a
                    }, r) : null, eB || (eB = nt.createElement("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M32 57.887c14.297 0 25.887-11.59 25.887-25.887S46.297 6.113 32 6.113 6.113 17.703 6.113 32 17.703 57.887 32 57.887ZM32 60c15.464 0 28-12.536 28-28S47.464 4 32 4 4 16.536 4 32s12.536 28 28 28Z",
                        fill: "#1A73E8"
                    })), eV || (eV = nt.createElement("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M36.752 46.831c.27.582.018 1.274-.565 1.544-2.69 1.25-5.356 1.479-7.54.476-2.215-1.017-3.66-3.173-4.134-6.099l2.295-.372c.383 2.364 1.466 3.742 2.809 4.359 1.374.63 3.299.592 5.591-.472a1.162 1.162 0 0 1 1.544.564ZM33.585 35.17v-4.755h2.113v6.868h-5.811V35.17h3.698Z",
                        fill: "#1A73E8"
                    })), eH || (eH = nt.createElement("path", {
                        d: "M46.792 25.132a2.113 2.113 0 1 1-4.226 0 2.113 2.113 0 0 1 4.226 0ZM21.434 25.132a2.113 2.113 0 1 1-4.227 0 2.113 2.113 0 0 1 4.227 0Z",
                        fill: "#1A73E8"
                    })))
                },
                i9 = ["title", "titleId"];

            function android_touch_id_extends() {
                return (android_touch_id_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgAndroidTouchId = function(t) {
                    var r = t.title,
                        a = t.titleId,
                        s = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = function(t, r) {
                                if (null == t) return {};
                                var a, s, l = {},
                                    c = Object.keys(t);
                                for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                                return l
                            }(t, r);
                            if (Object.getOwnPropertySymbols) {
                                var c = Object.getOwnPropertySymbols(t);
                                for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                            }
                            return l
                        }(t, i9);
                    return nt.createElement("svg", android_touch_id_extends({
                        width: 64,
                        height: 64,
                        viewBox: "0 0 64 64",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        "aria-labelledby": a
                    }, s), r ? nt.createElement("title", {
                        id: a
                    }, r) : null, e$ || (e$ = nt.createElement("path", {
                        d: "M47.493 11.92c-.213 0-.426-.053-.613-.16C41.76 9.12 37.333 8 32.027 8c-5.28 0-10.294 1.253-14.854 3.76-.64.347-1.44.107-1.813-.533a1.35 1.35 0 0 1 .533-1.814c4.96-2.693 10.4-4.08 16.134-4.08 5.68 0 10.64 1.254 16.08 4.054.666.346.906 1.146.56 1.786-.24.48-.694.747-1.174.747Zm-38.16 14a1.33 1.33 0 0 1-1.093-2.107c2.64-3.733 6-6.666 10-8.72 8.373-4.32 19.093-4.346 27.493-.026 4 2.053 7.36 4.96 10 8.666.427.587.294 1.44-.32 1.867a1.33 1.33 0 0 1-1.866-.32c-2.4-3.36-5.44-6-9.04-7.84-7.654-3.92-17.44-3.92-25.067.027-3.627 1.866-6.667 4.533-9.067 7.893-.213.373-.613.56-1.04.56ZM26 58.107c-.347 0-.693-.134-.933-.4-2.32-2.32-3.574-3.814-5.36-7.04-1.84-3.28-2.8-7.28-2.8-11.574 0-7.92 6.773-14.373 15.093-14.373s15.093 6.453 15.093 14.373a1.32 1.32 0 0 1-1.333 1.334 1.32 1.32 0 0 1-1.333-1.334c0-6.453-5.574-11.706-12.427-11.706S19.573 32.64 19.573 39.093c0 3.84.854 7.387 2.48 10.267 1.707 3.067 2.88 4.373 4.934 6.453a1.37 1.37 0 0 1 0 1.894c-.294.266-.64.4-.987.4Zm19.12-4.934c-3.173 0-5.973-.8-8.267-2.373-3.973-2.693-6.346-7.067-6.346-11.707a1.32 1.32 0 0 1 1.333-1.333 1.32 1.32 0 0 1 1.333 1.333c0 3.76 1.92 7.307 5.174 9.494 1.893 1.28 4.106 1.893 6.773 1.893.64 0 1.707-.08 2.773-.267a1.33 1.33 0 0 1 1.547 1.094 1.33 1.33 0 0 1-1.093 1.546c-1.52.294-2.854.32-3.227.32Zm-5.36 5.494a1.56 1.56 0 0 1-.347-.054c-4.24-1.173-7.013-2.746-9.92-5.6-3.733-3.706-5.786-8.64-5.786-13.92 0-4.32 3.68-7.84 8.213-7.84 4.533 0 8.213 3.52 8.213 7.84 0 2.854 2.48 5.174 5.547 5.174 3.067 0 5.547-2.32 5.547-5.174 0-10.053-8.667-18.213-19.334-18.213-7.573 0-14.506 4.213-17.626 10.747-1.04 2.16-1.574 4.693-1.574 7.466 0 2.08.187 5.36 1.787 9.627a1.301 1.301 0 0 1-.773 1.707A1.323 1.323 0 0 1 12 49.653c-1.307-3.493-1.947-6.96-1.947-10.56 0-3.2.614-6.106 1.814-8.64 3.546-7.44 11.413-12.266 20.026-12.266 12.134 0 22 9.36 22 20.88 0 4.32-3.68 7.84-8.213 7.84-4.533 0-8.213-3.52-8.213-7.84 0-2.854-2.48-5.174-5.547-5.174-3.067 0-5.547 2.32-5.547 5.174 0 4.56 1.76 8.826 4.987 12.026 2.533 2.507 4.96 3.894 8.72 4.934.72.186 1.12.933.933 1.626a1.301 1.301 0 0 1-1.253 1.014Z",
                        fill: "#1A73E8"
                    })))
                },
                oe = ["title", "titleId"];

            function iphone_touch_id_extends() {
                return (iphone_touch_id_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgIphoneTouchId = function(t) {
                    var r = t.title,
                        a = t.titleId,
                        s = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = function(t, r) {
                                if (null == t) return {};
                                var a, s, l = {},
                                    c = Object.keys(t);
                                for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                                return l
                            }(t, r);
                            if (Object.getOwnPropertySymbols) {
                                var c = Object.getOwnPropertySymbols(t);
                                for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                            }
                            return l
                        }(t, oe);
                    return nt.createElement("svg", iphone_touch_id_extends({
                        width: 64,
                        height: 64,
                        viewBox: "0 0 64 64",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        "aria-labelledby": a
                    }, s), r ? nt.createElement("title", {
                        id: a
                    }, r) : null, eK || (eK = nt.createElement("g", {
                        clipPath: "url(#iphone-touch-id_svg__a)",
                        fill: "#000"
                    }, nt.createElement("path", {
                        d: "M38.635.943c-4.483-1.118-9.2-1.278-13.79-.287a.657.657 0 0 0 .277 1.285c4.396-.95 8.924-.793 13.232.287 10.3 2.582 18.875 10.327 22.14 20.444 1.264 3.912 1.8 8.078 1.908 12.445a.657.657 0 0 0 1.313-.033c-.108-4.426-.651-8.7-1.945-12.74C58.378 11.75 49.417 3.632 38.635.943ZM21.51 2.932a.657.657 0 1 0-.35-1.267c-4.801 1.324-11.554 5.9-15.728 12.014a.754.754 0 0 0-.004.007C1.763 19.208-.534 26.148.108 32.883l.001.019c.154 1.23.412 2.457.67 3.686.544 2.588 1.09 5.183.665 7.818a.657.657 0 1 0 1.297.21c.445-2.755-.107-5.443-.66-8.13-.254-1.244-.51-2.487-.666-3.737-.604-6.364 1.57-13.002 5.105-18.333 4.015-5.879 10.516-10.25 14.99-11.484Z"
                    }), nt.createElement("path", {
                        d: "M30.133 4.4c8.25-.504 16.499 2.863 22.039 9.314a.657.657 0 1 1-.997.856c-5.268-6.134-13.118-9.339-20.966-8.858H30.2c-9.925.48-19.22 7.214-22.638 16.648a.657.657 0 1 1-1.236-.447C9.928 11.973 19.688 4.907 30.133 4.4ZM54.174 16.585a.657.657 0 0 0-1.091.733c3.07 4.572 4.34 9.548 4.843 15.454a.657.657 0 0 0 1.31-.112c-.514-6.034-1.823-11.252-5.062-16.075ZM58.796 35.45a.657.657 0 0 1 .697.615c.247 3.963.25 8.446-.189 11.76a.657.657 0 1 1-1.303-.173c.423-3.193.425-7.582.18-11.505a.657.657 0 0 1 .615-.697ZM6.57 25.543a.657.657 0 1 0-1.278-.308 26.58 26.58 0 0 0-.743 6.104c-.01 2.117.385 4.184.78 6.25.323 1.692.646 3.384.747 5.104.134 2.26-.341 4.523-1.163 6.677a.657.657 0 1 0 1.228.469c.868-2.277 1.395-4.73 1.247-7.223-.1-1.709-.424-3.39-.747-5.072-.394-2.051-.788-4.102-.778-6.199.01-1.952.248-3.902.706-5.802Z"
                    }), nt.createElement("path", {
                        d: "M23.813 10.94a.657.657 0 0 1-.365.855c-6.813 2.736-11.93 8.91-12.973 16.19-.436 3.042.035 6.055.506 9.067.265 1.696.53 3.392.634 5.093.223 3.688-.197 7.739-2.597 11.425a.657.657 0 0 1-1.101-.718c2.186-3.358 2.6-7.088 2.386-10.627-.105-1.726-.368-3.442-.632-5.156-.472-3.077-.944-6.15-.497-9.27 1.115-7.774 6.563-14.324 13.784-17.224a.657.657 0 0 1 .855.365ZM46.882 14.681c-5.374-5.034-13.164-6.79-20.244-5.238a.657.657 0 1 0 .282 1.284c6.704-1.47 14.039.207 19.064 4.914 4.235 3.967 6.695 9.739 7.339 16.037a.657.657 0 0 0 1.307-.134c-.668-6.54-3.232-12.633-7.748-16.863ZM54.493 34.674a.657.657 0 0 1 .72.586c.625 6.077.356 12.64-.587 18.99a.657.657 0 0 1-1.3-.193c.93-6.261 1.191-12.713.58-18.662a.657.657 0 0 1 .587-.721Z"
                    }), nt.createElement("path", {
                        d: "M31.582 13.355c-10.07 0-18.252 8.034-18.252 17.967 0 1.06.094 2.1.274 3.111a.657.657 0 0 0 1.294-.23 16.469 16.469 0 0 1-.254-2.881c0-9.187 7.574-16.652 16.938-16.652 4.232 0 8.098 1.525 11.066 4.045a.657.657 0 0 0 .85-1.002 18.353 18.353 0 0 0-11.916-4.358ZM44.971 20.163a.657.657 0 0 1 .93.02c2.9 3.024 3.828 7.777 4.442 11.766.692 4.494.798 8.877.798 10.91a.657.657 0 0 1-1.315 0c0-2-.104-6.31-.782-10.71-.57-3.703-1.392-8.24-4.092-11.056a.657.657 0 0 1 .02-.93ZM50.974 46.622a.657.657 0 0 0-1.31-.105c-.323 4.048-.745 8.092-1.6 11.827a.657.657 0 1 0 1.28.293c.879-3.833 1.306-7.956 1.63-12.015ZM14.662 36.852a.657.657 0 0 1 .771.518c1.39 7.056.43 13.466-3.25 19.08a.657.657 0 0 1-1.099-.72c3.462-5.283 4.394-11.331 3.06-18.106a.657.657 0 0 1 .518-.772Z"
                    }), nt.createElement("path", {
                        d: "M31.582 17.631c-6.537 0-12.95 5.06-13.604 11.42-.287 2.784.116 5.526.519 8.27.351 2.395.703 4.791.596 7.217-.244 5.552-1.873 10.135-4.672 13.91a.657.657 0 1 0 1.056.782c2.968-4.003 4.674-8.844 4.93-14.634.106-2.415-.247-4.804-.6-7.19-.403-2.73-.806-5.459-.521-8.221.574-5.587 6.325-10.24 12.296-10.24 2.785 0 9.991 1.508 12.283 8.976 1.437 4.679 1.828 11.012 1.48 17.164-.347 6.151-1.43 12.035-2.885 15.808a.657.657 0 0 0 1.227.473c1.522-3.947 2.619-9.98 2.97-16.207.353-6.226-.034-12.734-1.535-17.624-2.545-8.289-10.52-9.904-13.54-9.904Z"
                    }), nt.createElement("path", {
                        d: "M21.47 56.451c.303.198.389.606.19.91-.407.624-.765 1.278-1.124 1.932-.359.654-.717 1.307-1.125 1.932a.657.657 0 1 1-1.1-.718c.407-.624.765-1.278 1.124-1.932.359-.654.717-1.308 1.125-1.932a.657.657 0 0 1 .91-.192ZM27.096 24.453a.657.657 0 1 0-.73-1.093c-2.603 1.74-4.2 4.134-4.2 7.64 0 2.088.37 3.795.75 5.545.567 2.62.953 5.233.883 7.923-.084 3.267-.723 6.252-1.952 9.096a.657.657 0 1 0 1.207.521c1.299-3.007 1.971-6.158 2.06-9.583.071-2.796-.325-5.513-.913-8.235-.38-1.758-.72-3.328-.72-5.267 0-3.004 1.321-5.013 3.615-6.547ZM29.66 22.144c2.728-.556 5.662.13 7.822 1.879 3.858 3.122 4.371 8.817 4.787 13.432l.021.235c.538 5.949-.077 11.726-1.316 17.529a.657.657 0 1 1-1.286-.275c1.22-5.715 1.815-11.355 1.293-17.136l-.052-.582v-.002c-.37-4.17-.832-9.394-4.274-12.18-1.846-1.494-4.379-2.092-6.732-1.613a.657.657 0 1 1-.262-1.287ZM40.045 58.489a.657.657 0 1 0-1.274-.325 15.88 15.88 0 0 1-1.785 4.266.657.657 0 1 0 1.127.675 17.188 17.188 0 0 0 1.932-4.616ZM36.831 48.952c.36.043.618.37.576.73-.62 5.245-2.022 9.922-4.27 13.98a.657.657 0 0 1-1.15-.638c2.152-3.882 3.51-8.39 4.115-13.496a.657.657 0 0 1 .73-.576Z"
                    }), nt.createElement("path", {
                        d: "M36.696 30.656c-.456-2.435-2.545-4.297-5.081-4.297-3.435 0-5.845 3.462-4.996 6.683 1.437 5.686 1.673 11.166.7 16.444v.003c-.845 4.739-2.465 9.002-4.677 12.614a.657.657 0 0 0 1.121.686c2.302-3.76 3.978-8.178 4.85-13.067 1.01-5.482.759-11.154-.72-17.005l-.002-.007c-.637-2.41 1.138-5.037 3.724-5.037 1.865 0 3.44 1.373 3.788 3.22.957 5.548 1.455 10.693 1.1 15.123a.657.657 0 1 0 1.31.105c.368-4.592-.151-9.863-1.115-15.456l-.002-.01ZM29.654 59.117c.323.166.45.562.284.885l-1.741 3.389a.657.657 0 1 1-1.17-.601L28.77 59.4a.657.657 0 0 1 .885-.284Z"
                    }), nt.createElement("path", {
                        d: "M32.103 31.29a.657.657 0 1 0-1.28.3c2.217 9.433 1.913 17.717-.787 24.773a.657.657 0 1 0 1.228.47c2.814-7.358 3.1-15.919.84-25.544Z"
                    }))), eG || (eG = nt.createElement("defs", null, nt.createElement("clipPath", {
                        id: "iphone-touch-id_svg__a"
                    }, nt.createElement("path", {
                        fill: "#fff",
                        d: "M0 0h64v64H0z"
                    })))))
                },
                ot = ["title", "titleId"];

            function face_id_extends() {
                return (face_id_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgFaceId = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, ot);
                return nt.createElement("svg", face_id_extends({
                    width: 24,
                    height: 24,
                    viewBox: "0 0 24 24",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, eZ || (eZ = nt.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M18.055 2.4A3.548 3.548 0 0 1 21.6 5.945v2.013a1.095 1.095 0 0 1-2.19 0V5.945c0-.747-.608-1.355-1.355-1.355h-2.012a1.095 1.095 0 1 1 0-2.19h2.012Zm-10.098 0a1.095 1.095 0 0 1 0 2.19H5.945c-.747 0-1.355.608-1.355 1.355v2.013a1.095 1.095 0 0 1-2.19 0V5.945A3.548 3.548 0 0 1 5.945 2.4h2.012Zm7.692 5.083c.6 0 1.086.486 1.086 1.086v1.347a1.086 1.086 0 1 1-2.172 0V8.57c0-.6.486-1.086 1.086-1.086Zm-4.121 0c.614 0 1.112.498 1.112 1.112v2.982h.008a1.113 1.113 0 0 1 0 2.226h-.386a1.849 1.849 0 0 1-1.847-1.848v-3.36c0-.614.498-1.112 1.113-1.112Zm-3.282 0c.6 0 1.086.486 1.086 1.086v1.347a1.086 1.086 0 0 1-2.172 0V8.57c0-.6.486-1.086 1.086-1.086Zm12.259 7.465c.605 0 1.095.49 1.095 1.095v2.012a3.548 3.548 0 0 1-3.545 3.545h-2.012a1.095 1.095 0 1 1 0-2.19h2.012c.747 0 1.355-.608 1.355-1.355v-2.012c0-.605.49-1.095 1.095-1.095Zm-17.01 0c.605 0 1.095.49 1.095 1.095v2.012c0 .747.608 1.355 1.355 1.355h2.012a1.095 1.095 0 0 1 0 2.19H5.945A3.548 3.548 0 0 1 2.4 18.055v-2.012c0-.605.49-1.095 1.095-1.095Zm5.365 1.337a.473.473 0 0 0 0 0l-.434.47a1.113 1.113 0 0 1 1.51-1.634c.563.52 1.296.806 2.064.806s1.5-.286 2.065-.807a1.113 1.113 0 0 1 1.51 1.634A5.255 5.255 0 0 1 12 18.153a5.255 5.255 0 0 1-3.574-1.397l.434-.47a4.615 4.615 0 0 1 0 0Zm5.947.28a4.694 4.694 0 0 1 0 0Z",
                    fill: "#ABACB2"
                })))
            };
            let PasskeyDeviceIcon = ({
                    defaultIcon: t,
                    className: r,
                    size: a = "small"
                }) => {
                    let s = t || null;
                    if ((0, td.IN)() && (s = (0, td.uL)() ? (0, tb.jsx)(SvgIphoneTouchId, {
                            "data-testid": "iphone-8-icon"
                        }) : (0, tb.jsx)(SvgFaceId, {
                            "data-testid": "iphone-icon"
                        })), (0, td.Dt)()) {
                        let t = (0, td.dl)();
                        s = t && t >= 9 ? (0, tb.jsx)(SvgAndroidTouchId, {
                            "data-testid": "android-9-icon"
                        }) : (0, tb.jsx)(SvgAndroidFaceId, {
                            "data-testid": "android-icon"
                        })
                    }
                    return s ? (0, tb.jsx)(Icon_Icon, {
                        className: r,
                        size: a,
                        children: s
                    }) : (0, tb.jsx)(tb.Fragment, {})
                },
                on = new RegExp(/^([A-Za-z0-9\s_+@\.-]+)$/),
                NeedHelpSection = ({
                    isRecoveryFlow: t = !1
                }) => {
                    var r, a, s, l, c, d;
                    let {
                        projectSettings: u
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        t: m
                    } = useTranslation_useTranslation(), {
                        initPasskeyRecoveryProcess: p
                    } = usePasskeyRecovery_usePasskeyRecovery(), h = null === (r = null == u ? void 0 : u.general) || void 0 === r ? void 0 : r.supportEmail, f = (null === (a = null == u ? void 0 : u.general) || void 0 === a ? void 0 : a.supportUrls) && (null === (s = Object.values(null == u ? void 0 : u.general.supportUrls)) || void 0 === s ? void 0 : s[0]), y = !t && (null === (l = null == u ? void 0 : u.providers) || void 0 === l ? void 0 : l.find(t => t.provider === tu.ml9.Turnkey && t.enabledAt)) && !!(null === (d = null === (c = null == u ? void 0 : u.sdk) || void 0 === c ? void 0 : c.embeddedWallets) || void 0 === d ? void 0 : d.emailRecoveryEnabled), b = !!(h || f);
                    return b || y ? (0, tb.jsxs)("div", {
                        className: "need-help-section",
                        children: [(0, tb.jsx)(Typography_Typography, {
                            color: "secondary",
                            variant: "body_small",
                            copykey: "dyn_need_help_section.info",
                            children: m("dyn_need_help_section.info")
                        }), b ? (0, tb.jsxs)("div", {
                            className: "need-help-section__links",
                            children: [f && (0, tb.jsx)(Typography_Typography, {
                                variant: "body_small",
                                color: "link",
                                copykey: "dyn_need_help_section.contact_support",
                                children: (0, tb.jsx)("a", {
                                    href: f,
                                    rel: "noreferrer",
                                    target: "_blank",
                                    children: m("dyn_need_help_section.contact_support")
                                })
                            }), h && (0, tb.jsx)(Typography_Typography, {
                                variant: "body_small",
                                color: "link",
                                children: (0, tb.jsx)("a", {
                                    href: `mailto:${h}`,
                                    children: h
                                })
                            })]
                        }) : null, (() => {
                            if (!y) return null;
                            let t = m("dyn_need_help_section.help_button"),
                                r = b ? t : t.slice(0, 1).toUpperCase() + t.slice(1);
                            return (0, tb.jsxs)(tb.Fragment, {
                                children: [b && (0, tb.jsx)(Typography_Typography, {
                                    color: "secondary",
                                    variant: "body_small",
                                    copykey: "dyn_need_help_section.divider",
                                    children: m("dyn_need_help_section.divider")
                                }), (0, tb.jsx)(TextButton_TextButton, {
                                    copykey: "dyn_need_help_section.help_button",
                                    className: classNames_classNames("need-help-section__helper-link"),
                                    onClick: () => p(void 0, "helpSession"),
                                    children: r
                                })]
                            })
                        })()]
                    }) : null
                };
            var or = ["title", "titleId"];

            function multiple_account_security_extends() {
                return (multiple_account_security_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgMultipleAccountSecurity = function(t) {
                    var r = t.title,
                        a = t.titleId,
                        s = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = function(t, r) {
                                if (null == t) return {};
                                var a, s, l = {},
                                    c = Object.keys(t);
                                for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                                return l
                            }(t, r);
                            if (Object.getOwnPropertySymbols) {
                                var c = Object.getOwnPropertySymbols(t);
                                for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                            }
                            return l
                        }(t, or);
                    return nt.createElement("svg", multiple_account_security_extends({
                        width: 327,
                        height: 112,
                        viewBox: "0 0 327 112",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        "aria-labelledby": a
                    }, s), r ? nt.createElement("title", {
                        id: a
                    }, r) : null, eJ || (eJ = nt.createElement("g", {
                        clipPath: "url(#multiple-account-security_svg__a)"
                    }, nt.createElement("circle", {
                        cx: 164,
                        cy: 114,
                        r: 114,
                        fill: "url(#multiple-account-security_svg__b)",
                        fillOpacity: .12
                    }), nt.createElement("g", {
                        clipPath: "url(#multiple-account-security_svg__c)"
                    }, nt.createElement("g", {
                        clipPath: "url(#multiple-account-security_svg__d)"
                    }, nt.createElement("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M118.709 55.166a14.617 14.617 0 0 0 1.054-10.366c-2.097-7.824-10.139-12.467-17.963-10.371-7.824 2.096-12.468 10.139-10.371 17.963a14.612 14.612 0 0 0 6.097 8.451c1.808-3.916 6.565-6.42 9.647-7.247 3.083-.826 7.955-1.146 11.536 1.57Zm-19.375-8.688a5.5 5.5 0 1 1 10.625-2.848 5.5 5.5 0 0 1-10.625 2.848Z",
                        fill: "#4779FF"
                    }))), nt.createElement("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "m207.67 19.875-.767 2.862a9.86 9.86 0 0 0-5.861 6.61c-1.412 5.269 1.715 10.684 6.984 12.096 5.268 1.412 10.684-1.715 12.096-6.984a9.862 9.862 0 0 0-1.771-8.655l.767-2.861a5.926 5.926 0 0 0-11.448-3.068Zm9.321 2.498-.444 1.655a9.844 9.844 0 0 0-3.409-1.665 9.847 9.847 0 0 0-3.785-.262l.444-1.656a3.723 3.723 0 1 1 7.194 1.928Zm-3.445 8.52a2.57 2.57 0 0 1-2.019 1.862l-.539 2.011a1.1 1.1 0 1 1-2.127-.57l.539-2.01a2.569 2.569 0 1 1 4.146-1.294ZM164.943 32.064a6.216 6.216 0 0 0-1.779 0c-.681.098-1.313.337-1.816.527l-.135.05-16.68 6.256-.407.152c-1.922.718-3.61 1.348-4.909 2.493a9.336 9.336 0 0 0-2.553 3.683c-.616 1.62-.613 3.421-.61 5.473V66.01c0 8.793 4.783 16.125 9.953 21.51 5.204 5.422 11.159 9.252 14.307 11.089l.128.075c.574.337 1.32.775 2.307.987a6.619 6.619 0 0 0 2.609 0c.987-.212 1.733-.65 2.307-.987l.128-.075c3.148-1.837 9.103-5.667 14.307-11.088 5.17-5.386 9.953-12.718 9.953-21.511V50.698c.003-2.052.006-3.854-.611-5.473a9.333 9.333 0 0 0-2.552-3.683c-1.3-1.145-2.987-1.775-4.909-2.493l-.407-.152-16.68-6.255-.135-.05c-.503-.19-1.136-.43-1.816-.528Zm7.008 18.695c0-1.726-1.4-3.126-3.127-3.126h-14.069a6.253 6.253 0 0 0-6.153 5.133 6.234 6.234 0 0 1 4.589-2.007h18.76Zm1.562 3.127c3.454 0 6.253 2.8 6.253 6.253v12.506a6.253 6.253 0 0 1-6.253 6.254h-18.759a6.253 6.253 0 0 1-6.253-6.254V60.14a6.253 6.253 0 0 1 6.253-6.253h18.759Z",
                        fill: "#4779FF"
                    }))), eY || (eY = nt.createElement("defs", null, nt.createElement("clipPath", {
                        id: "multiple-account-security_svg__a"
                    }, nt.createElement("rect", {
                        width: 327,
                        height: 112,
                        rx: 12,
                        fill: "#fff"
                    })), nt.createElement("clipPath", {
                        id: "multiple-account-security_svg__c"
                    }, nt.createElement("path", {
                        fill: "#fff",
                        transform: "rotate(-15 184.593 -307.976)",
                        d: "M0 0h32v32H0z"
                    })), nt.createElement("clipPath", {
                        id: "multiple-account-security_svg__d"
                    }, nt.createElement("rect", {
                        x: 87.633,
                        y: 38.225,
                        width: 29.333,
                        height: 29.333,
                        rx: 14.667,
                        transform: "rotate(-15 87.633 38.225)",
                        fill: "#fff"
                    })), nt.createElement("linearGradient", {
                        id: "multiple-account-security_svg__b",
                        x1: 164,
                        y1: 0,
                        x2: 164,
                        y2: 93.5,
                        gradientUnits: "userSpaceOnUse"
                    }, nt.createElement("stop", {
                        stopColor: "#4779FF"
                    }), nt.createElement("stop", {
                        offset: 1,
                        stopColor: "#4779FF",
                        stopOpacity: 0
                    })))))
                },
                oa = ["title", "titleId"];

            function passkey_account_security_extends() {
                return (passkey_account_security_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgPasskeyAccountSecurity = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, oa);
                return nt.createElement("svg", passkey_account_security_extends({
                    width: 327,
                    height: 112,
                    viewBox: "0 0 327 112",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, eQ || (eQ = nt.createElement("g", {
                    clipPath: "url(#passkey-account-security_svg__a)"
                }, nt.createElement("circle", {
                    cx: 164,
                    cy: 114,
                    r: 114,
                    fill: "url(#passkey-account-security_svg__b)",
                    fillOpacity: .12
                }), nt.createElement("g", {
                    clipPath: "url(#passkey-account-security_svg__c)",
                    fill: "#4779FF"
                }, nt.createElement("path", {
                    d: "M106.009 34.681a2.666 2.666 0 0 1 3.266 1.886l-15.454 4.141a5.319 5.319 0 0 0-3.339 2.666 5.335 5.335 0 0 1 3.936-5.587l11.591-3.105ZM117.785 42.57a5.333 5.333 0 0 0-6.532-3.772l-15.455 4.141a5.333 5.333 0 0 0-3.771 6.532l2.76 10.303a5.334 5.334 0 0 0 6.533 3.771l15.454-4.14a5.333 5.333 0 0 0 3.772-6.533l-2.761-10.303Z"
                })), nt.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "m207.67 19.875-.767 2.862a9.86 9.86 0 0 0-5.861 6.61c-1.412 5.268 1.715 10.684 6.984 12.096 5.268 1.412 10.684-1.715 12.096-6.984a9.862 9.862 0 0 0-1.771-8.655l.767-2.861a5.926 5.926 0 0 0-11.448-3.068Zm9.321 2.498-.444 1.655a9.846 9.846 0 0 0-3.409-1.665 9.849 9.849 0 0 0-3.785-.262l.444-1.656a3.723 3.723 0 1 1 7.194 1.928Zm-3.445 8.52a2.57 2.57 0 0 1-2.019 1.862l-.539 2.011a1.1 1.1 0 1 1-2.127-.57l.539-2.01a2.569 2.569 0 1 1 4.146-1.294ZM164.943 32.064a6.216 6.216 0 0 0-1.779 0c-.681.098-1.313.337-1.816.527l-.135.05-16.68 6.256-.407.152c-1.922.718-3.61 1.348-4.909 2.493a9.336 9.336 0 0 0-2.553 3.683c-.616 1.62-.613 3.421-.61 5.473V66.01c0 8.793 4.783 16.125 9.953 21.51 5.204 5.422 11.159 9.252 14.307 11.089l.128.075c.574.337 1.32.775 2.307.987a6.619 6.619 0 0 0 2.609 0c.987-.212 1.733-.65 2.307-.987l.128-.075c3.148-1.837 9.103-5.667 14.307-11.088 5.17-5.386 9.953-12.718 9.953-21.511V50.698c.003-2.052.006-3.854-.611-5.473a9.333 9.333 0 0 0-2.552-3.683c-1.3-1.145-2.987-1.775-4.909-2.493l-.407-.152-16.68-6.255-.135-.05c-.503-.19-1.136-.43-1.816-.528Zm-1.34 14.592a15.89 15.89 0 0 0-7.978 2.135 1.772 1.772 0 1 0 1.776 3.069 12.34 12.34 0 0 1 6.202-1.66c6.853 0 12.408 5.556 12.408 12.409a44.34 44.34 0 0 1-1.688 12.156 1.772 1.772 0 1 0 3.41.97 47.883 47.883 0 0 0 1.823-13.126c0-8.81-7.142-15.953-15.953-15.953Zm-10.749 9.75a1.772 1.772 0 1 0-3.068-1.775 15.882 15.882 0 0 0-2.136 7.978c0 2.499-.573 4.86-1.594 6.96a1.772 1.772 0 1 0 3.189 1.55 19.43 19.43 0 0 0 1.95-8.51c0-2.263.605-4.38 1.659-6.203Zm10.749-2.66a8.863 8.863 0 0 0-8.863 8.863c0 4.516-1.29 8.704-3.518 12.246l1.5.944-1.5-.944a8.75 8.75 0 0 0-.12.196 1.773 1.773 0 1 0 3.048 1.81c.023-.04.048-.079.072-.118a26.434 26.434 0 0 0 4.063-14.134 5.318 5.318 0 0 1 10.636 0c0 1.722-.118 3.417-.344 5.077a1.772 1.772 0 1 0 3.512.48 41.12 41.12 0 0 0 .377-5.557 8.863 8.863 0 0 0-8.863-8.863Zm1.772 8.863a1.772 1.772 0 1 0-3.545 0c0 5.89-1.688 11.381-4.607 16.021a1.773 1.773 0 0 0 3.001 1.888 33.528 33.528 0 0 0 5.151-17.91Zm5.554 11.117a1.773 1.773 0 0 0-3.411-.965 37.01 37.01 0 0 1-2.523 6.502 1.771 1.771 0 1 0 3.169 1.588 40.517 40.517 0 0 0 2.765-7.124Z",
                    fill: "#4779FF"
                }))), eX || (eX = nt.createElement("defs", null, nt.createElement("clipPath", {
                    id: "passkey-account-security_svg__a"
                }, nt.createElement("rect", {
                    width: 327,
                    height: 112,
                    rx: 12,
                    fill: "#fff"
                })), nt.createElement("clipPath", {
                    id: "passkey-account-security_svg__c"
                }, nt.createElement("path", {
                    fill: "#fff",
                    transform: "rotate(-15 184.593 -307.976)",
                    d: "M0 0h32v32H0z"
                })), nt.createElement("linearGradient", {
                    id: "passkey-account-security_svg__b",
                    x1: 164,
                    y1: 0,
                    x2: 164,
                    y2: 93.5,
                    gradientUnits: "userSpaceOnUse"
                }, nt.createElement("stop", {
                    stopColor: "#4779FF"
                }), nt.createElement("stop", {
                    offset: 1,
                    stopColor: "#4779FF",
                    stopOpacity: 0
                })))))
            };
            let ActionCard = ({
                    titleKey: t,
                    descriptionKey: r,
                    description: a,
                    LeadingIcon: s,
                    action: l,
                    badgeVariant: c,
                    badgeKey: d,
                    isLoading: u,
                    dataTestId: m
                }) => {
                    let {
                        t: p
                    } = useTranslation_useTranslation();
                    return (0, tb.jsxs)("button", {
                        className: "action-card",
                        onClick: l,
                        "data-testid": m,
                        children: [(0, tb.jsx)(Icon_Icon, {
                            className: "action-card__icon",
                            children: s
                        }), (0, tb.jsxs)("div", {
                            className: "action-card__content",
                            children: [(0, tb.jsxs)("div", {
                                className: "action-card__content__row",
                                children: [(0, tb.jsx)(Typography_Typography, {
                                    variant: "body_normal",
                                    weight: "medium",
                                    copykey: t,
                                    children: p(t)
                                }), (0, tb.jsx)(Badge, {
                                    text: p(d),
                                    className: classNames_classNames("action-card__content__row__badge", {
                                        "action-card__content__row__badge--primary": "primary" === c
                                    }, {
                                        "action-card__content__row__badge--secondary": "secondary" === c
                                    }),
                                    copykey: d
                                })]
                            }), (0, tb.jsx)(Typography_Typography, {
                                variant: "body_small",
                                color: "secondary",
                                copykey: r,
                                children: a
                            })]
                        }), (0, tb.jsx)(Icon_Icon, {
                            color: "text-tertiary",
                            className: "action-card__action-icon",
                            children: u ? (0, tb.jsx)(Spinner, {}) : (0, tb.jsx)(SvgChevronLeft, {})
                        })]
                    })
                },
                EmbeddedAuthChoiceCards = ({
                    currentAction: t,
                    supportedAuthenticators: r
                }) => {
                    var a, s;
                    let [l, c] = (0, nt.useState)(), {
                        projectSettings: d
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        t: u
                    } = useTranslation_useTranslation(), {
                        initAuthMethod: m,
                        isLoading: p
                    } = useInitEmbeddedWalletAuthMethod(), h = useElementById_useElementById(ak), f = {
                        email: {
                            badgeKey: "dyn_embedded_authenticator.email.badge",
                            description: u("dyn_embedded_authenticator.email.description", {
                                expiration: null === (s = null === (a = null == d ? void 0 : d.sdk.embeddedWallets) || void 0 === a ? void 0 : a.sessionKeyDuration) || void 0 === s ? void 0 : s.amount
                            }),
                            descriptionKey: "dyn_embedded_authenticator.email.description",
                            icon: (0, tb.jsx)(Icon_Icon, {
                                color: "text-tertiary",
                                size: "small",
                                children: (0, tb.jsx)(SvgMail, {})
                            }, "one-time-code-icon"),
                            titleKey: "dyn_embedded_authenticator.email.title"
                        },
                        passkey: {
                            badgeKey: "dyn_embedded_authenticator.passkey.badge",
                            description: u("dyn_embedded_authenticator.passkey.description"),
                            descriptionKey: "dyn_embedded_authenticator.passkey.description",
                            icon: (0, tb.jsx)(PasskeyDeviceIcon, {
                                defaultIcon: (0, tb.jsx)(SvgAndroidTouchId, {
                                    "data-testid": "default-icon"
                                })
                            }),
                            titleKey: "dyn_embedded_authenticator.passkey.title"
                        }
                    }, handleSelection = r => () => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        c(r), yield m({
                            authenticatorType: r,
                            currentAction: t,
                            iframeContainer: h.current
                        })
                    });
                    return (0, tb.jsx)("div", {
                        className: "embedded-auth-choice-cards",
                        children: r && r.map(t => (0, tb.jsx)(ActionCard, {
                            LeadingIcon: f[t].icon,
                            action: handleSelection(t),
                            badgeKey: f[t].badgeKey,
                            badgeVariant: "passkey" === t ? "primary" : "secondary",
                            descriptionKey: f[t].descriptionKey,
                            description: f[t].description,
                            titleKey: f[t].titleKey,
                            isLoading: p && t === l,
                            dataTestId: `embedded-auth-choice__item-${t}`
                        }, t))
                    })
                },
                AuthChoiceInfo = ({
                    choice: t
                }) => {
                    let {
                        t: r
                    } = useTranslation_useTranslation();
                    return (0, tb.jsx)("div", {
                        className: "auth-choice-info",
                        children: ({
                            passkey: [{
                                description: "dyn_embedded_authenticator.passkey.auth_info.convinience.description",
                                title: "dyn_embedded_authenticator.passkey.auth_info.convinience.title"
                            }, {
                                description: "dyn_embedded_authenticator.passkey.auth_info.security.description",
                                title: "dyn_embedded_authenticator.passkey.auth_info.security.title"
                            }]
                        })[t].map((t, a) => (0, tb.jsxs)("div", {
                            className: "auth-choice-info__container-item",
                            children: [(0, tb.jsx)("div", {
                                className: "auth-choice-info__container-icon",
                                children: (0, tb.jsx)(Icon_Icon, {
                                    size: "medium",
                                    className: "auth-choice-info__icon",
                                    children: (0, tb.jsx)(SvgAdd, {})
                                })
                            }), (0, tb.jsxs)("div", {
                                className: "action-card__item-title",
                                children: [(0, tb.jsx)(Typography_Typography, {
                                    variant: "body_normal",
                                    weight: "regular",
                                    copykey: t.title,
                                    children: r(t.title)
                                }), (0, tb.jsx)(Typography_Typography, {
                                    variant: "body_small",
                                    weight: "regular",
                                    color: "secondary",
                                    copykey: t.description,
                                    children: r(t.description)
                                })]
                            })]
                        }, `authChoiceInfo_${a}`))
                    })
                };
            var oi = ["title", "titleId"];

            function eye_off_icon_extends() {
                return (eye_off_icon_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgEyeOffIcon = function(t) {
                    var r = t.title,
                        a = t.titleId,
                        s = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = function(t, r) {
                                if (null == t) return {};
                                var a, s, l = {},
                                    c = Object.keys(t);
                                for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                                return l
                            }(t, r);
                            if (Object.getOwnPropertySymbols) {
                                var c = Object.getOwnPropertySymbols(t);
                                for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                            }
                            return l
                        }(t, oi);
                    return nt.createElement("svg", eye_off_icon_extends({
                        xmlns: "http://www.w3.org/2000/svg",
                        width: 25,
                        height: 24,
                        viewBox: "0 0 25 24",
                        fill: "none",
                        "aria-labelledby": a
                    }, s), r ? nt.createElement("title", {
                        id: a
                    }, r) : null, e0 || (e0 = nt.createElement("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M2.793 2.293a1 1 0 0 1 1.414 0l3.04 3.04A10.955 10.955 0 0 1 12.5 4c4.927 0 9.095 3.238 10.497 7.7a1 1 0 0 1 0 .6 11.014 11.014 0 0 1-3.552 5.231l2.762 2.762a1 1 0 0 1-1.414 1.414l-18-18a1 1 0 0 1 0-1.414Zm5.943 4.53 1.732 1.731a4 4 0 0 1 5.478 5.478l2.076 2.076A9.022 9.022 0 0 0 20.989 12 9.004 9.004 0 0 0 8.736 6.822Zm5.696 5.695a2 2 0 0 0-2.45-2.45l2.45 2.45ZM5.125 8.174a1 1 0 0 1 .194 1.4A8.975 8.975 0 0 0 4.012 12a9.004 9.004 0 0 0 10.177 5.842 1 1 0 0 1 .372 1.965c-.668.127-1.357.193-2.06.193-4.927 0-9.095-3.238-10.497-7.7a1 1 0 0 1 0-.6 10.97 10.97 0 0 1 1.72-3.332 1 1 0 0 1 1.4-.194Z",
                        fill: "#ABACB2"
                    })))
                },
                oo = ["title", "titleId"];

            function export_embedded_hero_extends() {
                return (export_embedded_hero_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgExportEmbeddedHero = function(t) {
                    var r = t.title,
                        a = t.titleId,
                        s = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = function(t, r) {
                                if (null == t) return {};
                                var a, s, l = {},
                                    c = Object.keys(t);
                                for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                                return l
                            }(t, r);
                            if (Object.getOwnPropertySymbols) {
                                var c = Object.getOwnPropertySymbols(t);
                                for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                            }
                            return l
                        }(t, oo);
                    return nt.createElement("svg", export_embedded_hero_extends({
                        width: 329,
                        height: 88,
                        viewBox: "0 0 329 88",
                        fill: "none",
                        xmlns: "http://www.w3.org/2000/svg",
                        "aria-labelledby": a
                    }, s), r ? nt.createElement("title", {
                        id: a
                    }, r) : null, e1 || (e1 = nt.createElement("g", {
                        clipPath: "url(#export-embedded-hero_svg__a)"
                    }, nt.createElement("circle", {
                        cx: 164.5,
                        cy: 114,
                        r: 114,
                        fill: "url(#export-embedded-hero_svg__b)",
                        fillOpacity: .12
                    }), nt.createElement("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M195 23a4 4 0 0 1 4-4h40a4 4 0 0 1 4 4v8a4 4 0 0 1-4 4h-40a4 4 0 0 1-4-4v-8Zm13.585 4c0 1.473-1.217 2.667-2.717 2.667-1.501 0-2.717-1.194-2.717-2.667 0-1.473 1.216-2.667 2.717-2.667 1.5 0 2.717 1.194 2.717 2.667Zm6.34 2.667c1.5 0 2.717-1.194 2.717-2.667 0-1.473-1.217-2.667-2.717-2.667-1.501 0-2.717 1.194-2.717 2.667 0 1.473 1.216 2.667 2.717 2.667ZM226.698 27c0 1.473-1.216 2.667-2.717 2.667-1.5 0-2.717-1.194-2.717-2.667 0-1.473 1.217-2.667 2.717-2.667 1.501 0 2.717 1.194 2.717 2.667Zm8.057 0c0 .903-.751 1.667-1.717 1.667-.966 0-1.717-.764-1.717-1.667s.751-1.667 1.717-1.667c.966 0 1.717.764 1.717 1.667Zm1 0c0 1.473-1.217 2.667-2.717 2.667-1.501 0-2.717-1.194-2.717-2.667 0-1.473 1.216-2.667 2.717-2.667 1.5 0 2.717 1.194 2.717 2.667ZM110.237 57.018c8.535-2.287 13.601-11.06 11.314-19.596-2.287-8.535-11.061-13.6-19.596-11.313-8.536 2.287-13.601 11.06-11.314 19.596 2.287 8.535 11.061 13.6 19.596 11.313Zm-8.712-17.797-.522-1.949a4.037 4.037 0 0 1 7.798-2.09l.522 1.95a6.727 6.727 0 1 1-7.798 2.09Zm4.573-2.535-.195-.727a1.036 1.036 0 1 0-2.002.537l.194.726a6.81 6.81 0 0 1 2.003-.536Zm1.567 6.87a1.749 1.749 0 0 0-1.586-3.023 1.75 1.75 0 0 0 .137 3.412l.368 1.37a.75.75 0 1 0 1.448-.388l-.367-1.37Z",
                        fill: "#4779FF"
                    }), nt.createElement("path", {
                        d: "M171.501 40.667a4.666 4.666 0 0 1 4.667 4.666h-28a9.306 9.306 0 0 0-6.85 2.995c.788-4.357 4.6-7.661 9.183-7.661h21ZM187.834 59.333A9.334 9.334 0 0 0 178.5 50h-28a9.333 9.333 0 0 0-9.333 9.333V78a9.333 9.333 0 0 0 9.333 9.333h28A9.334 9.334 0 0 0 187.834 78V59.333Z",
                        fill: "#4779FF"
                    }), nt.createElement("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M174.25 65.25a6 6 0 1 0-12 0 6 6 0 0 0 12 0Zm-3 0a3 3 0 1 0-6 0 3 3 0 0 0 6 0Zm-9.37 3.892a7.497 7.497 0 0 0 2.005 2.237l-2.831 2.83 2.103 2.103-2.121 2.122-2.103-2.103-2.062 2.062-2.121-2.121 7.13-7.13Z",
                        fill: "#fff"
                    }))), e2 || (e2 = nt.createElement("defs", null, nt.createElement("linearGradient", {
                        id: "export-embedded-hero_svg__b",
                        x1: 164.5,
                        y1: 0,
                        x2: 164.5,
                        y2: 93.5,
                        gradientUnits: "userSpaceOnUse"
                    }, nt.createElement("stop", {
                        stopColor: "#4779FF"
                    }), nt.createElement("stop", {
                        offset: 1,
                        stopColor: "#4779FF",
                        stopOpacity: 0
                    })), nt.createElement("clipPath", {
                        id: "export-embedded-hero_svg__a"
                    }, nt.createElement("rect", {
                        x: .5,
                        width: 328,
                        height: 88,
                        rx: 12,
                        fill: "#fff"
                    })))))
                },
                os = ["title", "titleId"];

            function wallet_v2_extends() {
                return (wallet_v2_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgWalletV2 = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, os);
                return nt.createElement("svg", wallet_v2_extends({
                    xmlns: "http://www.w3.org/2000/svg",
                    width: 25,
                    height: 24,
                    viewBox: "0 0 25 24",
                    fill: "none",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, e3 || (e3 = nt.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M5.5 4a1 1 0 0 0 0 2h14a3 3 0 0 1 3 3v10a3 3 0 0 1-3 3h-14a3 3 0 0 1-3-3V5a3 3 0 0 1 3-3h12a1 1 0 1 1 0 2h-12Zm-1 3.83V19a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1h-14c-.35 0-.687-.06-1-.17Zm11 6.17a1.5 1.5 0 1 1 3 0 1.5 1.5 0 0 1-3 0Z",
                    fill: "#ABACB2"
                })))
            };
            let initExport = ({
                    iframeContainer: t,
                    iframeElementId: r,
                    wallet: a
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    var s;
                    if (!(null == a ? void 0 : a.connector) || !(null == a ? void 0 : a.id) || !(0, tl.q4)(null == a ? void 0 : a.connector)) throw new td.kW("PasskeyWalletConnector not found");
                    let l = null === (s = a.connector) || void 0 === s ? void 0 : s.getExportHandler(),
                        c = yield l.initExport(t, r);
                    if (!c) throw new td.kW("Something went wrong");
                    return l
                }),
                handleExportInitCheck = ({
                    authToken: t,
                    userEmail: r,
                    wallet: a
                }) => {
                    var s, l;
                    if (!t) throw new td.kW("User must be logged in");
                    let c = decodeJwt(t);
                    if (!c) throw new td.kW("User must be logged in with a valid token");
                    if (!(null == a ? void 0 : a.connector) || !(null == a ? void 0 : a.id) || !(0, tl.q4)(null == a ? void 0 : a.connector)) throw new td.kW("PasskeyWalletConnector not found");
                    let d = a.connector;
                    d.setEmail(r);
                    let u = null === (l = null === (s = c.verifiedCredentials) || void 0 === s ? void 0 : s.find(({
                            walletName: t
                        }) => null == t ? void 0 : t.startsWith("turnkey"))) || void 0 === l ? void 0 : l.walletProperties,
                        m = null == u ? void 0 : u.turnkeyHDWalletId,
                        p = null == u ? void 0 : u.turnkeyPrivateKeyId,
                        h = null == u ? void 0 : u.turnkeySubOrganizationId;
                    if (!h || void 0 === m && void 0 === p) throw new td.kW("Invalid token!");
                    return {
                        connector: d,
                        organizationId: h,
                        privateKeyId: p,
                        turnkeyHDWalletId: m
                    }
                },
                extractExportBundle = ({
                    address: t,
                    privateKeyId: r,
                    activity: a
                }) => {
                    var s, l, c;
                    let d = t ? null === (s = a.result) || void 0 === s ? void 0 : s.exportWalletAccountResult : null === (l = a.result) || void 0 === l ? void 0 : l.exportWalletResult,
                        u = r ? null === (c = a.result) || void 0 === c ? void 0 : c.exportPrivateKeyResult : d;
                    return null == u ? void 0 : u.exportBundle
                },
                exportCredential = ({
                    authToken: t,
                    userEmail: r,
                    wallet: a,
                    environmentId: s,
                    address: l
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    let c, d;
                    let {
                        connector: u,
                        turnkeyHDWalletId: m,
                        privateKeyId: p,
                        organizationId: h
                    } = handleExportInitCheck({
                        authToken: t,
                        userEmail: r,
                        wallet: a
                    }), f = u.getExportHandler(), y = f.publicKey;
                    if (!y) throw new td.kW("Must initialize export first");
                    m ? c = yield f.exportWallet({
                        address: l,
                        organizationId: h,
                        walletId: m
                    }): p && (c = yield f.exportPrivateKey({
                        organizationId: h,
                        privateKeyId: p
                    }));
                    let b = c.id,
                        C = c.status;
                    if ("ACTIVITY_STATUS_COMPLETED" === C) d = extractExportBundle({
                        activity: c,
                        address: l,
                        privateKeyId: p
                    });
                    else {
                        let r = yield exportEmbeddedWallet({
                            activityId: b,
                            environmentId: s,
                            userJwt: t || "",
                            walletId: (null == a ? void 0 : a.id) || ""
                        });
                        d = null == r ? void 0 : r.exportBundle
                    }
                    if (!d) throw new td.kW("Invalid export response");
                    return l || p ? f.verifyExportPrivateKey(d) : f.verifyExportWallet(d)
                }),
                cleanupExport = ({
                    wallet: t
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    var r;
                    let a = null == t ? void 0 : t.connector;
                    null === (r = null == a ? void 0 : a.getExportHandler()) || void 0 === r || r.clear()
                }),
                EmbeddedRevealView = () => {
                    var t, r, a;
                    let {
                        authToken: s,
                        primaryWallet: l,
                        user: c,
                        setShowAuthFlow: d,
                        environmentId: u
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        view: m
                    } = ViewContext_useViewContext(), [p, h] = (0, nt.useState)(!1), f = (0, nt.useRef)(null), y = decodeJwt(s), b = null === (r = null === (t = null == y ? void 0 : y.verifiedCredentials) || void 0 === t ? void 0 : t.find(({
                        walletName: t
                    }) => null == t ? void 0 : t.startsWith("turnkey"))) || void 0 === r ? void 0 : r.walletProperties, C = null == b ? void 0 : b.turnkeyHDWalletId, E = null === (a = null == m ? void 0 : m.type) || void 0 === a ? void 0 : a.includes("account");
                    (0, nt.useEffect)(() => {
                        var t;
                        let r = f.current;
                        if (!r || (null === (t = null == r ? void 0 : r.children) || void 0 === t ? void 0 : t.length) > 0) return;
                        let a = isAccountAbstractionWallet(l) ? createOwnerWallet(l, (null == c ? void 0 : c.verifiedCredentials) || []) : l;
                        return initExport({
                            iframeContainer: r,
                            iframeElementId: "dyn-turnkey-export-element-id",
                            wallet: a
                        }), () => {
                            cleanupExport({
                                wallet: a
                            })
                        }
                    }, []);
                    let {
                        mutate: j,
                        isLoading: I,
                        error: O,
                        data: P
                    } = useMutation_useMutation(() => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        let t = isAccountAbstractionWallet(l) ? createOwnerWallet(l, (null == c ? void 0 : c.verifiedCredentials) || []) : l;
                        return exportCredential({
                            address: E ? null == t ? void 0 : t.address : void 0,
                            authToken: s,
                            environmentId: u,
                            userEmail: null == c ? void 0 : c.email,
                            wallet: t
                        })
                    }), {
                        onFailure: t => {
                            tv.error("Failed to export", t), nr.emit("embeddedWalletRevealFailed", t)
                        }
                    }), R = (0, nt.useMemo)(() => O ? O instanceof td.kW ? O.message : getProperErrorMessage(O) : void 0, [O]), {
                        t: F
                    } = useTranslation_useTranslation(), W = (0, tb.jsx)("div", {
                        className: "embedded-reveal-view__body__description",
                        children: I || !P || O ? (0, tb.jsx)("div", {
                            className: "embedded-reveal-view__header",
                            children: (0, tb.jsx)(SvgExportEmbeddedHero, {})
                        }) : (0, tb.jsx)(Typography_Typography, {
                            variant: "body_normal",
                            color: "secondary",
                            weight: "regular",
                            children: F("dyn_embedded_reveal.reveal_description")
                        })
                    });
                    (0, nt.useEffect)(() => {
                        var t;
                        if ((null === (t = null == f ? void 0 : f.current) || void 0 === t ? void 0 : t.children) && P) {
                            let t = f.current.children[0];
                            null == t || t.setAttribute("style", !C || E ? "height: 60px" : "height: 100px")
                        }
                    }, [f, P, C, E]);
                    let M = (0, tb.jsx)(rk, {
                            onClick: () => d(!1, {
                                emitCancelAuth: !0
                            }),
                            type: "button",
                            children: (0, tb.jsx)(close_SvgClose, {})
                        }),
                        D = !I && P && !O,
                        L = F(!C || E ? "dyn_embedded_reveal.private_key_title" : "dyn_embedded_reveal.recovery_phrase_title"),
                        U = D ? L : F("dyn_embedded_reveal.agreement_title");
                    return (0, tb.jsxs)(tb.Fragment, {
                        children: [(0, tb.jsx)(ModalHeader, {
                            trailing: M,
                            children: (0, tb.jsx)(Typography_Typography, {
                                as: "h1",
                                variant: "title",
                                color: "primary",
                                "data-testid": "dynamic-auth-modal-heading",
                                className: "header__typography",
                                children: U
                            })
                        }), (0, tb.jsx)("div", {
                            className: "embedded-reveal-view",
                            children: (0, tb.jsxs)("div", {
                                className: "embedded-reveal-view__body",
                                children: [W, (0, tb.jsx)("div", {
                                    id: "dyn-turnkey-export-container-id",
                                    style: {
                                        display: P ? "block" : "none"
                                    },
                                    ref: f
                                }), D ? (0, tb.jsx)(Button_Button, {
                                    buttonPadding: "large",
                                    buttonVariant: "brand-primary",
                                    onClick: () => d(!1),
                                    loading: I,
                                    copykey: "dyn_embedded_reveal.done_button_label",
                                    typographyProps: {
                                        color: "inherit"
                                    },
                                    children: F("dyn_embedded_reveal.done_button_label")
                                }) : (0, tb.jsxs)(tb.Fragment, {
                                    children: [(0, tb.jsx)("div", {
                                        className: "embedded-reveal-view__body__description",
                                        children: (0, tb.jsx)(Badge, {
                                            text: F("dyn_embedded_reveal.badge_label"),
                                            className: "embedded-reveal-view__body__badge"
                                        })
                                    }), R && (0, tb.jsx)(ErrorContainer, {
                                        children: R
                                    }), (0, tb.jsxs)("div", {
                                        className: "embedded-reveal-view__body__card",
                                        children: [(0, tb.jsxs)("div", {
                                            className: "embedded-reveal-view__body__card__statement",
                                            children: [(0, tb.jsx)("div", {
                                                className: "embedded-reveal-view__body__card__icon",
                                                children: (0, tb.jsx)(SvgWalletV2, {})
                                            }), (0, tb.jsxs)("div", {
                                                children: [(0, tb.jsx)(Typography_Typography, {
                                                    variant: "body_normal",
                                                    color: "primary",
                                                    style: {
                                                        letterSpacing: "-0.15px"
                                                    },
                                                    copykey: "dyn_embedded_reveal.statement_1.title",
                                                    children: F("dyn_embedded_reveal.statement_1.title")
                                                }), (0, tb.jsx)(Typography_Typography, {
                                                    variant: "body_small",
                                                    color: "secondary",
                                                    weight: "regular",
                                                    copykey: "dyn_embedded_reveal.statement_1.description",
                                                    children: F("dyn_embedded_reveal.statement_1.description")
                                                })]
                                            })]
                                        }), (0, tb.jsxs)("div", {
                                            className: "embedded-reveal-view__body__card__statement",
                                            children: [(0, tb.jsx)("div", {
                                                className: "embedded-reveal-view__body__card__icon",
                                                children: (0, tb.jsx)(SvgEyeOffIcon, {})
                                            }), (0, tb.jsxs)("div", {
                                                children: [(0, tb.jsx)(Typography_Typography, {
                                                    variant: "body_normal",
                                                    color: "primary",
                                                    style: {
                                                        letterSpacing: "-0.15px"
                                                    },
                                                    copykey: "dyn_embedded_reveal.statement_2.title",
                                                    children: F("dyn_embedded_reveal.statement_2.title")
                                                }), (0, tb.jsx)(Typography_Typography, {
                                                    variant: "body_small",
                                                    color: "secondary",
                                                    weight: "regular",
                                                    copykey: "dyn_embedded_reveal.statement_2.description",
                                                    children: F("dyn_embedded_reveal.statement_2.description", {
                                                        credential_type: null == L ? void 0 : L.toLowerCase()
                                                    })
                                                })]
                                            })]
                                        })]
                                    }), (0, tb.jsxs)("div", {
                                        className: "embedded-reveal-view__body__confirm_card",
                                        children: [(0, tb.jsxs)("button", {
                                            className: "embedded-reveal-view__body__card__acknowledgement",
                                            onClick: () => h(!p),
                                            children: [(0, tb.jsx)("div", {
                                                children: (0, tb.jsx)(Checkbox, {
                                                    checked: p,
                                                    onChange: () => h(!p),
                                                    className: "embedded-reveal-view__body__card__statement__checkbox",
                                                    id: "embedded-reveal-checkbox-1"
                                                })
                                            }), (0, tb.jsx)("div", {
                                                children: (0, tb.jsx)(Typography_Typography, {
                                                    variant: "body_normal",
                                                    color: "primary",
                                                    style: {
                                                        letterSpacing: "-0.15px"
                                                    },
                                                    copykey: "dyn_embedded_reveal.checkbox_label",
                                                    children: F("dyn_embedded_reveal.checkbox_label")
                                                })
                                            })]
                                        }), (0, tb.jsx)(Button_Button, {
                                            buttonPadding: "large",
                                            buttonVariant: "brand-primary",
                                            typographyProps: {
                                                color: "inherit"
                                            },
                                            onClick: () => j(),
                                            disabled: !p,
                                            loading: I,
                                            dataTestId: "embedded-reveal-button",
                                            copykey: "dyn_embedded_reveal.reveal_button_label",
                                            children: F("dyn_embedded_reveal.reveal_button_label")
                                        })]
                                    })]
                                })]
                            })
                        })]
                    })
                },
                WalletGroupItem_WalletGroupItem = ({
                    groupKey: t,
                    wallet: r,
                    onClick: a
                }) => {
                    let {
                        walletBook: s
                    } = (0, tc.yw)(), l = (0, tc.oH)(s, t, r.key), c = (0, tc.IP)(s, r.key), d = (null == l ? void 0 : l.brand) || (null == c ? void 0 : c.brand), u = (null == l ? void 0 : l.name) || (null == c ? void 0 : c.name), m = d ? (0, tb.jsx)(tc.Vr, {
                        brand: d,
                        walletKey: r.key,
                        style: {
                            height: pixelToRem_pixelToRem(28),
                            width: pixelToRem_pixelToRem(28)
                        }
                    }) : null, p = getWalletListItemLabel({
                        wallet: r
                    }), h = (0, tb.jsx)(ListTileAnimatedTrailing, {
                        hoverElement: (0, tb.jsx)(Icon_Icon, {
                            color: "text-tertiary",
                            size: "mini",
                            children: (0, tb.jsx)(SvgStroke, {})
                        }),
                        children: p && (0, tb.jsx)(Badge, {
                            dot: !0,
                            text: (0, tb.jsx)(Typography_Typography, {
                                variant: "body_small",
                                children: p
                            })
                        })
                    });
                    return (0, tb.jsx)(ListTile, {
                        onClick: a,
                        leading: m,
                        trailing: h,
                        children: u
                    })
                };
            var ol = ["title", "titleId"];

            function domain_extends() {
                return (domain_extends = Object.assign ? Object.assign.bind() : function(t) {
                    for (var r = 1; r < arguments.length; r++) {
                        var a = arguments[r];
                        for (var s in a) Object.prototype.hasOwnProperty.call(a, s) && (t[s] = a[s])
                    }
                    return t
                }).apply(this, arguments)
            }
            var SvgDomain = function(t) {
                var r = t.title,
                    a = t.titleId,
                    s = function(t, r) {
                        if (null == t) return {};
                        var a, s, l = function(t, r) {
                            if (null == t) return {};
                            var a, s, l = {},
                                c = Object.keys(t);
                            for (s = 0; s < c.length; s++) a = c[s], r.indexOf(a) >= 0 || (l[a] = t[a]);
                            return l
                        }(t, r);
                        if (Object.getOwnPropertySymbols) {
                            var c = Object.getOwnPropertySymbols(t);
                            for (s = 0; s < c.length; s++) a = c[s], !(r.indexOf(a) >= 0) && Object.prototype.propertyIsEnumerable.call(t, a) && (l[a] = t[a])
                        }
                        return l
                    }(t, ol);
                return nt.createElement("svg", domain_extends({
                    width: 65,
                    height: 64,
                    viewBox: "0 0 65 64",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    "aria-labelledby": a
                }, s), r ? nt.createElement("title", {
                    id: a
                }, r) : null, e5 || (e5 = nt.createElement("path", {
                    fillRule: "evenodd",
                    clipRule: "evenodd",
                    d: "M32.5 64c17.673 0 32-14.327 32-32 0-17.673-14.327-32-32-32C14.827 0 .5 14.327.5 32c0 17.673 14.327 32 32 32Zm-4.928-29.305h9.717c-.207 4.908-1.087 9.168-2.3 12.206-.7 1.756-1.433 2.9-2.036 3.54-.245.26-.42.387-.523.448-.102-.06-.277-.189-.522-.449-.603-.638-1.336-1.783-2.037-3.539-1.213-3.038-2.092-7.298-2.3-12.206Zm2.3-16.655c-1.242 3.108-2.134 7.497-2.314 12.55h9.744c-.18-5.053-1.071-9.442-2.313-12.55-.7-1.756-1.433-2.9-2.036-3.54-.245-.26-.42-.388-.523-.449-.102.061-.277.19-.522.45-.603.638-1.336 1.783-2.037 3.539ZM14.5 30.59h8.951c.216-6.53 1.541-12.27 3.503-16.036C20.23 16.789 15.22 23.03 14.5 30.59Zm.036 4.105h8.928c.25 6.387 1.563 11.993 3.49 15.692-6.622-2.201-11.582-8.288-12.418-15.692Zm35.789 0h-8.928c-.25 6.387-1.563 11.993-3.49 15.692 6.621-2.201 11.581-8.288 12.418-15.692Zm.125-2.224v.066-.133.066Zm-9.04-1.88h8.95c-.719-7.56-5.73-13.802-12.454-16.037 1.962 3.766 3.288 9.507 3.503 16.036Zm-9.09 20.35c0-.001.008-.004.023-.007-.015.006-.023.008-.023.007Zm.198-.007a.072.072 0 0 1 .023.007s-.008-.001-.023-.007ZM32.541 14s-.008.004-.023.007c.015-.006.023-.008.023-.007Zm-.198.007A.068.068 0 0 1 32.32 14s.008.001.023.007Z",
                    fill: "#4779FF"
                })))
            };
            let oc = {
                    "account-exists": () => {
                        let {
                            existentAccountData: t
                        } = useAccountExistsContext(), {
                            t: r
                        } = useTranslation_useTranslation(), {
                            email: a,
                            embeddedSocialSigninProvider: s
                        } = t || {}, l = getSocialSignInProviderForProviderEnum(s), {
                            socialProvider: c,
                            setSocialProvider: d,
                            socialWalletConnector: u
                        } = useSocialRedirectContext(), m = useFindSocialIcon(), {
                            mutate: p
                        } = useMutation_useMutation(() => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            return d(l), yield null == u ? void 0 : u.endSession(), null == u ? void 0 : u.connect(s)
                        }));
                        return (0, tb.jsxs)("div", {
                            className: "account-exists__container",
                            children: [(0, tb.jsx)(t9, {
                                className: "account-exists__image"
                            }), (0, tb.jsxs)("div", {
                                className: "account-exists__main",
                                children: [(0, tb.jsx)("div", {
                                    className: "account-exists__content",
                                    children: (0, tb.jsx)(Typography_Typography, {
                                        variant: "body_normal",
                                        weight: "regular",
                                        color: "secondary",
                                        className: "account-exists__content--secondary",
                                        copykey: "dyn_account_exists",
                                        children: (() => {
                                            let t = s ? r("dyn_account_exists.description_social") : (0, tb.jsxs)(tb.Fragment, {
                                                children: [r("dyn_account_exists.description_email"), " ", (0, tb.jsx)("strong", {
                                                    children: a
                                                }), " ", r("dyn_account_exists.trail_message_email")]
                                            });
                                            return t
                                        })()
                                    })
                                }), s ? (0, tb.jsxs)(IconListTile, {
                                    dataTestId: `inline-${s}`,
                                    onClick: () => p(),
                                    className: "social-sign-in--tile",
                                    children: [(0, tb.jsx)(IconWithSpinner_IconWithSpinner, {
                                        Icon: m(s),
                                        isSpinning: c === l,
                                        iconSize: 32
                                    }), (0, tb.jsx)(Typography_Typography, {
                                        variant: "button_primary",
                                        copykey: "dyn_account_exists.connect",
                                        children: r("dyn_account_exists.connect", {
                                            socialOauth: capitalize_capitalize_capitalize(null == s ? void 0 : s.toString())
                                        })
                                    })]
                                }, s) : (0, tb.jsx)(LoginEmailForm, {
                                    isLoading: !1,
                                    currentEmail: a
                                })]
                            })]
                        })
                    },
                    "bridge-next-wallet-connection": () => {
                        let {
                            setShowAuthFlow: t,
                            bridgeChainsToConnect: r
                        } = useInternalDynamicContext_useInternalDynamicContext(), {
                            setView: a
                        } = ViewContext_useViewContext();
                        if (!(null == r ? void 0 : r.length)) throw new td.kW("No wallets to connect");
                        let [s] = r, {
                            chain: l
                        } = s, c = (0, tl.bt)(l), d = getChainIcon_getChainIcon(l);
                        if (!c) throw new td.kW("No chain info found for chain", l);
                        return (0, tb.jsx)(BridgeNextWalletToConnectLayout, {
                            chainName: c.blockchainName,
                            chainIcon: (0, tb.jsx)(d, {}),
                            onClickAction: () => a("wallet-list"),
                            onClickClose: () => t(!1, {
                                emitCancelAuth: !0
                            })
                        })
                    },
                    "bridge-summary": () => {
                        let {
                            primaryWallet: t,
                            setShowAuthFlow: r,
                            appName: a,
                            bridgeChains: s = []
                        } = useInternalDynamicContext_useInternalDynamicContext(), {
                            t: l
                        } = useTranslation_useTranslation(), onClickClose = () => r(!1, {
                            emitCancelAuth: !0
                        }), c = (0, nt.useMemo)(() => {
                            let t = s.map(({
                                    chain: t
                                }) => {
                                    var r;
                                    return null === (r = (0, tl.bt)(t)) || void 0 === r ? void 0 : r.blockchainName
                                }),
                                [r, a] = t;
                            return l("dyn_bridge.summary_view.connection_succeed", {
                                firstBlockchainName: r,
                                secondBlockchainName: a
                            })
                        }, [s, l]);
                        return (0, tb.jsxs)(ConnectedWalletsListLayout, {
                            onClickClose: onClickClose,
                            onClickAction: onClickClose,
                            copykey: "dyn_bridge.summary_view.title",
                            title: l("dyn_bridge.summary_view.title", {
                                appName: a
                            }),
                            body: c,
                            children: [t && (t => {
                                let r = getChainIcon_getChainIcon(t.chain),
                                    a = (0, tl.bt)(t.chain);
                                return (0, tb.jsx)(DynamicBridgeWalletCard, {
                                    networkIcon: (0, tb.jsx)(r, {}),
                                    networkName: null == a ? void 0 : a.displayName,
                                    children: (0, tb.jsx)(DynamicBridgeWalletCardBody, {
                                        walletKey: t.connector.key,
                                        walletAddress: t.address,
                                        walletBalance: (0, tb.jsx)(Balance, {
                                            address: t.address,
                                            connector: t.connector,
                                            network: t.chain
                                        })
                                    })
                                })
                            })(t), (0, tb.jsx)(ic, {
                                hideUnlinkAction: !0
                            })]
                        })
                    },
                    "bridge-welcome": () => {
                        let {
                            appName: t,
                            bridgeChains: r = [],
                            setShowAuthFlow: a
                        } = useInternalDynamicContext_useInternalDynamicContext(), {
                            setView: s
                        } = ViewContext_useViewContext(), {
                            t: l
                        } = useTranslation_useTranslation(), c = (0, nt.useMemo)(() => {
                            let t = r.map(({
                                    chain: t
                                }) => {
                                    var r;
                                    return null === (r = (0, tl.bt)(t)) || void 0 === r ? void 0 : r.blockchainName
                                }),
                                [a, s] = t;
                            return l("dyn_bridge.welcome_view.description", {
                                firstBlockchainName: a,
                                secondBlockchainName: s
                            })
                        }, [r, l]), d = (0, nt.useMemo)(() => r.map(({
                            chain: t
                        }, r) => {
                            let a = (0, tl.bt)(t),
                                s = getChainIcon_getChainIcon(t);
                            if (a && s) return {
                                icon: (0, tb.jsx)(s, {}),
                                id: r,
                                name: a.blockchainName
                            }
                        }).filter(isChainInfoDefined), [r]);
                        return (0, tb.jsx)(BridgeWelcomeLayout, {
                            onClickClose: () => a(!1, {
                                emitCancelAuth: !0
                            }),
                            title: l("dyn_bridge.welcome_view.title", {
                                appName: t
                            }),
                            copykey: "dyn_bridge.welcome_view.title",
                            body: c,
                            chains: d,
                            actionButtonText: l("dyn_bridge.welcome_view.button"),
                            onClickAction: () => s("wallet-list")
                        })
                    },
                    captcha: () => {
                        let {
                            t
                        } = useTranslation_useTranslation(), {
                            captchaAuthState: r
                        } = CaptchaContext_useCaptchaContext();
                        return (0, tb.jsxs)("div", {
                            className: "captcha-verify-user__container",
                            children: [(0, tb.jsx)(t8, {
                                className: "captcha-verify-user__icon"
                            }), (0, tb.jsx)(Typography_Typography, {
                                weight: "medium",
                                variant: "title",
                                color: "primary",
                                className: "captcha-verify-user__title",
                                copykey: "dyn_captcha.verify_user_title",
                                children: t("dyn_captcha.verify_user_title")
                            }), (0, tb.jsx)(Typography_Typography, {
                                variant: "body_normal",
                                weight: "regular",
                                color: "secondary",
                                className: "captcha-verify-user__subtitle",
                                copykey: "dyn_captcha.verify_user_subtitle",
                                children: t("dyn_captcha.verify_user_subtitle")
                            }), (0, tb.jsx)(Captcha, {
                                handleSuccess: t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                                    var a;
                                    yield null === (a = null == r ? void 0 : r.onCaptchaSuccess) || void 0 === a ? void 0 : a.call(r, t)
                                })
                            }), (0, tb.jsx)(PoweredByDynamic, {
                                classNameRoot: "captcha-verify-user__dynamic-logo"
                            })]
                        })
                    },
                    "chainalysis-blocked-wallet": NoAccess,
                    "collect-user-data": () => {
                        var t;
                        let {
                            appName: r,
                            onboardingOnlyJwt: a,
                            projectSettings: s,
                            network: l,
                            decodedOnboardingOnlyToken: c,
                            selectedWalletConnector: d,
                            handleLogOut: u,
                            onboardingImageUrl: m
                        } = useInternalDynamicContext_useInternalDynamicContext(), [p, h] = (0, nt.useState)(!1), f = useFetchNameService_useFetchNameService(), {
                            t: y
                        } = useTranslation_useTranslation();
                        if (!d || !c) return null;
                        let b = createUserProfile(c),
                            C = d.evmNetworks || [],
                            E = !l || isSupportedNetwork({
                                network: l,
                                walletConnector: d
                            }),
                            j = null === (t = null == b ? void 0 : b.verifiedCredentials.find(t => t.id === b.lastVerifiedCredentialId)) || void 0 === t ? void 0 : t.address;
                        return (0, tb.jsxs)("div", {
                            className: "collect-user-data",
                            "data-testid": "collect-user-data-view",
                            children: [(0, tb.jsxs)("div", {
                                className: "collect-user-data__network-container",
                                children: [(0, tb.jsxs)("div", {
                                    className: "collect-user-data__img-container",
                                    children: [(null == f ? void 0 : f.avatar) ? (0, tb.jsx)("img", {
                                        src: f.avatar,
                                        alt: "",
                                        className: "collect-user-data__img collect-user-data__img--rounded"
                                    }) : (0, tb.jsx)(AuthProviderIcon_AuthProviderIcon, {
                                        jwt: a,
                                        iconSize: 28
                                    }), (0, tb.jsx)(Typography_Typography, {
                                        variant: "body_normal",
                                        color: "primary",
                                        weight: "medium",
                                        className: "collect-user-data__wallet-address",
                                        children: (null == f ? void 0 : f.name) || shortenWalletAddress_shortenWalletAddress(j, 3, 3)
                                    })]
                                }), (0, tb.jsx)(NetworkPicker_NetworkPicker, {
                                    currentNetwork: l,
                                    evmNetworks: C,
                                    connector: d,
                                    showNetworkName: !0,
                                    isNetworkPickerOpen: p,
                                    setIsNetworkPickerOpen: h,
                                    buttonClassName: "collect-user-data__network-picker-button",
                                    mainClassName: "collect-user-data__network-picker"
                                })]
                            }), m && (0, tb.jsx)("img", {
                                className: "collect-user-data__main-img",
                                src: m,
                                alt: "onboarding"
                            }), !E && (0, tb.jsx)(ErrorContainer, {
                                withIcon: !1,
                                className: "collect-user-data__error--not-supported",
                                copykey: "dyn_collect_user_data.not_supported_network.error_message",
                                children: y("dyn_collect_user_data.not_supported_network.error_message")
                            }), (0, tb.jsxs)("div", {
                                className: classNames_classNames("collect-user-data__form", {
                                    "collect-user-data__form--error": !E
                                }),
                                children: [(0, tb.jsx)("div", {
                                    className: "collect-user-data__success-icon",
                                    children: (0, tb.jsx)(Icon_Icon, {
                                        color: "text-primary",
                                        size: "large",
                                        children: (0, tb.jsx)(SvgCheckConnection, {})
                                    })
                                }), (0, tb.jsx)(OnboardingUserDataForm, {
                                    disableSubmit: !E,
                                    userProfile: b,
                                    children: E ? (0, tb.jsxs)("div", {
                                        className: "collect-user-data__welcome-container",
                                        children: [(0, tb.jsx)(Typography_Typography, {
                                            variant: "title",
                                            color: "primary",
                                            className: "collect-user-data__welcome-title",
                                            copykey: "dyn_collect_user_data.greeting",
                                            children: (null == s ? void 0 : s.general.collectUserDataWelcomeHeader) || y("dyn_collect_user_data.greeting", {
                                                appName: r
                                            })
                                        }), (0, tb.jsx)(Typography_Typography, {
                                            variant: "body_normal",
                                            weight: "regular",
                                            color: "secondary",
                                            copykey: "dyn_collect_user_data.description",
                                            children: (null == s ? void 0 : s.general.collectUserDataWelcomeMessage) || y("dyn_collect_user_data.description")
                                        })]
                                    }) : (0, tb.jsxs)("div", {
                                        className: "collect-user-data__welcome-container",
                                        children: [(0, tb.jsx)(Typography_Typography, {
                                            variant: "title",
                                            color: "primary",
                                            className: "collect-user-data__welcome-title",
                                            copykey: "dyn_collect_user_data.not_supported_network.title",
                                            children: y("dyn_collect_user_data.not_supported_network.title")
                                        }), (0, tb.jsx)(Typography_Typography, {
                                            variant: "body_normal",
                                            weight: "regular",
                                            color: "secondary",
                                            copykey: "dyn_collect_user_data.not_supported_network.description",
                                            children: y("dyn_collect_user_data.not_supported_network.description")
                                        })]
                                    })
                                }), (0, tb.jsx)(TextButton_TextButton, {
                                    className: "collect-user-data__log-out",
                                    onClick: u,
                                    copykey: "dyn_collect_user_data.log_out_button",
                                    children: y("dyn_collect_user_data.log_out_button")
                                })]
                            })]
                        })
                    },
                    "collect-user-data-login-with-email": () => {
                        let {
                            appName: t,
                            handleLogOut: r,
                            projectSettings: a,
                            onboardingImageUrl: s,
                            decodedOnboardingOnlyToken: l
                        } = useInternalDynamicContext_useInternalDynamicContext(), {
                            t: c
                        } = useTranslation_useTranslation();
                        if (!l) return null;
                        let d = createUserProfile(l);
                        return (0, tb.jsxs)("div", {
                            className: "collect-user-data-login-with-email",
                            "data-testid": "collect-user-data-login-with-email",
                            children: [s && (0, tb.jsx)("img", {
                                className: "collect-user-data-login-with-email__main-img",
                                src: s,
                                alt: "onboarding"
                            }), (0, tb.jsxs)("div", {
                                className: "collect-user-data-login-with-email__user-info-container",
                                children: [(0, tb.jsx)("div", {
                                    className: "collect-user-data-login-with-email__icon-container",
                                    children: (0, tb.jsx)(UserAvatar, {
                                        user: d
                                    })
                                }), (0, tb.jsx)(Typography_Typography, {
                                    variant: "body_normal",
                                    color: "primary",
                                    weight: "medium",
                                    className: "collect-user-data-login-with-email__email-address",
                                    children: d.email
                                })]
                            }), (0, tb.jsxs)("div", {
                                className: "collect-user-data-login-with-email__form",
                                children: [(0, tb.jsx)("div", {
                                    className: "collect-user-data-login-with-email__success-icon",
                                    children: (0, tb.jsx)(Icon_Icon, {
                                        color: "text-primary",
                                        size: "large",
                                        children: (0, tb.jsx)(SvgCheckConnection, {})
                                    })
                                }), (0, tb.jsx)(OnboardingUserDataForm, {
                                    userProfile: d,
                                    children: (0, tb.jsxs)("div", {
                                        className: "collect-user-data-login-with-email__welcome-container",
                                        children: [(0, tb.jsx)(Typography_Typography, {
                                            variant: "title",
                                            color: "primary",
                                            className: "collect-user-data-login-with-email__welcome-title",
                                            copykey: "dyn_collect_user_data.greeting",
                                            children: (null == a ? void 0 : a.general.collectUserDataWelcomeHeader) || c("dyn_collect_user_data.greeting", {
                                                appName: t
                                            })
                                        }), (0, tb.jsx)(Typography_Typography, {
                                            variant: "body_normal",
                                            weight: "regular",
                                            color: "secondary",
                                            copykey: "dyn_collect_user_data.description",
                                            children: (null == a ? void 0 : a.general.collectUserDataWelcomeMessage) || c("dyn_collect_user_data.description")
                                        })]
                                    })
                                }), (0, tb.jsx)(TextButton_TextButton, {
                                    className: "collect-user-data-login-with-email__log-out",
                                    onClick: r,
                                    copykey: "dyn_collect_user_data.log_out_button",
                                    children: c("dyn_collect_user_data.log_out_button")
                                })]
                            })]
                        })
                    },
                    "email-wallet-otp-verification-view": () => {
                        let {
                            setView: t
                        } = ViewContext_useViewContext(), [r, a] = (0, nt.useState)(), {
                            selectedWalletConnector: s,
                            clearStatesOnBackClick: l
                        } = useInternalDynamicContext_useInternalDynamicContext();
                        if (!s || !(0, tl.EZ)(s)) throw Error("Current wallet is not EmailWalletConnector");
                        let {
                            email: c
                        } = s;
                        if (!c) throw Error("EmailWalletOtpVerificationView requires a email");
                        let handleBackClick = () => {
                                s.clearEmail(), l(), t("login-with-email-or-wallet")
                            },
                            {
                                data: d,
                                isLoading: u,
                                mutate: m
                            } = useMutation_useMutation(t => s.verifyOneTimePassword(t), {
                                onFailure: t => {
                                    a(t), nr.emit("emailVerificationResult", !1, c)
                                },
                                onSuccess: () => {
                                    nr.emit("emailVerificationResult", !0, c)
                                }
                            });
                        return (0, tb.jsx)(OTPVerificationView_OTPVerificationView, {
                            email: c,
                            error: r,
                            onClickBack: handleBackClick,
                            isLoading: u,
                            onPinComplete: m,
                            isValid: !0 === d,
                            retryHandler: s.retryOneTypePassword.bind(s),
                            onPinChange: () => a(void 0),
                            onClickEditEmail: handleBackClick,
                            successBannerTextKey: "dyn_otp_verification.banner_text"
                        })
                    },
                    "embedded-reveal-account-view": EmbeddedRevealView,
                    "embedded-reveal-view": EmbeddedRevealView,
                    "embedded-wallet-auth-choice": ({
                        currentAction: t
                    }) => {
                        let {
                            t: r
                        } = useTranslation_useTranslation(), {
                            primaryWallet: a,
                            projectSettings: s,
                            setShowAuthFlow: l
                        } = useInternalDynamicContext_useInternalDynamicContext(), {
                            initPasskeyRecoveryProcess: c
                        } = usePasskeyRecovery_usePasskeyRecovery(), {
                            isTurnkeyWallet: d
                        } = useIsTurnkeyWallet(), u = (0, nt.useMemo)(() => {
                            var r;
                            let a = getEnabledEmbeddedWalletsAuthenticators(null === (r = null == s ? void 0 : s.sdk.embeddedWallets) || void 0 === r ? void 0 : r.supportedSecurityMethods),
                                l = Object.keys(a);
                            return "helpSession" !== t ? l.filter(t => "email" !== t) : l
                        }, [null == s ? void 0 : s.sdk.embeddedWallets]), m = (() => {
                            if (!a || !d) return !1;
                            let t = a.connector.getAuthenticatorHandler();
                            return t.isSessionActive()
                        })() ? "dyn_embedded_authenticator.passkey.auth_info.start_button" : "dyn_embedded_authenticator.passkey.auth_info.add_button", p = "helpSession" === t ? "dyn_embedded_authenticator.need_help_title" : "dyn_embedded_authenticator.title", h = "helpSession" === t ? "dyn_embedded_authenticator.need_help_description" : "dyn_embedded_authenticator.description";
                        return (null == u ? void 0 : u.length) ? (0, tb.jsxs)(tb.Fragment, {
                            children: [(0, tb.jsx)(ModalHeader, {
                                children: (0, tb.jsx)(Typography_Typography, {
                                    as: "h1",
                                    variant: "title",
                                    color: "primary",
                                    "data-testid": "dynamic-auth-modal-heading",
                                    className: "header__typography",
                                    copykey: p,
                                    children: r(p)
                                })
                            }), (0, tb.jsxs)("div", {
                                className: "embedded-auth-choice",
                                children: [(0, tb.jsx)("div", {
                                    className: "embedded-auth-choice__header",
                                    children: u.length > 1 ? (0, tb.jsx)(SvgMultipleAccountSecurity, {}) : (0, tb.jsx)(SvgPasskeyAccountSecurity, {})
                                }), (0, tb.jsx)(Typography_Typography, {
                                    variant: "body_normal",
                                    weight: "regular",
                                    color: "secondary",
                                    className: "embedded-auth-choice__subtitle",
                                    copykey: h,
                                    children: r(h)
                                }), u.length > 1 ? (0, tb.jsx)(EmbeddedAuthChoiceCards, {
                                    currentAction: t,
                                    supportedAuthenticators: u
                                }) : (0, tb.jsxs)(tb.Fragment, {
                                    children: [(0, tb.jsx)(AuthChoiceInfo, {
                                        choice: "passkey"
                                    }), (0, tb.jsx)(Button_Button, {
                                        dataTestId: "passkey-only-choice-button",
                                        buttonVariant: "brand-primary",
                                        color: "brand-primary",
                                        expanded: !0,
                                        onClick: () => c("passkey"),
                                        copykey: m,
                                        typographyProps: {
                                            color: "inherit"
                                        },
                                        children: r(m)
                                    })]
                                }), (0, tb.jsx)(Button_Button, {
                                    buttonVariant: "primary",
                                    buttonClassName: "embedded-auth-choice__skip-button",
                                    expanded: !0,
                                    onClick: () => l(!1),
                                    copykey: "dyn_embedded_authenticator.skip",
                                    children: r("dyn_embedded_authenticator.skip")
                                })]
                            })]
                        }) : null
                    },
                    "gate-blocked-wallet": NoAccess,
                    "login-with-email-or-wallet": LoginView,
                    "login-with-email-or-wallet-full-wallet-list": LoginView,
                    "login-with-email-verification": EmailVerification,
                    "login-with-wallet-only": LoginView,
                    "merge-user-accounts": () => {
                        let {
                            environmentId: t,
                            setUser: r,
                            setOnboardingOnlyJwt: a,
                            setShowAuthFlow: s,
                            setCallback: l,
                            primaryWallet: c,
                            user: d,
                            authToken: u,
                            onboardingOnlyJwt: m
                        } = useInternalDynamicContext_useInternalDynamicContext(), {
                            t: p
                        } = useTranslation_useTranslation(), {
                            setError: h
                        } = ErrorContext_useErrorContext(), {
                            setView: f,
                            goToInitialView: y
                        } = ViewContext_useViewContext(), {
                            email: b
                        } = useEmailVerificationContext(), C = u || m;
                        return (0, tb.jsxs)("div", {
                            className: "merge-user-accounts__container",
                            children: [(0, tb.jsxs)("div", {
                                className: "merge-user-accounts__accounts",
                                children: [(0, tb.jsxs)("div", {
                                    className: "merge-user-accounts__accounts__item",
                                    children: [(0, tb.jsx)(tc.o, {
                                        walletKey: null == c ? void 0 : c.connector.key,
                                        className: "merge-user-accounts__accounts__item__icon"
                                    }), (0, tb.jsx)(Typography_Typography, {
                                        variant: "body_normal",
                                        weight: "medium",
                                        color: "secondary",
                                        className: "merge-user-accounts__accounts__item__text",
                                        children: shortenWalletAddress_shortenWalletAddress(null == c ? void 0 : c.address, 3, 3)
                                    })]
                                }), (0, tb.jsx)("div", {
                                    className: "merge-user-accounts__accounts__divider",
                                    children: (0, tb.jsx)(Icon_Icon, {
                                        color: "text-secondary",
                                        size: "small",
                                        children: (0, tb.jsx)(SvgDoubleArrowRight, {})
                                    })
                                }), (0, tb.jsxs)("div", {
                                    className: "merge-user-accounts__accounts__item",
                                    children: [(0, tb.jsx)(t9, {
                                        className: "merge-user-accounts__accounts__item__icon"
                                    }), (0, tb.jsx)(Typography_Typography, {
                                        variant: "body_normal",
                                        weight: "medium",
                                        color: "secondary",
                                        className: "merge-user-accounts__accounts__item__text",
                                        children: shortenEmail_shortenEmail(b, {
                                            breakpoint: 4,
                                            cutEnd: 1,
                                            cutStart: 2
                                        })
                                    })]
                                })]
                            }), (0, tb.jsx)(Typography_Typography, {
                                weight: "regular",
                                variant: "title",
                                className: "merge-user-accounts__text merge-user-accounts__text__header",
                                copykey: "dyn_merge_user_accounts.title",
                                children: p("dyn_merge_user_accounts.title")
                            }), (0, tb.jsxs)(Typography_Typography, {
                                weight: "medium",
                                variant: "body_normal",
                                className: "merge-user-accounts__text merge-user-accounts__text__body",
                                copykey: "dyn_merge_user_accounts.existing_account",
                                children: [p("dyn_merge_user_accounts.existing_account"), " ", (0, tb.jsx)("span", {
                                    className: "merge-user-accounts__text--bold",
                                    children: shortenEmail_shortenEmail(b, {
                                        breakpoint: 14
                                    })
                                }), " ", p("dyn_merge_user_accounts.existing_account_trail")]
                            }), (0, tb.jsxs)("div", {
                                className: "merge-user-accounts__buttons",
                                children: [(0, tb.jsx)(Button_Button, {
                                    className: "merge-user-accounts__buttons__button",
                                    onClick: () => _tslib_awaiter(void 0, void 0, void 0, function*() {
                                        if (C) try {
                                            let c = yield mergeUserAccounts(C, t);
                                            if (c) {
                                                storeAuthToken(c);
                                                let t = decodeJwt(c);
                                                if (void 0 === t) throw new td.kW("Invalid token!");
                                                let d = createUserProfile(t);
                                                a(void 0), r(d), s(!1), l("authSuccess");
                                                return
                                            }
                                            throw new td.kW("Something went wrong, please try again.")
                                        } catch (t) {
                                            if (h(p("dyn_merge_user_accounts.errors.merge_error")), d) {
                                                s(!1, {
                                                    emitCancelAuth: !0
                                                });
                                                return
                                            }
                                            y()
                                        }
                                    }),
                                    buttonVariant: "primary",
                                    buttonPadding: "large",
                                    copykey: "dyn_merge_user_accounts.confirm_button",
                                    children: p("dyn_merge_user_accounts.confirm_button")
                                }), (0, tb.jsx)(Button_Button, {
                                    className: "merge-user-accounts__buttons__button",
                                    onClick: () => {
                                        if (h(void 0), d) {
                                            s(!1);
                                            return
                                        }
                                        f("collect-user-data")
                                    },
                                    buttonVariant: "secondary",
                                    buttonPadding: "large",
                                    copykey: "dyn_merge_user_accounts.cancel_button",
                                    children: p("dyn_merge_user_accounts.cancel_button")
                                })]
                            })]
                        })
                    },
                    "multi-wallet-wallet-list": WalletList,
                    "network-not-supported": () => {
                        let {
                            onboardingImageUrl: t,
                            selectedWalletConnector: r,
                            isFullyConnected: a,
                            setShowAuthFlow: s,
                            bridgeChainsToConnect: l
                        } = useInternalDynamicContext_useInternalDynamicContext(), {
                            t: c
                        } = useTranslation_useTranslation(), {
                            network: d
                        } = useWalletConnectorNetwork(r), u = useConnectAndSign({
                            shouldCallCallback: !1,
                            shouldUpdateWallets: !a || a && !!(null == l ? void 0 : l.length)
                        }), [m, p] = (0, nt.useState)(!1);
                        if ((0, nt.useEffect)(() => {
                                isSupportedNetwork({
                                    network: d,
                                    walletConnector: r
                                }) && (u({
                                    walletConnector: r
                                }), a && s(!1))
                            }, [d, s, a]), !r) return null;
                        let h = r.evmNetworks || [],
                            f = isSupportedNetwork({
                                network: d,
                                walletConnector: r
                            });
                        return (0, tb.jsxs)("div", {
                            className: "network-not-supported",
                            "data-testid": "network-not-supported",
                            children: [t && (0, tb.jsx)("img", {
                                className: "network-not-supported__main-img",
                                src: t,
                                alt: "onboarding"
                            }), !f && (0, tb.jsx)(ErrorContainer, {
                                variant: "info",
                                withIcon: !1,
                                className: "network-not-supported__error--not-supported",
                                copykey: "dyn_network_not_supported.warning_message",
                                children: c("dyn_network_not_supported.warning_message")
                            }), (0, tb.jsxs)("div", {
                                className: classNames_classNames("network-not-supported__content-container", {
                                    "network-not-supported__content-container--error": !f
                                }),
                                children: [(0, tb.jsx)("div", {
                                    className: "network-not-supported__img-container",
                                    children: (0, tb.jsx)(tc.o, {
                                        style: {
                                            height: 64,
                                            width: 64
                                        },
                                        walletKey: r.key
                                    })
                                }), (0, tb.jsx)(UserAddress, {
                                    walletConnector: r
                                }), (0, tb.jsx)("div", {
                                    className: "network-not-supported__network-container",
                                    children: h.length > 1 && (0, tb.jsx)(NetworkPicker_NetworkPicker, {
                                        currentNetwork: d,
                                        evmNetworks: h,
                                        connector: r,
                                        isNetworkPickerOpen: m,
                                        setIsNetworkPickerOpen: p,
                                        showNetworkName: !0,
                                        buttonClassName: "network-not-supported__network-picker-button",
                                        mainClassName: "network-not-supported__network-picker"
                                    })
                                }), (0, tb.jsx)("div", {
                                    className: "network-not-supported__welcome-container",
                                    children: (0, tb.jsx)(Typography_Typography, {
                                        variant: "body_normal",
                                        weight: "regular",
                                        color: "secondary",
                                        copykey: "dyn_network_not_supported.subtitle",
                                        children: c("dyn_network_not_supported.subtitle")
                                    })
                                }), 1 === h.length && (0, tb.jsx)(SelectNetworkButton, {
                                    onClick: t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                                        try {
                                            yield r.switchNetwork({
                                                networkChainId: t
                                            })
                                        } catch (t) {
                                            tv.debug(t)
                                        }
                                    }),
                                    networkId: h[0].networkId,
                                    networkName: h[0].vanityName || h[0].name,
                                    networkIconUrl: h[0].iconUrls[0]
                                })]
                            })]
                        })
                    },
                    "network-not-supported-manual": () => {
                        var t, r;
                        let {
                            user: a,
                            selectedWalletConnector: s,
                            isFullyConnected: l,
                            setShowAuthFlow: c,
                            bridgeChainsToConnect: d
                        } = useInternalDynamicContext_useInternalDynamicContext(), {
                            t: u
                        } = useTranslation_useTranslation(), {
                            network: m
                        } = useWalletConnectorNetwork(s), p = useConnectAndSign({
                            shouldCallCallback: !1,
                            shouldUpdateWallets: !l || l && !!(null == d ? void 0 : d.length)
                        });
                        (0, nt.useEffect)(() => {
                            isSupportedNetwork({
                                network: m,
                                walletConnector: s
                            }) && (p({
                                walletConnector: s
                            }), l && c(!1))
                        }, [m, c, l]);
                        let h = (0, tb.jsx)(tc.o, {
                                walletKey: null == s ? void 0 : s.key,
                                style: {
                                    height: pixelToRem_pixelToRem(80 * a9),
                                    width: pixelToRem_pixelToRem(80 * a9)
                                }
                            }),
                            f = getWalletConnectorNetworks(s);
                        return (0, tb.jsxs)("div", {
                            "data-testid": "network-not-supported",
                            className: "network-not-supported-switch-manual",
                            children: [(0, tb.jsx)("div", {
                                className: "network-not-supported-switch-manual__img-container",
                                children: (null === (t = null == a ? void 0 : a.ens) || void 0 === t ? void 0 : t.avatar) ? (0, tb.jsx)("div", {
                                    className: "network-not-supported-switch-manual__network-container",
                                    children: (0, tb.jsx)("img", {
                                        src: null === (r = null == a ? void 0 : a.ens) || void 0 === r ? void 0 : r.avatar,
                                        alt: "user ens avatar",
                                        className: "network-not-supported-switch-manual__img"
                                    })
                                }) : (0, tb.jsx)("div", {
                                    className: "network-not-supported-switch-manual__network-container",
                                    children: (0, tb.jsx)(IconWithSpinner_IconWithSpinner, {
                                        Icon: h,
                                        iconSize: 80,
                                        isSpinning: !0
                                    })
                                })
                            }), (0, tb.jsxs)("div", {
                                className: "network-not-supported-switch-manual__content",
                                children: [(0, tb.jsx)(Typography_Typography, {
                                    className: "network-not-supported-switch-manual__title",
                                    weight: "medium",
                                    variant: "title",
                                    color: "primary",
                                    copykey: "dyn_network_not_supported_manual_switch.title",
                                    children: u("dyn_network_not_supported_manual_switch.title")
                                }), (0, tb.jsx)(Typography_Typography, {
                                    variant: "body_normal",
                                    color: "secondary",
                                    copykey: f.length ? "dyn_network_not_supported_manual_switch.subtitle_network_defined" : "dyn_network_not_supported_manual_switch.subtitle_no_network_defined",
                                    children: f.length ? u("dyn_network_not_supported_manual_switch.subtitle_network_defined", {
                                        network: f[0].name
                                    }) : u("dyn_network_not_supported_manual_switch.subtitle_no_network_defined")
                                })]
                            })]
                        })
                    },
                    "no-access": NoAccess,
                    "no-qr-not-installed": () => {
                        let {
                            selectedWalletConnector: t
                        } = useInternalDynamicContext_useInternalDynamicContext(), {
                            walletBook: r
                        } = (0, tc.yw)(), {
                            t: a
                        } = useTranslation_useTranslation();
                        if (!t) return null;
                        let s = Object.entries((0, tc.oq)(r, t.key)).filter(([, t]) => "" !== t).filter(([t]) => "ios" !== t && "android" !== t).map(([t, r]) => (0, tb.jsx)(WalletHelpLink_WalletHelpLink, {
                            name: t,
                            link: r,
                            Icon: getBrowserIcon_getBrowserIcon(t)
                        }, t));
                        return (0, tb.jsxs)("div", {
                            className: "no-qr-code-installed__container",
                            "data-testid": "no-qr-code-installed",
                            children: [(0, tb.jsx)("div", {
                                className: "no-qr-code-installed__img",
                                children: (0, tb.jsx)(tc.o, {
                                    walletKey: t.key,
                                    style: {
                                        height: pixelToRem_pixelToRem(64),
                                        width: pixelToRem_pixelToRem(64)
                                    }
                                })
                            }), (0, tb.jsx)(Typography_Typography, {
                                className: "no-qr-code-installed__typography--title",
                                variant: "title",
                                copykey: "dyn_qr_code.wallet_not_installed.install",
                                children: a("dyn_qr_code.wallet_not_installed.install", {
                                    wallet: (0, tc.MO)(r, t.key).name
                                })
                            }), (0, tb.jsx)(Typography_Typography, {
                                variant: "body_normal",
                                className: "no-qr-code-installed__typography",
                                color: "secondary",
                                copykey: "dyn_qr_code.wallet_not_installed.select",
                                children: a("dyn_qr_code.wallet_not_installed.select")
                            }), (0, tb.jsx)("div", {
                                className: "no-qr-code-installed__links-section",
                                children: s
                            }), (0, tb.jsx)(Typography_Typography, {
                                variant: "body_mini",
                                className: "no-qr-code-installed__typography",
                                weight: "medium",
                                color: "secondary",
                                copykey: "dyn_qr_code.wallet_not_installed.refresh",
                                children: a("dyn_qr_code.wallet_not_installed.refresh")
                            })]
                        })
                    },
                    "passkey-intro": () => {
                        var t, r;
                        let {
                            walletConnectorOptions: a,
                            environmentId: s,
                            handleLogOut: l,
                            onboardingOnlyJwt: c,
                            projectSettings: d
                        } = useInternalDynamicContext_useInternalDynamicContext(), u = null === (r = null === (t = null == d ? void 0 : d.sdk) || void 0 === t ? void 0 : t.embeddedWallets) || void 0 === r ? void 0 : r.allowSkippingAuthenticatorAtSignup, {
                            setIsFooterExpanded: m
                        } = useFooterAnimationContext(), {
                            t: p
                        } = useTranslation_useTranslation(), [h, f] = (0, nt.useState)(!1);
                        (0, nt.useEffect)(() => LocalStorage.removeFromLS(nu), []);
                        let {
                            createDynamicEmbeddedWalletMutation: y,
                            isLoading: b,
                            error: C
                        } = useCreateDynamicEmbeddedWalletMutation(), handleCreateEmbeddedWallet = t => {
                            var r;
                            let l = null !== (r = getAuthToken()) && void 0 !== r ? r : c,
                                d = decodeJwt(l);
                            if (!l || !d) throw Error("User is not logged in");
                            f(t), y({
                                authToken: l,
                                decodedJwt: d,
                                environmentId: s,
                                walletConnectorOptions: a,
                                withAuthenticator: t
                            })
                        }, E = (0, nt.useMemo)(() => C ? C instanceof td.kW ? C.message : getProperErrorMessage(C) : void 0, [C]), j = (0, tb.jsx)(Tooltip, {
                            content: p("dyn_passkey_intro.helper.tooltip"),
                            className: "header__tooltip",
                            copykey: "dyn_passkey_intro.helper.tooltip",
                            children: (0, tb.jsx)(rk, {
                                type: "button",
                                "data-testid": "info-button",
                                onClick: () => m(t => !t),
                                className: "header__icon",
                                children: (0, tb.jsx)(SvgQuestionMark, {})
                            })
                        }, "info-button");
                        return (0, tb.jsxs)(tb.Fragment, {
                            children: [(0, tb.jsx)(ModalHeader, {
                                trailing: j,
                                children: (0, tb.jsx)(Typography_Typography, {
                                    as: "h1",
                                    variant: "title",
                                    color: "primary",
                                    "data-testid": "dynamic-auth-modal-heading",
                                    className: "header__typography",
                                    copykey: "dyn_passkey_intro.title",
                                    children: p("dyn_passkey_intro.title")
                                })
                            }), (0, tb.jsxs)("div", {
                                className: "passkey-intro-view",
                                children: [(0, tb.jsx)("div", {
                                    className: "passkey-intro-view__header",
                                    children: (0, tb.jsx)(SvgPasskeyIntroIcon, {})
                                }), (0, tb.jsx)(Typography_Typography, {
                                    variant: "body_normal",
                                    weight: "regular",
                                    color: "secondary",
                                    className: "passkey-intro-view__subtitle",
                                    copykey: "dyn_passkey_intro.subtitle",
                                    children: p("dyn_passkey_intro.subtitle")
                                }), E && (0, tb.jsx)(ErrorContainer, {
                                    children: E
                                }), (0, tb.jsxs)("div", {
                                    className: "passkey-intro-view__actions",
                                    children: [(0, tb.jsx)(Button_Button, {
                                        buttonVariant: "brand-primary",
                                        buttonPadding: "large",
                                        onClick: () => handleCreateEmbeddedWallet(!0),
                                        dataTestId: "setup-passkey-button",
                                        loading: b && h,
                                        disabled: b,
                                        typographyProps: {
                                            color: "inherit"
                                        },
                                        children: (0, tb.jsxs)("div", {
                                            className: "passkey-intro-view__inline-button",
                                            children: [(0, tb.jsx)(PasskeyDeviceIcon, {
                                                size: "small"
                                            }), (0, tb.jsx)(Typography_Typography, {
                                                copykey: "dyn_passkey_intro.button",
                                                children: p("dyn_passkey_intro.button")
                                            })]
                                        })
                                    }), u ? (0, tb.jsx)(TextButton_TextButton, {
                                        "data-testid": "setup-passkey-skip-button",
                                        className: "passkey-intro-view__skip",
                                        onClick: () => handleCreateEmbeddedWallet(!1),
                                        copykey: "dyn_passkey_intro.button_skip",
                                        children: p("dyn_passkey_intro.button_skip")
                                    }) : (0, tb.jsx)(TextButton_TextButton, {
                                        "data-testid": "setup-passkey-logout-button",
                                        className: "passkey-intro-view__log-out",
                                        onClick: l,
                                        copykey: "dyn_passkey_intro.button_logout",
                                        children: p("dyn_passkey_intro.button_logout")
                                    })]
                                })]
                            })]
                        })
                    },
                    "passkey-new-domain-detected": () => {
                        let {
                            t
                        } = useTranslation_useTranslation(), {
                            projectSettings: r
                        } = useInternalDynamicContext_useInternalDynamicContext(), a = (0, nt.useMemo)(() => {
                            var t;
                            let a = getEnabledEmbeddedWalletsAuthenticators(null === (t = null == r ? void 0 : r.sdk.embeddedWallets) || void 0 === t ? void 0 : t.supportedSecurityMethods);
                            return Object.keys(a).filter(t => "email" !== t)
                        }, [null == r ? void 0 : r.sdk.embeddedWallets]);
                        return (0, tb.jsxs)(tb.Fragment, {
                            children: [(0, tb.jsx)(ModalHeader, {
                                children: (0, tb.jsx)(Typography_Typography, {
                                    as: "h1",
                                    variant: "title",
                                    color: "primary",
                                    "data-testid": "dynamic-auth-modal-heading",
                                    className: "header__typography",
                                    copykey: "dyn_passkey_new_domain_detected.title",
                                    children: t("dyn_passkey_new_domain_detected.title")
                                })
                            }), (0, tb.jsxs)("div", {
                                className: "passkey-new-domain-detected",
                                children: [(0, tb.jsx)(SvgDomain, {
                                    className: "passkey-new-domain-detected__header"
                                }), (0, tb.jsx)(Typography_Typography, {
                                    variant: "body_normal",
                                    weight: "regular",
                                    color: "secondary",
                                    children: t("dyn_passkey_new_domain_detected.description")
                                }), (0, tb.jsx)(EmbeddedAuthChoiceCards, {
                                    supportedAuthenticators: a
                                }), (0, tb.jsx)(NeedHelpSection, {
                                    isRecoveryFlow: !0
                                })]
                            })]
                        })
                    },
                    "passkey-recovery-bundle": ({
                        authenticatorType: t,
                        currentAction: r
                    }) => {
                        let {
                            authToken: a,
                            primaryWallet: s,
                            environmentId: l,
                            user: c,
                            setShowAuthFlow: d
                        } = useInternalDynamicContext_useInternalDynamicContext(), {
                            isTurnkeyWalletWithoutAuthenticator: u
                        } = useIsTurnkeyWallet(), [m, p] = (0, nt.useState)(""), [h, f] = (0, nt.useState)(!1), [y, b] = (0, nt.useState)(!1), {
                            t: C
                        } = useTranslation_useTranslation(), {
                            setView: E
                        } = ViewContext_useViewContext(), {
                            mutate: j,
                            isLoading: I,
                            error: O
                        } = useMutation_useMutation(r => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            let l = isAccountAbstractionWallet(s) ? createOwnerWallet(s, (null == c ? void 0 : c.verifiedCredentials) || []) : s;
                            yield passkeyRecoveryBundleValidation({
                                authToken: a,
                                bundleInput: r,
                                wallet: l
                            }), b(!0), "email" === t && nr.emit("passkeyRecoveryCompleted", s), setTimeout(() => {
                                if ("passkey" === t) return E("passkey-recovery-complete");
                                d(!1)
                            }, 2e3)
                        })), isValidBundle = t => !!((null == t ? void 0 : t.length) && !(t.length < 100) && !(t.length >= 256) && on.test(t)), P = (0, nt.useMemo)(() => O ? O instanceof td.kW ? O.message : getProperErrorMessage(O) : void 0, [O]), R = (0, tb.jsx)(Icon_Icon, {
                            color: "brand-primary",
                            children: (0, tb.jsx)(tF, {})
                        }), F = u ? "dyn_passkey_secure_modal" : "dyn_passkey_recovery", W = (0, tb.jsx)(rk, {
                            type: "button",
                            onClick: () => {
                                d(!1, {
                                    emitCancelAuth: !0
                                }), nr.emit("passkeyRecoveryFailed", new td.kW("Validation request cancelled"))
                            },
                            "data-testid": "close-button",
                            children: (0, tb.jsx)(close_SvgClose, {})
                        });
                        return (0, tb.jsxs)(tb.Fragment, {
                            children: [(0, tb.jsx)(ModalHeader, {
                                trailing: W,
                                children: (0, tb.jsx)(Typography_Typography, {
                                    as: "h1",
                                    variant: "title",
                                    color: "primary",
                                    "data-testid": "dynamic-auth-modal-heading",
                                    className: "header__typography",
                                    copykey: `${F}.code.title`,
                                    children: C(`${F}.code.title`)
                                })
                            }), (0, tb.jsxs)("div", {
                                className: "passkey-recovery-view",
                                children: [O || y ? (0, tb.jsx)(IconWithStatus, {
                                    Icon: tF,
                                    iconSize: 64,
                                    variant: O ? "red" : "green",
                                    InnerIcon: O ? SvgError : SvgCheck
                                }) : (0, tb.jsx)(IconWithSpinner_IconWithSpinner, {
                                    Icon: R,
                                    isSpinning: !O && !y,
                                    iconSize: 96
                                }), (0, tb.jsx)(Typography_Typography, {
                                    variant: "body_normal",
                                    weight: "regular",
                                    color: "secondary",
                                    className: "passkey-recovery-view__subtitle",
                                    copykey: `${F}.code.description`,
                                    children: C(`${F}.code.description`, {
                                        email: null == c ? void 0 : c.email
                                    })
                                }), (0, tb.jsx)("div", {
                                    className: "passkey-recovery-view__actions",
                                    children: (0, tb.jsx)(Input, {
                                        id: "passkey-recovery-bundle",
                                        "data-testid": "passkey-recovery-bundle-input",
                                        value: m,
                                        onChange: t => {
                                            var r;
                                            let a = null === (r = t.target.value) || void 0 === r ? void 0 : r.trim();
                                            p(a), isValidBundle(a) && j(a)
                                        },
                                        label: C(`${F}.code.input_label`),
                                        disabled: I || h,
                                        error: !!O,
                                        className: y ? "passkey-recovery-view__input-valid" : "",
                                        autoFocus: !0,
                                        message: P
                                    })
                                }), (0, tb.jsxs)("div", {
                                    className: "passkey-recovery-view__resend-code",
                                    children: [(0, tb.jsx)(Typography_Typography, {
                                        color: "secondary",
                                        variant: "body_small",
                                        copykey: `${F}.code.resend.text`,
                                        children: C(`${F}.code.resend.text`)
                                    }), (0, tb.jsx)(Typography_Typography, {
                                        variant: "body_small",
                                        color: "link",
                                        copykey: `${F}.code.resend.button`,
                                        children: (0, tb.jsx)(TextButton_TextButton, {
                                            "data-testid": "resend-email-button",
                                            onClick: () => _tslib_awaiter(void 0, void 0, void 0, function*() {
                                                try {
                                                    f(!0), yield resentRecoveryEmail({
                                                        authToken: a,
                                                        authenticatorType: t,
                                                        environmentId: l,
                                                        wallet: s
                                                    })
                                                } catch (t) {
                                                    tv.error("Failed to complete passkey recovery", t)
                                                } finally {
                                                    f(!1)
                                                }
                                            }),
                                            disabled: h || I || m.length > 0 && !O,
                                            children: C(`${F}.code.resend.button`)
                                        })
                                    })]
                                })]
                            })]
                        })
                    },
                    "passkey-recovery-complete": () => {
                        let {
                            authToken: t,
                            primaryWallet: r,
                            environmentId: a,
                            user: s,
                            setShowAuthFlow: l,
                            setUser: c,
                            setPasskeySuccessPopup: d
                        } = useInternalDynamicContext_useInternalDynamicContext(), {
                            isTurnkeyWalletWithoutAuthenticator: u
                        } = useIsTurnkeyWallet(), {
                            t: m
                        } = useTranslation_useTranslation(), {
                            mutate: p,
                            isLoading: h,
                            error: f
                        } = useMutation_useMutation(() => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            let u = isAccountAbstractionWallet(r) ? createOwnerWallet(r, (null == s ? void 0 : s.verifiedCredentials) || []) : r,
                                {
                                    jwt: m,
                                    decodedJwt: p
                                } = yield passkeyRecovery_completePasskeyRecovery({
                                    authToken: t,
                                    environmentId: a,
                                    userEmail: null == s ? void 0 : s.email,
                                    wallet: u
                                });
                            nr.emit("passkeyRecoveryCompleted", r), storeAuthToken(m), c(createUserProfile(p)), l(!1), d(el.CREATED)
                        }), {
                            onFailure: t => {
                                tv.error("Failed to init passkey recovery", t), nr.emit("passkeyRecoveryFailed", t)
                            }
                        }), y = (0, nt.useMemo)(() => f ? f instanceof td.kW ? f.message : getProperErrorMessage(f) : void 0, [f]), b = u ? "dyn_passkey_secure_modal" : "dyn_passkey_recovery";
                        return (0, tb.jsxs)("div", {
                            className: "passkey-recovery-view",
                            children: [(0, tb.jsx)("div", {
                                className: "passkey-recovery-view__header",
                                children: (0, tb.jsx)(SvgPasskeyIntroIcon, {})
                            }), (0, tb.jsx)(Typography_Typography, {
                                variant: "body_normal",
                                weight: "regular",
                                color: "secondary",
                                className: "passkey-recovery-view__subtitle",
                                children: m(`${b}.complete.description`)
                            }), y && (0, tb.jsx)(ErrorContainer, {
                                children: y
                            }), (0, tb.jsx)("div", {
                                className: "passkey-recovery-view__actions",
                                children: (0, tb.jsx)(Button_Button, {
                                    buttonVariant: "brand-primary",
                                    buttonPadding: "large",
                                    dataTestId: "passkey-recovery-complete-button",
                                    onClick: () => p(),
                                    disabled: h,
                                    showInternalLoading: !1,
                                    typographyProps: {
                                        color: "inherit"
                                    },
                                    children: (0, tb.jsxs)("div", {
                                        className: "passkey-recovery-view__inline-button",
                                        children: [(0, tb.jsx)(PasskeyDeviceIcon, {
                                            size: "small"
                                        }), (0, tb.jsx)(Typography_Typography, {
                                            children: m(`${b}.complete.complete_button`)
                                        })]
                                    })
                                })
                            }), (0, tb.jsx)(NeedHelpSection, {
                                isRecoveryFlow: !0
                            })]
                        })
                    },
                    "passkey-recovery-start": ({
                        authenticatorType: t
                    }) => {
                        let {
                            setShowAuthFlow: r
                        } = useInternalDynamicContext_useInternalDynamicContext(), {
                            isTurnkeyWalletWithoutAuthenticator: a
                        } = useIsTurnkeyWallet(), {
                            initAuthMethod: s,
                            isLoading: l,
                            error: c
                        } = useInitEmbeddedWalletAuthMethod(), d = useElementById_useElementById(ak), {
                            t: u
                        } = useTranslation_useTranslation(), m = (0, nt.useMemo)(() => c ? c instanceof td.kW ? c.message : "Something went wrong." : void 0, [c]), p = (0, tb.jsx)(Icon_Icon, {
                            color: "brand-primary",
                            children: (0, tb.jsx)(SvgSignInWithEmail, {})
                        }), h = a ? "dyn_passkey_secure_modal" : "dyn_passkey_recovery", f = (0, tb.jsx)(rk, {
                            type: "button",
                            onClick: () => r(!1, {
                                emitCancelAuth: !0
                            }),
                            "data-testid": "close-button",
                            children: (0, tb.jsx)(close_SvgClose, {})
                        });
                        return (0, tb.jsxs)(tb.Fragment, {
                            children: [(0, tb.jsx)(ModalHeader, {
                                trailing: f,
                                children: (0, tb.jsx)(Typography_Typography, {
                                    as: "h1",
                                    variant: "title",
                                    color: "primary",
                                    "data-testid": "dynamic-auth-modal-heading",
                                    className: "header__typography",
                                    children: u(`${h}.start.title`)
                                })
                            }), (0, tb.jsxs)("div", {
                                className: "passkey-recovery-view",
                                children: [(0, tb.jsx)(IconWithSpinner_IconWithSpinner, {
                                    Icon: p,
                                    isSpinning: l,
                                    iconSize: 96
                                }), (0, tb.jsx)(Typography_Typography, {
                                    variant: "body_normal",
                                    weight: "regular",
                                    color: "secondary",
                                    className: "passkey-recovery-view__subtitle",
                                    children: u(`${h}.start.description`)
                                }), m && (0, tb.jsx)(ErrorContainer, {
                                    children: m
                                }), (0, tb.jsx)("div", {
                                    className: "passkey-recovery-view__actions",
                                    children: (0, tb.jsx)(Button_Button, {
                                        buttonPadding: "large",
                                        dataTestId: "passkey-recovery-button",
                                        onClick: () => s({
                                            authenticatorType: t,
                                            iframeContainer: d.current
                                        }),
                                        disabled: l,
                                        showInternalLoading: !1,
                                        children: (0, tb.jsx)("div", {
                                            children: (0, tb.jsx)(Typography_Typography, {
                                                children: u(`${h}.start.start_button`)
                                            })
                                        })
                                    })
                                }), (0, tb.jsx)(NeedHelpSection, {
                                    isRecoveryFlow: !0
                                })]
                            })]
                        })
                    },
                    "pending-connect": () => {
                        let {
                            selectedWalletConnector: t
                        } = useInternalDynamicContext_useInternalDynamicContext(), {
                            t: r
                        } = useTranslation_useTranslation(), a = (0, tb.jsx)(tc.o, {
                            walletKey: null == t ? void 0 : t.key,
                            style: {
                                height: pixelToRem_pixelToRem(94 * a9),
                                width: pixelToRem_pixelToRem(94 * a9)
                            }
                        });
                        return (0, tb.jsxs)("div", {
                            className: "pending-connect__container",
                            children: [(0, tb.jsx)(IconWithSpinner_IconWithSpinner, {
                                Icon: a,
                                iconSize: 94,
                                isSpinning: !0,
                                className: "pending-connect__icon-with-spinner"
                            }), (0, tb.jsx)(Typography_Typography, {
                                variant: "body_normal",
                                weight: "regular",
                                className: "pending-connect__copy-text",
                                copykey: (0, td.tq)() ? "dyn_pending_connection.mobile" : "dyn_pending_connection.computer",
                                children: r((0, td.tq)() ? "dyn_pending_connection.mobile" : "dyn_pending_connection.computer")
                            })]
                        })
                    },
                    "pending-signature": PendingSignatureView,
                    "pending-signature-without-back-button": PendingSignatureView,
                    "qr-code": () => {
                        var t;
                        let {
                            theme: {
                                theme: r
                            }
                        } = ThemeContext_useThemeContext(), [a, s] = (0, nt.useState)(!1), [l, c] = (0, nt.useState)(!1), {
                            name: d
                        } = r, {
                            qrcodeUri: u,
                            desktopUri: m,
                            selectedWalletConnector: p
                        } = useInternalDynamicContext_useInternalDynamicContext(), {
                            walletBook: h
                        } = (0, tc.yw)();
                        if (useTimeout(() => s(!0), 5e3), !p) return null;
                        let f = (0, tb.jsx)(tc.o, {
                            walletKey: p.key,
                            style: {
                                height: pixelToRem_pixelToRem(32),
                                width: pixelToRem_pixelToRem(32)
                            }
                        });
                        return (0, tb.jsxs)("div", {
                            "data-testid": "qr-code-view",
                            children: [(0, tb.jsx)(AnimatePresence, {
                                animationComponent: (0, tb.jsx)(VerticalDrawerTransition, {
                                    style: {
                                        width: "100%"
                                    }
                                }),
                                children: a && !l && (0, tb.jsxs)("div", {
                                    className: "qr-code-view__scan-issue-message",
                                    children: [(0, tb.jsx)(Typography_Typography, {
                                        color: "primary",
                                        variant: "body_small",
                                        children: "If you're having issues scanning, click\xa0"
                                    }), (0, tb.jsx)("button", {
                                        "data-testid": "qr-code-view__scan-issue-button",
                                        className: "qr-code-view__scan-issue-button",
                                        onClick: () => c(!0),
                                        children: "here"
                                    })]
                                })
                            }), (0, tb.jsx)(QrCodeContainer, {
                                showQrCodeMessage: a,
                                desktopUri: m,
                                accentColor: "dark" === d ? r.colors.textPrimary : null !== (t = (0, tc.Vj)(h, p.key)) && void 0 !== t ? t : "",
                                walletKey: p.key,
                                walletName: p.name,
                                qrcodeValue: u,
                                Icon: f,
                                showCopyToClipboardButton: p.isWalletConnect,
                                showQrCodeImage: l
                            })]
                        })
                    },
                    "rename-passkey": () => {
                        var t;
                        let {
                            passkey: r,
                            setPasskey: a,
                            passkeyIcon: s,
                            passkeyEdited: l,
                            setPasskeyEdited: c
                        } = usePasskeyContext(), {
                            t: d
                        } = useTranslation_useTranslation(), {
                            environmentId: u,
                            setShowAuthFlow: m,
                            setPasskeySuccessPopup: p
                        } = useInternalDynamicContext_useInternalDynamicContext(), [h, f] = (0, nt.useState)(!1), handleUpdatePasskey = t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            if (t && (null == r ? void 0 : r.id)) {
                                let s = yield updateUserPasskey({
                                    alias: t.trim(),
                                    environmentId: u,
                                    id: r.id,
                                    userJwt: getAuthToken()
                                });
                                s ? (a(s), c(!l), m(!1), p(el.EDITED)) : f(!0)
                            } else f(!0)
                        }), y = (0, tb.jsx)(rk, {
                            type: "button",
                            onClick: () => {
                                m(!1)
                            },
                            "data-testid": "back-button",
                            children: (0, tb.jsx)(SvgChevronLeft, {})
                        }), b = (0, tb.jsx)(rk, {
                            onClick: () => m(!1),
                            type: "button",
                            id: "close-button",
                            "data-testid": "close-button",
                            children: (0, tb.jsx)(close_SvgClose, {})
                        });
                        return r ? (0, tb.jsxs)("div", {
                            className: "edit-passkeys-widget-view",
                            children: [(0, tb.jsx)(ModalHeader, {
                                leading: y,
                                trailing: b
                            }), (0, tb.jsx)("div", {
                                className: "edit-passkeys-widget-view__icon",
                                children: s
                            }), (0, tb.jsx)(Typography_Typography, {
                                as: "h1",
                                variant: "title",
                                color: "primary",
                                className: "edit-passkeys-widget-view__title",
                                copykey: "dyn_rename_passkeys.title",
                                children: d("dyn_rename_passkeys.title")
                            }), (0, tb.jsx)(Formik, {
                                initialValues: {
                                    alias: null !== (t = r.alias) && void 0 !== t ? t : ""
                                },
                                onSubmit: t => {
                                    handleUpdatePasskey(t.alias)
                                },
                                children: ({
                                    values: t
                                }) => (0, tb.jsxs)(r$, {
                                    className: "edit-passkeys-widget-view__body",
                                    children: [(0, tb.jsx)(Field, {
                                        "data-testid": "input-field",
                                        name: "alias",
                                        type: "text",
                                        label: d("dyn_rename_passkeys.input_label"),
                                        copykey: "dyn_rename_passkeys.input_label",
                                        className: "edit-passkeys-widget-view__input",
                                        as: Input,
                                        error: h,
                                        maxLength: 32
                                    }), (0, tb.jsx)(Button_Button, {
                                        type: "submit",
                                        className: "edit-passkeys-widget-view__body",
                                        buttonPadding: "large",
                                        disabled: !t.alias,
                                        copykey: "dyn_rename_passkeys.save",
                                        children: d("dyn_rename_passkeys.save")
                                    }), h && (0, tb.jsx)(Typography_Typography, {
                                        as: "h1",
                                        variant: "body_small",
                                        color: "error-1",
                                        copykey: "dyn_rename_passkeys.error",
                                        children: d("dyn_rename_passkeys.error")
                                    })]
                                })
                            })]
                        }) : (0, tb.jsx)(Typography_Typography, {
                            as: "h1",
                            variant: "title",
                            color: "primary",
                            className: "edit-passkeys-widget-view__title",
                            children: d("dyn_rename_passkeys.not_found")
                        })
                    },
                    "select-hardware-wallet": ({
                        wallet: t,
                        onSelectWallet: r
                    }) => {
                        var a;
                        let {
                            t: s
                        } = useTranslation_useTranslation(), l = null === (a = (0, tl.bt)(t.walletConnector.connectedChain)) || void 0 === a ? void 0 : a.displayName;
                        return (0, tb.jsx)("div", {
                            className: "select-hardware-wallet-view",
                            children: (0, tb.jsxs)("div", {
                                className: "select-hardware-wallet-view__container",
                                children: [(0, tb.jsx)(Icon_Icon, {
                                    className: "select-hardware-wallet-view__icon",
                                    children: (0, tb.jsx)(tc.o, {
                                        walletKey: t.key
                                    })
                                }), (0, tb.jsx)(Typography_Typography, {
                                    className: "select-hardware-wallet-view__text",
                                    as: "p",
                                    color: "secondary",
                                    variant: "body_normal",
                                    copykey: "dyn_select_hardware_wallet.description",
                                    children: s("dyn_select_hardware_wallet.description")
                                }), (0, tl.UD)(t.walletConnector) && (0, tb.jsxs)(tb.Fragment, {
                                    children: [(0, tb.jsx)(HardwareWalletToggle, {
                                        connectors: [t.walletConnector],
                                        copykey: "dyn_select_chain.using_hardware_wallet_toggle_label",
                                        label: s("dyn_select_chain.using_hardware_wallet_toggle_label", {
                                            chainName: l
                                        })
                                    }), (0, tb.jsx)(Divider_Divider, {})]
                                }), (0, tb.jsx)(WalletGroupItem, {
                                    wallet: t,
                                    onClick: () => null == r ? void 0 : r(t)
                                })]
                            })
                        })
                    },
                    "select-wallet-in-wallet-group": () => {
                        let {
                            selectedWalletGroup: t
                        } = useWalletGroupContext(), {
                            walletBook: r
                        } = (0, tc.yw)(), {
                            handleWalletItemClick: a
                        } = useWalletItemActions(), {
                            t: s
                        } = useTranslation_useTranslation();
                        if (!t) throw Error("Could not access WalletGroup view without selected group");
                        let l = (0, tc.Dd)(r, null == t ? void 0 : t.key);
                        return (0, tb.jsx)(WalletGroupViewLayout, {
                            icon: (0, tb.jsx)(tc.o, {
                                walletKey: l.key
                            }),
                            title: s("dyn_select_wallet.description", {
                                walletName: l.name
                            }),
                            titleCopyKey: "dyn_select_wallet.description",
                            children: t.groupedWallets.map((r, s) => (0, tb.jsx)(WalletGroupItem_WalletGroupItem, {
                                groupKey: t.key,
                                wallet: r,
                                onClick: () => a(r)
                            }, `${r.key}_${s}`))
                        })
                    },
                    "social-redirect-view": () => {
                        let {
                            socialProvider: t,
                            signInProvider: r
                        } = useSocialRedirectContext(), a = useFindSocialIcon(), {
                            t: s
                        } = useTranslation_useTranslation();
                        return (0, tb.jsxs)("div", {
                            className: classNames_classNames("social-redirect-view__container"),
                            children: [t && (0, tb.jsx)(IconWithSpinner_IconWithSpinner, {
                                iconSize: 64,
                                Icon: a(t),
                                isSpinning: !0
                            }), (0, tb.jsx)(Typography_Typography, {
                                weight: "medium",
                                variant: "title",
                                className: classNames_classNames("social-redirect-view__title"),
                                copykey: "dyn_social_redirect.logging_in",
                                children: s("dyn_social_redirect.logging_in")
                            }), r !== tu.Cu6.MagicLink && (0, tb.jsx)(PoweredByDynamic, {
                                classNameRoot: "powered-by-dynamic"
                            })]
                        })
                    },
                    "social-wrong-account": () => {
                        let [t, r] = (0, nt.useState)(!1), {
                            socialWalletConnector: a,
                            socialAccount: s
                        } = useSocialRedirectContext(), {
                            t: l
                        } = useTranslation_useTranslation(), c = useFindSocialIcon();
                        return s && a ? (0, tb.jsxs)("div", {
                            className: classNames_classNames("social-wrong-account-view__container"),
                            children: [(0, tb.jsx)(IconWithSpinner_IconWithSpinner, {
                                Icon: c(s.oauthProvider),
                                isSpinning: t,
                                iconSize: 64
                            }), (0, tb.jsx)(Typography_Typography, {
                                weight: "medium",
                                variant: "title",
                                className: classNames_classNames("social-wrong-account-view__title"),
                                copykey: "dyn_login.wrong_social_account.title",
                                children: l("dyn_login.wrong_social_account.title")
                            }), (0, tb.jsx)(Typography_Typography, {
                                variant: "body_normal",
                                weight: "regular",
                                className: classNames_classNames("social-wrong-account-view__copy"),
                                copykey: "dyn_login.wrong_social_account.subtitle",
                                children: l("dyn_login.wrong_social_account.subtitle")
                            }), (0, tb.jsxs)(Typography_Typography, {
                                variant: "body_normal",
                                weight: "regular",
                                className: classNames_classNames("social-wrong-account-view__copy"),
                                copykey: "dyn_login.wrong_social_account.retry_title",
                                children: [l("dyn_login.wrong_social_account.retry_title"), (0, tb.jsx)("b", {
                                    children: s.oauthUsername
                                })]
                            }), (0, tb.jsx)(Button_Button, {
                                buttonClassName: "social-wrong-account-view__button",
                                buttonVariant: "primary",
                                buttonPadding: "large",
                                expanded: !0,
                                typographyProps: {
                                    variant: "button_primary",
                                    weight: "medium"
                                },
                                disabled: t,
                                onClick: () => {
                                    r(!0), a.connect(s.oauthProvider)
                                },
                                copykey: "dyn_login.wrong_social_account.retry_button",
                                children: l("dyn_login.wrong_social_account.retry_button")
                            })]
                        }) : null
                    },
                    "update-email": () => {
                        let [t, r] = (0, nt.useState)(""), {
                            setError: a,
                            setErrorMessage: s
                        } = ErrorContext_useErrorContext(), {
                            loading: l,
                            setLoading: c
                        } = LoadingContext_useLoadingContext(), {
                            setView: d,
                            goToInitialView: u
                        } = ViewContext_useViewContext(), {
                            email: m,
                            setEmail: p,
                            setVerificationUUID: h
                        } = useEmailVerificationContext(), {
                            environmentId: f,
                            handleLogOut: y,
                            onboardingOnlyJwt: b,
                            authToken: C
                        } = useInternalDynamicContext_useInternalDynamicContext(), {
                            t: E
                        } = useTranslation_useTranslation(), [j, I] = (0, nt.useState)(void 0), O = (0, tb.jsx)(rk, {
                            type: "button",
                            onClick: () => {
                                d("verify-email"), a(void 0)
                            },
                            "data-testid": "back-button",
                            children: (0, tb.jsx)(SvgChevronLeft, {})
                        }), P = C || b, handleEmailUpdate = () => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            try {
                                if (!t) return;
                                I(void 0), c(!0);
                                let {
                                    emailVerification: r
                                } = yield updateUserProfileFields(P, f, {
                                    email: t
                                });
                                if (!r) {
                                    yield y(), u();
                                    return
                                }
                                a(void 0), d("verify-email"), p(r.email), h(r.verificationUUID)
                            } catch (t) {
                                if (tv.debug(t), t instanceof td.l7) {
                                    I("Email already exists");
                                    return
                                }
                                s(t.code)
                            } finally {
                                c(!1)
                            }
                        });
                        return (0, tb.jsxs)(tb.Fragment, {
                            children: [(0, tb.jsx)(ModalHeader, {
                                leading: O,
                                displayLeading: !0,
                                displayBorder: !0,
                                children: (0, tb.jsx)(Typography_Typography, {
                                    as: "h1",
                                    variant: "title",
                                    color: "primary",
                                    "data-testid": "dynamic-auth-modal-heading",
                                    className: "header__typography",
                                    copykey: "dyn_email_update.title",
                                    children: E("dyn_email_update.title")
                                })
                            }), (0, tb.jsxs)("div", {
                                className: "email-update__container",
                                children: [(0, tb.jsxs)("div", {
                                    className: "email-update__copy-text-container",
                                    children: [(0, tb.jsx)(Typography_Typography, {
                                        variant: "body_normal",
                                        weight: "regular",
                                        color: "secondary",
                                        copykey: "dyn_email_update.current_email",
                                        children: E("dyn_email_update.current_email")
                                    }), (0, tb.jsx)(Typography_Typography, {
                                        variant: "body_normal",
                                        weight: "bold",
                                        color: "secondary",
                                        children: m
                                    })]
                                }), (0, tb.jsx)(Input, {
                                    id: "email_field",
                                    onChange: t => {
                                        r(t.target.value)
                                    },
                                    type: "email",
                                    copykey: "dyn_email_update.label",
                                    label: E("dyn_email_update.label"),
                                    className: "email-update__input",
                                    error: !!j,
                                    message: j
                                }), (0, tb.jsx)(Button_Button, {
                                    buttonVariant: "primary",
                                    buttonPadding: "medium",
                                    buttonClassName: "email-update__button",
                                    onClick: () => handleEmailUpdate(),
                                    loading: l,
                                    copykey: "dyn_email_update.send_verification",
                                    children: E("dyn_email_update.send_verification")
                                })]
                            })]
                        })
                    },
                    "verify-email": EmailVerification,
                    "wait-for-email-confirmation-view": () => {
                        let {
                            setView: t
                        } = ViewContext_useViewContext(), {
                            clearStatesOnBackClick: r,
                            selectedWalletConnector: a
                        } = useInternalDynamicContext_useInternalDynamicContext(), {
                            t: s
                        } = useTranslation_useTranslation();
                        if (a && !(0, tl.dE)(a)) throw Error("Wallet connector is not email provider");
                        let l = (0, nt.useCallback)(() => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            yield null == a ? void 0 : a.endSession(), t("login-with-email-or-wallet"), r()
                        }), [t, a, r]);
                        return (0, tb.jsxs)("div", {
                            className: "email-confirmation-waiting-view",
                            children: [(0, tb.jsx)("div", {
                                className: "email-confirmation-waiting-view__header-icon",
                                children: (0, tb.jsx)(IconWithSpinner_IconWithSpinner, {
                                    Icon: tF,
                                    iconSize: 80,
                                    isSpinning: !0
                                })
                            }), (0, tb.jsx)(Typography_Typography, {
                                weight: "medium",
                                variant: "title",
                                color: "primary",
                                className: "email-confirmation-waiting-view__title",
                                copykey: "dyn_email_confirmation.title",
                                children: s("dyn_email_confirmation.title")
                            }), (0, tb.jsx)(Typography_Typography, {
                                weight: "regular",
                                variant: "body_normal",
                                color: "secondary",
                                copykey: "dyn_email_confirmation.description",
                                children: s("dyn_email_confirmation.description")
                            }), (0, tb.jsxs)("div", {
                                className: "email-confirmation-waiting-view__email-container",
                                children: [(0, tb.jsx)(Typography_Typography, {
                                    variant: "body_normal",
                                    color: "secondary",
                                    weight: "medium",
                                    as: "span",
                                    children: null == a ? void 0 : a.email
                                }), (0, tb.jsx)(rk, {
                                    onClick: l,
                                    className: "email-confirmation-waiting-view__edit-icon-button",
                                    "data-testid": "email-confirmation-waiting-view__edit-button",
                                    children: (0, tb.jsx)(Icon_Icon, {
                                        color: "text-tertiary",
                                        children: (0, tb.jsx)(SvgPencilAltIcon, {})
                                    })
                                })]
                            }), (0, tb.jsx)("div", {
                                className: "email-confirmation-waiting-view__note",
                                children: (0, tb.jsx)(Typography_Typography, {
                                    weight: "regular",
                                    variant: "body_small",
                                    color: "secondary",
                                    copykey: "dyn_email_confirmation.note",
                                    children: s("dyn_email_confirmation.note")
                                })
                            }), (0, tb.jsx)(PoweredByDynamic, {
                                classNameRoot: "email-confirmation-waiting-view__powered_by_dynamic_footer"
                            })]
                        })
                    },
                    "wallet-cannot-be-transferred": () => {
                        let [t, r] = (0, nt.useState)(void 0), {
                            goToInitialView: a
                        } = ViewContext_useViewContext(), {
                            selectedWalletConnector: s
                        } = useInternalDynamicContext_useInternalDynamicContext(), {
                            t: l
                        } = useTranslation_useTranslation();
                        (0, nt.useEffect)(() => {
                            _tslib_awaiter(void 0, void 0, void 0, function*() {
                                let t = yield null == s ? void 0 : s.fetchPublicAddress();
                                r(t)
                            })
                        }, [s]);
                        let c = shortenWalletAddress_shortenWalletAddress(t);
                        return (0, tb.jsxs)("div", {
                            className: "wallet-cannot-be-transferred-view__container",
                            children: [(0, tb.jsx)(Typography_Typography, {
                                className: "wallet-cannot-be-transferred-view__title",
                                as: "h6",
                                variant: "title",
                                color: "primary",
                                weight: "medium",
                                copykey: "dyn_wallet_link.cannot_link.title",
                                children: l("dyn_wallet_link.cannot_link.title")
                            }), (0, tb.jsx)("div", {
                                className: "wallet-cannot-be-transferred-view__icon",
                                children: (0, tb.jsx)(tc.o, {
                                    walletKey: null == s ? void 0 : s.key,
                                    width: 64,
                                    height: 64
                                })
                            }), (0, tb.jsx)(Typography_Typography, {
                                className: "wallet-cannot-be-transferred-view__shorten-wallet-address",
                                variant: "body_normal",
                                weight: "regular",
                                color: "primary",
                                children: c
                            }), (0, tb.jsx)(Typography_Typography, {
                                className: "wallet-cannot-be-transferred-view__copy",
                                variant: "body_normal",
                                color: "secondary",
                                weight: "regular",
                                copykey: "dyn_wallet_link.cannot_link.description",
                                children: l("dyn_wallet_link.cannot_link.description")
                            }), (0, tb.jsx)(Button_Button, {
                                buttonClassName: "wallet-cannot-be-transferred-view__transfer-alt-wallet-button",
                                buttonVariant: "primary",
                                expanded: !0,
                                buttonPadding: "large",
                                onClick: a,
                                dataTestId: "wallet-cannot-be-transferred-view-transfer-alt-wallet",
                                copykey: "dyn_wallet_link.cannot_link.link_other_button",
                                children: l("dyn_wallet_link.cannot_link.link_other_button")
                            }), (0, tb.jsx)(Button_Button, {
                                dataTestId: "wallet-cannot-be-transferred-view-cancel",
                                buttonPadding: "small",
                                buttonClassName: "wallet-cannot-be-transferred-view__cancel",
                                onClick: a,
                                copykey: "dyn_wallet_link.cannot_link.cancel_button",
                                children: l("dyn_wallet_link.cannot_link.cancel_button")
                            })]
                        })
                    },
                    "wallet-connect-mobile-wallets-list": WalletList,
                    "wallet-group": () => {
                        var t, r;
                        let {
                            selectedWalletGroup: a
                        } = useWalletGroupContext(), {
                            walletBook: s
                        } = (0, tc.yw)(), {
                            handleWalletItemClick: l
                        } = useWalletItemActions(), {
                            t: c
                        } = useTranslation_useTranslation();
                        if (!a) throw Error("Could not access WalletGroup view without selected group");
                        let d = (0, tc.Dd)(s, null == a ? void 0 : a.key),
                            u = a.groupedWallets.map(({
                                walletConnector: t
                            }) => t).filter(tl.UD).filter(t => t.canConnectWithHardwareWallet()),
                            m = null === (t = u[0]) || void 0 === t ? void 0 : t.connectedChain,
                            p = m && (null === (r = (0, tl.bt)(m)) || void 0 === r ? void 0 : r.displayName);
                        return (0, tb.jsx)(WalletGroupViewLayout, {
                            icon: (0, tb.jsx)(tc.o, {
                                walletKey: d.key
                            }),
                            title: c("dyn_select_chain.description"),
                            titleCopyKey: "dyn_select_chain.description",
                            children: (0, tb.jsxs)("div", {
                                className: "wallet-group__list",
                                children: [!!u.length && (0, tb.jsxs)(tb.Fragment, {
                                    children: [(0, tb.jsx)(HardwareWalletToggle, {
                                        connectors: u,
                                        copykey: "dyn_select_chain.using_hardware_wallet_toggle_label",
                                        label: c("dyn_select_chain.using_hardware_wallet_toggle_label", {
                                            chainName: p
                                        })
                                    }), (0, tb.jsx)(Divider_Divider, {})]
                                }), (0, tb.jsx)("div", {
                                    className: "wallet-group-view-layout__list",
                                    children: a.groupedWallets.map((t, r) => (0, tb.jsx)(WalletGroupItem, {
                                        wallet: t,
                                        onClick: () => l(t)
                                    }, `${t.key}_${r}`))
                                })]
                            })
                        })
                    },
                    "wallet-list": WalletList,
                    "wallet-locked-view": () => {
                        let {
                            handleLogOut: t,
                            primaryWallet: r,
                            setShowAuthFlow: a,
                            appName: s,
                            authToken: l
                        } = useInternalDynamicContext_useInternalDynamicContext(), {
                            t: c
                        } = useTranslation_useTranslation();
                        if ((0, nt.useEffect)(() => {
                                l || t()
                            }, [l, t]), !r) return null;
                        let handleConnectWallet = () => _tslib_awaiter(void 0, void 0, void 0, function*() {
                                try {
                                    yield r.connector.connect(), a(!1)
                                } catch (t) {
                                    tv.info("could not connect wallet")
                                }
                            }),
                            d = (0, tb.jsx)(tc.o, {
                                walletKey: r.connector.key,
                                style: {
                                    height: pixelToRem_pixelToRem(64 * a9),
                                    width: pixelToRem_pixelToRem(64 * a9)
                                }
                            });
                        return (0, tb.jsxs)("div", {
                            "data-testid": "wallet-locked-view",
                            children: [(0, tb.jsx)(ErrorContainer, {
                                withIcon: !1,
                                variant: "success",
                                className: "wallet-locked-view__error-container",
                                copykey: "dyn_wallet_locked.connect_continue",
                                children: c("dyn_wallet_locked.connect_continue")
                            }), (0, tb.jsxs)("div", {
                                className: "wallet-locked-view__content",
                                children: [(0, tb.jsx)(IconWithSpinner_IconWithSpinner, {
                                    Icon: d,
                                    iconSize: 64,
                                    className: "wallet-locked-view__icon",
                                    isSpinning: !0
                                }), (0, tb.jsx)(Typography_Typography, {
                                    variant: "title",
                                    color: "primary",
                                    weight: "medium",
                                    className: "wallet-locked-view__title",
                                    copykey: "dyn_wallet_locked.title",
                                    children: c("dyn_wallet_locked.title")
                                }), (0, tb.jsxs)(Typography_Typography, {
                                    variant: "body_normal",
                                    color: "secondary",
                                    weight: "regular",
                                    copykey: "dyn_wallet_locked.subtitle",
                                    children: [c("dyn_wallet_locked.subtitle"), s, "."]
                                }), (0, tb.jsx)(Button_Button, {
                                    onClick: () => handleConnectWallet(),
                                    buttonClassName: "wallet-locked-view__button",
                                    copykey: "dyn_wallet_locked.connect",
                                    children: c("dyn_wallet_locked.connect")
                                }), (0, tb.jsx)(Divider_Divider, {
                                    text: "Or"
                                }), (0, tb.jsx)(TextButton_TextButton, {
                                    className: "wallet-locked-view__log-out",
                                    onClick: t,
                                    copykey: "dyn_wallet_locked.logout",
                                    children: c("dyn_wallet_locked.logout")
                                })]
                            })]
                        })
                    },
                    "wallet-redirect-view": () => {
                        let {
                            t
                        } = useTranslation_useTranslation(), {
                            selectedWalletConnector: r
                        } = useInternalDynamicContext_useInternalDynamicContext();
                        return (0, tb.jsxs)("div", {
                            className: classNames_classNames("wallet-redirect-view__container"),
                            children: [r && (0, tb.jsx)(IconWithSpinner_IconWithSpinner, {
                                iconSize: 64,
                                Icon: (0, tb.jsx)(tc.o, {
                                    walletKey: r.key
                                }),
                                isSpinning: !0
                            }), (0, tb.jsx)(Typography_Typography, {
                                weight: "medium",
                                variant: "title",
                                className: classNames_classNames("wallet-redirect-view__title"),
                                copykey: "dyn_wallet_redirect.loading",
                                children: t("dyn_wallet_redirect.loading")
                            }), (0, tb.jsx)(PoweredByDynamic, {
                                classNameRoot: "powered-by-dynamic"
                            })]
                        })
                    },
                    "wallet-sign": () => {
                        let {
                            goToInitialView: t
                        } = ViewContext_useViewContext(), {
                            t: r
                        } = useTranslation_useTranslation(), {
                            setMultiWalletWidgetState: a,
                            setSelectedWalletConnectorKey: s,
                            selectedWalletConnector: l
                        } = useInternalDynamicContext_useInternalDynamicContext();
                        if (!l) return null;
                        let {
                            key: c
                        } = l, handleClose = () => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            t(), a("idle"), s(null), yield null == l ? void 0 : l.endSession()
                        }), d = (0, tb.jsx)(tc.o, {
                            walletKey: c,
                            style: {
                                height: pixelToRem_pixelToRem(96 * a9),
                                width: pixelToRem_pixelToRem(96 * a9)
                            }
                        });
                        return (0, tb.jsxs)("div", {
                            className: "wallet-sign-spinner__container",
                            "data-testid": "wallet-sign-spinner-view",
                            children: [(0, tb.jsx)(IconWithSpinner_IconWithSpinner, {
                                Icon: d,
                                iconSize: 96,
                                isSpinning: !0
                            }), (0, tb.jsx)(Typography_Typography, {
                                variant: "body_normal",
                                weight: "regular",
                                className: classNames_classNames("wallet-sign-spinner__copy"),
                                copykey: "dyn_wallet_transfer.sign.spinner.confirm_transfer",
                                children: r("dyn_wallet_transfer.sign.spinner.confirm_transfer")
                            }), (0, tb.jsx)(Button_Button, {
                                expanded: !0,
                                buttonPadding: "large",
                                buttonVariant: "primary",
                                buttonClassName: "wallet-sign-spinner__button",
                                onClick: () => handleClose(),
                                typographyProps: {
                                    variant: "button_primary",
                                    weight: "medium"
                                },
                                copykey: "dyn_wallet_transfer.sign.spinner.cancel",
                                children: r("dyn_wallet_transfer.sign.spinner.cancel")
                            })]
                        })
                    },
                    "wallet-used": () => {
                        let [t, r] = (0, nt.useState)(!1), {
                            t: a
                        } = useTranslation_useTranslation(), {
                            setErrorMessage: s
                        } = ErrorContext_useErrorContext(), {
                            loading: l,
                            setLoading: c
                        } = LoadingContext_useLoadingContext(), {
                            setView: d,
                            goToInitialView: u
                        } = ViewContext_useViewContext(), {
                            environmentId: m,
                            displaySiweStatement: p,
                            authToken: h,
                            setCallback: f,
                            setShowAuthFlow: y,
                            setUser: b,
                            appName: C,
                            siweStatement: E,
                            setPrimaryWalletId: j,
                            primaryWallet: I,
                            setMultiWalletWidgetState: O,
                            connectWallet: P,
                            selectedWalletConnector: R,
                            isSingleWalletAccount: F,
                            consumeNonce: W,
                            handleLogOut: M
                        } = useInternalDynamicContext_useInternalDynamicContext(), {
                            data: D
                        } = usePromise_usePromise(() => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            let t = yield null == R ? void 0 : R.getConnectedAccounts();
                            return null == t ? void 0 : t[0]
                        }), {
                            deps: [R]
                        }), L = shortenWalletAddress_shortenWalletAddress(D), updatePrimaryWalletId = (t, r) => {
                            let a = t.key;
                            if (r.lastVerifiedCredentialId) {
                                if (!I) {
                                    j(r.lastVerifiedCredentialId);
                                    return
                                }
                                let s = I.connector.key;
                                a === s && j(r.lastVerifiedCredentialId), "FLOW" === I.connector.connectedChain && "FLOW" === t.connectedChain && j(r.lastVerifiedCredentialId)
                            }
                        }, handleWalletTransfer = () => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            if (!R || !h) return;
                            let r = W();
                            if (!r) {
                                u(), s("missing-nonce");
                                return
                            }
                            O("awaiting_signature", void 0, "transferring_wallet"), c(!0), d("wallet-sign");
                            let a = getSiweStatement({
                                appName: C,
                                siweStatement: E
                            });
                            try {
                                let s = yield P(R);
                                if (!(null == s ? void 0 : s.address)) return;
                                let l = getWalletProvider(R),
                                    c = yield getVerifyArgs({
                                        displaySiweStatement: p,
                                        environmentId: m,
                                        nonce: r,
                                        publicWalletAddress: s.address,
                                        siweStatement: a,
                                        skipEmptyAccountCheck: t,
                                        walletConnector: R,
                                        walletProvider: l
                                    }), d = yield transferWallet(m, c, h);
                                if (!d) throw new td.kW("Invalid JWT!");
                                let u = decodeJwt(d);
                                if (!u) throw new td.kW("Invalid token!");
                                let C = createUserProfile(u);
                                updatePrimaryWalletId(R, C), storeAuthToken(d), b(C), f("linkSuccess", {
                                    walletId: u.lastVerifiedCredentialId
                                }), y(!1)
                            } catch (t) {
                                tv.error(t), y(!1, {
                                    emitCancelAuth: !0
                                })
                            } finally {
                                c(!1), O("idle")
                            }
                        });
                        return (0, tb.jsxs)("div", {
                            className: "wallet-used-view__container",
                            children: [(0, tb.jsx)("div", {
                                className: "wallet-used-view__icon",
                                children: (0, tb.jsx)(tc.o, {
                                    walletKey: null == R ? void 0 : R.key,
                                    width: 64,
                                    height: 64
                                })
                            }), (0, tb.jsx)(Typography_Typography, {
                                className: "wallet-used-view__shorten-wallet-address",
                                variant: "body_normal",
                                weight: "medium",
                                color: "primary",
                                children: L
                            }), (0, tb.jsx)(Typography_Typography, {
                                className: "wallet-used-view__copy",
                                variant: "body_normal",
                                color: "secondary",
                                weight: "regular",
                                copykey: "dyn_wallet_link.existent_account.warning",
                                children: a("dyn_wallet_link.existent_account.warning")
                            }), F && (0, tb.jsxs)("label", {
                                htmlFor: "skipEmptyAccountCheck",
                                className: "wallet-used-view__checkbox-label",
                                children: [(0, tb.jsx)(Checkbox, {
                                    id: "skipEmptyAccountCheck",
                                    className: "wallet-used-view__checkbox-container",
                                    defaultChecked: t,
                                    onChange: () => r(!t),
                                    ariaLabel: "skip empty account check"
                                }), (0, tb.jsx)(Typography_Typography, {
                                    variant: "body_small",
                                    color: "secondary",
                                    copykey: "dyn_wallet_link.existent_account.acceptance",
                                    children: a("dyn_wallet_link.existent_account.acceptance")
                                })]
                            }), (0, tb.jsx)(Button_Button, {
                                buttonClassName: "wallet-used-view__accept-button",
                                buttonVariant: "primary",
                                expanded: !0,
                                buttonPadding: "large",
                                onClick: () => handleWalletTransfer(),
                                disabled: !t && F || l,
                                dataTestId: "wallet-used-view-transfer-wallet",
                                copykey: "dyn_wallet_link.confirm_button",
                                children: a("dyn_wallet_link.confirm_button")
                            }), (0, tb.jsx)(Button_Button, {
                                dataTestId: "wallet-used-view-log-out",
                                buttonPadding: "small",
                                buttonClassName: "wallet-used-view__logout",
                                onClick: M,
                                copykey: "dyn_wallet_link.log_out_button",
                                children: a("dyn_wallet_link.log_out_button")
                            })]
                        })
                    }
                },
                RenderView_RenderView = () => {
                    let {
                        view: t
                    } = ViewContext_useViewContext(), r = oc[t.type];
                    return (0, tb.jsx)(r, Object.assign({}, t.props || {}))
                },
                od = nt.createContext(void 0),
                ou = "wallets",
                DynamicBridgeWidgetContextProvider = ({
                    children: t
                }) => {
                    let r = (0, nt.useRef)(null),
                        a = (0, nt.useRef)(null),
                        [s, l] = (0, nt.useState)(ou),
                        c = (0, nt.useCallback)(() => {
                            l(ou)
                        }, []),
                        d = (0, nt.useCallback)(() => {
                            l("profile")
                        }, []);
                    return (0, tb.jsx)(od.Provider, {
                        value: {
                            bridgeWidgetView: s,
                            events: {
                                onDynamicBridgeWidgetClose: c
                            },
                            goToProfileView: d,
                            inlineControlsRef: a,
                            setBridgeWidgetView: l,
                            widgetRef: r
                        },
                        children: t
                    })
                },
                om = (0, nt.forwardRef)(({
                    children: t
                }, r) => (0, tb.jsx)("div", {
                    ref: r,
                    className: "dynamic-widget-card",
                    children: t
                }));
            om.displayName = "DynamicWidgetCard";
            let op = (0, nt.createContext)(void 0),
                oh = {
                    dynamic: tu.ml9.Dynamic,
                    emailOnly: tu.ml9.EmailOnly,
                    magicLink: tu.ml9.MagicLink
                },
                of = Object.values(oh);
            ! function(t, r) {
                void 0 === r && (r = {});
                var a = r.insertAt;
                if (t && "undefined" != typeof document) {
                    var s = document.head || document.getElementsByTagName("head")[0],
                        l = document.createElement("style");
                    l.type = "text/css", "top" === a && s.firstChild ? s.insertBefore(l, s.firstChild) : s.appendChild(l), l.styleSheet ? l.styleSheet.cssText = t : l.appendChild(document.createTextNode(t))
                }
            }('@layer dynamic-sdk-styles{#argent-mobile-modal-overlay,iframe[src*="wallet-dev.blocto.app"],iframe[src*="wallet-staging.blocto.app"],iframe[src*="wallet-testnet.blocto.app"],iframe[src*="wallet.blocto.app"]{z-index:2147483647!important}iframe[id*=dyn-passkey-recovery-element-id]{display:none!important}#pera-wallet-connect-modal-wrapper{position:relative;z-index:2147483647!important}@font-face{font-display:swap;font-family:DM Sans;font-style:normal;font-weight:400;src:url(https://cdn.jsdelivr.net/npm/@fontsource/dm-sans/files/dm-sans-latin-400-normal.woff2) format("woff2"),url(https://cdn.jsdelivr.net/npm/@fontsource/dm-sans/files/dm-sans-latin-400-normal.woff) format("woff")}@font-face{font-display:swap;font-family:DM Sans;font-style:italic;font-weight:400;src:url(https://cdn.jsdelivr.net/npm/@fontsource/dm-sans/files/dm-sans-latin-400-italic.woff2) format("woff2"),url(https://cdn.jsdelivr.net/npm/@fontsource/dm-sans/files/dm-sans-latin-400-italic.woff) format("woff")}@font-face{font-display:swap;font-family:DM Sans;font-style:normal;font-weight:500;src:url(https://cdn.jsdelivr.net/npm/@fontsource/dm-sans/files/dm-sans-latin-500-normal.woff2) format("woff2"),url(https://cdn.jsdelivr.net/npm/@fontsource/dm-sans/files/dm-sans-latin-500-normal.woff) format("woff")}@font-face{font-display:swap;font-family:DM Sans;font-style:italic;font-weight:500;src:url(https://cdn.jsdelivr.net/npm/@fontsource/dm-sans/files/dm-sans-latin-500-italic.woff2) format("woff2"),url(https://cdn.jsdelivr.net/npm/@fontsource/dm-sans/files/dm-sans-latin-500-italic.woff) format("woff")}@font-face{font-display:swap;font-family:DM Sans;font-style:normal;font-weight:700;src:url(https://cdn.jsdelivr.net/npm/@fontsource/dm-sans/files/dm-sans-latin-700-normal.woff2) format("woff2"),url(https://cdn.jsdelivr.net/npm/@fontsource/dm-sans/files/dm-sans-latin-700-normal.woff) format("woff")}@font-face{font-display:swap;font-family:DM Sans;font-style:italic;font-weight:700;src:url(https://cdn.jsdelivr.net/npm/@fontsource/dm-sans/files/dm-sans-latin-700-italic.woff2) format("woff2"),url(https://cdn.jsdelivr.net/npm/@fontsource/dm-sans/files/dm-sans-latin-700-italic.woff) format("woff")}@layer light-theme-default{:root{--dynamic-font-family-primary:"DM Sans",sans-serif;--dynamic-search-border-radius:1rem;--dynamic-font-family-numbers:"Roboto Mono",monospace,sans-serif;--dynamic-base-1:#f7f7f9;--dynamic-base-2:#fff;--dynamic-base-3:#eeeef1;--dynamic-base-4:#e7e8ed;--dynamic-brand-hover-color:linear-gradient(0deg,rgba(0,0,0,.08),rgba(0,0,0,.08)),#4779ff;--dynamic-brand-primary-color:#4779ff;--dynamic-brand-secondary-color:rgba(71,121,255,.15);--dynamic-success-1:#30a67b;--dynamic-success-2:#e3f7ef;--dynamic-border-radius:1.5rem;--dynamic-hover:rgba(22,37,77,.03);--dynamic-info-2:rgba(71,121,255,.1);--dynamic-error-1:#ff4646;--dynamic-error-2:rgba(255,70,70,.1);--dynamic-alert-1:#dd8500;--dynamic-alert-2:#faedd9;--dynamic-footer-background-color:#fff;--dynamic-footer-text-color:#383c48;--dynamic-footer-icon-color:#4779ff;--dynamic-loading-animation-gradient:linear-gradient(90deg,hsla(0,0%,100%,0),hsla(0,0%,100%,.2) 20%,hsla(0,0%,100%,.5) 60%,hsla(0,0%,100%,0));--dynamic-overlay:rgba(24,27,34,.15);--dynamic-shadow-down-1:0 0.0625rem 0.125rem rgba(24,39,75,.04);--dynamic-shadow-down-2:0 0.75rem 1.25rem -0.375rem rgba(24,39,75,.02),0 1rem 1.625rem -0.25rem rgba(24,39,75,.04);--dynamic-shadow-down-3:0 1.5rem 2rem -1.5rem rgba(0,0,0,.24);--dynamic-shadow-up-1:0 -0.5rem 3rem -0.5rem rgba(109,121,165,.16);--dynamic-text-link:#0047ff;--dynamic-text-primary:#383c48;--dynamic-text-secondary:#7b7d86;--dynamic-text-size-body-mini:0.6875rem;--dynamic-text-size-body-normal:0.9375rem;--dynamic-text-size-body-small:0.75rem;--dynamic-text-size-button-primary:0.875rem;--dynamic-text-size-button-secondary:0.75rem;--dynamic-text-size-numbers-big:0.875rem;--dynamic-text-size-numbers-medium:0.75rem;--dynamic-text-size-title:1.125rem;--dynamic-text-tertiary:#abacb2;--dynamic-badge-background:#eeeef1;--dynamic-badge-color:#7b7d86;--dynamic-badge-dot-background:#4779ff;--dynamic-search-bar-background:#fff;--dynamic-search-bar-background-hover:#fff;--dynamic-search-bar-background-focus:#fff;--dynamic-search-bar-border:0.0625rem solid #eeeef1;--dynamic-search-bar-border-hover:0.0625rem solid #e7e8ed;--dynamic-search-bar-border-focus:0.0625rem solid #e7e8ed;--dynamic-modal-border: ;--dynamic-modal-width:22.5rem;--dynamic-modal-padding:1.5rem;--dynamic-modal-backdrop-background:rgba(0,0,0,.25);--dynamic-modal-backdrop-filter:blur(4px);--dynamic-wallet-list-tile-padding:0.75rem;--dynamic-wallet-list-tile-gap:0.375rem;--dynamic-wallet-list-max-height:16.25rem;--dynamic-wallet-list-tile-background:#fff;--dynamic-wallet-list-tile-border: ;--dynamic-wallet-list-tile-shadow:0 0.0625rem 0.125rem rgba(24,39,75,.04);--dynamic-wallet-list-tile-background-hover:#fff;--dynamic-wallet-list-tile-border-hover: ;--dynamic-wallet-list-tile-border-radius:0.75rem;--dynamic-wallet-list-tile-shadow-hover:0 0.75rem 1.25rem -0.375rem rgba(24,39,75,.02),0 1rem 1.625rem -0.25rem rgba(24,39,75,.04);--dynamic-wallet-list-tile-animation-duration:150ms;--dynamic-tooltip-color:#383c48;--dynamic-tooltip-text-color:#fff;--dynamic-button-border-radius:0.75rem;--dynamic-initial-view-content-padding:0rem 1.5rem 1.5rem;--dynamic-button-primary-hover:#fff;--dynamic-button-primary-background:#fff;--dynamic-button-primary-font-size:0.875rem;--dynamic-button-primary-padding:0;--dynamic-button-primary-border:0.0625rem solid #e7e8ed;--dynamic-button-shadow:0px 2px 3px 0px rgba(24,39,75,.08);--dynamic-button-secondary-hover:#f7f8fa;--dynamic-button-secondary-background:transparent;--dynamic-button-secondary-font-size:0.75rem;--dynamic-button-secondary-padding:0;--dynamic-button-secondary-border:0.0625rem solid transparent;--dynamic-search-padding:0 1.5rem 0.5rem;--dynamic-layout-content-padding:0 1.5rem 1.5rem;--dynamic-layout-content-error-padding:1.5rem 1.5rem 1.5rem;--dynamic-footer-border-top:0.0625rem solid #e7e8ed;--dynamic-footer-padding:0.75rem 1.5rem 0.75rem;--dynamic-footer-background:transparent;--dynamic-header-border-bottom:1px solid transparent;--dynamic-header-padding:1.5rem 1.5rem 1.25rem;--dynamic-header-background:transparent}:root [data-dynamic-theme-brand=bold],:root[data-dynamic-theme-brand=bold]{--dynamic-footer-text-color:#fff;--dynamic-footer-icon-color:rgba(247,247,249,.75);--dynamic-footer-arrow-color:rgba(247,247,249,.75)}:root [data-dynamic-theme-brand=subtle],:root[data-dynamic-theme-brand=subtle]{--dynamic-footer-arrow-color:#abacb2}@media (prefers-color-scheme:light){:root [data-dynamic-theme=auto]{--dynamic-font-family-primary:"DM Sans",sans-serif;--dynamic-search-border-radius:1rem;--dynamic-font-family-numbers:"Roboto Mono",monospace,sans-serif;--dynamic-base-1:#f7f7f9;--dynamic-base-2:#fff;--dynamic-base-3:#eeeef1;--dynamic-base-4:#e7e8ed;--dynamic-brand-hover-color:linear-gradient(0deg,rgba(0,0,0,.08),rgba(0,0,0,.08)),#4779ff;--dynamic-brand-primary-color:#4779ff;--dynamic-brand-secondary-color:rgba(71,121,255,.15);--dynamic-success-1:#30a67b;--dynamic-success-2:#e3f7ef;--dynamic-border-radius:1.5rem;--dynamic-hover:rgba(22,37,77,.03);--dynamic-info-2:rgba(71,121,255,.1);--dynamic-error-1:#ff4646;--dynamic-error-2:rgba(255,70,70,.1);--dynamic-alert-1:#dd8500;--dynamic-alert-2:#faedd9;--dynamic-footer-background-color:#fff;--dynamic-footer-text-color:#383c48;--dynamic-footer-icon-color:#4779ff;--dynamic-loading-animation-gradient:linear-gradient(90deg,hsla(0,0%,100%,0),hsla(0,0%,100%,.2) 20%,hsla(0,0%,100%,.5) 60%,hsla(0,0%,100%,0));--dynamic-overlay:rgba(24,27,34,.15);--dynamic-shadow-down-1:0 0.0625rem 0.125rem rgba(24,39,75,.04);--dynamic-shadow-down-2:0 0.75rem 1.25rem -0.375rem rgba(24,39,75,.02),0 1rem 1.625rem -0.25rem rgba(24,39,75,.04);--dynamic-shadow-down-3:0 1.5rem 2rem -1.5rem rgba(0,0,0,.24);--dynamic-shadow-up-1:0 -0.5rem 3rem -0.5rem rgba(109,121,165,.16);--dynamic-text-link:#0047ff;--dynamic-text-primary:#383c48;--dynamic-text-secondary:#7b7d86;--dynamic-text-size-body-mini:0.6875rem;--dynamic-text-size-body-normal:0.9375rem;--dynamic-text-size-body-small:0.75rem;--dynamic-text-size-button-primary:0.875rem;--dynamic-text-size-button-secondary:0.75rem;--dynamic-text-size-numbers-big:0.875rem;--dynamic-text-size-numbers-medium:0.75rem;--dynamic-text-size-title:1.125rem;--dynamic-text-tertiary:#abacb2;--dynamic-badge-background:#eeeef1;--dynamic-badge-color:#7b7d86;--dynamic-badge-dot-background:#4779ff;--dynamic-search-bar-background:#fff;--dynamic-search-bar-background-hover:#fff;--dynamic-search-bar-background-focus:#fff;--dynamic-search-bar-border:0.0625rem solid #eeeef1;--dynamic-search-bar-border-hover:0.0625rem solid #e7e8ed;--dynamic-search-bar-border-focus:0.0625rem solid #e7e8ed;--dynamic-modal-border: ;--dynamic-modal-width:22.5rem;--dynamic-modal-padding:1.5rem;--dynamic-modal-backdrop-background:rgba(0,0,0,.25);--dynamic-modal-backdrop-filter:blur(4px);--dynamic-wallet-list-tile-padding:0.75rem;--dynamic-wallet-list-tile-gap:0.375rem;--dynamic-wallet-list-max-height:16.25rem;--dynamic-wallet-list-tile-background:#fff;--dynamic-wallet-list-tile-border: ;--dynamic-wallet-list-tile-shadow:0 0.0625rem 0.125rem rgba(24,39,75,.04);--dynamic-wallet-list-tile-background-hover:#fff;--dynamic-wallet-list-tile-border-hover: ;--dynamic-wallet-list-tile-border-radius:0.75rem;--dynamic-wallet-list-tile-shadow-hover:0 0.75rem 1.25rem -0.375rem rgba(24,39,75,.02),0 1rem 1.625rem -0.25rem rgba(24,39,75,.04);--dynamic-wallet-list-tile-animation-duration:150ms;--dynamic-tooltip-color:#383c48;--dynamic-tooltip-text-color:#fff;--dynamic-button-border-radius:0.75rem;--dynamic-initial-view-content-padding:0rem 1.5rem 1.5rem;--dynamic-button-primary-hover:#fff;--dynamic-button-primary-background:#fff;--dynamic-button-primary-font-size:0.875rem;--dynamic-button-primary-padding:0;--dynamic-button-primary-border:0.0625rem solid #e7e8ed;--dynamic-button-shadow:0px 2px 3px 0px rgba(24,39,75,.08);--dynamic-button-secondary-hover:#f7f8fa;--dynamic-button-secondary-background:transparent;--dynamic-button-secondary-font-size:0.75rem;--dynamic-button-secondary-padding:0;--dynamic-button-secondary-border:0.0625rem solid transparent;--dynamic-search-padding:0 1.5rem 0.5rem;--dynamic-layout-content-padding:0 1.5rem 1.5rem;--dynamic-layout-content-error-padding:1.5rem 1.5rem 1.5rem;--dynamic-footer-border-top:0.0625rem solid #e7e8ed;--dynamic-footer-padding:0.75rem 1.5rem 0.75rem;--dynamic-footer-background:transparent;--dynamic-header-border-bottom:1px solid transparent;--dynamic-header-padding:1.5rem 1.5rem 1.25rem;--dynamic-header-background:transparent}:root [data-dynamic-theme=auto] [data-dynamic-theme-brand=bold],:root [data-dynamic-theme=auto][data-dynamic-theme-brand=bold]{--dynamic-footer-text-color:#fff;--dynamic-footer-icon-color:rgba(247,247,249,.75);--dynamic-footer-arrow-color:rgba(247,247,249,.75)}:root [data-dynamic-theme=auto] [data-dynamic-theme-brand=subtle],:root [data-dynamic-theme=auto][data-dynamic-theme-brand=subtle]{--dynamic-footer-arrow-color:#abacb2}}:root [data-dynamic-theme=light]{--dynamic-font-family-primary:"DM Sans",sans-serif;--dynamic-search-border-radius:1rem;--dynamic-font-family-numbers:"Roboto Mono",monospace,sans-serif;--dynamic-base-1:#f7f7f9;--dynamic-base-2:#fff;--dynamic-base-3:#eeeef1;--dynamic-base-4:#e7e8ed;--dynamic-brand-hover-color:linear-gradient(0deg,rgba(0,0,0,.08),rgba(0,0,0,.08)),#4779ff;--dynamic-brand-primary-color:#4779ff;--dynamic-brand-secondary-color:rgba(71,121,255,.15);--dynamic-success-1:#30a67b;--dynamic-success-2:#e3f7ef;--dynamic-border-radius:1.5rem;--dynamic-hover:rgba(22,37,77,.03);--dynamic-info-2:rgba(71,121,255,.1);--dynamic-error-1:#ff4646;--dynamic-error-2:rgba(255,70,70,.1);--dynamic-alert-1:#dd8500;--dynamic-alert-2:#faedd9;--dynamic-footer-background-color:#fff;--dynamic-footer-text-color:#383c48;--dynamic-footer-icon-color:#4779ff;--dynamic-loading-animation-gradient:linear-gradient(90deg,hsla(0,0%,100%,0),hsla(0,0%,100%,.2) 20%,hsla(0,0%,100%,.5) 60%,hsla(0,0%,100%,0));--dynamic-overlay:rgba(24,27,34,.15);--dynamic-shadow-down-1:0 0.0625rem 0.125rem rgba(24,39,75,.04);--dynamic-shadow-down-2:0 0.75rem 1.25rem -0.375rem rgba(24,39,75,.02),0 1rem 1.625rem -0.25rem rgba(24,39,75,.04);--dynamic-shadow-down-3:0 1.5rem 2rem -1.5rem rgba(0,0,0,.24);--dynamic-shadow-up-1:0 -0.5rem 3rem -0.5rem rgba(109,121,165,.16);--dynamic-text-link:#0047ff;--dynamic-text-primary:#383c48;--dynamic-text-secondary:#7b7d86;--dynamic-text-size-body-mini:0.6875rem;--dynamic-text-size-body-normal:0.9375rem;--dynamic-text-size-body-small:0.75rem;--dynamic-text-size-button-primary:0.875rem;--dynamic-text-size-button-secondary:0.75rem;--dynamic-text-size-numbers-big:0.875rem;--dynamic-text-size-numbers-medium:0.75rem;--dynamic-text-size-title:1.125rem;--dynamic-text-tertiary:#abacb2;--dynamic-badge-background:#eeeef1;--dynamic-badge-color:#7b7d86;--dynamic-badge-dot-background:#4779ff;--dynamic-search-bar-background:#fff;--dynamic-search-bar-background-hover:#fff;--dynamic-search-bar-background-focus:#fff;--dynamic-search-bar-border:0.0625rem solid #eeeef1;--dynamic-search-bar-border-hover:0.0625rem solid #e7e8ed;--dynamic-search-bar-border-focus:0.0625rem solid #e7e8ed;--dynamic-modal-border: ;--dynamic-modal-width:22.5rem;--dynamic-modal-padding:1.5rem;--dynamic-modal-backdrop-background:rgba(0,0,0,.25);--dynamic-modal-backdrop-filter:blur(4px);--dynamic-wallet-list-tile-padding:0.75rem;--dynamic-wallet-list-tile-gap:0.375rem;--dynamic-wallet-list-max-height:16.25rem;--dynamic-wallet-list-tile-background:#fff;--dynamic-wallet-list-tile-border: ;--dynamic-wallet-list-tile-shadow:0 0.0625rem 0.125rem rgba(24,39,75,.04);--dynamic-wallet-list-tile-background-hover:#fff;--dynamic-wallet-list-tile-border-hover: ;--dynamic-wallet-list-tile-border-radius:0.75rem;--dynamic-wallet-list-tile-shadow-hover:0 0.75rem 1.25rem -0.375rem rgba(24,39,75,.02),0 1rem 1.625rem -0.25rem rgba(24,39,75,.04);--dynamic-wallet-list-tile-animation-duration:150ms;--dynamic-tooltip-color:#383c48;--dynamic-tooltip-text-color:#fff;--dynamic-button-border-radius:0.75rem;--dynamic-initial-view-content-padding:0rem 1.5rem 1.5rem;--dynamic-button-primary-hover:#fff;--dynamic-button-primary-background:#fff;--dynamic-button-primary-font-size:0.875rem;--dynamic-button-primary-padding:0;--dynamic-button-primary-border:0.0625rem solid #e7e8ed;--dynamic-button-shadow:0px 2px 3px 0px rgba(24,39,75,.08);--dynamic-button-secondary-hover:#f7f8fa;--dynamic-button-secondary-background:transparent;--dynamic-button-secondary-font-size:0.75rem;--dynamic-button-secondary-padding:0;--dynamic-button-secondary-border:0.0625rem solid transparent;--dynamic-search-padding:0 1.5rem 0.5rem;--dynamic-layout-content-padding:0 1.5rem 1.5rem;--dynamic-layout-content-error-padding:1.5rem 1.5rem 1.5rem;--dynamic-footer-border-top:0.0625rem solid #e7e8ed;--dynamic-footer-padding:0.75rem 1.5rem 0.75rem;--dynamic-footer-background:transparent;--dynamic-header-border-bottom:1px solid transparent;--dynamic-header-padding:1.5rem 1.5rem 1.25rem;--dynamic-header-background:transparent}:root [data-dynamic-theme=light] [data-dynamic-theme-brand=bold],:root [data-dynamic-theme=light][data-dynamic-theme-brand=bold]{--dynamic-footer-text-color:#fff;--dynamic-footer-icon-color:rgba(247,247,249,.75);--dynamic-footer-arrow-color:rgba(247,247,249,.75)}:root [data-dynamic-theme=light] [data-dynamic-theme-brand=subtle],:root [data-dynamic-theme=light][data-dynamic-theme-brand=subtle]{--dynamic-footer-arrow-color:#abacb2}}@layer dark-theme-default{@media (prefers-color-scheme:dark){:root [data-dynamic-theme=auto]{--dynamic-font-family-primary:"DM Sans",sans-serif;--dynamic-search-border-radius:1rem;--dynamic-font-family-numbers:"Roboto Mono",monospace,sans-serif;--dynamic-base-1:#0c0e13;--dynamic-base-2:#1b1d22;--dynamic-base-3:#24272e;--dynamic-base-4:#282b33;--dynamic-brand-hover-color:linear-gradient(0deg,rgba(0,0,0,.08),rgba(0,0,0,.08)),#4779ff;--dynamic-brand-primary-color:#4779ff;--dynamic-brand-secondary-color:rgba(71,121,255,.15);--dynamic-success-1:#79ffcf;--dynamic-success-2:#192d2c;--dynamic-border-radius:1.5rem;--dynamic-hover:hsla(0,0%,100%,.1);--dynamic-error-1:#ff6a6a;--dynamic-error-2:hsla(0,100%,71%,.2);--dynamic-alert-1:#e2a140;--dynamic-alert-2:#2b2621;--dynamic-footer-background-color:#0c0e13;--dynamic-footer-text-color:#fbfcff;--dynamic-footer-icon-color:#4779ff;--dynamic-loading-animation-gradient:linear-gradient(90deg,hsla(0,0%,100%,0),hsla(0,0%,100%,.01) 20%,hsla(0,0%,100%,.05) 60%,hsla(0,0%,100%,0));--dynamic-overlay:rgba(0,0,0,.25);--dynamic-shadow-down-1:0 0.0625rem 0.125rem rgba(24,39,75,.04);--dynamic-shadow-down-2:0 0.75rem 1.25rem -0.375rem rgba(24,39,75,.02),0 1rem 1.625rem -0.25rem rgba(24,39,75,.04);--dynamic-shadow-down-3:0 1.5rem 2rem -1.5rem rgba(0,0,0,.24);--dynamic-shadow-up-1:0 -0.5rem 3rem -0.5rem rgba(109,121,165,.16);--dynamic-text-link:#69a5ff;--dynamic-text-primary:#fbfcff;--dynamic-text-secondary:#a8aab0;--dynamic-text-size-body-mini:0.6875rem;--dynamic-text-size-body-normal:0.9375rem;--dynamic-text-size-body-small:0.75rem;--dynamic-text-size-button-primary:0.875rem;--dynamic-text-size-button-secondary:0.75rem;--dynamic-text-size-numbers-big:0.875rem;--dynamic-text-size-numbers-medium:0.75rem;--dynamic-text-size-title:1.125rem;--dynamic-text-tertiary:#6f7177;--dynamic-badge-background:#24272e;--dynamic-badge-color:#a8aab0;--dynamic-badge-dot-background:#4779ff;--dynamic-search-bar-background:#1b1d22;--dynamic-search-bar-background-hover:#1b1d22;--dynamic-search-bar-background-focus:#1b1d22;--dynamic-search-bar-border:0.0625rem solid #24272e;--dynamic-search-bar-border-hover:0.0625rem solid #282b33;--dynamic-search-bar-border-focus:0.0625rem solid #282b33;--dynamic-modal-border: ;--dynamic-modal-width:22.5rem;--dynamic-modal-padding:1.5rem;--dynamic-modal-backdrop-background:rgba(0,0,0,.25);--dynamic-modal-backdrop-filter:blur(4px);--dynamic-wallet-list-tile-padding:0.75rem;--dynamic-wallet-list-tile-gap:0.375rem;--dynamic-wallet-list-max-height:16.25rem;--dynamic-wallet-list-tile-background:#24272e;--dynamic-wallet-list-tile-border: ;--dynamic-wallet-list-tile-shadow:0 0.0625rem 0.125rem rgba(24,39,75,.04);--dynamic-wallet-list-tile-background-hover:#282b33;--dynamic-wallet-list-tile-border-hover: ;--dynamic-wallet-list-tile-border-radius:0.75rem;--dynamic-wallet-list-tile-shadow-hover:0 0.75rem 1.25rem -0.375rem rgba(24,39,75,.02),0 1rem 1.625rem -0.25rem rgba(24,39,75,.04);--dynamic-wallet-list-tile-animation-duration:150ms;--dynamic-tooltip-color:#fbfcff;--dynamic-tooltip-text-color:#0c0e13;--dynamic-initial-view-content-padding:0rem 1.5rem 1.5rem;--dynamic-button-primary-hover:#1b1d22;--dynamic-button-primary-background:#1b1d22;--dynamic-button-primary-font-size:0.875rem;--dynamic-button-primary-padding:0;--dynamic-button-primary-border:0.0625rem solid #282b33;--dynamic-button-shadow:0px 2px 3px 0px rgba(24,39,75,.08);--dynamic-button-secondary-hover:#1a1c21;--dynamic-button-secondary-background:transparent;--dynamic-button-secondary-font-size:0.75rem;--dynamic-button-secondary-padding:0;--dynamic-button-secondary-border:0.0625rem solid transparent;--dynamic-search-padding:0 1.5rem 0.5rem;--dynamic-layout-content-padding:0 1.5rem 1.5rem;--dynamic-layout-content-error-padding:1.5rem 1.5rem 1.5rem;--dynamic-footer-border-top:0.0625rem solid #282b33;--dynamic-footer-padding:0.75rem 1.5rem 0.75rem;--dynamic-footer-background:transparent;--dynamic-header-border-bottom:1px solid transparent;--dynamic-header-padding:1.5rem 1.5rem 1.25rem;--dynamic-header-background:transparent}:root [data-dynamic-theme=auto] [data-dynamic-theme-brand=bold],:root [data-dynamic-theme=auto][data-dynamic-theme-brand=bold]{--dynamic-footer-text-color:#fbfcff;--dynamic-footer-icon-color:rgba(247,247,249,.75);--dynamic-footer-arrow-color:rgba(247,247,249,.75)}:root [data-dynamic-theme=auto] [data-dynamic-theme-brand=subtle],:root [data-dynamic-theme=auto][data-dynamic-theme-brand=subtle]{--dynamic-footer-arrow-color:#6f7177;--dynamic-footer-icon-color:#6f7177}}:root [data-dynamic-theme=dark]{--dynamic-font-family-primary:"DM Sans",sans-serif;--dynamic-search-border-radius:1rem;--dynamic-font-family-numbers:"Roboto Mono",monospace,sans-serif;--dynamic-base-1:#0c0e13;--dynamic-base-2:#1b1d22;--dynamic-base-3:#24272e;--dynamic-base-4:#282b33;--dynamic-brand-hover-color:linear-gradient(0deg,rgba(0,0,0,.08),rgba(0,0,0,.08)),#4779ff;--dynamic-brand-primary-color:#4779ff;--dynamic-brand-secondary-color:rgba(71,121,255,.15);--dynamic-success-1:#79ffcf;--dynamic-success-2:#192d2c;--dynamic-border-radius:1.5rem;--dynamic-hover:hsla(0,0%,100%,.1);--dynamic-error-1:#ff6a6a;--dynamic-error-2:hsla(0,100%,71%,.2);--dynamic-alert-1:#e2a140;--dynamic-alert-2:#2b2621;--dynamic-footer-background-color:#0c0e13;--dynamic-footer-text-color:#fbfcff;--dynamic-footer-icon-color:#4779ff;--dynamic-loading-animation-gradient:linear-gradient(90deg,hsla(0,0%,100%,0),hsla(0,0%,100%,.01) 20%,hsla(0,0%,100%,.05) 60%,hsla(0,0%,100%,0));--dynamic-overlay:rgba(0,0,0,.25);--dynamic-shadow-down-1:0 0.0625rem 0.125rem rgba(24,39,75,.04);--dynamic-shadow-down-2:0 0.75rem 1.25rem -0.375rem rgba(24,39,75,.02),0 1rem 1.625rem -0.25rem rgba(24,39,75,.04);--dynamic-shadow-down-3:0 1.5rem 2rem -1.5rem rgba(0,0,0,.24);--dynamic-shadow-up-1:0 -0.5rem 3rem -0.5rem rgba(109,121,165,.16);--dynamic-text-link:#69a5ff;--dynamic-text-primary:#fbfcff;--dynamic-text-secondary:#a8aab0;--dynamic-text-size-body-mini:0.6875rem;--dynamic-text-size-body-normal:0.9375rem;--dynamic-text-size-body-small:0.75rem;--dynamic-text-size-button-primary:0.875rem;--dynamic-text-size-button-secondary:0.75rem;--dynamic-text-size-numbers-big:0.875rem;--dynamic-text-size-numbers-medium:0.75rem;--dynamic-text-size-title:1.125rem;--dynamic-text-tertiary:#6f7177;--dynamic-badge-background:#24272e;--dynamic-badge-color:#a8aab0;--dynamic-badge-dot-background:#4779ff;--dynamic-search-bar-background:#1b1d22;--dynamic-search-bar-background-hover:#1b1d22;--dynamic-search-bar-background-focus:#1b1d22;--dynamic-search-bar-border:0.0625rem solid #24272e;--dynamic-search-bar-border-hover:0.0625rem solid #282b33;--dynamic-search-bar-border-focus:0.0625rem solid #282b33;--dynamic-modal-border: ;--dynamic-modal-width:22.5rem;--dynamic-modal-padding:1.5rem;--dynamic-modal-backdrop-background:rgba(0,0,0,.25);--dynamic-modal-backdrop-filter:blur(4px);--dynamic-wallet-list-tile-padding:0.75rem;--dynamic-wallet-list-tile-gap:0.375rem;--dynamic-wallet-list-max-height:16.25rem;--dynamic-wallet-list-tile-background:#24272e;--dynamic-wallet-list-tile-border: ;--dynamic-wallet-list-tile-shadow:0 0.0625rem 0.125rem rgba(24,39,75,.04);--dynamic-wallet-list-tile-background-hover:#282b33;--dynamic-wallet-list-tile-border-hover: ;--dynamic-wallet-list-tile-border-radius:0.75rem;--dynamic-wallet-list-tile-shadow-hover:0 0.75rem 1.25rem -0.375rem rgba(24,39,75,.02),0 1rem 1.625rem -0.25rem rgba(24,39,75,.04);--dynamic-wallet-list-tile-animation-duration:150ms;--dynamic-tooltip-color:#fbfcff;--dynamic-tooltip-text-color:#0c0e13;--dynamic-initial-view-content-padding:0rem 1.5rem 1.5rem;--dynamic-button-primary-hover:#1b1d22;--dynamic-button-primary-background:#1b1d22;--dynamic-button-primary-font-size:0.875rem;--dynamic-button-primary-padding:0;--dynamic-button-primary-border:0.0625rem solid #282b33;--dynamic-button-shadow:0px 2px 3px 0px rgba(24,39,75,.08);--dynamic-button-secondary-hover:#1a1c21;--dynamic-button-secondary-background:transparent;--dynamic-button-secondary-font-size:0.75rem;--dynamic-button-secondary-padding:0;--dynamic-button-secondary-border:0.0625rem solid transparent;--dynamic-search-padding:0 1.5rem 0.5rem;--dynamic-layout-content-padding:0 1.5rem 1.5rem;--dynamic-layout-content-error-padding:1.5rem 1.5rem 1.5rem;--dynamic-footer-border-top:0.0625rem solid #282b33;--dynamic-footer-padding:0.75rem 1.5rem 0.75rem;--dynamic-footer-background:transparent;--dynamic-header-border-bottom:1px solid transparent;--dynamic-header-padding:1.5rem 1.5rem 1.25rem;--dynamic-header-background:transparent}:root [data-dynamic-theme=dark] [data-dynamic-theme-brand=bold],:root [data-dynamic-theme=dark][data-dynamic-theme-brand=bold]{--dynamic-footer-text-color:#fbfcff;--dynamic-footer-icon-color:rgba(247,247,249,.75);--dynamic-footer-arrow-color:rgba(247,247,249,.75)}:root [data-dynamic-theme=dark] [data-dynamic-theme-brand=subtle],:root [data-dynamic-theme=dark][data-dynamic-theme-brand=subtle]{--dynamic-footer-arrow-color:#6f7177;--dynamic-footer-icon-color:#6f7177}}.dynamic-shadow-dom{position:relative}#dynamic-tooltips{left:0;position:absolute;top:0}@supports (overflow:clip){.dynamic-no-scroll{overflow:clip}}@supports not (overflow:clip){.dynamic-no-scroll{overflow:hidden}}.dynamic-no-scroll--ios{position:fixed}}');
            let useVerifyOnAwaitingSignature = () => {
                    let {
                        awaitingSignatureState: t,
                        multiWalletWidgetState: r,
                        setMultiWalletWidgetState: a,
                        legacyIsVerifying: s,
                        setLegacyIsVerifying: l,
                        selectedWalletConnector: c
                    } = useInternalDynamicContext_useInternalDynamicContext(), d = useConnectAndSign();
                    (0, nt.useEffect)(() => {
                        s || "awaiting_signature" !== r || !c || "linking_new_wallet" !== t || requiresTwoStepAuthentication(c) || (l(!0), d({
                            walletConnector: c
                        }).catch(t => {
                            tv.error(t)
                        }).finally(() => {
                            a("idle"), l(!1)
                        }))
                    }, [t, null == c ? void 0 : c.key, r, a, s])
                },
                oy = ["email-wallet-otp-verification-view", "social-redirect-view", "passkey-intro"],
                Main = () => {
                    let {
                        selectedWalletConnector: t,
                        linkedWallets: r,
                        isProjectSettingsLoading: a,
                        projectSettings: s,
                        setShowAuthFlow: l,
                        showAuthFlow: c,
                        walletConnectorOptions: d,
                        clearStatesOnBackClick: u,
                        user: m,
                        disconnectWallet: p,
                        authMode: h,
                        connectedWallets: f,
                        handleLogOut: y
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        view: b,
                        goToInitialView: C
                    } = ViewContext_useViewContext(), {
                        setDeniedAddress: E,
                        setDeniedOauthProvider: j
                    } = useAccessDeniedContext(), {
                        setExistentAccountData: I
                    } = useAccountExistsContext();
                    usePreventPageScroll(c);
                    let O = useUserWallets(),
                        handleClose = () => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            oy.includes(b.type) || (("network-not-supported" === b.type || "network-not-supported-manual" === b.type) && 1 === O.length && (yield y()), l(!1, {
                                emitCancelAuth: !0
                            }), E(""), j(void 0), I(void 0), u())
                        }),
                        P = (0, nt.useCallback)(() => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            if (!isConnectOnly(m, h) || !["network-not-supported", "network-not-supported-manual"].includes(b.type) || !t) return;
                            let r = f.find(r => r.connector.key === t.key);
                            r && (isSupportedNetwork({
                                network: yield r.connector.getNetwork(), walletConnector: r.connector
                            }) || p(r.id))
                        }), [t, h, f, p, m, b]),
                        R = (0, nt.useCallback)(() => {
                            C()
                        }, [C]);
                    useVerifyOnAwaitingSignature();
                    let {
                        handleAlreadyConnectedWallet: F,
                        handleCustodialWalletClick: W,
                        handleInstalledExtensionClick: M,
                        handleMobileWalletClick: D,
                        handleUninstalledClick: L
                    } = useWalletItemActions(), handleNewToWeb3WalletIntent = t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        l(!0), isSelectedWalletAlreadyConnected(r, t, m) ? F(t) : t.canConnectViaCustodialService ? W(t) : (0, td.tq)() ? D(t) : t.isInstalledOnBrowser() ? M(t) : L(t)
                    });
                    (0, nt.useEffect)(() => {
                        let t = LocalStorage.getFromLS(nh);
                        if ((null == d ? void 0 : d.length) && t) {
                            let r = d.find(r => r.key === t);
                            (null == r ? void 0 : r.walletConnector) && handleNewToWeb3WalletIntent(r.walletConnector), LocalStorage.removeFromLS(nh)
                        }
                    }, [d]);
                    let U = c && !a;
                    return (0, tb.jsx)(SocialRedirectContext_SocialRedirectContextProvider, {
                        children: (0, tb.jsx)(FooterAnimationContext_FooterAnimationContextProvider, {
                            children: (0, tb.jsx)(Portal_Portal, {
                                zIndex: 2147483645,
                                isShown: U,
                                handleClose: handleClose,
                                withBackdrop: !0,
                                transitionEvents: {
                                    onExiting: P,
                                    onUnmount: R
                                },
                                children: (0, tb.jsx)(PopperContext_PopperProvider, {
                                    children: (0, tb.jsx)(DynamicAuthModal_DynamicAuthModal, {
                                        transitionProps: {
                                            isShown: U
                                        },
                                        onClose: handleClose,
                                        projectSettings: s,
                                        children: (0, tb.jsx)(RenderView_RenderView, {})
                                    })
                                })
                            })
                        })
                    })
                },
                IsBrowser_IsBrowser = ({
                    children: t
                }) => {
                    let [r, a] = (0, nt.useState)(!1);
                    return ((0, nt.useEffect)(() => {
                        a(!0)
                    }, []), r) ? (0, tb.jsx)(tb.Fragment, {
                        children: t
                    }) : (0, tb.jsx)(tb.Fragment, {})
                },
                DynamicAuthFlow = () => (0, tb.jsx)(IsBrowser_IsBrowser, {
                    children: (0, tb.jsx)(Main, {})
                }),
                useGlobalLoading = ({
                    authMode: t,
                    connectedInfo: r,
                    connectedWallets: a,
                    projectSettings: s,
                    primaryWallet: l,
                    user: c,
                    walletBook: d
                }) => {
                    var u;
                    let [m, p] = (0, nt.useState)(!1), h = c && (null === (u = lastAuthenticatedAccount(c)) || void 0 === u ? void 0 : u.format) === "blockchain" && !l, f = "connect-only" === t && r && 0 === a.length;
                    return (0, nt.useEffect)(() => {
                        var t;
                        if (Object.keys(null !== (t = null == d ? void 0 : d.wallets) && void 0 !== t ? t : {}).length && s) {
                            if (h || f) return;
                            p(!0)
                        }
                    }, [s, l, c, h, f, d]), {
                        sdkHasLoaded: m,
                        setSdkHasLoaded: p
                    }
                },
                validateType = (t, r) => {
                    if (Array.isArray(t) && Array.isArray(r)) {
                        if (0 === t.length) return !0;
                        let a = r[0];
                        return Object.entries(t).every(([t, r]) => validateType(r, a))
                    }
                    return "object" == typeof t && "object" == typeof r && r ? Object.entries(r).every(([r, a]) => validateType(t[r], a)) : typeof t == typeof r
                },
                validateAuthUser = t => validateType(t, {
                    environmentId: "environmentId",
                    lastVerifiedCredentialId: "lastAuthenticatedAccountId",
                    userId: "userId",
                    verifiedCredentials: [{
                        format: "format",
                        id: "id"
                    }]
                }),
                validateLocalStorageExpiry = t => {
                    if (!t) return !1;
                    let r = new Date().getTime();
                    return !(r > t.expiry)
                },
                useFetchNonce = (t, r = 2) => {
                    let [a, s, l] = useLocalStorage("dynamic_nonce", void 0, validateLocalStorageExpiry), [c, d] = (0, nt.useState)(!1), [u, m] = (0, nt.useState)(0), p = (null == a ? void 0 : a.value) !== "" && (null == a ? void 0 : a.value) !== void 0;
                    a && a.environmentId && a.environmentId !== t && l(), (0, nt.useEffect)(() => {
                        p || c || !(u < r) || (d(!0), fetchNonce(t).then(r => {
                            if (!r) throw new td.kW("Nonce is not defined");
                            let a = new Date().getTime() + 864e5;
                            s({
                                environmentId: t,
                                expiry: a,
                                value: r
                            })
                        }).catch(() => {
                            m(t => t + 1)
                        }).finally(() => {
                            d(!1)
                        }))
                    }, [c, d, p, u, t, r]);
                    let h = (0, nt.useCallback)(() => {
                        let t = null == a ? void 0 : a.value;
                        return l(), t
                    }, [l, null == a ? void 0 : a.value]);
                    return {
                        consumeNonce: () => h()
                    }
                },
                useFetchProjectSettings = ({
                    authToken: t,
                    environmentId: r,
                    maxRetries: a = 2,
                    dynamicContextProps: s
                }) => {
                    let [l, c, d] = useLocalStorage("dynamic_project_settings", void 0, validateLocalStorageExpiry), [u, m] = (0, nt.useState)(!1), [p, h] = (0, nt.useState)(0), f = (null == l ? void 0 : l.settings) !== void 0;
                    l && l.environmentId && l.environmentId !== r && d();
                    let overrideSettings = (t, r) => {
                        if (!t) return;
                        let a = t;
                        return r && r.views && (a = Object.assign(Object.assign({}, a), {
                            sdk: Object.assign(Object.assign({}, t.sdk), {
                                views: r.views
                            })
                        })), a
                    };
                    (0, nt.useEffect)(() => {
                        if (!f && !u && r && p < a) {
                            m(!0);
                            let t = {
                                    settings: Object.assign(Object.assign({}, s.settings), {
                                        customPrivacyPolicy: !!s.settings.customPrivacyPolicy,
                                        customTermsOfServices: !!s.settings.customTermsOfServices,
                                        policiesConsentInnerComponent: !!s.settings.policiesConsentInnerComponent
                                    })
                                },
                                a = serializeEventsCallbacks(t.settings.eventsCallbacks),
                                l = serializeWalletConnectors(t.settings.walletConnectors),
                                d = Object.assign(Object.assign({}, t), {
                                    settings: Object.assign(Object.assign({}, t.settings), {
                                        eventsCallbacks: a,
                                        walletConnectors: l
                                    })
                                });
                            sendDynamicProps(r, {
                                dynamicContextProps: d,
                                frameworkSettings: getFrameworkSettings()
                            }), fetchProjectSettings(r).then(t => {
                                if (!t) throw new td.kW("Settings are not defined");
                                let a = new Date().getTime() + 3e5;
                                c({
                                    environmentId: r,
                                    expiry: a,
                                    settings: t
                                })
                            }).catch(() => {
                                h(t => t + 1)
                            }).finally(() => {
                                m(!1)
                            })
                        }
                    }, [r, u, f, a, p]);
                    let y = (0, nt.useMemo)(() => overrideSettings(null == l ? void 0 : l.settings, s.settings.overrides), [null == l ? void 0 : l.settings, s.settings.overrides]);
                    return useEffectOnce(() => {
                        let [r] = LocalStorage.getFromLS(nf) || [];
                        t || r || d()
                    }), {
                        isLoading: u,
                        projectSettings: y,
                        removeLsSettings: d
                    }
                },
                serializeEventsCallbacks = t => {
                    try {
                        if (!t) return;
                        let r = Object.values(t),
                            a = Object.keys(t);
                        return a.filter((t, a) => void 0 !== r[a] && t)
                    } catch (t) {
                        tv.error("error serializing eventsCallbacks", t);
                        return
                    }
                },
                serializeWalletConnectors = t => {
                    try {
                        if (!t) return;
                        return t.map(t => t.name)
                    } catch (t) {
                        tv.error("error serializing walletConnectors", t);
                        return
                    }
                },
                getFrameworkSettings = () => {
                    var t;
                    return {
                        nextJs: {
                            version: null === (t = window.next) || void 0 === t ? void 0 : t.version
                        },
                        react: {
                            version: nt.version
                        }
                    }
                },
                useSetWalletConnectorVerifiedCredentials = (t, r) => {
                    if (!t || !(null == r ? void 0 : r.length)) return;
                    let a = decodeJwt(t);
                    a && r.forEach(t => {
                        t.walletConnector.setVerifiedCredentials(a.verifiedCredentials)
                    })
                },
                useValidateSession = ({
                    handleLogOut: t,
                    user: r,
                    authToken: a,
                    walletConnectV1Bridge: s,
                    walletConnectors: l,
                    wcVersion: c
                }) => {
                    let [d, u] = (0, nt.useState)(!1);
                    if (d) return;
                    let logout = (r, a) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            u(!0), tv.debug(`Logging out - Reason: ${r}`, Object.assign({}, a)), yield t()
                        }),
                        m = LocalStorage.getKeys().some(t => t.startsWith("walletconnect-") || t.startsWith("walletlink")),
                        p = LocalStorage.getKeys().some(t => t.startsWith("wc@2"));
                    _tslib_awaiter(void 0, void 0, void 0, function*() {
                        !a && r && (yield logout("user data out of sync", {
                            authToken: a,
                            user: r
                        }))
                    }), _tslib_awaiter(void 0, void 0, void 0, function*() {
                        let t;
                        if (l)
                            for (let r of l) {
                                if (!r.isWalletConnect) continue;
                                let a = yield r.getSession(), s = a && (null == a ? void 0 : a.bridge);
                                if (s) {
                                    t = s;
                                    break
                                }
                            }
                        s && t && s !== t && (yield logout("connector bridge out of sync", {
                            newBridge: s,
                            oldBridge: t
                        }))
                    }), _tslib_awaiter(void 0, void 0, void 0, function*() {
                        c && (2 !== c || m) && (1 !== c || p) && (yield logout("connector version out of sync", {
                            newVersion: c,
                            oldVersion: m ? 1 : 2
                        }))
                    })
                };
            let ConnectorSetupError = class ConnectorSetupError extends td.kW {
                constructor(t, r) {
                    super(`${t} is enabled but ${r} is not in your walletConnectors list. See https://docs.dynamic.xyz/react-sdk/wallet-connectors for more information.`)
                }
            };
            let verifyMagicIsSetup = (t, r) => {
                    var a;
                    let s = isProviderEnabled(null !== (a = t.providers) && void 0 !== a ? a : [], tu.ml9.MagicLink),
                        l = r.some(({
                            key: t
                        }) => ["magicemailotp", "magicsocial"].includes(t));
                    if (s && !l) throw new ConnectorSetupError("Magic", "MagicWalletConnectors")
                },
                verifyZeroDevIsSetup = (t, r) => {
                    var a;
                    let s = isProviderEnabled(null !== (a = t.providers) && void 0 !== a ? a : [], tu.ml9.Zerodev),
                        l = r.some(({
                            key: t
                        }) => "zerodev" === t);
                    if (s && !l) throw new ConnectorSetupError("ZeroDev", "ZeroDevSmartWalletConnectors")
                },
                verifyRequiredConnectorsAreSetup = (t, r) => {
                    verifyMagicIsSetup(t, r), verifyZeroDevIsSetup(t, r)
                },
                useWalletConnectorOptions = ({
                    projectSettings: t,
                    appLogoUrl: r,
                    appName: a,
                    deepLinkPreference: s,
                    flowNetwork: l,
                    mobileExperience: c,
                    networkConfigurations: d,
                    walletBook: u,
                    walletConnectV1Bridge: m,
                    walletUiUtils: p,
                    walletConnectorsProp: h,
                    walletConnectPreferredChains: f,
                    walletConnectorExtensions: y
                }) => {
                    let b = (0, nt.useMemo)(() => t && Object.keys(null != u ? u : {}).length && d ? getWallets({
                        getSupportedWalletOpts: {
                            appLogoUrl: r,
                            appName: a,
                            deepLinkPreference: s,
                            flowNetwork: l,
                            mobileExperience: c,
                            networkConfigurations: d,
                            settings: t,
                            skipMemo: !0,
                            walletBook: u,
                            walletConnectPreferredChains: f,
                            walletConnectV1Bridge: m,
                            walletConnectorsProp: null != h ? h : [],
                            walletUiUtils: p
                        },
                        walletConnectorExtensions: y
                    }) : [], [r, a, t, h, m, f, l, Object.keys(null != u ? u : {}).length, d]);
                    return (0, nt.useEffect)(() => {
                        t && 0 !== b.length && verifyRequiredConnectorsAreSetup(t, b.map(({
                            walletConnector: t
                        }) => t))
                    }, [b, t]), {
                        walletConnectorOptions: b
                    }
                },
                getWalletIdentifier = ({
                    address: t,
                    connector: r
                }) => `${t}+${r.key}`,
                useThrottle = (t, r) => {
                    let a = (0, nt.useRef)(!1),
                        s = (0, nt.useRef)(t);
                    return s.current = t, (0, nt.useCallback)((...t) => {
                        a.current || (s.current(...t), a.current = !0, setTimeout(() => a.current = !1, r))
                    }, [r])
                },
                useWindowEvent = (t, r) => {
                    let a = (0, nt.useRef)(r);
                    a.current = r, (0, nt.useEffect)(() => {
                        if (!(null == window ? void 0 : window.addEventListener)) return;
                        let callback = t => a.current(t);
                        return window.addEventListener(t, callback), () => {
                            window.removeEventListener(t, callback)
                        }
                    }, [t])
                },
                getConnectedWalletsMap = t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    let r = {};
                    return yield Promise.all(t.map(t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        r[getWalletIdentifier(t)] = yield isWalletConnected(t)
                    }))), r
                }),
                useWalletsConnectionState = t => {
                    let [r, a] = (0, nt.useState)({}), s = (0, nt.useRef)(!1), l = (0, nt.useRef)(void 0), c = (0, nt.useCallback)(() => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        s.current = !1;
                        let r = yield getConnectedWalletsMap(t);
                        if (0 === Object.values(r).length) {
                            a({});
                            return
                        }
                        if (s.current = !0, l.current) {
                            let r = t.some(t => (0, tl.Wr)(l.current, t.address, t.chain));
                            if (!r) return;
                            l.current = void 0
                        }
                        a(r)
                    }), [t]), d = t.map(getWalletIdentifier).join("-"), u = t.map(({
                        connector: t
                    }) => t), m = useThrottle(() => {
                        d && c()
                    }, 1e3);
                    return useWalletConnectorEvent(u, "accountChange", ({
                        accounts: t
                    }) => {
                        l.current = t[0], m()
                    }), useWalletConnectorEvent(u, "disconnect", m), useWalletConnectorEvent(u, "chainChange", m), (0, nt.useEffect)(() => {
                        c()
                    }, [d]), useWindowEvent("focus", c), {
                        connectedWalletsMap: r,
                        didConnectedStateLoad: s
                    }
                },
                reconnectSocialWallet = (t, r) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    if (!(0, tl.be)(r.connector)) return;
                    let a = getReferencedAccount_getReferencedAccount(t, r.id);
                    a && a.oauthProvider && (yield r.connector.connect(a.oauthProvider))
                }),
                shouldManuallyReconnectOnRefresh = t => "STARK" === t.connectedChain || "FLOW" === t.connectedChain,
                convertLegacyPhantomLedgerConnector = t => Object.assign(Object.assign({}, t), {
                    walletName: "phantom",
                    walletProperties: {
                        hardwareWallet: tu.lkn.Ledger
                    }
                }),
                createLinkedWalletsFromWalletOptions = ({
                    authToken: t,
                    walletConnectorOptions: r,
                    primaryWalletId: a
                }) => {
                    let s = decodeJwt(t);
                    return r && s ? s.verifiedCredentials.map(convertLegacyPhantomLedger).map(t => {
                        let l = findWallet(t, r);
                        return l ? (t.id === a && shouldManuallyReconnectOnRefresh(l.walletConnector) && l.walletConnector.connect(), isOwnerOfASmartWallet(t, s.verifiedCredentials)) ? null : t.address && t.chain ? (t.walletProvider === tu.hnE.SmartContractWallet && initializeSmartWallet({
                            account: t,
                            verifiedCredentials: s.verifiedCredentials,
                            walletConnectorOptions: r
                        }), {
                            additionalAddresses: t.walletAdditionalAddresses,
                            address: t.address,
                            authenticated: !0,
                            chain: t.chain,
                            connected: !1,
                            connector: l.walletConnector,
                            id: t.id
                        }) : null : null
                    }).filter(t => null !== t) : []
                },
                convertLegacyPhantomLedger = t => "phantomledger" === t.walletName ? convertLegacyPhantomLedgerConnector(t) : t,
                updateUserWalletsFromLinkedWallets = (t, r) => {
                    let a = [...t],
                        s = new Set;
                    for (let t of r) {
                        s.add(t.address);
                        let r = a.findIndex(r => r.address === t.address);
                        if (-1 === r) {
                            a.push(t);
                            continue
                        }
                        a[r] = t
                    }
                    return a.filter(t => s.has(t.address))
                },
                useWalletConnectors = ({
                    authMode: t,
                    authToken: r,
                    connectedWallets: a,
                    walletConnectorOptions: s,
                    multiWalletWidgetState: l,
                    setDesktopUri: c,
                    setMultiWalletWidgetState: d,
                    setQrcodeUri: u,
                    primaryWalletId: m,
                    setPrimaryWalletId: p,
                    user: h,
                    onboardingOnlyJwt: f,
                    canHaveMultipleWalletsConnected: y
                }) => {
                    let [b, C] = (0, nt.useState)(!1), E = (0, nt.useMemo)(() => r ? createLinkedWalletsFromWalletOptions({
                        authToken: r,
                        primaryWalletId: m,
                        walletConnectorOptions: s
                    }) : [], [r, m, s]), j = (0, nt.useMemo)(() => "connect-and-sign" === t && (h || f) || "connect-only" === t && E.find(t => (0, tl.MQ)(t.connector)) ? E : a, [t, a, E, h, f]);
                    (0, nt.useEffect)(() => j.forEach(t => {
                        t.connector.initEventListener()
                    }), [j]);
                    let {
                        connectedWalletsMap: I,
                        didConnectedStateLoad: O
                    } = useWalletsConnectionState(j), P = (0, nt.useMemo)(() => j.map(t => Object.assign(Object.assign({}, t), {
                        connected: !!I[getWalletIdentifier(t)]
                    })), [I, j]), {
                        setUserWallets: R
                    } = useInternalUserWallets();
                    (0, nt.useEffect)(() => {
                        O.current && R(t => updateUserWalletsFromLinkedWallets(t, P))
                    }, [O, R, P]);
                    let F = (0, nt.useMemo)(() => {
                            var t;
                            return null !== (t = P.find(t => t.id === m)) && void 0 !== t ? t : null
                        }, [m, P]),
                        W = (0, nt.useMemo)(() => y ? P.filter(t => t.id !== m) : [], [m, P, y]),
                        M = (0, nt.useCallback)(t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            let r = P.find(({
                                id: r
                            }) => r === t);
                            if (!r) throw new td.kW(`Wallet with id: ${t} not found`);
                            let a = yield r.connector.getConnectedAccounts();
                            return {
                                connectedAccounts: a,
                                newWallet: r
                            }
                        }), [P]),
                        D = (0, nt.useCallback)((t, r, a) => {
                            if (!t || "idle" !== l) return;
                            let s = a && !a.find(t => t.toLowerCase() === r.address.toLowerCase());
                            return r.connector.key === t.connector.key || s
                        }, [l]),
                        L = (0, nt.useCallback)(t => !t.connector.isInstalledOnBrowser() && !t.connector.canConnectViaCustodialService, []),
                        U = (0, nt.useCallback)(t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            let {
                                newWallet: a,
                                connectedAccounts: s
                            } = yield M(t);
                            if (!m) {
                                yield a.connector.connect(), p(t);
                                return
                            }
                            if (m === t) return;
                            if (D(F, a)) {
                                yield a.connector.connect(), p(t);
                                return
                            }
                            if (s.length || (d("awaiting_connection"), C(L(a))), (0, tl.dE)(a.connector)) {
                                let t = a.connector,
                                    r = localStorage.getItem("magic-link-email");
                                r && t.setEmail(r)
                            }
                            if ((0, tl.be)(a.connector) && !a.connected) {
                                reconnectSocialWallet(r, a);
                                return
                            }
                            let l = yield a.connector.fetchPublicAddress({
                                onDesktopUri: t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                                    c(t)
                                }),
                                onDisplayUri: t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                                    u(t)
                                })
                            }), h = yield a.connector.getConnectedAccounts();
                            if (D(F, a, h) && !(0, tl.dE)(a.connector)) {
                                d("awaiting_account_switch", "switching_primary");
                                return
                            }
                            l ? (p(t), d("idle")) : tv.error("Failed to connect to wallet")
                        }), [r, D, L, F, M, m, c, d, p, u]);
                    return {
                        didConnectedStateLoad: O.current,
                        primaryWallet: F,
                        secondaryWallets: W,
                        setPrimaryWallet: U,
                        setShowQrcodeModal: C,
                        showQrcodeModal: b,
                        wallets: P
                    }
                },
                isSignTypedData = t => {
                    if ("object" != typeof t || null === t) return !1;
                    let {
                        types: r,
                        message: a,
                        primaryType: s
                    } = t;
                    return "object" == typeof r && null !== r && "object" == typeof a && null !== a && "string" == typeof s
                },
                SignTypedDataPreview = ({
                    currentType: t,
                    types: r,
                    showTypeName: a = !1,
                    data: s
                }) => {
                    let l = r[t].map(t => {
                        var a;
                        let l = t.type.replace("[]", ""),
                            c = t.type.endsWith("[]"),
                            d = l in r;
                        if (c && d) return (0, tb.jsx)(TypeSection, {
                            title: capitalize_capitalize_capitalize(t.name),
                            children: null === (a = null == s ? void 0 : s[t.name]) || void 0 === a ? void 0 : a.map((t, a) => (0, tb.jsx)(TypeSection, {
                                title: a.toString(),
                                children: (0, tb.jsx)(SignTypedDataPreview, {
                                    currentType: l,
                                    types: r,
                                    data: t
                                })
                            }, a))
                        }, t.name);
                        if (d) return (0, tb.jsx)(TypeSection, {
                            title: capitalize_capitalize_capitalize(t.name),
                            children: (0, tb.jsx)(SignTypedDataPreview, {
                                currentType: l,
                                types: r,
                                data: null == s ? void 0 : s[t.name]
                            })
                        }, t.name);
                        let u = null == s ? void 0 : s[t.name],
                            m = t.type;
                        return (0, tb.jsx)(FieldRow, {
                            name: capitalize_capitalize_capitalize(t.name),
                            data: u,
                            displayValue: "address" === m ? shortenWalletAddress_shortenWalletAddress(u, 4, 4) : u
                        }, t.name)
                    });
                    return a ? (0, tb.jsx)(TypeSection, {
                        title: t,
                        children: l
                    }) : (0, tb.jsx)("div", {
                        className: "sign-typed-data-preview--fields-list",
                        children: l
                    })
                },
                TypeTitle = ({
                    children: t
                }) => (0, tb.jsx)(Typography_Typography, {
                    color: "secondary",
                    weight: "medium",
                    children: t
                }),
                AttributeValue = ({
                    children: t,
                    title: r
                }) => (0, tb.jsx)(Typography_Typography, {
                    as: "span",
                    weight: "regular",
                    color: "primary",
                    title: r,
                    children: t
                }),
                PaddedContent = ({
                    children: t
                }) => (0, tb.jsx)("div", {
                    className: "sign-typed-data-preview--type-container",
                    children: t
                }),
                TypeSection = ({
                    title: t,
                    children: r
                }) => (0, tb.jsxs)("div", {
                    children: [(0, tb.jsx)(TypeTitle, {
                        children: t
                    }), (0, tb.jsx)(PaddedContent, {
                        children: r
                    })]
                }),
                FieldRow = ({
                    name: t,
                    displayValue: r,
                    data: a
                }) => (0, tb.jsxs)("div", {
                    className: "sign-typed-data-preview--attribute-row",
                    children: [(0, tb.jsxs)(TypeTitle, {
                        children: [capitalize_capitalize_capitalize(t), ": "]
                    }), (0, tb.jsx)(AttributeValue, {
                        title: a,
                        children: r
                    })]
                }),
                SignMessagePreview = ({
                    message: t
                }) => {
                    let r = (0, nt.useMemo)(() => {
                        try {
                            let r = JSON.parse(t);
                            return isSignTypedData(r) ? r : void 0
                        } catch (t) {
                            return
                        }
                    }, [t]);
                    return r ? (0, tb.jsx)(SignTypedDataPreview, {
                        currentType: r.primaryType,
                        types: r.types,
                        showTypeName: !0,
                        data: r.message
                    }) : (0, tb.jsx)(Typography_Typography, {
                        color: "primary",
                        variant: "body_normal",
                        children: (0, tb.jsx)("span", {
                            style: {
                                whiteSpace: "pre-line"
                            },
                            children: t
                        })
                    })
                },
                SignMessageConfirmationModal = ({
                    appLogoUrl: t,
                    appName: r,
                    appOrigin: a,
                    message: s,
                    handler: l,
                    onReject: c,
                    onSignMessage: d
                }) => {
                    usePreventPageScroll(!0);
                    let u = (0, nt.useRef)(!1),
                        [m, p] = (0, nt.useState)(!0),
                        {
                            initPasskeyRecoveryProcess: h,
                            shouldInitRecovery: f
                        } = usePasskeyRecovery_usePasskeyRecovery(),
                        {
                            isTurnkeyWallet: y
                        } = useIsTurnkeyWallet(),
                        {
                            setShowAuthFlow: b
                        } = useInternalDynamicContext_useInternalDynamicContext(),
                        {
                            setView: C
                        } = ViewContext_useViewContext(),
                        {
                            userNeedsCrossDomainPasskey: E
                        } = usePasskeyContext(),
                        {
                            t: j
                        } = useTranslation_useTranslation(),
                        I = (0, nt.useCallback)(() => {
                            u.current = !1, p(!1)
                        }, [p]),
                        {
                            isLoading: O,
                            mutate: P,
                            data: R,
                            error: F
                        } = useMutation_useMutation(() => l(s), {
                            onSuccess: () => {
                                u.current = !0, p(!1)
                            }
                        }),
                        W = (0, nt.useCallback)(() => {
                            if (R) return d(R);
                            c(F || Error("user rejected signing"))
                        }, [R, d, c, F]),
                        M = (0, tb.jsx)(rk, {
                            type: "button",
                            onClick: I,
                            "data-testid": "close",
                            disabled: O,
                            children: (0, tb.jsx)(close_SvgClose, {})
                        });
                    return (0, tb.jsx)(Portal_Portal, {
                        handleClose: I,
                        isShown: m,
                        zIndex: 2147483645,
                        withBackdrop: !0,
                        elementId: "dynamic-sign-message",
                        transitionEvents: {
                            onUnmount: W
                        },
                        children: (0, tb.jsx)(Modal_Modal, {
                            children: (0, tb.jsxs)(ModalCard_ModalCard, {
                                children: [(0, tb.jsx)(ModalHeader, {
                                    trailing: M,
                                    alignContent: "bottom",
                                    children: (0, tb.jsx)(IconWithSpinner_IconWithSpinner, {
                                        Icon: t => (0, tb.jsx)(Icon_Icon, {
                                            color: "brand-primary",
                                            children: (0, tb.jsx)(SvgSignCircle, Object.assign({}, t))
                                        }),
                                        iconSize: 64,
                                        isSpinning: !0
                                    })
                                }), (0, tb.jsx)(PasskeyCreatedSuccessBanner, {}), (0, tb.jsxs)("div", {
                                    className: "sign-message-confirmation__body",
                                    children: [(0, tb.jsx)(Typography_Typography, {
                                        variant: "title",
                                        color: "primary",
                                        className: "sign-message-confirmation__title",
                                        copykey: "dyn_sign_message.title",
                                        children: j("dyn_sign_message.title")
                                    }), (0, tb.jsx)(AnimatePresence, {
                                        animationComponent: (0, tb.jsx)(VerticalDrawerTransition, {}),
                                        children: F && (0, tb.jsx)("div", {
                                            className: "sign-message-confirmation__error",
                                            children: (0, tb.jsx)(ErrorContainer, {
                                                children: getProperErrorMessage(F)
                                            })
                                        })
                                    }), (0, tb.jsxs)("div", {
                                        className: "sign-message-confirmation__message-container",
                                        children: [(0, tb.jsx)(AppOriginTile, {
                                            appLogoUrl: t,
                                            appName: r,
                                            appOrigin: a
                                        }), (0, tb.jsx)("div", {
                                            className: "sign-message-confirmation__message",
                                            children: (0, tb.jsx)(SignMessagePreview, {
                                                message: s.toString()
                                            })
                                        })]
                                    }), (0, tb.jsxs)("div", {
                                        className: "sign-message-confirmation__actions",
                                        children: [(0, tb.jsx)(Button_Button, {
                                            buttonVariant: "secondary",
                                            onClick: I,
                                            expanded: !0,
                                            buttonPadding: "large",
                                            disabled: O,
                                            copykey: "dyn_sign_message.cancel_button",
                                            children: j("dyn_sign_message.cancel_button")
                                        }), (0, tb.jsx)(Button_Button, {
                                            buttonVariant: "primary",
                                            buttonPadding: "large",
                                            onClick: () => _tslib_awaiter(void 0, void 0, void 0, function*() {
                                                if ((yield f()) && (yield h("email", "signMessage")), y && E) {
                                                    C("passkey-new-domain-detected"), b(!0, {
                                                        ignoreIfIsEmbeddedWidget: !1,
                                                        performMultiWalletChecks: !1
                                                    }), nr.once("passkeyRecoveryCompleted", () => {
                                                        P()
                                                    });
                                                    return
                                                }
                                                P()
                                            }),
                                            expanded: !0,
                                            loading: O,
                                            copykey: "dyn_sign_message.sign_button",
                                            dataTestId: "sign-button",
                                            children: j("dyn_sign_message.sign_button")
                                        })]
                                    }), (0, tb.jsx)(NeedHelpSection, {}), (0, tb.jsx)(PoweredByDynamic, {})]
                                })]
                            })
                        })
                    })
                };
            var og = a(94069),
                ov = a(89534);
            let TransactionConfirmationModal = ({
                    title: t,
                    handler: r,
                    onReject: a,
                    onTransactionResponseSuccess: s,
                    transaction: l,
                    provider: c,
                    copykey: d
                }) => {
                    usePreventPageScroll(!0);
                    let [u, m] = (0, nt.useState)(!0), p = (0, nt.useRef)(null), h = (0, nt.useRef)(null), {
                        primaryWallet: f
                    } = useInternalDynamicContext_useInternalDynamicContext(), y = (0, nt.useCallback)(() => {
                        m(!1)
                    }, [m]), b = useTransactionWithGasPrice({
                        enabled: null === h.current && !(0, tl.nM)(null == f ? void 0 : f.connector),
                        provider: c,
                        transaction: l
                    }), C = (0, nt.useCallback)(() => h.current ? s(h.current) : a(p.current || new og.mk(new ov.G("user rejected transaction"), Object.assign({}, b))), [s, a]);
                    return (0, tb.jsx)(Portal_Portal, {
                        handleClose: y,
                        isShown: u,
                        zIndex: 2147483645,
                        withBackdrop: !0,
                        elementId: "dynamic-send-transaction",
                        transitionEvents: {
                            onUnmount: C
                        },
                        children: (0, tb.jsx)(Modal_Modal, {
                            children: (0, tb.jsx)(ModalCard_ModalCard, {
                                children: (0, tb.jsx)(TransactionConfirmationView, {
                                    provider: c,
                                    transaction: b,
                                    title: t,
                                    copykey: d,
                                    mutation: () => r(b),
                                    onClickClose: y,
                                    onError: t => p.current = t,
                                    displayPoweredByDynamicFooter: !0,
                                    onSuccess: t => {
                                        p.current = null, h.current = t, y()
                                    }
                                })
                            })
                        })
                    })
                },
                useWalletUiUtils = ({
                    appLogoUrl: t,
                    appName: r,
                    getAppOrigin: a
                }) => {
                    let s = (0, nt.useRef)("enabled"),
                        {
                            t: l
                        } = useTranslation_useTranslation(),
                        {
                            modal: c,
                            open: d
                        } = useConfirmationModal({
                            elementId: "dynamic-send-transaction"
                        }),
                        {
                            modal: u,
                            open: m
                        } = useConfirmationModal({
                            elementId: "dynamic-sign-message"
                        }),
                        p = (0, nt.useCallback)(() => "disabled" !== s.current || (s.current = "enabled", !1), [s]),
                        h = (0, nt.useCallback)(({
                            message: s,
                            handler: l
                        }) => p() ? m((c, d) => (0, tb.jsx)(SignMessageConfirmationModal, {
                            appLogoUrl: t,
                            appName: r,
                            appOrigin: a(),
                            message: s,
                            handler: l,
                            onSignMessage: c,
                            onReject: d
                        })) : l(), [t, r, a, m, p]),
                        f = (0, nt.useCallback)(({
                            transaction: t,
                            handler: r,
                            provider: a
                        }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            return p() ? d((s, c) => (0, tb.jsx)(TransactionConfirmationModal, {
                                copykey: "dyn_send_transaction.confirmation.title",
                                title: l("dyn_send_transaction.confirmation.title"),
                                transaction: t,
                                handler: r,
                                onTransactionResponseSuccess: s,
                                onReject: c,
                                provider: a
                            })) : r(t)
                        }), [d, p, l]),
                        y = (0, nt.useCallback)(() => {
                            s.current = "disabled"
                        }, []),
                        b = (0, nt.useMemo)(() => ({
                            disabledConfirmationOnce: y,
                            sendTransaction: f,
                            signMessage: h
                        }), [h, y, f]);
                    return (0, nt.useMemo)(() => [u || c, b], [u, c, b])
                },
                SyncPasskeyFlow = () => {
                    let {
                        projectSettings: t,
                        isProjectSettingsLoading: r,
                        user: a,
                        primaryWalletId: s
                    } = useInternalDynamicContext_useInternalDynamicContext(), l = LocalStorage.getFromLS(nu), {
                        createEmbeddedWallet: c
                    } = useEmbeddedWallet();
                    return (0, nt.useEffect)(() => {
                        var d, u, m, p, h, f;
                        a && !r && t && isTurnkeyEnabled(t) && (null === (u = null === (d = t.sdk) || void 0 === d ? void 0 : d.embeddedWallets) || void 0 === u ? void 0 : u.automaticEmbeddedWalletCreation) && (null === (p = null === (m = t.sdk) || void 0 === m ? void 0 : m.embeddedWallets) || void 0 === p ? void 0 : p.forceAuthenticatorAtSignup) && (null === (f = null === (h = t.sdk) || void 0 === h ? void 0 : h.embeddedWallets) || void 0 === f || !f.allowSkippingAuthenticatorAtSignup) && !s && void 0 === l && _tslib_awaiter(void 0, void 0, void 0, function*() {
                            try {
                                yield c()
                            } catch (t) {
                                return
                            }
                        })
                    }, [a, r, t, s, l, c]), null
                },
                Switch = ({
                    disabled: t = !1,
                    firstButton: r,
                    secondButton: a,
                    thirdButton: s
                }) => (0, tb.jsxs)("div", {
                    className: classNames_classNames("switch__container", {
                        disabled: t
                    }),
                    children: [(0, tb.jsx)("button", {
                        disabled: t,
                        className: classNames_classNames("button", {
                            active: r.active
                        }),
                        onClick: r.handleButtonClick,
                        children: r.name
                    }), (0, tb.jsx)("button", {
                        disabled: t,
                        className: classNames_classNames("button", {
                            active: a.active
                        }),
                        onClick: a.handleButtonClick,
                        children: a.name
                    }), s && (0, tb.jsx)("button", {
                        disabled: t,
                        className: classNames_classNames("button", {
                            active: s.active
                        }),
                        onClick: s.handleButtonClick,
                        children: s.name
                    })]
                }),
                ThemeSwitch = () => {
                    let {
                        changeTheme: t,
                        theme: r
                    } = ThemeContext_useThemeContext();
                    return (0, tb.jsx)(Switch, {
                        firstButton: {
                            active: "light" === r.theme.name,
                            handleButtonClick: () => t("light"),
                            name: "Light"
                        },
                        secondButton: {
                            active: "dark" === r.theme.name,
                            handleButtonClick: () => t("dark"),
                            name: "Dark"
                        },
                        thirdButton: {
                            active: "auto" === r.theme.name,
                            handleButtonClick: () => t("auto"),
                            name: "Auto"
                        }
                    })
                },
                PrimaryColorInput = () => {
                    let {
                        changePrimaryColor: t,
                        theme: r
                    } = ThemeContext_useThemeContext(), [a, s] = (0, nt.useState)(r.customColor);
                    return (0, tb.jsx)(Input, {
                        id: "primary-color",
                        label: "Primary color",
                        value: a,
                        onChange: t => s(t.target.value),
                        onBlur: l => {
                            let c = a || r.customColor;
                            s(c), t(c)
                        }
                    })
                },
                AuthModeSwitch = ({
                    authMode: t,
                    setAuthMode: r
                }) => (0, tb.jsxs)(tb.Fragment, {
                    children: [(0, tb.jsxs)("div", {
                        className: "auth-mode-switch__container",
                        children: [(0, tb.jsx)(Checkbox, {
                            checked: "connect-and-sign" === t,
                            onChange: () => r("connect-and-sign"),
                            id: "connect-and-sign"
                        }), (0, tb.jsx)("label", {
                            htmlFor: "connect-and-sign",
                            children: (0, tb.jsx)(Typography_Typography, {
                                color: "primary",
                                weight: "regular",
                                children: "Connect and sign"
                            })
                        })]
                    }), (0, tb.jsxs)("div", {
                        className: "auth-mode-switch__container",
                        children: [(0, tb.jsx)(Checkbox, {
                            checked: "connect-only" === t,
                            onChange: () => r("connect-only"),
                            id: "connect-only"
                        }), (0, tb.jsx)("label", {
                            htmlFor: "connect-only",
                            children: (0, tb.jsx)(Typography_Typography, {
                                color: "primary",
                                weight: "regular",
                                children: "Connect only"
                            })
                        })]
                    })]
                }),
                LoginWithEmailSwitch = () => {
                    let {
                        loginWithEmail: t,
                        setLogInWithEmail: r
                    } = useInternalDynamicContext_useInternalDynamicContext();
                    return (0, tb.jsx)(Switch, {
                        firstButton: {
                            active: t,
                            handleButtonClick: () => r(!0),
                            name: "True"
                        },
                        secondButton: {
                            active: !t,
                            handleButtonClick: () => r(!1),
                            name: "False"
                        }
                    })
                },
                isDisplayOrderPriorityForWeb3 = t => {
                    if (2 !== t.length) return !1;
                    let [r, a] = t;
                    return "wallet" === r && "email" === a
                },
                isDisplayOrderPriorityForWeb2 = t => {
                    if (2 !== t.length) return !1;
                    let [r, a] = t;
                    return "email" === r && "wallet" === a
                },
                LoginWithEmailViewDisplayPriorityOrderSwitch = () => {
                    let {
                        authorizationViewDisplayOrder: t,
                        setAuthorizationViewDisplayOrder: r,
                        loginWithEmail: a
                    } = useInternalDynamicContext_useInternalDynamicContext();
                    return (0, tb.jsx)(Switch, {
                        disabled: !a,
                        firstButton: {
                            active: isDisplayOrderPriorityForWeb2(t),
                            handleButtonClick: () => r("web2"),
                            name: "Email"
                        },
                        secondButton: {
                            active: isDisplayOrderPriorityForWeb3(t),
                            handleButtonClick: () => r("web3"),
                            name: "Wallet"
                        }
                    })
                },
                TemplateSelect = () => {
                    let {
                        theme: t,
                        changeTemplate: r
                    } = ThemeContext_useThemeContext();
                    return (0, tb.jsxs)(Select, {
                        label: "template",
                        value: t.template,
                        onChange: t => {
                            r(t.target.value)
                        },
                        selectDataTestId: "template-select",
                        children: [(0, tb.jsx)("option", {
                            value: "default",
                            children: "Default"
                        }), (0, tb.jsx)("option", {
                            value: "matrix",
                            children: "Matrix"
                        }), (0, tb.jsx)("option", {
                            value: "minimal",
                            children: "Minimal"
                        }), (0, tb.jsx)("option", {
                            value: "rounded",
                            children: "Rounded"
                        }), (0, tb.jsx)("option", {
                            value: "trinity",
                            children: "Trinity"
                        })]
                    })
                },
                MultiWalletSwitch = ({
                    multiWallet: t,
                    setMultiWallet: r
                }) => (0, tb.jsx)(Switch, {
                    firstButton: {
                        active: t,
                        handleButtonClick: () => r(!0),
                        name: "True"
                    },
                    secondButton: {
                        active: !t,
                        handleButtonClick: () => r(!1),
                        name: "False"
                    }
                }),
                Toolkit = () => {
                    let {
                        projectSettings: t,
                        user: r,
                        showAuthFlow: a,
                        showDynamicUserProfile: s,
                        toolkitEnabled: l,
                        authMode: c,
                        setAuthMode: d,
                        multiWallet: u,
                        setMultiWallet: m
                    } = useInternalDynamicContext_useInternalDynamicContext(), p = (0, nt.useMemo)(() => !!l && (s || a), [a, s, l]);
                    return p ? (0, tb.jsx)(ShadowDOM_ShadowDOM, {
                        dataTestId: "toolkit-shadowdom",
                        className: "toolkit-shadowdom",
                        zIndex: 2147483646,
                        children: (0, tb.jsxs)("div", {
                            className: "toolkit__container",
                            children: [(0, tb.jsxs)("div", {
                                className: "toolkit__switcher",
                                children: [(0, tb.jsx)(Typography_Typography, {
                                    className: "switcher__copy",
                                    as: "h2",
                                    variant: "body_normal",
                                    children: "Theme"
                                }), (0, tb.jsx)(ThemeSwitch, {})]
                            }), (0, tb.jsxs)("div", {
                                className: "toolkit__switcher",
                                children: [(0, tb.jsx)(Typography_Typography, {
                                    className: "switcher__copy",
                                    as: "h2",
                                    variant: "body_normal",
                                    children: "Template"
                                }), (0, tb.jsx)(TemplateSelect, {})]
                            }), (0, tb.jsxs)("div", {
                                className: "toolkit__switcher",
                                children: [(0, tb.jsx)(Typography_Typography, {
                                    className: "switcher__copy",
                                    as: "h2",
                                    variant: "body_normal",
                                    children: "Primary Color"
                                }), (0, tb.jsx)(PrimaryColorInput, {})]
                            }), !r && (0, tb.jsxs)(tb.Fragment, {
                                children: [(0, tb.jsxs)("div", {
                                    className: "toolkit__switcher",
                                    children: [(0, tb.jsx)(Typography_Typography, {
                                        className: "switcher__copy",
                                        as: "h2",
                                        variant: "body_normal",
                                        children: "Auth mode"
                                    }), (0, tb.jsx)(AuthModeSwitch, {
                                        authMode: c,
                                        setAuthMode: d
                                    })]
                                }), (0, tb.jsxs)("div", {
                                    className: "toolkit__switcher",
                                    children: [(0, tb.jsx)(Typography_Typography, {
                                        className: "switcher__copy",
                                        as: "h2",
                                        variant: "body_normal",
                                        children: "Multi Wallet"
                                    }), (0, tb.jsx)(MultiWalletSwitch, {
                                        multiWallet: u,
                                        setMultiWallet: m
                                    })]
                                })]
                            }), isEmailProviderEnabled((null == t ? void 0 : t.providers) || []) && !r && (0, tb.jsxs)(tb.Fragment, {
                                children: [(0, tb.jsxs)("div", {
                                    className: "toolkit__switcher",
                                    children: [(0, tb.jsx)(Typography_Typography, {
                                        className: "switcher__copy",
                                        as: "h2",
                                        variant: "body_normal",
                                        children: "Log in with Email"
                                    }), (0, tb.jsx)(LoginWithEmailSwitch, {})]
                                }), (0, tb.jsxs)("div", {
                                    className: "toolkit__switcher",
                                    children: [(0, tb.jsx)(Typography_Typography, {
                                        className: "switcher__copy",
                                        as: "h2",
                                        variant: "body_normal",
                                        children: "Email vs Wallet priority"
                                    }), (0, tb.jsx)(LoginWithEmailViewDisplayPriorityOrderSwitch, {})]
                                })]
                            })]
                        })
                    }) : null
                },
                ob = {
                    dyn_account_exists: {
                        connect: "Connect with {{socialOauth}}",
                        description_email: "It looks like an account already exists using",
                        description_social: "To restore your account to the right place, we need you to log in again.",
                        title: "Re-Authentication Required",
                        trail_message_email: ". Please log in with your email.",
                        trail_message_social: "through {{socialOauth}}"
                    },
                    dyn_active_wallet_info: {
                        testnet_warning: "A testnet network has been selected. Please only use testnet funds or they will be lost.",
                        ordinals_address: "Ordinals address",
                        payment_address: "Payment address"
                    },
                    dyn_bridge: {
                        summary_view: {
                            connection_succeed: "Congratulations on connecting both your {{firstBlockchainName}} and {{secondBlockchainName}} wallets",
                            title: "Welcome to {{appName}}"
                        },
                        welcome_view: {
                            button: "Get started",
                            description: "You’ll need to connect both your {{firstBlockchainName}} and {{secondBlockchainName}} wallets to get started",
                            title: "Connect to {{appName}}"
                        },
                        widget: {
                            address: "Copy wallet address",
                            connect: "Connect wallet",
                            connect_with_network: "Connect {{blockchainName}} wallet",
                            copy: {
                                address: "Copy wallet address",
                                ens: "Copy ENS"
                            },
                            disconnect: "Disconnect",
                            edit_profile: "Edit profile",
                            wallet_network: "{{networkName}} wallet"
                        }
                    },
                    dyn_captcha: {
                        verify_user_subtitle: "We need to quickly verify you’re human before we proceed.",
                        verify_user_title: "Let's verify you're human"
                    },
                    dyn_chainalysis_blocked_wallet: {
                        title: "Access denied"
                    },
                    dyn_collect_user_data: {
                        description: "We need a bit of information to get started",
                        fields: {
                            alias: {
                                label: "Alias"
                            },
                            country: {
                                label: "Country"
                            },
                            email: {
                                label: "Email",
                                validation: "Email is not valid"
                            },
                            first_name: {
                                label: "First Name"
                            },
                            job_title: {
                                label: "Job Title"
                            },
                            last_name: {
                                label: "Last Name"
                            },
                            phone_number: {
                                label: "Phone number",
                                validation: "Phone number is not valid"
                            },
                            policies_consent: {
                                label: "Policies Consent"
                            },
                            t_shirt_size: {
                                label: "T-Shirt Size"
                            },
                            team: {
                                label: "Team"
                            },
                            username: {
                                label: "Username",
                                validation: "Username is not valid"
                            }
                        },
                        greeting: "Welcome to {{appName}}",
                        log_out_button: "Log out",
                        not_supported_network: {
                            description: "Your wallet is not connected to a supported network. Please update before continuing.",
                            error_message: "This network is not available, please update.",
                            title: "Update Network"
                        },
                        update_email_tooltip: "This email is tied to your wallet so cannot be updated"
                    },
                    dyn_email_confirmation: {
                        description: "We’ve sent a verification email to",
                        note: "Note: it might take a few seconds to proceed after clicking the link in your email",
                        title: "Confirm your email"
                    },
                    dyn_email_update: {
                        current_email: "Your current email address is",
                        label: "Email address",
                        send_verification: "Send Verification Code",
                        title: "Update email"
                    },
                    dyn_email_verification: {
                        code_not_received: "Did not receive your code yet?",
                        code_sent: "Code sent",
                        complete: "Verification complete, the email is now verified to this account.",
                        description: "We’ve sent a verification code to",
                        edit_email: "Edit email",
                        log_out_button: "Log out",
                        resend_code: "Re-send code",
                        resend_code_in: "Re-send code in {{remainingSeconds}}",
                        title: "Confirm your email"
                    },
                    dyn_embedded_authenticator: {
                        description: "Protect your account and simplify your transaction experience.",
                        email: {
                            badge: "Fastest",
                            description: " You will need to renew after {{expiration}} minutes ",
                            title: "Use a one-time code"
                        },
                        passkey: {
                            auth_info: {
                                convinience: {
                                    title: "Convenient and Fast",
                                    description: "Use Face-ID our Touch ID to complete transactions quickly."
                                },
                                security: {
                                    title: "Increased Security",
                                    description: "Passkeys are encrypted end-to-end on your device or password manager to prevent phishing attempts."
                                },
                                add_button: "Add a passkey",
                                start_button: "Add a passkey"
                            },
                            badge: "Recommended",
                            description: "Works across devices & secured with biometric to prevent phishing attempts ",
                            title: "Create new passkey"
                        },
                        skip: "Not now",
                        title: "Account security",
                        need_help_title: "Problem Signing?",
                        need_help_description: "Select from an option below to complete"
                    },
                    dyn_login: {
                        connect_wallet: {
                            title: "Connect"
                        },
                        helper: {
                            all_wallet_list: "Get your first wallet",
                            email_form: {
                                invalid_email: "Invalid or incorrect email. Did you mistype it?"
                            },
                            pending_connect: {
                                title: "Connecting a wallet"
                            },
                            pending_signature: {
                                title: "Signing a wallet"
                            },
                            pending_signature_without_back_button: {
                                title: "Signing a wallet"
                            },
                            qr_code: {
                                title: "Connecting a wallet"
                            },
                            wallet_only: "Get your first wallet"
                        },
                        qr_code: {
                            title: "Connect"
                        },
                        separators: {
                            default: "OR"
                        },
                        sign_wallet: {
                            title: "Sign"
                        },
                        title: {
                            all: "Log in or sign up",
                            all_wallet_list: "Select your wallet",
                            wallet_only: "Select your wallet"
                        },
                        wallet_group: {
                            title: "Select Chain"
                        },
                        select_wallet_in_wallet_group: {
                            title: "Select"
                        },
                        wallet_list: {
                            button_only: "Continue with a wallet"
                        },
                        wrong_social_account: {
                            retry_button: "Try again",
                            retry_title: "Please connect with: ",
                            subtitle: "You must connect with the same account you originally signed in with.",
                            title: "Whoops. Wrong Account"
                        }
                    },
                    dyn_manage_passkeys: {
                        title: "Manage passkeys",
                        passkey_from: "from",
                        passkey_providers: {
                            android: "Android Phone",
                            brave: "Brave Browser",
                            chrome: "Google Chrome",
                            edge: "Microsoft Edge",
                            firefox: "Firefox",
                            iPhone: "iPhone",
                            opera: "Opera Browser",
                            safari: "Safari Browser"
                        },
                        recovery_button: "Set up new passkey"
                    },
                    dyn_rename_passkeys: {
                        error: "Whoops! There was an error updating your passkey",
                        input_label: "Passkey name",
                        save: "Save",
                        title: "Rename your passkey",
                        not_found: "No passkeys found"
                    },
                    dyn_embedded_reveal: {
                        title: "Export wallet",
                        agreement_title: "Agree to continue",
                        private_key_title: "Private key",
                        recovery_phrase_title: "Secret recovery phrase",
                        badge_label: "Sensitive information",
                        statement_1: {
                            title: "Your wallet is non-custodial",
                            description: "You are always in control of it."
                        },
                        statement_2: {
                            title: "Do not publicly share your wallet key",
                            description: "Your {{credential_type}} controls your account and assets."
                        },
                        checkbox_label: "I am responsible for safeguarding and using my wallet key information.",
                        reveal_description: "Make sure to safely back up this information",
                        reveal_button_label: "Reveal",
                        copy_button_label: "Copy to clipboard",
                        done_button_label: "I'm Done"
                    },
                    dyn_wallet_settings: {
                        export_section: {
                            private_key_button: "Private key",
                            srp_button: "Recovery phrase",
                            title: "Export & Backup"
                        },
                        signing_section: {
                            email_auth_button: "One time code",
                            passkey_button: "Passkeys",
                            title: "Security & Signing Methods"
                        },
                        title: "Wallet settings"
                    },
                    dyn_merge_user_accounts: {
                        cancel_button: "No, I'll use a different email",
                        confirm_button: "Yes, link to existing account",
                        errors: {
                            merge_error: "Something went wrong, please try again."
                        },
                        existing_account: "An account already exists that uses",
                        existing_account_trail: "email.",
                        title: "Would you like to link this wallet to this existing account?"
                    },
                    dyn_need_help_section: {
                        info: "Problem Signing?",
                        contact_support: "Contact support",
                        divider: "or",
                        help_button: "go here."
                    },
                    dyn_network_not_supported: {
                        button: "Switch Network",
                        subtitle: "Your wallet is not connected to a supported network. Please update before continuing.",
                        title: "Update Network",
                        warning_message: "This network is not available, please update."
                    },
                    dyn_network_not_supported_manual_switch: {
                        subtitle_network_defined: "To continue, please update the network in your wallet to {{network}}",
                        subtitle_no_network_defined: "Your wallet does not support switching networks from this app. Switch networks directly in your wallet.",
                        title: "Update your Network",
                        warning_message: "This network is not available, please update."
                    },
                    dyn_no_access: {
                        chainalysis: {
                            button_text: "Try another method",
                            description: "This wallet has been correlated to illicit activity and cannot access this site.",
                            social_media_link_text: "Why am I seeing this message?",
                            social_media_link_url: "https://docs.dynamic.xyz/docs",
                            title: "This address seems corrupted."
                        },
                        default: {
                            button_text: "Try another method",
                            description: "We couldn't find your wallet address or email on our allow list of customers.",
                            title: "Access denied"
                        },
                        gate: {
                            button_text: "Try a different wallet",
                            description: "A NFT or a token is required to access this site.",
                            title: "You cannot access the site"
                        },
                        not_in_the_list_image_alt: "user is not in the list",
                        title: "You don't have access"
                    },
                    dyn_otp_verification: {
                        banner_text: "Sign in to access your email based wallet",
                        code_sent: "We’ve sent a verification code to",
                        confirm_code: "Confirm verification code",
                        hang_tight: "Hang tight while we get things ready for you",
                        verification_succeeded: "Verification code confirmed",
                        title: "Confirm verification code"
                    },
                    dyn_passkey_success: {
                        created: "A new passkey has been created",
                        edited: "Your passkey has been edited"
                    },
                    dyn_passkey_intro: {
                        button: "Set up a passkey",
                        button_logout: "Log out",
                        button_skip: "Skip for now",
                        disabled: "Passkeys are not available on this device or browser. Please open on Chrome, Safari, or Brave to continue",
                        helper: {
                            section_1: {
                                description: "Passkeys are a standard built by Apple, Google and others, and eliminates the use of passwords.",
                                title: "Built by Apple and Google"
                            },
                            section_2: {
                                description: "Passkeys are stored on your phone and are not shared with anyone.",
                                title: "Secure and Private"
                            },
                            title: "What's Passkey",
                            tooltip: "Need some help?"
                        },
                        subtitle: "Passkeys are stored natively to your device with a biometric and can only be accessed by you.",
                        title: "Secure your wallet"
                    },
                    dyn_passkey_new_domain_detected: {
                        title: "New domain detected",
                        description: "To complete your transaction select a signing method",
                        actions: {
                            passkey: {
                                title: "Add new passkey",
                                subtitle: "Does not expire. Works across devices & secured with biometric."
                            },
                            emailAuth: {
                                title: "Use a one-time code",
                                subtitle: "Allows you to transact for 30 min"
                            },
                            badges: {
                                recommended: "Recommended",
                                fastest: "Fastest"
                            }
                        }
                    },
                    dyn_passkey_recovery: {
                        code: {
                            description: "A verification code has been sent to {{email}}",
                            input_label: "Enter your code here...",
                            title: "Verification code sent",
                            resend: {
                                button: "Resend code",
                                text: "Didn't receive a code?"
                            }
                        },
                        complete: {
                            complete_button: "Create a passkey",
                            description: "Secure your wallet by adding a new passkey.",
                            title: "Create a new passkey"
                        },
                        start: {
                            description: "To complete this process, ensure you are using the same device/browser.",
                            start_button: "Send me an email",
                            title: "Initiate Request"
                        }
                    },
                    dyn_pending_connection: {
                        mobile: "Click connect in your mobile wallet",
                        computer: "Click connect in your wallet popup"
                    },
                    dyn_pending_signature: {
                        click_to_sign: "Click to Sign",
                        note: "Note: ",
                        phantom_ledger_sign: "Click sign in your wallet to confirm you own this wallet (this doesn't cost gas).",
                        phantom_ledger_warning: "Ledger doesn't support message signing. When logging in, a small fee (which should not apply) may appear. See below to learn more.",
                        regular_sign_description: "Click sign-in in your wallet to confirm you own this wallet."
                    },
                    dyn_qr_code: {
                        copy_button: "Copy QR URI",
                        open_button: "Open {{wallet}} App",
                        scan_title: "Scan this QR code from your mobile wallet or phone's camera to connect.",
                        wallet_not_installed: {
                            browser_install: "Install {{browser}} extension",
                            install: "Install {{wallet}} extension to connect",
                            refresh: "Refresh the page once installed",
                            select: "Select from your preferred options below:"
                        }
                    },
                    dyn_wallet_locked: {
                        connect_continue: "Connect your wallet to continue",
                        title: "Welcome back",
                        subtitle: "We couldn't connect to your wallet. Click connect to retry the connection ",
                        connect: "Connect wallet",
                        logout: "Log out"
                    },
                    dyn_passkey_secure_modal: {
                        code: {
                            action_based_description: "To {{action}} verify account.",
                            description: "A secure code has been sent to {{email}}.",
                            input_label: "Enter your code here...",
                            title: "Verification code sent",
                            resend: {
                                button: "Resend code",
                                text: "Didn't receive a code?"
                            },
                            complete_transaction_action: "complete transaction",
                            sign_message_action: "sign this message"
                        },
                        complete: {
                            complete_button: "Create a passkey",
                            description: "Passkeys are stored natively to your device with a biometric and can only be accessed by you.",
                            title: "Secure your account"
                        },
                        start: {
                            description: "A one-time security code will be sent to the email on file. It will expire in 15 minutes.",
                            start_button: "Send me an email",
                            title: "Send Email Code"
                        }
                    },
                    dyn_secure_pregenerated_wallet: {
                        description: "Make transactions simpler and more secure.",
                        action: "Get started"
                    },
                    dyn_send_transaction: {
                        confirmation: {
                            cancel_button: "Cancel",
                            confirm_button: "Confirm",
                            data: {
                                amount: "Amount",
                                from: "From (You)",
                                gas: "Gas",
                                gas_estimate: "Gas (estimate)",
                                to: "To",
                                total: "Total"
                            },
                            not_applied: "N/A",
                            title: "Confirm transaction"
                        },
                        data: {
                            amount: {
                                label: "Amount",
                                placeholder: "Select amount"
                            },
                            balance: {
                                label: "Balance:"
                            },
                            from: "Send from",
                            recipient: {
                                label: "Recipient",
                                placeholder: "Enter wallet address..."
                            }
                        },
                        send_button: "Send now",
                        succeeded: {
                            continue_button: "Continue",
                            network: {
                                label: "Network"
                            },
                            recipient: {
                                label: "Recipient"
                            },
                            title: "Transaction successfully sent",
                            total_amount: {
                                label: "Total amount"
                            }
                        },
                        validation: {
                            amount: {
                                invalid_decimals: "Please enter a value up to the {{decimals}}th decimal place.",
                                invalid_format: "The amount is in invalid format",
                                over_balance: "Insufficient funds to send this amount.",
                                required: "The amount field is required"
                            },
                            recipient: {
                                invalid_format: "The address is in invalid format",
                                required: "The recipient is required"
                            }
                        },
                        warning_message: {
                            insufficient_funds: "Insufficient funds due to gas price increase from estimate. Please add {{amountLeft}} {{currencySymbol}} to continue."
                        },
                        error_message: {
                            gas_not_sponsored: "The gas fee has increased. Confirm if you still want to complete this transaction."
                        }
                    },
                    dyn_select_chain: {
                        description: "This wallet supports multiple chains. Select which chain you'd like to connect to",
                        using_hardware_wallet_toggle_label: "Using Ledger with {{chainName}}"
                    },
                    dyn_select_wallet: {
                        description: "Select your preferred {{walletName}} wallet?"
                    },
                    dyn_select_hardware_wallet: {
                        title: "Enable Ledger",
                        description: "This wallet supports using ledger. Toggle on ledger to enable it.",
                        using_hardware_wallet_toggle_label: "Using Ledger with {{chainName}}"
                    },
                    dyn_sign_message: {
                        cancel_button: "Cancel",
                        sign_button: "Sign",
                        title: "Requesting Signature"
                    },
                    dyn_social_redirect: {
                        logging_in: "Logging you in"
                    },
                    dyn_wallet_redirect: {
                        loading: "Loading..."
                    },
                    dyn_time_since: {
                        second: "second",
                        seconds: "seconds",
                        minute: "minute",
                        minutes: "minutes",
                        hour: "hour",
                        hours: "hours",
                        day: "day",
                        days: "days",
                        month: "month",
                        months: "months",
                        year: "year",
                        years: "years",
                        ago: "ago",
                        created: "Created"
                    },
                    dyn_wallet_conect: {
                        mobile: {
                            wallet_list: {
                                helper: "Get your first wallet",
                                title: "WalletConnect wallets"
                            }
                        }
                    },
                    dyn_wallet_link: {
                        cannot_link: {
                            cancel_button: "Cancel",
                            description: "This wallet is the only wallet in your other account. You cannot transfer it, since then you will lose access to that account.",
                            link_other_button: "Link a different wallet",
                            title: "Cannot link this wallet to a new account"
                        },
                        confirm_button: "Link wallet to current account",
                        existent_account: {
                            acceptance: "I understand that linking this wallet means that I will lose access to the other account.",
                            warning: "Linking your wallet to this account will unlink it from its previously associated account"
                        },
                        log_out_button: "Log out",
                        title: "Transfer this wallet?"
                    },
                    dyn_wallet_list: {
                        configuration_mismatch: "Oops, no login methods have been configured.",
                        helper: "Get your first wallet",
                        search: {
                            label: "Search through {{numberOfWallets}} wallets...",
                            not_found: {
                                description: "Try searching for a different wallet",
                                title: "No wallet found."
                            }
                        },
                        title: {
                            connect: "Connect a new wallet",
                            link: "Link a new wallet",
                            select: "Select your wallet"
                        },
                        view_all: "View all wallets",
                        wallet_missing: {
                            description: "Try search instead",
                            title: "Don't see your wallet?"
                        }
                    },
                    dyn_wallet_transfer: {
                        sign: {
                            spinner: {
                                cancel: "Cancel",
                                confirm_transfer: "Sign the message to confirm transferring this wallet to this account."
                            },
                            title: "Sign to confirm transfer"
                        }
                    },
                    dyn_widget: {
                        connect: "Connect your wallet",
                        empty_wallets: "{{action}} additional wallets to see them here.",
                        other_wallets: "My other wallets",
                        empty_wallets_action_link: "Link",
                        empty_wallets_action_connect: "Connect"
                    },
                    dyn_wallet_information: {
                        balance: "Balance"
                    },
                    dyn_unlink_wallet_pop_up: {
                        disconnect_title: "Disconnect your wallet?",
                        unlink_title: "Unlink your wallet?",
                        disconnect_description: "Are you sure you want to disconnect your wallet?",
                        unlink_description: "Are you sure you want to unlink your wallet?",
                        disconnect_button: "Yes, disconnect",
                        unlink_button: "Yes, unlink",
                        cancel_button: "No"
                    },
                    dyn_detected_new_wallet: {
                        title: "Account Change Detected",
                        description: "Your active account in {{walletName}} has changed. This account is not currently linked to this app. Do you want to add it?",
                        confirm_button: "Yes, link this wallet"
                    }
                },
                deepMerge = (t, r) => {
                    if ("object" != typeof t || "object" != typeof r) return r;
                    let a = Object.assign({}, t);
                    for (let s in r) Object.prototype.hasOwnProperty.call(r, s) && ("object" == typeof r[s] && Object.prototype.hasOwnProperty.call(t, s) && "object" == typeof t[s] ? a[s] = deepMerge(t[s], r[s]) : a[s] = r[s]);
                    return a
                };
            let Locale = class Locale {
                static setResources(t) {
                    if (Locale.__resources__) return;
                    if (!t) {
                        Locale.__resources__ = {
                            en: {
                                translation: ob
                            }
                        };
                        return
                    }
                    let r = {};
                    Object.keys(t).forEach(a => {
                        let s = Object.assign({}, ob);
                        r[a] = {
                            translation: deepMerge(s, t[a])
                        }
                    }), Locale.__resources__ = r
                }
                static setup(t) {
                    return Locale.__i18nInstance__ ? Locale.__i18nInstance__ : (Locale.setResources(t), r5.use(nP).init({
                        fallbackLng: "en",
                        interpolation: {
                            escapeValue: !1
                        },
                        lng: "en",
                        resources: Locale.getResources()
                    }), Locale.__i18nInstance__ = r5, r5)
                }
                static getInstance() {
                    return Locale.__i18nInstance__
                }
            };
            Locale.getResources = () => Locale.__resources__;
            let getMissingChains = (t, r) => {
                    if (!t || !r) return;
                    let a = new Set(r.map(t => t.walletChain)),
                        s = t.filter(t => !a.has(t.chain));
                    return s
                },
                ow = ["light", "dark", "auto"],
                isThemeSetting = t => ow.includes(t),
                parseTheme = (t, r) => isThemeSetting(t) ? getThemeConfig(r, t) : t,
                o_ = {
                    idle: ["linking_new_wallet", "primary_not_connected", "switching_primary"],
                    linking_new_wallet: ["idle"],
                    primary_not_connected: ["idle"],
                    switching_primary: ["idle"]
                },
                validateStateTransition = ({
                    from: t,
                    to: r
                }) => {
                    if (t !== r && !o_[t].includes(r)) throw Error(`Invalid AccountSwitch state transition from ${t} to ${r}`);
                    return !0
                },
                validateMultiWalletWidgetState = t => {
                    if ("awaiting_account_switch" !== t) throw Error(`Invalid MultiWalletWidget state while trying to set AccountSwitch state: ${t}
Expected: awaiting_account_switch`)
                },
                useAwaitingAccountSwitch = () => {
                    let [t, r] = (0, nt.useState)("idle"), a = (0, nt.useCallback)(() => {
                        r("idle")
                    }, [r]), s = (0, nt.useCallback)((a, s) => {
                        validateMultiWalletWidgetState(s), validateStateTransition({
                            from: t,
                            to: a
                        }), r(a)
                    }, [t]);
                    return [t, s, a]
                },
                ox = {
                    idle: ["linking_new_wallet", "transferring_wallet"],
                    linking_new_wallet: ["idle"],
                    transferring_wallet: ["idle"]
                },
                useAwaitingSignature_validateStateTransition = ({
                    from: t,
                    to: r
                }) => {
                    if (t !== r && !ox[t].includes(r)) throw Error(`Invalid AwaitingSignature state transition from ${t} to ${r}`);
                    return !0
                },
                useAwaitingSignature_validateMultiWalletWidgetState = t => {
                    if ("awaiting_signature" !== t) throw Error(`Invalid MultiWalletWidget state while trying to set AwaitingSignature state: ${t}
Expected: awaiting_signature`)
                },
                useAwaitingSignature = () => {
                    let [t, r] = (0, nt.useState)("idle"), a = (0, nt.useCallback)(() => {
                        r("idle")
                    }, [r]), s = (0, nt.useCallback)((a, s) => {
                        useAwaitingSignature_validateMultiWalletWidgetState(s), useAwaitingSignature_validateStateTransition({
                            from: t,
                            to: a
                        }), r(a)
                    }, [t]);
                    return [t, s, a]
                },
                oC = {
                    awaiting_account_switch: ["awaiting_signature", "idle"],
                    awaiting_connection: ["idle"],
                    awaiting_signature: ["idle"],
                    detected_new_wallet: ["awaiting_signature", "idle"],
                    idle: ["awaiting_account_switch", "awaiting_connection", "awaiting_signature", "detected_new_wallet"]
                },
                useMultiWalletWidgetState_validateStateTransition = ({
                    from: t,
                    to: r
                }) => {
                    if (t !== r && !oC[t].includes(r)) throw Error(`Invalid MultiWalletWidget state transition from ${t} to ${r}`);
                    return !0
                },
                useMultiWalletWidgetState = () => {
                    let [t, r] = (0, nt.useState)("idle"), [a, s, l] = useAwaitingAccountSwitch(), [c, d, u] = useAwaitingSignature(), m = (0, nt.useCallback)(() => {
                        l(), u()
                    }, [l, u]), p = (0, nt.useCallback)((a, l, c) => {
                        useMultiWalletWidgetState_validateStateTransition({
                            from: t,
                            to: a
                        }), r(a), m(), l && s(l, a), c && d(c, a)
                    }, [t, m, s, d]);
                    return [t, p, {
                        awaiting_account_switch: [a, s],
                        awaiting_signature: [c, d]
                    }]
                },
                useMultiWallet = ({
                    toolkitEnabled: t,
                    isBridgeFlow: r,
                    multiWalletSettings: a
                }) => {
                    var s;
                    let l = null !== (s = a || r) && void 0 !== s && s,
                        [c, d] = useLocalStorage(ny, l);
                    return (0, nt.useEffect)(() => {
                        (!t || void 0 === LocalStorage.getFromLS(ny)) && a && d(a)
                    }, [a]), {
                        multiWallet: c,
                        setMultiWallet: d
                    }
                },
                useClearWalletConnectSessions = ({
                    connectors: t
                }) => ((0, nt.useEffect)(() => {
                    if ("undefined" == typeof window || 0 === t.length) return;
                    let r = new Set(t.map(t => t.key));
                    for (let t of LocalStorage.getKeys()) t.startsWith("walletconnect") && !r.has(t.replace("walletconnect-", "")) && localStorage.removeItem(t)
                }, [t]), {
                    clearAllWalletConnectSessions: () => {
                        if ("undefined" != typeof window) {
                            for (let t of LocalStorage.getKeys())(t.startsWith("walletconnect") || t.startsWith("walletlink") || t.startsWith("wc@2")) && localStorage.removeItem(t);
                            null == t || t.forEach(t => {
                                var r, a, s;
                                (null === (a = null === (r = null == t ? void 0 : t.name) || void 0 === r ? void 0 : r.toLowerCase()) || void 0 === a ? void 0 : a.startsWith("turnkey")) && (null === (s = t.getAuthenticatorHandler()) || void 0 === s || s.clear(), LocalStorage.removeFromLS(nb), LocalStorage.removeFromLS(nw))
                            })
                        }
                    }
                }),
                updateUserWalletsFromConnectedWallets = (t, r) => {
                    let a = [...t],
                        s = new Set;
                    for (let t of r) {
                        s.add(t.address);
                        let r = a.find(r => r.address === t.address);
                        if (!r) {
                            a.push(t);
                            continue
                        }
                        r.connected = t.connected, r.network = t.network
                    }
                    return a.filter(t => s.has(t.address) || t.authenticated)
                },
                useConnectWallet = ({
                    authMode: t,
                    clearPrimaryWalletId: r,
                    enableVisitTrackingOnConnectOnly: a,
                    environmentId: s,
                    primaryWalletId: l,
                    setPrimaryWalletId: c,
                    walletConnectorOptions: d,
                    onDisconnect: u,
                    onBeforeConnectSuccessConfirmation: m,
                    removeIsFullyConnected: p,
                    setShowAuthFlow: h,
                    isBridgeFlow: f,
                    setIsVerificationInProgress: y,
                    user: b
                }) => {
                    let [C, E, j] = useLocalStorage(nf, []), [I, O] = (0, nt.useState)([]), P = (0, nt.useRef)(new Set), {
                        setUserWallets: R
                    } = useInternalUserWallets(), setConnectedWallets = t => {
                        O(t), R(r => updateUserWalletsFromConnectedWallets(r, t))
                    }, F = (0, nt.useCallback)(t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        let a = I.find(r => r.id === t);
                        yield null == a ? void 0 : a.connector.endSession();
                        let s = C.filter(r => r.id !== t);
                        if (E(s), 0 === s.length && p(), u(s, a), t !== l) return;
                        let d = s.length > 0;
                        f || !d ? r() : c(s[0].id)
                    }), [r, I, C, f, u, l, p, E, c]), W = (0, nt.useCallback)(() => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        let t = d.map(t => t.walletConnector);
                        if (!t.length) return;
                        let r = (yield Promise.all(C.map(r => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            let a = (0, tl._s)(t, r.walletConnectorKey);
                            if (!a) return tl.kg.error("Could not find walletConnector: " + r.walletConnectorKey), yield F(r.id), null;
                            let [s] = yield a.getConnectedAccounts();
                            if (!s) return yield F(r.id), null;
                            let [l, c] = yield Promise.all([a.getNetwork(), a.getAdditionalAddresses(s)]), d = a.connectedChain, u = {
                                additionalAddresses: c,
                                address: s || "",
                                authenticated: !1,
                                chain: d || "",
                                connected: !0,
                                connector: a,
                                id: r.id,
                                network: l
                            };
                            return u
                        })))).filter(t => !!t);
                        for (let t of (setConnectedWallets(r), [...P.current])) {
                            let a = r.find(r => getWalletIdentifier(r) === t);
                            a && (P.current.delete(t), nr.emit("walletConnected", a), y(!1))
                        }
                    }), [C, y, F, d]);
                    (0, nt.useEffect)(() => {
                        W()
                    }, [C, d]);
                    let M = (0, nt.useCallback)(t => {
                            let r = t.map(({
                                    id: t
                                }) => t),
                                a = r.map(t => Number(t.replace("connect-wallet-", ""))).sort((t, r) => t - r);
                            for (let t = 0; t < a.length; t++)
                                if (a[t] !== t) return t;
                            return a.length
                        }, []),
                        D = (0, nt.useCallback)((t, r) => {
                            let a = [...I],
                                s = a.findIndex(r => r.id === t);
                            s > -1 && (r.address && r.network ? a[s] = Object.assign(Object.assign({}, a[s]), {
                                address: r.address,
                                network: r.network
                            }) : r.address ? a[s] = Object.assign(Object.assign({}, a[s]), {
                                address: r.address
                            }) : a[s] = Object.assign(Object.assign({}, a[s]), {
                                network: r.network
                            }), setConnectedWallets(a))
                        }, [I]),
                        applyConnectedWalletToStore = ({
                            walletId: t,
                            walletConnectorKey: r,
                            walletChain: a,
                            provider: s
                        }) => {
                            let l = [...C];
                            l.push({
                                id: t,
                                provider: s,
                                walletChain: a,
                                walletConnectorKey: r
                            }), E(l)
                        },
                        L = "connect-only" === t && !a,
                        U = (0, nt.useCallback)(t => I.find(r => r.id === t), [I]);
                    return {
                        connectWallet: (r, a, d) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            let {
                                applyOnBeforeConnectSuccessConfirmation: u = !0,
                                raiseOnConnect: p = !1
                            } = null != d ? d : {}, f = yield r.fetchPublicAddress(a);
                            if (!f) throw new td.BI;
                            if (m && u) {
                                let t = yield m({
                                    address: f,
                                    chain: r.connectedChain,
                                    connector: r
                                });
                                if (!t) {
                                    tl.kg.info("Connection was not established because onBeforeConnectSuccessConfirmation returned false"), h(!1);
                                    return
                                }
                            }
                            let y = `connect-wallet-${M(C)}`;
                            p && isConnectOnly(b, t) && P.current.add(getWalletIdentifier({
                                address: f,
                                connector: r
                            })), l || c(y);
                            let E = r.connectedChain,
                                j = C.some(({
                                    walletConnectorKey: t
                                }) => t === r.key);
                            return j ? yield W(): (applyConnectedWalletToStore({
                                provider: getWalletProvider(r),
                                walletAddress: f,
                                walletChain: E,
                                walletConnectorKey: r.key,
                                walletId: y
                            }), L || createVisit({
                                authMode: t,
                                chain: E || "",
                                environmentId: s,
                                publicWalletAddress: f,
                                walletName: r.key,
                                walletProvider: getWalletProvider(r)
                            })), {
                                address: f,
                                id: y
                            }
                        }),
                        connectedWallets: I,
                        connectedWalletsInfo: C,
                        disconnectWallet: F,
                        getConnectedWalletById: U,
                        refreshConnectedWallet: (t, r) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            shouldManuallyReconnectOnRefresh(r) && (yield r.connect());
                            let a = yield r.fetchPublicAddress();
                            if (a && m) {
                                let s = yield m({
                                    address: a,
                                    chain: r.connectedChain,
                                    connector: r
                                });
                                if (!s) {
                                    tl.kg.info("Connection was not established because onBeforeConnectSuccessConfirmation returned false"), F(t), h(!1, {
                                        emitCancelAuth: !0
                                    });
                                    return
                                }
                            }
                            let s = yield r.getNetwork();
                            D(t, {
                                address: a,
                                network: s
                            })
                        }),
                        removeConnectedWalletsInfo: j
                    }
                },
                useFetchWalletsForChainsMap = t => {
                    let r = (0, nt.useMemo)(() => t ? Object.assign(Object.assign({}, nE), {
                        primary_chain: t.primary_chain,
                        wallets: Object.assign(Object.assign({}, nE.wallets), !!t.wallets && t.wallets)
                    }) : nE, [t]);
                    return {
                        walletsForChainsMap: r
                    }
                },
                handleUnlinkHelper = ({
                    environmentId: t,
                    primaryWalletId: r,
                    walletId: a
                }) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    let s = getAuthToken();
                    if (!s) return;
                    let l = yield unlinkWallet({
                        environmentId: t,
                        primaryWalletId: r,
                        walletId: a
                    }, s);
                    if (!l) throw new td.kW("Failed to unlink wallet, no jwt returned");
                    let c = decodeJwt(l);
                    if (!c) throw new td.kW("Failed to unlink wallet, unable to decode jwt");
                    storeAuthToken(l);
                    let d = createUserProfile(c);
                    return d
                }),
                useHandleUnlinkWallet = ({
                    verifiedCredentials: t,
                    environmentId: r,
                    primaryWalletId: a,
                    secondaryWallets: s,
                    setUser: l,
                    user: c,
                    eventsCallbacks: d
                }) => {
                    let u = (0, nt.useCallback)(u => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        var m;
                        let p = null !== (m = LocalStorage.getFromLS(nm)) && void 0 !== m ? m : a;
                        if (u === p) return;
                        let h = null == c ? void 0 : c.verifiedCredentials.find(t => t.id === u),
                            f = yield handleUnlinkHelper({
                                environmentId: r,
                                primaryWalletId: p,
                                walletId: u
                            });
                        f && l(f);
                        let y = s.find(t => t.id === u),
                            b = t.filter(t => t.walletName && (0, tl.rB)(t.walletName) === ((null == y ? void 0 : y.connector.key) || "")).length;
                        1 === b && (yield null == y ? void 0 : y.connector.endSession()), h && (null == d ? void 0 : d.onUnlinkSuccess) && d.onUnlinkSuccess(h)
                    }), [a, r, s, l, t, d, c]);
                    return u
                },
                primaryWalletIdValidator = t => "string" == typeof t || void 0 === t,
                usePrimaryWalletId = () => {
                    let [t, r, a] = useLocalStorage(nm, void 0, primaryWalletIdValidator), s = (0, nt.useCallback)(t => {
                        r(t)
                    }, [r]);
                    return {
                        clearPrimaryWalletId: a,
                        primaryWalletId: t,
                        setPrimaryWalletId: s
                    }
                },
                mergeCustomerEvmNetworksWithServerNetworks = (t, r) => {
                    let a = [...t];
                    return r.forEach(t => {
                        let r = null == a ? void 0 : a.find(r => r.chainId === t.chainId);
                        r || null == a || a.unshift(t)
                    }), a
                },
                useProcessNetworkConfigurations = ({
                    authToken: t,
                    environmentId: r,
                    evmNetworks: a,
                    projectSettings: s
                }) => {
                    var l;
                    let [c, d, u] = useLocalStorage("dynamic_networks", void 0, validateLocalStorageExpiry), [m, p] = (0, nt.useState)(!1), [h, f] = (0, nt.useState)(!1), [y, b] = (0, nt.useState)(!!(null == c ? void 0 : c.configurations) && (null == c ? void 0 : c.version) === 2), C = null == a ? void 0 : a.map(t => JSON.stringify(t)), E = (0, nt.useCallback)(() => {
                        u(), b(!1)
                    }, [u]);
                    (0, nt.useEffect)(() => {
                        c && (null == c ? void 0 : c.environmentId) !== r && E(), c && 2 !== c.version && E()
                    }, [r, E, c, u]), (0, nt.useEffect)(() => {
                        let r = LocalStorage.getFromLS(nf) || [];
                        t || (null == r ? void 0 : r.length) || E()
                    }, [t, E]);
                    let j = usePrevious_usePrevious(a);
                    return (0, nt.useEffect)(() => {
                        JSON.stringify(a) !== JSON.stringify(j) && b(!1)
                    }, [a, j]), (0, nt.useEffect)(() => {
                        var t, r;
                        if (y && C && !h) {
                            let a = null === (r = null === (t = null == c ? void 0 : c.configurations) || void 0 === t ? void 0 : t.evm) || void 0 === r ? void 0 : r.map(t => JSON.stringify(t));
                            if (a) {
                                let t = C.every(t => -1 !== a.indexOf(t));
                                t || E(), f(!0)
                            }
                        }
                    }, [y, C, null === (l = null == c ? void 0 : c.configurations) || void 0 === l ? void 0 : l.evm, h, f, E]), (0, nt.useEffect)(() => {
                        var t, l, c, u;
                        if (!y && !m && (null == s ? void 0 : s.networks)) {
                            let m;
                            p(!0);
                            let {
                                networks: h
                            } = s, f = new Date().getTime() + 3e5, y = h.find(t => "evm" === t.chainName), C = h.find(t => "solana" === t.chainName), E = h.find(t => "cosmos" === t.chainName), j = h.find(t => "starknet" === t.chainName), createNetwork = (t, r = t => t) => ({
                                blockExplorerUrls: t.blockExplorerUrls,
                                chainId: r(t.chainId),
                                iconUrls: t.iconUrls,
                                lcdUrl: t.lcdUrl,
                                name: t.name,
                                nativeCurrency: t.nativeCurrency,
                                networkId: r(t.networkId),
                                privateCustomerRpcUrls: t.privateCustomerRpcUrls,
                                rpcUrls: t.rpcUrls,
                                vanityName: t.vanityName
                            }), I = null === (t = null == E ? void 0 : E.networks) || void 0 === t ? void 0 : t.map(t => createNetwork(t, parseInt)), O = null === (l = null == y ? void 0 : y.networks) || void 0 === l ? void 0 : l.map(t => createNetwork(t, parseInt)), P = null === (c = null == j ? void 0 : j.networks) || void 0 === c ? void 0 : c.map(t => createNetwork(t)), R = null === (u = null == C ? void 0 : C.networks) || void 0 === u ? void 0 : u.map(t => createNetwork(t));
                            !O && (null == a ? void 0 : a.length) && (m = a), !a && (null == O ? void 0 : O.length) && (m = O), void 0 !== O && O.length && void 0 !== a && a.length && (m = mergeCustomerEvmNetworksWithServerNetworks(a, O)), d({
                                configurations: {
                                    cosmos: I,
                                    evm: m,
                                    solana: R,
                                    starknet: P
                                },
                                environmentId: r,
                                expiry: f,
                                version: 2
                            }), b(!0), p(!1)
                        }
                    }, [r, m, a, y, d, s]), {
                        configurations: null == c ? void 0 : c.configurations,
                        handleRemoveLsNetworks: E
                    }
                },
                useRpcProviders = ({
                    networkConfigurations: t
                }) => {
                    let r, a, s;
                    if (t) try {
                        r = ty.l.getProviders(t), a = ty.l.getEvmProviderByChainId(t, 1), s = ty.l.getSolanaRpcProviderByChainId(t, "101")
                    } catch (t) {
                        tv.error(t)
                    }
                    let l = (0, nt.useCallback)(r => {
                        if (t) return ty.l.getEvmProviderByChainId(t, r)
                    }, [t]);
                    return {
                        evmDefaultProvider: a,
                        evmProviders: null == r ? void 0 : r.evm,
                        getEvmRpcProviderByChainId: l,
                        solanaDefaultProvider: s,
                        solanaProviders: null == r ? void 0 : r.solana
                    }
                },
                useWalletEventListeners = ({
                    handleLogOut: t,
                    multiWallet: r,
                    multiWalletWidgetState: a,
                    primaryWallet: s,
                    secondaryWallets: l,
                    selectedWalletConnector: c,
                    selectedWalletWithAction: d,
                    setSelectedWalletConnectorKey: u,
                    setSelectedWalletWithAction: m,
                    setMultiWalletWidgetState: p,
                    user: h,
                    setPrimaryWalletId: f,
                    authMode: y,
                    refreshConnectedWallet: b
                }) => {
                    let [C, E] = (0, nt.useState)(!0), [j, I] = (0, nt.useState)(void 0);
                    (0, nt.useEffect)(() => {
                        _tslib_awaiter(void 0, void 0, void 0, function*() {
                            try {
                                if (!(null == s ? void 0 : s.connector)) return;
                                let t = yield s.connector.getNetwork();
                                I(t)
                            } catch (t) {
                                tv.debug(t)
                            } finally {
                                E(!1)
                            }
                        })
                    }, [null == s ? void 0 : s.connector]), useWalletConnectorEvent(null == s ? void 0 : s.connector, "disconnect", () => {
                        tv.debug("primary wallet disconnect"), t()
                    }), useWalletConnectorEvent(null == s ? void 0 : s.connector, "chainChange", ({
                        chain: t
                    }) => {
                        tv.debug("primary wallet chain change", {
                            chain: t
                        }), s && (b(s.id, s.connector), "starknet" === s.chain ? I(t) : I(parseInt(t)))
                    }), useWalletConnectorEvent(null == s ? void 0 : s.connector, "accountChange", ({
                        accounts: t
                    }) => {
                        if (tv.debug("primary wallet account change", {
                                accounts: t
                            }), !s) return;
                        let [c] = t, d = !(0, tl.Wr)(c, s.address, s.chain);
                        if (d && "connect-only" === y) {
                            b(s.id, s.connector);
                            return
                        }
                        let C = l.find(t => (0, tl.Wr)(t.address, c, t.chain));
                        if (d) {
                            if (r) {
                                if ("awaiting_account_switch" === a) P(!0, c);
                                else if ("idle" === a && C) f(C.id);
                                else if ("idle" !== a || C) tv.error(`Unexpected multiWalletWidgetState (${a}) and onAccountChange combination. Resetting state to idle.`), p("idle");
                                else if (h) {
                                    p("detected_new_wallet"), u(s.connector.key);
                                    return
                                }
                            } else {
                                m({
                                    action: "select",
                                    wallet: s
                                }), p("awaiting_account_switch", "primary_not_connected");
                                return
                            }
                        } else p("idle")
                    });
                    let O = (0, nt.useMemo)(() => {
                        let t = null == s ? void 0 : s.connector,
                            r = l.map(({
                                connector: t
                            }) => t),
                            a = new Set([...r, t, c].filter(t => !!t));
                        return t && a.delete(t), Array.from(a)
                    }, [l, c, null == s ? void 0 : s.connector]);
                    useWalletConnectorEvent(O, "accountChange", (t, r) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        if (tv.debug("secondary wallet account change"), "connect-only" === y && l.length) {
                            let t = l.filter(({
                                connector: t
                            }) => t.key === r.key);
                            for (let r of t) b(r.id, r.connector);
                            return
                        }
                        "awaiting_account_switch" === a && P(!1, (null == d ? void 0 : d.wallet.address) || "")
                    })), useWalletConnectorEvent(O, "chainChange", (t, r) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        tv.debug("secondary wallet chain change");
                        let t = l.filter(({
                            connector: t
                        }) => t.key === r.key);
                        for (let r of t) b(r.id, r.connector)
                    })), useWalletConnectorEvent(O, "disconnect", t => {
                        if (tv.debug("secondary wallet disconnect"), "connect-only" === y) {
                            let r = l.filter(({
                                connector: r
                            }) => r.key === t.key);
                            for (let t of r) "argentx" === t.connector.key && b(t.id, t.connector)
                        }
                    });
                    let P = (0, nt.useCallback)((t, r) => {
                        let a = l.find(t => (0, tl.Wr)(t.address, r, t.chain));
                        if (!a) {
                            p("awaiting_signature", void 0, "linking_new_wallet"), t && s && u(s.connector.key);
                            return
                        }
                        m(null), f(a.id), p("idle")
                    }, [p, s, l, u, m, f]);
                    return {
                        loadingNetwork: C,
                        network: j,
                        setNetwork: I
                    }
                },
                FundWalletView_Modal = ({
                    onrampUrl: t
                }) => {
                    let {
                        fundingRef: r,
                        setShowFunding: a
                    } = FundingContext_useFundingContext();
                    return useOnClickOutside_useOnClickOutside(r, () => {
                        a(!1)
                    }), (0, tb.jsx)("div", {
                        className: "fund-wallet__modal",
                        "data-testid": "fund-wallet-modal",
                        children: (0, tb.jsx)("div", {
                            className: "fund-wallet__modal-content",
                            ref: r,
                            children: (0, tb.jsx)("iframe", {
                                id: "onramp-iframe",
                                src: t,
                                allow: "camera *;geolocation *",
                                title: "Crypto Onramp"
                            })
                        })
                    })
                },
                FundWalletView = () => {
                    let {
                        primaryWallet: t
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        showFunding: r,
                        fundingUrl: a,
                        fundingEnabled: s
                    } = FundingContext_useFundingContext();
                    return s && r && a && (null == t ? void 0 : t.address) ? (0, tb.jsx)(ShadowDOM_ShadowDOM, {
                        children: (0, tb.jsxs)(rb, {
                            isShown: r,
                            children: [(0, tb.jsx)("div", {
                                className: "fund-wallet__backdrop",
                                "aria-hidden": "true"
                            }), (0, tb.jsx)("div", {
                                className: "fund-wallet__modal-container",
                                children: (0, tb.jsx)(FundWalletView_Modal, {
                                    onrampUrl: a
                                })
                            })]
                        })
                    }) : null
                },
                FundingWidget = () => (0, tb.jsx)(FundWalletView, {}),
                findEmailProvider = (t, r) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    let {
                        emailProvider: a
                    } = yield getEmailProvider({
                        email: r,
                        environmentId: t
                    });
                    if (! of .includes(a)) throw Error("Email provider is not supported");
                    return a
                }),
                createMagicHandler = (t, r) => a => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    if (!t) throw Error("OTP wallet connector was not found");
                    return t.setEmail(a), r(t), r => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        return {
                            email: a,
                            verified: yield t.verifyOneTimePassword(r)
                        }
                    })
                }),
                createEmailHandler = (t, r) => a => _tslib_awaiter(void 0, void 0, void 0, function*() {
                    let {
                        verificationUUID: s
                    } = yield createEmailVerification({
                        email: a,
                        environmentId: t
                    });
                    return l => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        let {
                            jwt: c
                        } = yield signInWithEmailVerification({
                            environmentId: t,
                            verificationToken: l,
                            verificationUUID: s
                        });
                        return yield r(c), {
                            email: a,
                            verified: !!c
                        }
                    })
                }),
                {
                    Provider: oS
                } = op,
                ConnectWithEmailOtpProvider = ({
                    children: t
                }) => {
                    let {
                        walletConnectorOptions: r,
                        environmentId: a,
                        projectSettings: s,
                        setCallback: l
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        createUserProfileByJWT: c
                    } = useCreateUserProfileByJWTCallback(), {
                        handleInstalledExtensionClick: d
                    } = useWalletItemActions(), u = (0, nt.useRef)(null), m = (null == s ? void 0 : s.providers) || [], p = r.map(({
                        walletConnector: t
                    }) => t).find(tl.EZ), h = {
                        [tu.ml9.Dynamic]: {
                            enabled: isProviderEnabled(m, tu.ml9.Dynamic),
                            handler: createEmailHandler(a, c)
                        },
                        [tu.ml9.EmailOnly]: {
                            enabled: isProviderEnabled(m, tu.ml9.EmailOnly),
                            handler: createEmailHandler(a, c)
                        },
                        [tu.ml9.MagicLink]: {
                            enabled: isProviderEnabled(m, tu.ml9.MagicLink),
                            handler: createMagicHandler(p, d)
                        }
                    };
                    return (0, tb.jsx)(oS, {
                        value: {
                            connectWithEmail: (t, {
                                provider: r
                            } = {}) => _tslib_awaiter(void 0, void 0, void 0, function*() {
                                if (!isEmailValid(t)) throw Error("Email is not valid");
                                let s = r || (yield findEmailProvider(a, t));
                                if (!h[s].enabled) throw Error("Email provider is not enabled");
                                let l = yield h[s].handler(t);
                                u.current = l
                            }),
                            verifyOneTimePassword: t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                                if (!u.current) throw Error("Verification have not started, use connectWithEmail before verifying");
                                let {
                                    email: r,
                                    verified: a
                                } = yield u.current(t);
                                if (nr.emit("emailVerificationResult", a, r), a) l("authSuccess");
                                else throw Error("Email verification failed")
                            })
                        },
                        children: t
                    })
                },
                useIsLoggedIn_useIsLoggedIn = () => {
                    var t, r;
                    let {
                        user: a,
                        primaryWallet: s,
                        authMode: l,
                        projectSettings: c
                    } = useInternalDynamicContext_useInternalDynamicContext(), d = isTurnkeyEnabled(c), u = !!a || "connect-only" === l && !!s;
                    return d && (null === (r = null === (t = null == c ? void 0 : c.sdk) || void 0 === t ? void 0 : t.embeddedWallets) || void 0 === r ? void 0 : r.automaticEmbeddedWalletCreation) && !(null == c ? void 0 : c.sdk.embeddedWallets.forceAuthenticatorAtSignup) ? !!(s && u) : u
                },
                useConnectedWalletsNetworkValidation = () => {
                    let {
                        connectedWallets: t,
                        selectedWalletConnector: r,
                        setSelectedWalletConnectorKey: a,
                        setShowAuthFlow: s,
                        bridgeChainsToConnect: l,
                        sdkHasLoaded: c
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        setView: d
                    } = ViewContext_useViewContext(), u = useIsLoggedIn_useIsLoggedIn();
                    (0, nt.useEffect)(() => {
                        if (!c || !u) return;
                        let m = t.filter(t => {
                            let r = null == l ? void 0 : l.some(r => r.chain === t.chain),
                                a = isSupportedNetwork({
                                    network: t.network,
                                    walletConnector: t.connector
                                });
                            return !r && !a
                        });
                        if (m.length) {
                            let [t] = m;
                            t.connector.key !== (null == r ? void 0 : r.key) && a(t.connector.key);
                            let l = isProgrammableNetworkSwitchSupported(t.connector) ? "network-not-supported" : "network-not-supported-manual";
                            s(!0), d(l)
                        }
                    }, [c, t, r, a, s, d, l, u])
                },
                UseNetworkValidation = () => (useConnectedWalletsNetworkValidation(), null),
                isWalletLinked = (t, r) => {
                    if (!t || !(null == r ? void 0 : r.length)) return !1;
                    let a = r.find(r => (0, tl.Wr)(r.address, t, r.chain));
                    return !!a
                },
                oE = "missing_address",
                useSyncPrimaryWallet = (t = !0) => {
                    let {
                        setShowAuthFlow: r,
                        isAuthenticated: a,
                        authMode: s,
                        connectWallet: l,
                        handleLogOut: c,
                        multiWalletWidgetState: d,
                        primaryWallet: u,
                        secondaryWallets: m,
                        setMultiWalletWidgetState: p,
                        setPrimaryWallet: h,
                        setShowWidgetStatePopup: f,
                        showLockedWalletView: y,
                        showWidgetStatePopup: b,
                        setSelectedWalletWithAction: C
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        setView: E
                    } = ViewContext_useViewContext(), j = (0, nt.useCallback)(t => {
                        if (!u) return;
                        if ("connect-only" === s) {
                            l(u.connector);
                            return
                        }
                        let r = isWalletLinked(t, [u, ...m]);
                        if (!r) {
                            let t = m.find(t => t.connected && u.connector !== t.connector);
                            if (!t) {
                                C({
                                    action: "select",
                                    wallet: u
                                }), p("awaiting_account_switch", "primary_not_connected");
                                return
                            }
                            h(t.id);
                            return
                        }
                        if (b) {
                            f(!1), p("awaiting_account_switch", "switching_primary");
                            return
                        }
                        let a = m.find(r => r.connected && (0, tl.Wr)(r.address, t, r.chain));
                        if (a) {
                            h(a.id);
                            return
                        }
                        p("awaiting_account_switch", "primary_not_connected")
                    }, [u, s, m, b, p, h, f, l]);
                    (0, nt.useEffect)(() => {
                        t && u && "idle" === d && "FLOW" !== u.connector.connectedChain && "COSMOS" !== u.connector.connectedChain && u.connector.getConnectedAccounts().then(t => {
                            tv.debug("Sync primary wallet - getConnectedAccounts", {
                                accounts: t,
                                primaryWalletAddress: u.address
                            });
                            let [r] = t;
                            if (!r) throw new td.kW("Missing wallet address", oE);
                            (0, tl.Wr)(r, u.address, u.chain) || j(r)
                        }).catch(t => {
                            let s = m.find(t => t.connected);
                            if (s) {
                                h(s.id);
                                return
                            }
                            if (a && t.code === oE) {
                                if (!u.connector.isInstalledOnBrowser()) {
                                    c();
                                    return
                                }
                                y && (r(!0), E("wallet-locked-view"))
                            }
                        })
                    }, [u, m, d, p, j, c, h, t, E, r, s, a, y])
                },
                oj = (0, nt.createContext)(void 0),
                WalletContextProvider = ({
                    children: t,
                    canSync: r
                }) => (useSyncPrimaryWallet(r), (0, tb.jsx)(oj.Provider, {
                    value: void 0,
                    children: t
                })),
                useResponseHandlers = () => {
                    let {
                        walletConnectorOptions: t,
                        consumeNonce: r,
                        displaySiweStatement: a,
                        environmentId: s,
                        projectSettings: l,
                        setIsSingleWalletAccount: c,
                        connectWallet: d,
                        setShowAuthFlow: u,
                        setSelectedWalletConnectorKey: m
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        setView: p
                    } = ViewContext_useViewContext(), {
                        getCaptchaToken: h
                    } = CaptchaContext_useCaptchaContext(), f = useVerifyWallet_useVerifyWallet({
                        consumeNonce: r,
                        displaySiweStatement: a,
                        environmentId: s,
                        projectSettings: l,
                        setIsSingleWalletAccount: c
                    }), y = t.map(({
                        walletConnector: t
                    }) => t).find(tl.tI), b = (0, nt.useCallback)(() => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        y && (yield y.getSession(), yield d(y), u(!0, {
                            ignoreIfIsEmbeddedWidget: !0
                        }), p("pending-signature"), m("phantom"))
                    }), [d, y, m, u, p]), C = (0, nt.useCallback)(() => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        if (!y) return;
                        m("phantom");
                        let {
                            signature: t,
                            message: r
                        } = y.extractSignature(), [a] = yield y.getConnectedAccounts();
                        p("wallet-redirect-view"), yield f({
                            captchaToken: h(),
                            messageToSignOverride: r,
                            publicWalletAddress: a,
                            signedMessageOverride: t,
                            walletConnector: y
                        })
                    }), [h, y, p]);
                    return {
                        handleConnectResponse: b,
                        handleUserResponse: C,
                        phantomRedirectConnector: y
                    }
                },
                oI = (0, nt.createContext)(void 0),
                PhantomRedirectContextProvider = ({
                    children: t
                }) => {
                    let {
                        sdkHasLoaded: r
                    } = useInternalDynamicContext_useInternalDynamicContext(), {
                        phantomRedirectConnector: a,
                        handleConnectResponse: s,
                        handleUserResponse: l
                    } = useResponseHandlers();
                    return (0, nt.useEffect)(() => {
                        if (!a || !(0, td.tq)() || !r) return;
                        let t = new URLSearchParams(window.location.search);
                        if (!t.has("error")) {
                            if (t.has("phantom_encryption_public_key")) {
                                s();
                                return
                            }
                            if (t.has("data")) {
                                l();
                                return
                            }
                        }
                    }, [s, l, a]), (0, tb.jsx)(oI.Provider, {
                        value: {
                            phantomRedirectConnector: a
                        },
                        children: t
                    })
                },
                handleDisconnectWallet = ({
                    wallet: t,
                    connectedWalletsInfo: r,
                    bridgeChains: a,
                    setBridgeChainsToConnect: s,
                    eventsCallbacks: l
                }) => {
                    var c;
                    let d = getMissingChains(a, r);
                    if (s(d), t) try {
                        null === (c = null == l ? void 0 : l.onDisconnect) || void 0 === c || c.call(l, {
                            wallet: t,
                            walletConnector: t.connector
                        })
                    } catch (t) {
                        tv.warn("Error calling onDisconnect", t)
                    }
                },
                oT = ["email", "wallet"],
                oO = ["wallet", "email"],
                useDisplayOrderState = t => {
                    let [r, a] = (0, nt.useState)(null), s = (0, nt.useMemo)(() => {
                        var r;
                        let a = null === (r = null == t ? void 0 : t.design.modal) || void 0 === r ? void 0 : r.displayOrder;
                        return !a || isDisplayOrderPriorityForWeb3(a) ? oO : oT || oO
                    }, [t]), l = (0, nt.useCallback)(t => {
                        "web3" === t ? a(oO) : a(oT)
                    }, [a]);
                    return [r || s, l]
                },
                useEmailLoginState = (t, r) => {
                    let [a, s] = (0, nt.useState)(null), l = (0, nt.useMemo)(() => !r && isEmailProviderEnabled(t), [t, r]);
                    return [null != a ? a : l, t => {
                        s(t)
                    }, () => {
                        s(null)
                    }]
                },
                useHandleLogout = t => {
                    let r = (0, nt.useRef)(t);
                    r.current = t;
                    let a = (0, nt.useCallback)(() => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        let t = r.current;
                        t.setSdkHasLoaded(!1), t.clearAllWalletConnectSessions(), t.setBridgeChainsToConnect(t.bridgeChains), t.setShowDynamicUserProfile(!1), t.setShowBridgeWidget(!1), t.resetLoginWithEmail(), LocalStorage.removeFromLS(np), t.toolkitEnabled || LocalStorage.removeFromLS(ny);
                        let a = getAuthToken();
                        a && t.user && revokeSession({
                            environmentId: t.environmentId,
                            sessionId: t.user.sessionId
                        }, a), yield Promise.all(t.walletConnectors.map(t => t.endSession())), yield Promise.all(t.connectedWallets.map(t => t.connector.endSession())), t.isVerificationInProgress && t.setIsVerificationInProgress(!1), t.setLegacyIsVerifying(!1), LocalStorage.removeFromLS(nc), t.setAuthMode(t.initialAuthenticationMode), t.setShowAuthFlow(!1, {
                            emitCancelAuth: !1,
                            ignoreIfIsEmbeddedWidget: !1,
                            initializeWalletConnect: !1,
                            performMultiWalletChecks: !1
                        }), t.setMultiWalletWidgetState("idle"), t.removeLsSettings(), t.handleRemoveLsNetworks(), t.setOnboardingOnlyJwt(void 0), t.removeConnectedWalletsInfo(), t.removeIsFullyConnected(), t.clearPrimaryWalletId(), t.removeConnectedNameService(), nr.emit("logout"), t.removeUser()
                    }), []);
                    return useInternalDynamicEvents("triggerLogout", () => a()), a
                },
                getWalletVerifiedCredential = (t, r, a) => null == r ? void 0 : r.find(({
                    address: r
                }) => (0, tl.Wr)(r || "", t || "", a)),
                useNameService = ({
                    currentWallet: t,
                    authToken: r
                }) => {
                    let [a, s, l] = useLocalStorage("dynamic_connected_wallet_ns", null), c = (0, nt.useRef)(), d = (0, nt.useCallback)(t => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        let r;
                        let {
                            address: a,
                            connector: l
                        } = t;
                        if (a !== c.current) {
                            s(null), c.current = a;
                            try {
                                r = yield l.getNameService()
                            } catch (t) {}
                            if (c.current === a) return s({
                                address: a,
                                avatar: null == r ? void 0 : r.avatar,
                                name: null == r ? void 0 : r.name
                            }), r
                        }
                    }), [s]);
                    return {
                        getNameService: s => _tslib_awaiter(void 0, void 0, void 0, function*() {
                            var l, c;
                            if (!t) return;
                            let u = null === (l = decodeJwt(r)) || void 0 === l ? void 0 : l.verifiedCredentials;
                            if (u) {
                                let r = getWalletVerifiedCredential(null == t ? void 0 : t.address, u, t.chain);
                                if (r && (null === (c = r.nameService) || void 0 === c ? void 0 : c.name)) return r.nameService
                            }
                            return s && (null == t ? void 0 : t.address) !== s ? void 0 : a && a.address === (null == t ? void 0 : t.address) ? {
                                avatar: a.avatar,
                                name: a.name
                            } : d(t)
                        }),
                        removeConnectedNameService: l
                    }
                },
                useSelectedWalletConnector = ({
                    walletConnectorOptions: t
                }) => {
                    let [r, a] = (0, nt.useState)(null), s = (0, nt.useMemo)(() => {
                        var a, s;
                        return r && null !== (s = null === (a = t.find(({
                            walletConnector: t
                        }) => t.key === r)) || void 0 === a ? void 0 : a.walletConnector) && void 0 !== s ? s : null
                    }, [r, t]);
                    return {
                        selectedWalletConnector: s,
                        setSelectedWalletConnectorKey: a
                    }
                },
                useShowAuthFlow = ({
                    isAuthenticated: t,
                    isRenderingEmbeddedAuthFlow: r,
                    isMultiWalletEnabled: a,
                    walletConnectorOptions: s
                }) => {
                    let [l, c] = (0, nt.useState)(!1), {
                        setError: d
                    } = ErrorContext_useErrorContext(), u = (0, nt.useCallback)((u, m = {}) => {
                        var p;
                        let {
                            emitCancelAuth: h,
                            ignoreIfIsEmbeddedWidget: f,
                            initializeWalletConnect: y,
                            performMultiWalletChecks: b,
                            clearErrors: C
                        } = Object.assign({
                            clearErrors: !0,
                            emitCancelAuth: !1,
                            ignoreIfIsEmbeddedWidget: !0,
                            initializeWalletConnect: !0,
                            performMultiWalletChecks: !1
                        }, m);
                        if (!l && u ? nr.emit("authFlowOpen") : l && !u && nr.emit("authFlowClose"), u) {
                            if (f && r.current) return;
                            if (b && t) {
                                if (!a) {
                                    tv.warn("setShowAuthFlow was called while the user is logged in, but Dynamic is not configured with multi-wallet enabled. This results in a no-op.");
                                    return
                                }
                                tv.warn("Using setShowAuthFlow to render the wallet list when the user is logged in is deprecated. Use setShowLinkNewWalletModal instead. For more information, see: https://docs.dynamic.xyz/react-sdk/hooks/usedynamiccontext")
                            }
                            y && (null === (p = s.find(t => "walletconnect" === t.walletConnector.key)) || void 0 === p || p.walletConnector.init())
                        } else h && l && nr.emit("authFlowCancelled");
                        C && d(void 0), c(u)
                    }, [t, a, r, d, l, s]);
                    return [l, u]
                },
                usePasskeySuccessPopup = () => {
                    let [t, r] = (0, nt.useState)(void 0);
                    return {
                        passkeySuccessPopup: t,
                        setPasskeySuccessPopup: t => {
                            r(t), setTimeout(() => {
                                r(void 0)
                            }, 2e3)
                        }
                    }
                },
                useTieCallbacksToEvents = ({
                    clientCallbacks: t,
                    connectedWallets: r,
                    user: a
                }) => {
                    useInternalDynamicEvents("emailVerificationResult", (r, a) => {
                        var s, l;
                        r ? null === (s = null == t ? void 0 : t.onEmailVerificationSuccess) || void 0 === s || s.call(t, a) : null === (l = null == t ? void 0 : t.onEmailVerificationFailure) || void 0 === l || l.call(t, a)
                    }), useInternalDynamicEvents("authFlowCancelled", () => {
                        var r;
                        return null === (r = null == t ? void 0 : t.onAuthFlowCancel) || void 0 === r ? void 0 : r.call(t)
                    }), useInternalDynamicEvents("authFlowOpen", () => {
                        var r;
                        null === (r = null == t ? void 0 : t.onAuthFlowOpen) || void 0 === r || r.call(t)
                    }), useInternalDynamicEvents("authFlowClose", () => {
                        var r;
                        null === (r = null == t ? void 0 : t.onAuthFlowClose) || void 0 === r || r.call(t)
                    }), useInternalDynamicEvents("walletConnected", r => {
                        var a;
                        null === (a = null == t ? void 0 : t.onConnect) || void 0 === a || a.call(t, {
                            wallet: r,
                            walletConnector: r.connector
                        })
                    }), useInternalDynamicEvents("logout", () => {
                        var s;
                        if (null == t ? void 0 : t.onDisconnect)
                            for (let a of r) t.onDisconnect({
                                wallet: a,
                                walletConnector: null == a ? void 0 : a.connector
                            });
                        null === (s = null == t ? void 0 : t.onLogout) || void 0 === s || s.call(t, a)
                    })
                },
                useVerificationInProgress = () => {
                    let [t, r] = (0, nt.useState)(!1), detectRedundantDisable = (t, r) => {
                        t || r || tv.debug('The "isVerificationInProgress" flag had not been previously enabled at the time of being disabled. Please ensure to set it to true whenever any kind of verification process is started')
                    };
                    return [t, t => {
                        r(r => (detectRedundantDisable(t, r), t))
                    }]
                },
                useSetShowLinkNewWalletModal = ({
                    setShowAuthFlow: t,
                    isMultiWalletEnabled: r,
                    isAuthenticated: a
                }) => {
                    let s = (0, nt.useCallback)(s => {
                        if (s) {
                            if (!a) return;
                            if (!r) {
                                tv.warn("setShowLinkNewWalletModal was called while the user was not logged in. This results in a no-op. To log the user in, use setShowAuthFlow. For more information, see: https://docs.dynamic.xyz/react-sdk/hooks/usedynamiccontext");
                                return
                            }
                        }
                        t(s, {
                            emitCancelAuth: !0,
                            ignoreIfIsEmbeddedWidget: !0,
                            initializeWalletConnect: !0,
                            performMultiWalletChecks: !1
                        })
                    }, [t, a, r]);
                    return s
                },
                useCustomerCallbacks = ({
                    callbacks: {
                        onAuthSuccess: t,
                        onLinkSuccess: r,
                        onUserProfileUpdate: a,
                        onEmbeddedWalletCreated: s
                    },
                    handleLogOut: l,
                    primaryWallet: c,
                    secondaryWallets: d,
                    user: u,
                    isAuthenticated: m,
                    setIsVerificationInProgress: p
                }) => {
                    let [h, f] = (0, nt.useState)([]), y = (0, nt.useCallback)(t => {
                        var r;
                        return t && null !== (r = [c, ...d].find(r => (null == r ? void 0 : r.id) === t)) && void 0 !== r ? r : void 0
                    }, [c, d]), b = (0, nt.useCallback)((d, u, h) => {
                        var f, b;
                        switch (null == d ? void 0 : d.callback) {
                            case "authSuccess":
                                try {
                                    p(!1), null == t || t({
                                        authToken: u,
                                        handleLogOut: l,
                                        isAuthenticated: m,
                                        primaryWallet: c,
                                        user: h,
                                        walletConnector: null == c ? void 0 : c.connector
                                    })
                                } catch (t) {
                                    tv.error("Error calling onAuthSuccess: ", t)
                                }
                                break;
                            case "linkSuccess":
                                try {
                                    let t = y(null === (f = d.params) || void 0 === f ? void 0 : f.walletId);
                                    null == r || r({
                                        authToken: u,
                                        user: h,
                                        wallet: t,
                                        walletConnector: null == t ? void 0 : t.connector
                                    })
                                } catch (t) {
                                    tv.error("Error calling onLinkSuccess: ", t)
                                }
                                break;
                            case "userProfileUpdate":
                                try {
                                    null == a || a(h)
                                } catch (t) {
                                    tv.error("Error calling userProfileUpdate: ", t)
                                }
                                break;
                            case "embeddedWalletCreated":
                                try {
                                    null == s || s(null === (b = d.params) || void 0 === b ? void 0 : b.verifiedCredential)
                                } catch (t) {
                                    tv.error("Error calling onEmbeddedWalletCreated: ", t)
                                }
                        }
                    }, [y, l, m, t, s, r, a, c, p]);
                    return (0, nt.useEffect)(() => {
                        if (!h.length || !u) return;
                        let t = getAuthToken();
                        if (!t || u.isAuthenticatedWithAWallet && !c) return;
                        let r = [...h];
                        b(r.shift(), t, u), f(r)
                    }, [h, b, c, u]), {
                        setCallback: (t, r) => {
                            f(a => [...a, {
                                callback: t,
                                params: r
                            }])
                        }
                    }
                };
            var oN = a(9389);
            let oP = void 0,
                oA = (0, nt.createContext)(void 0),
                InnerDynamicContextProvider = ({
                    children: t,
                    theme: r,
                    settings: a,
                    locale: s
                }) => {
                    var l, c, d, u, m, p;
                    let h;
                    let {
                        accessDeniedMessagePrimary: f,
                        accessDeniedMessageSecondary: y,
                        accessDeniedButton: b,
                        apiBaseUrl: C,
                        enableConnectOnlyFallback: E = !1,
                        enableForcedNetworkValidation: j = !1,
                        deepLinkPreference: I = "native",
                        bridgeChains: O,
                        cssOverrides: P,
                        defaultNumberOfWalletsToShow: R = 10,
                        flowNetwork: F,
                        initialAuthenticationMode: W = "connect-and-sign",
                        debugError: M = !1,
                        displaySiweStatement: D = !0,
                        newToWeb3WalletChainMap: L,
                        enableVisitTrackingOnConnectOnly: U = !0,
                        environmentId: B,
                        localStorageSuffix: $,
                        eventsCallbacks: K,
                        evmNetworks: G,
                        walletsFilter: J,
                        logLevel: Y = "WARN",
                        mobileExperience: Q = "in-app-browser",
                        notInTheListImageUrl: ee,
                        onboardingImageUrl: et,
                        policiesConsentInnerComponent: en,
                        customPrivacyPolicy: er,
                        privacyPolicyUrl: ea,
                        signWithEmailWalletName: ei,
                        socialMediaLinkText: eo,
                        socialMediaIconUrl: es,
                        socialMediaUrl: el,
                        customTermsOfServices: ec,
                        termsOfServiceUrl: ed,
                        toolkitEnabled: eu,
                        siweStatement: em,
                        shadowDOMEnabled: ep = !0,
                        walletConnectors: eh,
                        socialProvidersFilter: ef,
                        showLockedWalletView: ey = !1,
                        walletConnectPreferredChains: eg,
                        walletConnectorExtensions: ev
                    } = a, eb = j;
                    O && (eb = !0);
                    let {
                        appLogoUrl: ew = "https://demo.dynamic.xyz/assets/dynamic-logo.svg",
                        appName: e_ = "Dynamic Example"
                    } = a, {
                        walletConnectV1Bridge: ek
                    } = a;
                    if (!B) throw new td.$x;
                    tv.setLogLevel(Y), tl.kg.setLogLevel(Y), "2762a57b-faa4-41ce-9f16-abff9300e2c9" === B && tv.warn(`WARNING: DYNAMIC is using a test environment ID ${B}. Please sign up on https://app.dynamic.xyz/ to get your production environment ID.`), ApiEndpoint.setBaseUrl(null !== (l = oN.env.DYNAMIC_API_BASE_URL) && void 0 !== l ? l : C), LocalStorage.setSuffix($);
                    let ex = Locale.setup(s),
                        eC = !!getAuthToken(),
                        eS = !!O,
                        [eE, ej] = (0, nt.useState)(void 0),
                        [eI, eT, eO] = useLocalStorage("dynamic_fully_connected", !1),
                        [eN, eP] = (0, nt.useState)(O),
                        [eA, eR] = (0, nt.useState)(!1),
                        [eF, eW] = (0, nt.useState)(!1),
                        [eM, eD] = (0, nt.useState)(!1),
                        [eL, ez, eU] = useLocalStorage(nd, oP, validateAuthUser, [nc]),
                        {
                            consumeNonce: eq
                        } = useFetchNonce(B),
                        [eB, eV] = (0, nt.useState)(""),
                        [eH, e$] = (0, nt.useState)(""),
                        [eK, eG, {
                            awaiting_account_switch: [eZ],
                            awaiting_signature: [eJ]
                        }] = useMultiWalletWidgetState(),
                        {
                            projectSettings: eY,
                            isLoading: eQ,
                            removeLsSettings: eX
                        } = useFetchProjectSettings({
                            authToken: getAuthToken(),
                            dynamicContextProps: {
                                settings: a
                            },
                            environmentId: B
                        }),
                        {
                            multiWallet: e0,
                            setMultiWallet: e1
                        } = useMultiWallet({
                            isBridgeFlow: eS,
                            multiWalletSettings: null === (c = null == eY ? void 0 : eY.sdk) || void 0 === c ? void 0 : c.multiWallet,
                            toolkitEnabled: eu || !1
                        }),
                        [e2, e3] = (0, nt.useState)(!e0),
                        [e5, e4] = (0, nt.useState)(!1),
                        [e6, e7] = useVerificationInProgress(),
                        e8 = (0, tc.Uj)(),
                        {
                            configurations: e9,
                            handleRemoveLsNetworks: te
                        } = useProcessNetworkConfigurations({
                            authToken: getAuthToken(),
                            environmentId: B,
                            evmNetworks: G,
                            projectSettings: eY
                        }),
                        {
                            imageUserInAccessList: tt,
                            imageUserNotInAccessList: tn,
                            displayName: tr,
                            appLogo: ta
                        } = (null == eY ? void 0 : eY.general) || {};
                    ew = ta || ew, e_ = tr || e_;
                    let [ti, to, ts] = useEmailLoginState((null == eY ? void 0 : eY.providers) || [], eL), [tu, tm] = useDisplayOrderState(eY), [tp, th] = useWalletUiUtils({
                        appLogoUrl: ew,
                        appName: e_,
                        getAppOrigin: () => window.location.origin
                    }), {
                        walletConnectorOptions: tf
                    } = useWalletConnectorOptions({
                        appLogoUrl: ew,
                        appName: e_,
                        deepLinkPreference: I,
                        flowNetwork: F,
                        mobileExperience: Q,
                        networkConfigurations: e9,
                        projectSettings: eY,
                        walletBook: e8,
                        walletConnectPreferredChains: eg,
                        walletConnectV1Bridge: ek,
                        walletConnectorExtensions: ev,
                        walletConnectorsProp: eh,
                        walletUiUtils: th
                    }), [ty, tg] = useLocalStorage("dynamic_auth_mode", W), {
                        clearPrimaryWalletId: t_,
                        primaryWalletId: tk,
                        setPrimaryWalletId: tx
                    } = usePrimaryWalletId(), tC = !!("connect-and-sign" === ty ? eL : eI), tS = (0, nt.useRef)(!1), [tE, tj] = useShowAuthFlow({
                        isAuthenticated: tC,
                        isMultiWalletEnabled: e0,
                        isRenderingEmbeddedAuthFlow: tS,
                        walletConnectorOptions: tf
                    }), {
                        connectWallet: tI,
                        removeConnectedWalletsInfo: tT,
                        connectedWalletsInfo: tO,
                        getConnectedWalletById: tN,
                        connectedWallets: tP,
                        disconnectWallet: tA,
                        refreshConnectedWallet: tR
                    } = useConnectWallet({
                        authMode: ty,
                        clearPrimaryWalletId: t_,
                        enableVisitTrackingOnConnectOnly: U,
                        environmentId: B,
                        isBridgeFlow: eS,
                        onBeforeConnectSuccessConfirmation: null == K ? void 0 : K.onBeforeConnectSuccessConfirmation,
                        onDisconnect: (t, r) => handleDisconnectWallet({
                            bridgeChains: O,
                            connectedWalletsInfo: t,
                            eventsCallbacks: K,
                            setBridgeChainsToConnect: eP,
                            wallet: r
                        }),
                        primaryWalletId: tk,
                        removeIsFullyConnected: eO,
                        setIsVerificationInProgress: e7,
                        setPrimaryWalletId: tx,
                        setShowAuthFlow: tj,
                        user: eL,
                        walletConnectorOptions: tf
                    });
                    useTieCallbacksToEvents({
                        clientCallbacks: K,
                        connectedWallets: tP,
                        user: eL
                    }), (0, nt.useEffect)(() => {
                        let t = getMissingChains(O, tO);
                        eP(t)
                    }, [O]);
                    let {
                        selectedWalletConnector: tF,
                        setSelectedWalletConnectorKey: tW
                    } = useSelectedWalletConnector({
                        walletConnectorOptions: tf
                    }), [tM, tD] = (0, nt.useState)(null), tL = null !== (d = getAuthToken()) && void 0 !== d ? d : eE;
                    useSetWalletConnectorVerifiedCredentials(tL, tf);
                    let {
                        didConnectedStateLoad: tz,
                        primaryWallet: tU,
                        showQrcodeModal: tq,
                        secondaryWallets: tB,
                        setPrimaryWallet: tV,
                        setShowQrcodeModal: tH,
                        wallets: t$
                    } = useWalletConnectors({
                        authMode: ty,
                        authToken: getAuthToken() || eE,
                        canHaveMultipleWalletsConnected: e0,
                        connectedWallets: tP,
                        multiWalletWidgetState: eK,
                        onboardingOnlyJwt: eE,
                        primaryWalletId: tk,
                        setDesktopUri: e$,
                        setMultiWalletWidgetState: eG,
                        setPrimaryWalletId: tx,
                        setQrcodeUri: eV,
                        user: eL,
                        walletConnectorOptions: tf
                    }), tK = t$.map(t => t.connector), {
                        sdkHasLoaded: tG,
                        setSdkHasLoaded: tZ
                    } = useGlobalLoading({
                        authMode: ty,
                        connectedInfo: tO[0],
                        connectedWallets: tP,
                        primaryWallet: tU,
                        projectSettings: eY,
                        user: eL,
                        walletBook: e8
                    }), tJ = useSetShowLinkNewWalletModal({
                        isAuthenticated: tC,
                        isMultiWalletEnabled: e0,
                        setShowAuthFlow: tj
                    }), {
                        getNameService: tY,
                        removeConnectedNameService: tQ
                    } = useNameService({
                        authToken: tL,
                        currentWallet: null != tU ? tU : tP[0]
                    }), {
                        clearAllWalletConnectSessions: tX
                    } = useClearWalletConnectSessions({
                        connectors: tK
                    }), t0 = useHandleLogout({
                        bridgeChains: O,
                        clearAllWalletConnectSessions: tX,
                        clearPrimaryWalletId: t_,
                        connectedWallets: tP,
                        environmentId: B,
                        eventsCallbacks: K,
                        handleRemoveLsNetworks: te,
                        initialAuthenticationMode: W,
                        isVerificationInProgress: e6,
                        removeConnectedNameService: tQ,
                        removeConnectedWalletsInfo: tT,
                        removeIsFullyConnected: eO,
                        removeLsSettings: eX,
                        removeUser: eU,
                        resetLoginWithEmail: ts,
                        setAuthMode: tg,
                        setBridgeChainsToConnect: eP,
                        setIsVerificationInProgress: e7,
                        setLegacyIsVerifying: e4,
                        setMultiWalletWidgetState: eG,
                        setOnboardingOnlyJwt: ej,
                        setSdkHasLoaded: tZ,
                        setShowAuthFlow: tj,
                        setShowBridgeWidget: eW,
                        setShowDynamicUserProfile: eR,
                        toolkitEnabled: eu,
                        user: eL,
                        walletConnectors: tK
                    });
                    eY && (h = (null === (m = null === (u = null == eY ? void 0 : eY.sdk) || void 0 === u ? void 0 : u.walletConnect) || void 0 === m ? void 0 : m.v2Enabled) && !ek ? 2 : 1), useValidateSession({
                        authToken: tL,
                        handleLogOut: t0,
                        user: eL,
                        walletConnectV1Bridge: ek,
                        walletConnectors: tK,
                        wcVersion: h
                    });
                    let t1 = useHandleUnlinkWallet({
                            environmentId: B,
                            eventsCallbacks: K,
                            primaryWalletId: tk,
                            secondaryWallets: tB,
                            setUser: ez,
                            user: eL,
                            verifiedCredentials: (null == eL ? void 0 : eL.verifiedCredentials) || []
                        }),
                        {
                            loadingNetwork: t2,
                            network: t3,
                            setNetwork: t5
                        } = useWalletEventListeners({
                            authMode: ty,
                            handleLogOut: t0,
                            multiWallet: e0,
                            multiWalletWidgetState: eK,
                            primaryWallet: tU,
                            refreshConnectedWallet: tR,
                            secondaryWallets: tB,
                            selectedWalletConnector: tF,
                            selectedWalletWithAction: tM,
                            setMultiWalletWidgetState: eG,
                            setPrimaryWalletId: tx,
                            setSelectedWalletConnectorKey: tW,
                            setSelectedWalletWithAction: tD,
                            user: eL
                        }),
                        {
                            walletsForChainsMap: t4
                        } = useFetchWalletsForChainsMap(L),
                        t6 = useRpcProviders({
                            networkConfigurations: e9
                        });
                    (0, nt.useEffect)(() => {
                        initExpirationTime(t0)
                    }, [t0]);
                    let {
                        setCallback: t7
                    } = useCustomerCallbacks({
                        callbacks: {
                            onAuthSuccess: null == K ? void 0 : K.onAuthSuccess,
                            onEmbeddedWalletCreated: null == K ? void 0 : K.onEmbeddedWalletCreated,
                            onLinkSuccess: null == K ? void 0 : K.onLinkSuccess,
                            onUserProfileUpdate: null == K ? void 0 : K.onUserProfileUpdate
                        },
                        handleLogOut: t0,
                        isAuthenticated: eC,
                        primaryWallet: tU,
                        secondaryWallets: tB,
                        setIsVerificationInProgress: e7,
                        user: eL
                    }), t8 = (0, nt.useCallback)(() => t => {
                        let {
                            dynamicWagmiSettings: r
                        } = t;
                        r && sendDynamicProps(B, {
                            dynamicWagmiSettings: {
                                dynamicWagmiSettings: r
                            }
                        })
                    }, [B]), t9 = (0, nt.useCallback)(() => _tslib_awaiter(void 0, void 0, void 0, function*() {
                        e$(""), e6 && e7(!1), e4(!1), eL || tX(), eG("idle"), "connect-only" !== ty && tT(), LocalStorage.getFromLS(nd) || LocalStorage.removeFromLS(nc), LocalStorage.getFromLS(np) && LocalStorage.removeFromLS(np), tF && (!tU || tU.connector.key !== tF.key) && (yield null == tF ? void 0 : tF.endSession())
                    }), [e6, e7, eL, eG, ty, tF, tU, tX, tT]), {
                        passkeySuccessPopup: ne,
                        setPasskeySuccessPopup: nn
                    } = usePasskeySuccessPopup(), nr = (0, nt.useMemo)(() => {
                        var t, a, s;
                        return {
                            accessDeniedButton: b,
                            accessDeniedMessagePrimary: f,
                            accessDeniedMessageSecondary: y,
                            accountSwitchState: eZ,
                            appLogoUrl: ew,
                            appName: e_,
                            authMode: ty,
                            authToken: getAuthToken(),
                            authorizationViewDisplayOrder: tu,
                            awaitingSignatureState: eJ,
                            bridgeChains: O,
                            bridgeChainsToConnect: eN,
                            clearStatesOnBackClick: t9,
                            connectWallet: tI,
                            connectedWallets: tP,
                            consumeNonce: eq,
                            cssOverrides: P,
                            customPrivacyPolicy: er,
                            customTermsOfServices: ec,
                            debugError: M,
                            decodedAuthToken: decodeJwt(getAuthToken()),
                            decodedOnboardingOnlyToken: decodeJwt(eE),
                            defaultNumberOfWalletsToShow: R,
                            desktopUri: eH,
                            disconnectWallet: tA,
                            displaySiweStatement: D,
                            enableConnectOnlyFallback: E,
                            environmentId: B,
                            eventsCallbacks: K,
                            getConnectedWalletById: tN,
                            getNameService: tY,
                            handleLogOut: t0,
                            handleUnlinkWallet: "connect-only" === ty ? tA : t1,
                            i18nSDKInstance: ex,
                            isAuthenticated: eC,
                            isBridgeFlow: eS,
                            isFullyConnected: eI,
                            isProjectSettingsLoading: eQ,
                            isRenderingEmbeddedAuthFlow: tS,
                            isSingleWalletAccount: eM,
                            isVerificationInProgress: e6,
                            legacyIsVerifying: e5,
                            linkedWallets: "connect-only" !== ty && eL ? t$ : [],
                            loadingNetwork: t2,
                            locale: {
                                changeLanguage: null === (t = Locale.getInstance()) || void 0 === t ? void 0 : t.changeLanguage
                            },
                            loginWithEmail: ti,
                            multiWallet: e0,
                            multiWalletWidgetState: eK,
                            network: t3,
                            networkConfigurations: e9,
                            newToWeb3WalletChainMap: t4,
                            notInTheListImageUrl: tn || ee,
                            onboardingImageUrl: tt || et,
                            onboardingOnlyJwt: eE,
                            passkeySuccessPopup: ne,
                            policiesConsentInnerComponent: en,
                            primaryWallet: tU,
                            primaryWalletId: tk,
                            privacyPolicyUrl: ea,
                            projectSettings: eY,
                            qrcodeUri: eB,
                            removeConnectedWalletsInfo: tT,
                            rpcProviders: t6,
                            sdkHasLoaded: tG,
                            secondaryWallets: tB,
                            selectedWalletConnector: tF,
                            selectedWalletWithAction: tM,
                            sendWagmiSettings: t8,
                            setAuthMode: tg,
                            setAuthorizationViewDisplayOrder: tm,
                            setBridgeChainsToConnect: eP,
                            setCallback: t7,
                            setDesktopUri: e$,
                            setIsFullyConnected: eT,
                            setIsSingleWalletAccount: eD,
                            setIsVerificationInProgress: e7,
                            setLegacyIsVerifying: e4,
                            setLogInWithEmail: to,
                            setMultiWallet: e1,
                            setMultiWalletWidgetState: eG,
                            setNetwork: t5,
                            setOnboardingOnlyJwt: ej,
                            setPasskeySuccessPopup: nn,
                            setPrimaryWallet: tV,
                            setPrimaryWalletId: tx,
                            setQrcodeUri: eV,
                            setSdkHasLoaded: tZ,
                            setSelectedWalletConnectorKey: tW,
                            setSelectedWalletWithAction: tD,
                            setShowAuthFlow: tj,
                            setShowBridgeWidget: eW,
                            setShowDynamicUserProfile: eR,
                            setShowLinkNewWalletModal: tJ,
                            setShowQrcodeModal: tH,
                            setShowWidgetStatePopup: e3,
                            setUser: ez,
                            shadowDOMEnabled: ep,
                            showAuthFlow: tE,
                            showBridgeWidget: eF,
                            showDynamicUserProfile: eA,
                            showLockedWalletView: ey,
                            showQrcodeModal: tq,
                            showWidgetStatePopup: e2,
                            signWithEmailWalletName: ei,
                            siweStatement: em,
                            socialMediaIconUrl: (null === (a = null == eY ? void 0 : eY.general) || void 0 === a ? void 0 : a.supportUrls) || es,
                            socialMediaLinkText: eo,
                            socialMediaUrl: el,
                            socialProvidersFilter: ef,
                            termsOfServiceUrl: ed,
                            theme: r,
                            toolkitEnabled: eu,
                            user: eL,
                            walletConnector: null !== (s = null == tU ? void 0 : tU.connector) && void 0 !== s ? s : null,
                            walletConnectorOptions: tf,
                            walletUiUtils: th,
                            walletsFilter: J
                        }
                    }, [b, f, y, eZ, ew, e_, ty, tu, eJ, O, eN, t9, tI, tP, eq, P, er, ec, E, M, eE, R, eH, tA, D, B, K, tN, tY, t0, t1, ex, eC, eS, eI, eQ, eM, e6, e5, eL, t$, t2, ti, e0, eK, t3, e9, t4, tn, ee, tt, et, en, tU, tk, ea, eY, eB, tT, t6, tG, tB, tF, tM, t8, tg, tm, t7, eT, e7, to, e1, eG, t5, tV, tx, tZ, tW, tj, tJ, nn, tH, ez, ep, tE, eF, eA, ey, ne, tq, e2, ei, em, es, eo, el, ef, ed, r, eu, tf, th, J]);
                    return (0, nt.useEffect)(() => {
                        let addPrefetch = t => {
                            if (!document.head.querySelector(`#${t.id}`)) {
                                let r = document.createElement("link");
                                r.setAttribute("id", t.id), r.setAttribute("rel", "prefetch"), r.setAttribute("href", t.href), r.setAttribute("as", t.as), r.setAttribute("type", t.type), document.head.insertAdjacentElement("beforeend", r)
                            }
                        };
                        addPrefetch({
                            as: "image",
                            href: tw,
                            id: "sprite",
                            type: "image/svg+xml"
                        }), addPrefetch({
                            as: "fetch",
                            href: (0, tc.L_)(),
                            id: "wallet-book",
                            type: "application/json"
                        })
                    }, []), (0, nt.useEffect)(() => {
                        (e0 || "awaiting_account_switch" === eK) && eL && "idle" !== eK && !eA && eR(!0)
                    }, [e0, eK, eA, eL]), (0, tb.jsx)(I18nextProvider, {
                        i18n: ex,
                        children: (0, tb.jsx)(oA.Provider, {
                            value: nr,
                            children: (0, tb.jsx)(tc._F, {
                                walletBook: e8,
                                children: (0, tb.jsx)(ThemeContext_ThemeContextProvider, {
                                    customerTheme: parseTheme(r, (null === (p = null == eY ? void 0 : eY.design) || void 0 === p ? void 0 : p.modal) || void 0),
                                    designSettings: null == eY ? void 0 : eY.design,
                                    children: (0, tb.jsx)(LoadingContextProvider, {
                                        children: (0, tb.jsxs)(ViewContextProvider, {
                                            initialView: getInitialView({
                                                connectedWallets: tP,
                                                isAuthenticated: eC,
                                                isBridgeFlow: eS,
                                                isFullyConnected: eI,
                                                isMultiWalletEnabled: e0
                                            }),
                                            children: [eb && (0, tb.jsx)(UseNetworkValidation, {}), (0, tb.jsx)(CaptchaContextProvider, {
                                                children: (0, tb.jsx)(AccountExistsContextProvider, {
                                                    children: (0, tb.jsx)(WalletContextProvider, {
                                                        canSync: tz,
                                                        children: (0, tb.jsx)(PasskeyContextProvider, {
                                                            children: (0, tb.jsx)(EmailVerificationContextProvider, {
                                                                children: (0, tb.jsx)(DynamicWidgetContextProvider, {
                                                                    children: (0, tb.jsx)(DynamicBridgeWidgetContextProvider, {
                                                                        children: (0, tb.jsx)(FundingContextProvider, {
                                                                            children: (0, tb.jsx)(AccessDeniedContextProvider, {
                                                                                children: (0, tb.jsx)(SendBalanceContextProvider, {
                                                                                    children: (0, tb.jsx)(WalletGroupContextProvider, {
                                                                                        children: (0, tb.jsx)(UserFieldEditorContextProvider, {
                                                                                            children: (0, tb.jsx)(ConnectWithEmailOtpProvider, {
                                                                                                children: (0, tb.jsxs)(PhantomRedirectContextProvider, {
                                                                                                    children: [(0, tb.jsx)(DynamicAuthFlow, {}), (0, tb.jsx)(Toolkit, {}), (0, tb.jsx)(FundingWidget, {}), (0, tb.jsx)(SyncPasskeyFlow, {}), tp, t]
                                                                                                })
                                                                                            })
                                                                                        })
                                                                                    })
                                                                                })
                                                                            })
                                                                        })
                                                                    })
                                                                })
                                                            })
                                                        })
                                                    })
                                                })
                                            })]
                                        })
                                    })
                                })
                            })
                        })
                    })
                },
                DynamicContextProvider = t => (0, tb.jsx)(ErrorContext_ErrorContextProvider, {
                    children: (0, tb.jsx)(UserWalletsProvider, {
                        children: (0, tb.jsx)(InnerDynamicContextProvider, Object.assign({}, t))
                    })
                }),
                useOverrides = t => {
                    let r = (0, nt.useRef)(t),
                        a = useIsLoggedIn_useIsLoggedIn();
                    return r.current = t, (0, nt.useMemo)(() => ({
                        setAuthMode: t => {
                            let {
                                setAuthMode: s
                            } = r.current;
                            if (a) {
                                tv.error("Calling DynamicContext's setAuthMode method when the user already has a wallet is a noop");
                                return
                            }
                            return s(t)
                        }
                    }), [a])
                },
                useDynamicContext = () => {
                    let t = (0, nt.useContext)(oA);
                    if (void 0 === t) throw Error("useDynamicContext must be used within a DynamicContextProvider");
                    let {
                        accountSwitchState: r,
                        authMode: a,
                        authToken: s,
                        awaitingSignatureState: l,
                        getNameService: c,
                        handleLogOut: d,
                        handleUnlinkWallet: u,
                        isAuthenticated: m,
                        isFullyConnected: p,
                        isVerificationInProgress: h,
                        loadingNetwork: f,
                        locale: y,
                        loginWithEmail: b,
                        multiWalletWidgetState: C,
                        network: E,
                        networkConfigurations: j,
                        qrcodeUri: I,
                        rpcProviders: O,
                        sdkHasLoaded: P,
                        setLogInWithEmail: R,
                        setMultiWalletWidgetState: F,
                        setNetwork: W,
                        setPrimaryWallet: M,
                        setShowAuthFlow: D,
                        setShowDynamicUserProfile: L,
                        setShowQrcodeModal: U,
                        shadowDOMEnabled: B,
                        showAuthFlow: $,
                        showQrcodeModal: K,
                        user: G,
                        walletConnector: J,
                        walletConnectorOptions: Y,
                        bridgeChains: Q,
                        bridgeChainsToConnect: ee,
                        primaryWallet: et,
                        setShowBridgeWidget: en,
                        sendWagmiSettings: er,
                        showDynamicUserProfile: ea,
                        setShowLinkNewWalletModal: ei
                    } = t, {
                        setAuthMode: eo
                    } = useOverrides(t);
                    return {
                        accountSwitchState: r,
                        authMode: a,
                        authToken: s,
                        awaitingSignatureState: l,
                        bridgeChains: Q,
                        bridgeChainsToConnect: ee,
                        getNameService: c,
                        handleLogOut: d,
                        handleUnlinkWallet: u,
                        isAuthenticated: m,
                        isFullyConnected: p,
                        isVerificationInProgress: h,
                        loadingNetwork: f,
                        locale: y,
                        loginWithEmail: b,
                        multiWalletWidgetState: C,
                        network: E,
                        networkConfigurations: j,
                        primaryWallet: et,
                        qrcodeUri: I,
                        rpcProviders: O,
                        sdkHasLoaded: P,
                        sendWagmiSettings: er,
                        setAuthMode: eo,
                        setLogInWithEmail: R,
                        setMultiWalletWidgetState: F,
                        setNetwork: W,
                        setPrimaryWallet: M,
                        setShowAuthFlow: t => D(t, {
                            clearErrors: !0,
                            emitCancelAuth: !0,
                            ignoreIfIsEmbeddedWidget: !0,
                            initializeWalletConnect: !0,
                            performMultiWalletChecks: !0
                        }),
                        setShowBridgeWidget: en,
                        setShowDynamicUserProfile: L,
                        setShowLinkNewWalletModal: ei,
                        setShowQrcodeModal: U,
                        shadowDOMEnabled: B,
                        showAuthFlow: $,
                        showDynamicUserProfile: ea,
                        showQrcodeModal: K,
                        user: G,
                        walletConnector: J,
                        walletConnectorOptions: Y
                    }
                }
        },
        32663: function(t, r, a) {
            "use strict";
            a.d(r, {
                uk: function() {
                    return AccountExistsError
                },
                k3: function() {
                    return CancellablePromise
                },
                aH: function() {
                    return ChainalysisError
                },
                kW: function() {
                    return DynamicError
                },
                l7: function() {
                    return EmailAlreadyExistsError
                },
                EH: function() {
                    return EmailProviderError
                },
                NP: function() {
                    return EmailVerificationError
                },
                yR: function() {
                    return f
                },
                bR: function() {
                    return GateBlockedError
                },
                C_: function() {
                    return InsufficientFundsError
                },
                $x: function() {
                    return MissingEnvironmentIdError
                },
                BI: function() {
                    return MissingPublicAddressError
                },
                U8: function() {
                    return NoAccessError
                },
                qi: function() {
                    return SocialAccountAlreadyExistsError
                },
                k4: function() {
                    return TransactionGasCannotBeSponsoredError
                },
                In: function() {
                    return UserHasAccountWithEmailError
                },
                a$: function() {
                    return UsernameAlreadyExistsError
                },
                Pu: function() {
                    return WalletNotDeployedError
                },
                Fr: function() {
                    return WalletUsedError
                },
                h$: function() {
                    return bufferToBase64
                },
                dl: function() {
                    return getAndroidVersion
                },
                uy: function() {
                    return getOrMapViemChain
                },
                vj: function() {
                    return getProvidersFromWindow
                },
                KT: function() {
                    return getTLD
                },
                Rc: function() {
                    return handleMobileWalletRedirect
                },
                Dt: function() {
                    return isAndroid
                },
                gn: function() {
                    return isIOS
                },
                zc: function() {
                    return isIPad
                },
                IN: function() {
                    return isIPhone
                },
                uL: function() {
                    return isIPhone8OrEarlier
                },
                XS: function() {
                    return isLegacySafari
                },
                tq: function() {
                    return isMobile
                },
                DQ: function() {
                    return parseChainId
                },
                fu: function() {
                    return parseEvmNetworks
                },
                MB: function() {
                    return retryableFn
                },
                _v: function() {
                    return sleep
                }
            });
            let parseChainId = t => parseInt(t.toString()),
                parseEvmNetworks = t => {
                    let r = t.slice();
                    return r.map(t => (t.chainId = parseChainId(t.chainId), t.networkId = parseChainId(t.networkId), t))
                };
            let CustomError = class CustomError extends Error {
                constructor(t, r) {
                    super(t), this.code = void 0, this.code = r, Object.setPrototypeOf(this, this.constructor.prototype)
                }
                toJSON() {
                    return {
                        code: this.code,
                        error: this.message
                    }
                }
            };
            let DynamicError = class DynamicError extends CustomError {};
            let AccountExistsError = class AccountExistsError extends DynamicError {
                constructor(t, r) {
                    super(t), this.errorMessage = t, this.errorPayload = r
                }
            };
            let ChainalysisError = class ChainalysisError extends DynamicError {
                constructor(t) {
                    super("This address is not approved for access"), this.walletPublicKey = t
                }
            };
            let EmailAlreadyExistsError = class EmailAlreadyExistsError extends DynamicError {
                constructor() {
                    super("Email already exists")
                }
            };
            let EmailVerificationError = class EmailVerificationError extends DynamicError {
                constructor(t) {
                    super("EmailVerificationError", t)
                }
            };
            let NoAccessError = class NoAccessError extends DynamicError {
                constructor({
                    walletPublicKey: t,
                    email: r
                }) {
                    super("User does not have access"), this.email = r, this.walletPublicKey = t
                }
            };
            let UsernameAlreadyExistsError = class UsernameAlreadyExistsError extends DynamicError {
                constructor() {
                    super("Username already exists")
                }
            };
            let WalletNotDeployedError = class WalletNotDeployedError extends DynamicError {
                constructor() {
                    super("Wallet has not been deployed", "wallet_not_deployed")
                }
            };
            let WalletUsedError = class WalletUsedError extends DynamicError {
                constructor(t) {
                    super("WalletUsedError", t)
                }
            };
            let EmailProviderError = class EmailProviderError extends DynamicError {
                constructor(t) {
                    super("EmailProviderError", t)
                }
            };
            let MissingEnvironmentIdError = class MissingEnvironmentIdError extends DynamicError {
                constructor() {
                    super("You are missing the environmentId field in yours DynamicContextProvider settings prop")
                }
            };
            let GateBlockedError = class GateBlockedError extends DynamicError {
                constructor(t) {
                    super("This address is blocked by the gate"), this.walletPublicKey = t
                }
            };
            let UserHasAccountWithEmailError = class UserHasAccountWithEmailError extends DynamicError {
                constructor(t) {
                    super(t), this.error = t
                }
            };
            let SocialAccountAlreadyExistsError = class SocialAccountAlreadyExistsError extends DynamicError {
                constructor() {
                    super("Social account already exists")
                }
            };
            let TransactionGasCannotBeSponsoredError = class TransactionGasCannotBeSponsoredError extends DynamicError {
                constructor() {
                    super(TransactionGasCannotBeSponsoredError.message)
                }
                static isInstance(t) {
                    var r;
                    let a = (null === (r = null == t ? void 0 : t.walk) || void 0 === r ? void 0 : r.call(t)) || t;
                    return a instanceof TransactionGasCannotBeSponsoredError
                }
                static isErrorMessage(t) {
                    var r;
                    return (null === (r = null == t ? void 0 : t.message) || void 0 === r ? void 0 : r.includes("userOp did not match any gas sponsoring policies")) || !1
                }
            };
            TransactionGasCannotBeSponsoredError.message = "Transaction gas cannot be sponsored.";
            let InsufficientFundsError = class InsufficientFundsError extends DynamicError {
                constructor() {
                    super(InsufficientFundsError.message)
                }
                static isInstance(t) {
                    var r;
                    let a = (null === (r = null == t ? void 0 : t.walk) || void 0 === r ? void 0 : r.call(t)) || t;
                    return a instanceof InsufficientFundsError
                }
                static isErrorMessage(t) {
                    var r;
                    return (null === (r = null == t ? void 0 : t.message) || void 0 === r ? void 0 : r.includes("AA21 didn't pay prefund")) || !1
                }
            };
            InsufficientFundsError.message = "Insufficient funds.";
            let MissingPublicAddressError = class MissingPublicAddressError extends DynamicError {
                constructor() {
                    super("Missing public address", "missing-public-address")
                }
            };
            var s = a(71311);
            let l = new s.Y("magic"),
                defaultCancel = () => {
                    l.error("Tried to cancel CancellablePromise without ever assigning it's '_cancel' method")
                };
            let CancellablePromise = class CancellablePromise extends Promise {
                internalCancel(t) {
                    defaultCancel()
                }
                constructor(t) {
                    let r = defaultCancel,
                        superResolve = () => {};
                    super((t, a) => {
                        r = a, superResolve = t
                    }), this.internalIsCancelled = !1, this.isSettled = !1, t(t => {
                        this.isCancelled || this.isSettled || superResolve(t), this.isSettled = !0
                    }, t => {
                        this.isCancelled || this.isSettled || r(t), this.isSettled = !0
                    }), this.internalCancel = r
                }
                get isCancelled() {
                    return this.internalIsCancelled
                }
                cancel(t) {
                    return this.isSettled || (this.internalIsCancelled = !0, this.internalCancel(t), this.isSettled = !0), this
                }
                internalOnCancel(t, r) {
                    let a = new CancellablePromise((r, a) => {
                        this.internalThen(r, ({
                            wasCancelled: s,
                            reason: l
                        }) => {
                            s ? r(t(l)) : a(l)
                        }, {
                            ignoreOnCancel: !0
                        })
                    });
                    return (null == r ? void 0 : r.ignoreOnCancel) || a.internalOnCancel(t => {
                        this.cancel(t)
                    }, {
                        ignoreOnCancel: !0
                    }), a
                }
                onCancel(t) {
                    return this.internalOnCancel(t)
                }
                internalThen(t, r, a) {
                    let s = r ? t => r({
                            reason: t,
                            wasCancelled: this.isCancelled
                        }) : r,
                        l = CancellablePromise.fromPromise(super.then(t, s));
                    return (null == a ? void 0 : a.ignoreOnCancel) || l.internalOnCancel(t => {
                        this.cancel(t)
                    }, {
                        ignoreOnCancel: !0
                    }), l
                }
                then(t, r) {
                    return this.internalThen(t, r)
                } catch (t) {
                    return this.then(void 0, t)
                } finally(t) {
                    return this.then(r => (null == t || t(), r), r => {
                        throw null == t || t(), r
                    })
                }
                static fromPromise(t) {
                    if ("internalIsCancelled" in t) return t;
                    let r = new CancellablePromise((r, a) => t.then(r, a));
                    return r
                }
            };
            let c = /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i,
                d = /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,
                isMobile = t => "undefined" != typeof window && "undefined" != typeof navigator && (c.test(navigator.userAgent) || d.test(navigator.userAgent.substring(0, 4)) || isIPad(t) || isIPhone()),
                isIPhone = () => "undefined" != typeof window && "undefined" != typeof navigator && /iPhone/.test(navigator.userAgent),
                isIPhone8OrEarlier = () => "undefined" != typeof window && "undefined" != typeof navigator && u.some(({
                    regex: t
                }) => t.test(navigator.userAgent)),
                isIPad = t => {
                    if ("undefined" == typeof window || "undefined" == typeof navigator) return !1;
                    let r = t || navigator.maxTouchPoints;
                    return /iPad/.test(navigator.userAgent) || /Mac/.test(navigator.userAgent) && 5 === r
                },
                isIOS = t => "undefined" != typeof window && "undefined" != typeof navigator && (isIPhone() || isIPad(t)),
                isAndroid = () => isMobile() && !isIOS(),
                isLegacySafari = () => "undefined" != typeof window && !!window.CSS && "function" == typeof window.CSS.supports && !CSS.supports("aspect-ratio: 1 / 1"),
                isSamsungBrowser = () => "undefined" != typeof window && "undefined" != typeof navigator && navigator.userAgent.includes("SamsungBrowser"),
                u = [{
                    model: "iPhone 5",
                    regex: /(?:MDCR_|ICRU_|Apple-)?(?:iPh(?:one)?5[C,_]12|5)$/
                }, {
                    model: "iPhone 5C",
                    regex: /(?:MDCR_|ICRU_|Apple-)?(?:iPh(?:one)?5[C,_]34)$/
                }, {
                    model: "iPhone 5S",
                    regex: /(?:MDCR_|ICRU_|Apple-)?(?:iPh(?:one)?6[C,_]12|5S)$/
                }, {
                    model: "iPhone 6 Plus",
                    regex: /(?:MDCR_|ICRU_|Apple-)?(?:iPh(?:one)?7[C,_]1|1C2%257enohPi|6PLUS)$/
                }, {
                    model: "iPhone 6",
                    regex: /(?:MDCR_|ICRU_|Apple-)?(?:iPh(?:one)?7[C,_]2|6)$/
                }, {
                    model: "iPhone 6s Plus",
                    regex: /(?:MDCR_|ICRU_|Apple-)?(?:iPh(?:one)?8[C,_]2|6SPLUS)$/
                }, {
                    model: "iPhone 6s",
                    regex: /(?:MDCR_|ICRU_|Apple-)?(?:iPh(?:one)?8[C,_]1|iPhone[ /]6s|6S)$/
                }, {
                    model: "iPhone SE",
                    regex: /(?:MDCR_|ICRU_|Apple-)?(?:iPh(?:one)?8[C,_]4|SE)$/
                }, {
                    model: "iPhone 7",
                    regex: /(?:MDCR_|ICRU_|Apple-)?(?:iPh(?:one)?9[C,_]13|iphone7|7)$/
                }, {
                    model: "iPhone 7 Plus",
                    regex: /(?:MDCR_|ICRU_|Apple-)?(?:iPh(?:one)?9[C,_]24|7PLUS)$/
                }, {
                    model: "iPhone 8",
                    regex: /(?:MDCR_|ICRU_|Apple-)?(?:iPh(?:one)?10[C,_]14|8)$/
                }, {
                    model: "iPhone 8 Plus",
                    regex: /(?:MDCR_|ICRU_|Apple-)?(?:iPh(?:one)?10[C,_]25|8PLUS)$/
                }],
                getAndroidVersion = () => {
                    if ("undefined" == typeof navigator) return;
                    let t = navigator.userAgent.match(/Android (\d+(\.\d+)?)/);
                    if (!t) return;
                    let r = parseFloat(t[1]);
                    return r
                };
            "function" == typeof SuppressedError && SuppressedError;
            var m = a(97115).Buffer;
            let bufferToBase64 = t => {
                    let r = Array.prototype.map.call(t, t => String.fromCharCode(t)).join("");
                    return m.from(r, "binary").toString("base64")
                },
                getProvidersFromWindow = t => {
                    let r = t.split("."),
                        a = window,
                        s = [];
                    for (let [t, l] of Object.entries(r)) {
                        if ("object" != typeof(a = a[l]) || null === a) return [];
                        Number(t) === r.length - 1 && (Array.isArray(a) ? a.forEach(t => s.push(t)) : a.providers ? a.providers.forEach(t => s.push(t)) : s.push(a))
                    }
                    return s
                };

            function sleep(t, r) {
                return new Promise(a => {
                    setTimeout(() => a(r), t)
                })
            }
            var p = a(52659);
            let getChain = t => {
                    for (let r of Object.values(p))
                        if ("id" in r && r.id === t) return r;
                    throw Error(`Chain with id ${t} not found`)
                },
                mapChain = t => {
                    var r;
                    return {
                        blockExplorers: (null === (r = t.blockExplorerUrls) || void 0 === r ? void 0 : r[0]) ? {
                            default: {
                                name: t.blockExplorerUrls[0],
                                url: t.blockExplorerUrls[0]
                            }
                        } : void 0,
                        id: t.chainId,
                        name: t.vanityName || t.chainName,
                        nativeCurrency: t.nativeCurrency,
                        network: t.chainName,
                        rpcUrls: {
                            default: {
                                http: t.rpcUrls
                            },
                            public: {
                                http: t.rpcUrls
                            }
                        }
                    }
                },
                getOrMapViemChain = t => {
                    let r;
                    try {
                        r = getChain(t.chainId)
                    } catch (a) {
                        r = mapChain(t)
                    }
                    return r
                };
            var h = a(77771);
            let f = "FALLBACK_UNDEFINED",
                retryableFn = (t, r = {}) => {
                    var a, s, l, c;
                    return a = void 0, s = void 0, l = void 0, c = function*() {
                        let {
                            maxRetries: a = 3,
                            currentRetry: s = 0,
                            timeoutMs: l = 100,
                            fallbackValue: c = Error("Max retries reached"),
                            retryStrategy: d = "timeout-only",
                            retryIntervalMs: u = 0,
                            logger: m
                        } = r;
                        null == m || m.debug("Configured retryableFn with options: ", {
                            currentRetry: s,
                            fallbackValue: c,
                            maxRetries: a,
                            retryStrategy: d,
                            timeoutMs: l
                        });
                        let p = new Promise((t, r) => {
                            setTimeout(() => {
                                r(Error("Timeout"))
                            }, l)
                        });
                        try {
                            let r = yield Promise.race([t(), p]);
                            return r
                        } catch (h) {
                            if (null == m || m.debug("retryableFn caught error: ", h), s >= a) {
                                if (null == m || m.error("Error while retrying function, returning/throwing fallback value", h, c), c instanceof Error) throw c;
                                if (c === f) return;
                                return c
                            }
                            let r = (null == h ? void 0 : h.message) === "Timeout",
                                p = "timeout-and-rejection" === d || "timeout-only" === d && r || "rejection-only" === d && !r;
                            if (null == m || m.debug("retryableFn shouldRetry: ", p), !p) {
                                if (c instanceof Error) throw null == m || m.debug("retryableFn throwing fallbackValue error: ", c), h;
                                if (c === f) {
                                    null == m || m.debug("retryableFn returning undefined");
                                    return
                                }
                                return null == m || m.debug("retryableFn returning fallbackValue: ", c), null == m || m.error("Error while retrying function, returning fallback value", h), c
                            }
                            return u && (yield sleep(u)), retryableFn(t, {
                                currentRetry: s + 1,
                                fallbackValue: c,
                                logger: m,
                                maxRetries: a,
                                retryStrategy: d,
                                timeoutMs: l
                            })
                        }
                    }, new(l || (l = Promise))(function(t, r) {
                        function fulfilled(t) {
                            try {
                                step(c.next(t))
                            } catch (t) {
                                r(t)
                            }
                        }

                        function rejected(t) {
                            try {
                                step(c.throw(t))
                            } catch (t) {
                                r(t)
                            }
                        }

                        function step(r) {
                            var a;
                            r.done ? t(r.value) : ((a = r.value) instanceof l ? a : new l(function(t) {
                                t(a)
                            })).then(fulfilled, rejected)
                        }
                        step((c = c.apply(a, s || [])).next())
                    })
                },
                handleMobileWalletRedirect = ({
                    nativeLink: t,
                    universalLink: r
                }) => {
                    let a = encodeURIComponent(window.location.toString()),
                        s = encodeURIComponent(window.location.origin);
                    isSamsungBrowser() ? window.location.assign(`${t}/${a}?ref=${s}`) : window.location.assign(`${r}/${a}?ref=${s}`)
                },
                getTLD = () => {
                    let t = (0, h.Qc)(window.location.hostname, {
                        allowPrivateDomains: !0
                    });
                    return t.domain || void 0
                }
        },
        35749: function(t, r, a) {
            "use strict";

            function __awaiter(t, r, a, s) {
                return new(a || (a = Promise))(function(l, c) {
                    function fulfilled(t) {
                        try {
                            step(s.next(t))
                        } catch (t) {
                            c(t)
                        }
                    }

                    function rejected(t) {
                        try {
                            step(s.throw(t))
                        } catch (t) {
                            c(t)
                        }
                    }

                    function step(t) {
                        var r;
                        t.done ? l(t.value) : ((r = t.value) instanceof a ? r : new a(function(t) {
                            t(r)
                        })).then(fulfilled, rejected)
                    }
                    step((s = s.apply(t, r || [])).next())
                })
            }
            a.d(r, {
                Nh: function() {
                    return createTransportWithUiConfirmation
                },
                No: function() {
                    return createWalletClientWithUiConfirmation
                },
                mw: function() {
                    return estimateL1Fee_estimateL1Fee
                },
                FD: function() {
                    return isL1FeeSupportedByChain
                },
                Bf: function() {
                    return isTransactionExecutionError
                }
            }), "function" == typeof SuppressedError && SuppressedError;
            var s = a(85031),
                l = a(17114),
                c = a(56218),
                d = a(37491);
            let interceptTransport = ({
                    getAccounts: t,
                    onPersonalSign: r,
                    onSendTransaction: a,
                    onSignTypedData: s,
                    transport: l
                }) => c => {
                    let u = l(c);
                    return (0, d.P)({
                        request: l => __awaiter(void 0, void 0, void 0, function*() {
                            let {
                                method: c,
                                params: d
                            } = l;
                            if (t && "eth_accounts" === c) return t({
                                provider: u
                            });
                            if (r && "personal_sign" === c) {
                                let [t] = d;
                                return r({
                                    args: l,
                                    message: t,
                                    provider: u
                                })
                            }
                            if (a && "eth_sendTransaction" === c) {
                                let [t] = d;
                                return a({
                                    args: l,
                                    provider: u,
                                    transaction: t
                                })
                            }
                            if (s && "eth_signTypedData_v4" === c) {
                                let [, t] = null != d ? d : [];
                                return s({
                                    args: l,
                                    message: t,
                                    provider: u
                                })
                            }
                            return u.request(l)
                        })
                    })(c)
                },
                unFormatTransaction = t => Object.assign(Object.assign({}, t), {
                    gas: void 0 !== t.gas ? (0, l.y_)(t.gas) : void 0,
                    gasPrice: void 0 !== t.gasPrice ? (0, l.y_)(t.gasPrice) : void 0,
                    maxFeePerGas: void 0 !== t.maxFeePerGas ? (0, l.y_)(t.maxFeePerGas) : void 0,
                    maxPriorityFeePerGas: void 0 !== t.maxPriorityFeePerGas ? (0, l.y_)(t.maxPriorityFeePerGas) : void 0,
                    nonce: void 0 !== t.nonce ? (0, l.y_)(t.nonce) : void 0,
                    value: void 0 !== t.value ? (0, l.y_)(t.value) : void 0
                });
            var u = a(67771);
            let createAccountWithUiConfirmation = ({
                    address: t,
                    account: r,
                    provider: a,
                    walletUiUtils: s
                }) => (0, u.A)({
                    address: t,
                    signMessage: (...t) => __awaiter(void 0, void 0, void 0, function*() {
                        var a;
                        return s.signMessage({
                            handler: () => __awaiter(void 0, void 0, void 0, function*() {
                                return (yield r()).signMessage(...t)
                            }),
                            message: null === (a = t[0]) || void 0 === a ? void 0 : a.message.toString()
                        })
                    }),
                    signTransaction: (...t) => __awaiter(void 0, void 0, void 0, function*() {
                        return s.sendTransaction({
                            handler: () => __awaiter(void 0, void 0, void 0, function*() {
                                return (yield r()).signTransaction(...t)
                            }),
                            provider: a,
                            transaction: t[0]
                        })
                    }),
                    signTypedData: (...t) => s.signMessage({
                        handler: () => __awaiter(void 0, void 0, void 0, function*() {
                            return (yield r()).signTypedData(...t)
                        }),
                        message: JSON.stringify(t[0])
                    })
                }),
                createWalletClientWithUiConfirmation = ({
                    address: t,
                    account: r,
                    chain: a,
                    transport: d,
                    walletUiUtils: u
                }) => {
                    let m = null,
                        p = (0, s.v)({
                            chain: a,
                            transport: d
                        }),
                        h = createAccountWithUiConfirmation({
                            account: r,
                            address: t,
                            provider: p,
                            walletUiUtils: u
                        }),
                        f = interceptTransport({
                            getAccounts: () => __awaiter(void 0, void 0, void 0, function*() {
                                return [t]
                            }),
                            onPersonalSign: ({
                                message: t
                            }) => __awaiter(void 0, void 0, void 0, function*() {
                                if (!m) throw Error("Client not initialized");
                                return m.signMessage({
                                    message: (0, l.H_)(t, "string")
                                })
                            }),
                            onSendTransaction: ({
                                transaction: t
                            }) => __awaiter(void 0, void 0, void 0, function*() {
                                if (!m) throw Error("Client not initialized");
                                let r = unFormatTransaction(t);
                                return m.sendTransaction(r)
                            }),
                            onSignTypedData: ({
                                message: t
                            }) => __awaiter(void 0, void 0, void 0, function*() {
                                if (!m) throw Error("Client not initialized");
                                return m.signTypedData(JSON.parse(t))
                            }),
                            transport: d
                        });
                    return m = (0, c.K)({
                        account: h,
                        chain: a,
                        transport: f
                    })
                };
            var m = a(19473);
            let confirmationTransport = ({
                    transport: t,
                    walletUiUtils: r,
                    getAccounts: a,
                    onPersonalSign: s,
                    onSendTransaction: c,
                    onSignTypedData: d,
                    provider: u
                }) => interceptTransport({
                    getAccounts: a,
                    onPersonalSign: s ? t => r.signMessage({
                        handler: () => s(t),
                        message: (0, l.H_)(t.message, "string")
                    }) : void 0,
                    onSendTransaction: c ? t => r.sendTransaction({
                        handler: r => __awaiter(void 0, void 0, void 0, function*() {
                            return c(Object.assign(Object.assign({}, t), {
                                transaction: r
                            }))
                        }),
                        provider: u,
                        transaction: t.transaction
                    }) : void 0,
                    onSignTypedData: d ? t => r.signMessage({
                        handler: () => d(t),
                        message: t.message
                    }) : void 0,
                    transport: t
                }),
                createTransportWithUiConfirmation = ({
                    walletUiUtils: t,
                    publicClient: r,
                    transport: a
                }) => confirmationTransport({
                    onPersonalSign: ({
                        args: t,
                        provider: r
                    }) => __awaiter(void 0, void 0, void 0, function*() {
                        return r.request(t)
                    }),
                    onSendTransaction: ({
                        transaction: t,
                        args: r,
                        provider: a
                    }) => __awaiter(void 0, void 0, void 0, function*() {
                        let s = convertTransactionGasPriceToHex(t);
                        return a.request({
                            method: r.method,
                            params: [s]
                        })
                    }),
                    onSignTypedData: ({
                        args: t,
                        provider: r
                    }) => __awaiter(void 0, void 0, void 0, function*() {
                        return r.request(t)
                    }),
                    provider: r,
                    transport: a,
                    walletUiUtils: t
                }),
                convertTransactionGasPriceToHex = t => {
                    var {
                        maxFeePerGas: r,
                        maxPriorityFeePerGas: a
                    } = t;
                    return Object.assign(Object.assign({}, function(t, r) {
                        var a = {};
                        for (var s in t) Object.prototype.hasOwnProperty.call(t, s) && 0 > r.indexOf(s) && (a[s] = t[s]);
                        if (null != t && "function" == typeof Object.getOwnPropertySymbols)
                            for (var l = 0, s = Object.getOwnPropertySymbols(t); l < s.length; l++) 0 > r.indexOf(s[l]) && Object.prototype.propertyIsEnumerable.call(t, s[l]) && (a[s[l]] = t[s[l]]);
                        return a
                    }(t, ["maxFeePerGas", "maxPriorityFeePerGas"])), {
                        maxFeePerGas: "bigint" == typeof r ? (0, m.NC)(r) : r,
                        maxPriorityFeePerGas: "bigint" == typeof a ? (0, m.NC)(a) : a
                    })
                },
                isTransactionExecutionError = t => null != t && "object" == typeof t && "walk" in t && "function" == typeof t.walk;
            var p = a(99792),
                h = a(96044),
                f = a(47201),
                y = a(33233),
                b = a(47983),
                C = a(9390),
                E = a(80854);
            let j = [{
                    inputs: [{
                        internalType: "bytes",
                        name: "_data",
                        type: "bytes"
                    }],
                    name: "getL1Fee",
                    outputs: [{
                        internalType: "uint256",
                        name: "",
                        type: "uint256"
                    }],
                    stateMutability: "view",
                    type: "function"
                }],
                estimateL1Fee = (t, r) => __awaiter(void 0, void 0, void 0, function*() {
                    let a = (0, p.D)(Object.assign(Object.assign({
                        chainId: t.chain.id
                    }, r), {
                        type: r.type ? r.type : "eip1559"
                    }));
                    return t.readContract({
                        abi: j,
                        address: "0x420000000000000000000000000000000000000F",
                        args: [a],
                        functionName: "getL1Fee"
                    })
                }),
                I = [h.v.id, f.l.id, y.O.id, b.u.id, C.J.id, E.L.id],
                estimateL1Fee_estimateL1Fee = (t, r) => __awaiter(void 0, void 0, void 0, function*() {
                    let {
                        chain: a
                    } = t;
                    if (!a) throw Error("Chain is not defined");
                    if (I.includes(a.id)) return estimateL1Fee(t, r);
                    throw Error("Chain is not supported")
                }),
                O = [...I],
                isL1FeeSupportedByChain = t => O.includes(t)
        },
        84310: function(t, r, a) {
            "use strict";
            a.d(r, {
                Vr: function() {
                    return BrandIcon
                },
                _F: function() {
                    return WalletBookContextProvider
                },
                o: function() {
                    return WalletIcon
                },
                IP: function() {
                    return findWalletBookWallet
                },
                oH: function() {
                    return findWalletGroupOverride
                },
                L_: function() {
                    return getWalletBookCdnUrl
                },
                MO: function() {
                    return getWalletBookWallet
                },
                Dd: function() {
                    return getWalletGroup
                },
                oq: function() {
                    return getWalletLinks
                },
                Vj: function() {
                    return getWalletPrimaryColor
                },
                Uj: function() {
                    return useWalletBookCdn
                },
                yw: function() {
                    return useWalletBookContext
                }
            });
            let normalizeWalletName = t => {
                var r;
                return null !== (r = null == t ? void 0 : t.toLowerCase().replace(/\W/g, "")) && void 0 !== r ? r : "undefined-wallet"
            };
            var s = a(71311);
            let l = new s.Y("WalletBook"),
                getWalletBookWallet = (t, r) => {
                    var a, s, c;
                    if (!r) throw Error("Wallet key is required. Please pass in a wallet key to getWalletBookWallet");
                    let d = null === (a = null == t ? void 0 : t.wallets) || void 0 === a ? void 0 : a[r];
                    if (!d) {
                        let a = normalizeWalletName(r),
                            d = null === (s = null == t ? void 0 : t.wallets) || void 0 === s ? void 0 : s[a];
                        if (d) return l.warn(`deprecated: using walletName: ${r} to look up wallet data is deprecated. use connector.key instead ${a}`), d;
                        throw Error(`Wallet ${a} not found in wallet book (${Object.keys(null!==(c=null==t?void 0:t.wallets)&&void 0!==c?c:{}).length} wallets found)`)
                    }
                    return d
                },
                c = {
                    androidUrl: "https://play.google.com/store/apps/details?id={{id}}",
                    chromeUrl: "https://chrome.google.com/webstore/detail/{{id}}",
                    edgeUrl: "https://microsoftedge.microsoft.com/addons/detail/{{id}}",
                    firefoxUrl: "https://addons.mozilla.org/en-US/firefox/addon/{{id}}",
                    iconicUrl: "https://iconic.dynamic-static-assets.com/icons/sprite.svg#{{id}}",
                    iosUrl: "https://apps.apple.com/app/apple-store/{{id}}",
                    walletConnectUrl: "https://registry.walletconnect.org/v2/logo/sm/{{id}}"
                },
                renderTemplate = (t, r) => {
                    if (r) return c[t].replace("{{id}}", r)
                },
                getBrandIconUrl = t => t.spriteId ? renderTemplate("iconicUrl", t.spriteId) : t.imageId ? renderTemplate("walletConnectUrl", t.imageId) : "",
                getWalletIconUrl = (t, r) => {
                    try {
                        let a = getWalletBookWallet(t, r);
                        if (null == a ? void 0 : a.brand) return getBrandIconUrl(a.brand)
                    } catch (t) {
                        l.error(t)
                    }
                    return ""
                },
                getDefaultWalletIconUrl = () => {
                    try {
                        return renderTemplate("iconicUrl", "defaultwallet")
                    } catch (t) {
                        l.error(t)
                    }
                    return ""
                },
                findWalletBookWallet = (t, r) => {
                    try {
                        let a = getWalletBookWallet(t, r);
                        return a
                    } catch (t) {
                        return
                    }
                },
                getWalletLinks = (t, r) => {
                    var a, s, l, c, d, u, m, p, h, f, y, b, C, E, j, I;
                    let O = findWalletBookWallet(t, r),
                        P = {
                            android: "",
                            brave: "",
                            chrome: "",
                            edge: "",
                            firefox: "",
                            ios: ""
                        };
                    return P.brave = null !== (s = renderTemplate("chromeUrl", null === (a = null == O ? void 0 : O.desktop) || void 0 === a ? void 0 : a.chromeId)) && void 0 !== s ? s : "", P.chrome = null !== (c = renderTemplate("chromeUrl", null === (l = null == O ? void 0 : O.desktop) || void 0 === l ? void 0 : l.chromeId)) && void 0 !== c ? c : "", P.edge = null !== (u = renderTemplate("edgeUrl", null === (d = null == O ? void 0 : O.desktop) || void 0 === d ? void 0 : d.edgeId)) && void 0 !== u ? u : "", P.firefox = null !== (p = renderTemplate("firefoxUrl", null === (m = null == O ? void 0 : O.desktop) || void 0 === m ? void 0 : m.firefoxId)) && void 0 !== p ? p : "", P.ios = null !== (b = null !== (f = renderTemplate("iosUrl", null === (h = null == O ? void 0 : O.mobile) || void 0 === h ? void 0 : h.iosId)) && void 0 !== f ? f : null === (y = null == O ? void 0 : O.mobile) || void 0 === y ? void 0 : y.ios) && void 0 !== b ? b : "", P.android = null !== (I = null !== (E = renderTemplate("androidUrl", null === (C = null == O ? void 0 : O.mobile) || void 0 === C ? void 0 : C.androidId)) && void 0 !== E ? E : null === (j = null == O ? void 0 : O.mobile) || void 0 === j ? void 0 : j.android) && void 0 !== I ? I : "", P
                },
                getWalletPrimaryColor = (t, r) => {
                    var a;
                    let s = getWalletBookWallet(t, r);
                    return null === (a = null == s ? void 0 : s.brand) || void 0 === a ? void 0 : a.primaryColor
                },
                getWalletGroup = (t, r) => {
                    let a = t.groups[r];
                    if (!a) throw Error(`Group ${r} not found in wallet book`);
                    return a
                },
                findWalletGroup = (t, r) => {
                    try {
                        return getWalletGroup(t, r)
                    } catch (t) {
                        l.error(t);
                        return
                    }
                };
            var d = a(9389);
            let getWalletBookCdnUrl = () => {
                    var t, r, a;
                    return null !== (a = null !== (r = null !== (t = d.env.WALLET_BOOK_CDN_URL) && void 0 !== t ? t : d.env.NEXT_PUBLIC_WALLET_BOOK_CDN_URL) && void 0 !== r ? r : d.env.REACT_APP_WALLET_BOOK_CDN_URL) && void 0 !== a ? a : "https://dynamic-static-assets.com/wallet-book/v1/stable/wallet-book.json"
                },
                findWalletGroupOverride = (t, r, a) => {
                    var s;
                    let l = findWalletGroup(t, r);
                    return null === (s = null == l ? void 0 : l.walletOverrides) || void 0 === s ? void 0 : s[a]
                };

            function __rest(t, r) {
                var a = {};
                for (var s in t) Object.prototype.hasOwnProperty.call(t, s) && 0 > r.indexOf(s) && (a[s] = t[s]);
                if (null != t && "function" == typeof Object.getOwnPropertySymbols)
                    for (var l = 0, s = Object.getOwnPropertySymbols(t); l < s.length; l++) 0 > r.indexOf(s[l]) && Object.prototype.propertyIsEnumerable.call(t, s[l]) && (a[s[l]] = t[s[l]]);
                return a
            }

            function __awaiter(t, r, a, s) {
                return new(a || (a = Promise))(function(l, c) {
                    function fulfilled(t) {
                        try {
                            step(s.next(t))
                        } catch (t) {
                            c(t)
                        }
                    }

                    function rejected(t) {
                        try {
                            step(s.throw(t))
                        } catch (t) {
                            c(t)
                        }
                    }

                    function step(t) {
                        var r;
                        t.done ? l(t.value) : ((r = t.value) instanceof a ? r : new a(function(t) {
                            t(r)
                        })).then(fulfilled, rejected)
                    }
                    step((s = s.apply(t, r || [])).next())
                })
            }
            "function" == typeof SuppressedError && SuppressedError;
            var u = a(97352),
                m = a(32663),
                p = a(80834);
            let h = p.z.object({
                app: p.z.object({
                    android: p.z.string().nullable(),
                    browser: p.z.string().nullable(),
                    chrome: p.z.string().nullable(),
                    edge: p.z.string().nullable(),
                    firefox: p.z.string().nullable(),
                    ios: p.z.string().nullable(),
                    linux: p.z.string().nullable(),
                    mac: p.z.string().nullable(),
                    opera: p.z.string().nullable(),
                    safari: p.z.string().nullable(),
                    windows: p.z.string().nullable()
                }),
                app_type: p.z.string(),
                category: p.z.string().nullable(),
                chains: p.z.array(p.z.string()),
                description: p.z.string().nullable(),
                desktop: p.z.object({
                    native: p.z.string().nullable(),
                    universal: p.z.string().nullable()
                }),
                homepage: p.z.string(),
                id: p.z.string(),
                image_id: p.z.string(),
                image_url: p.z.object({
                    lg: p.z.string(),
                    md: p.z.string(),
                    sm: p.z.string()
                }),
                injected: p.z.array(p.z.object({
                    injected_id: p.z.string(),
                    namespace: p.z.string()
                })).nullable(),
                metadata: p.z.object({
                    colors: p.z.object({
                        primary: p.z.string().nullable(),
                        secondary: p.z.string().nullable()
                    }),
                    shortName: p.z.string().nullable()
                }),
                mobile: p.z.object({
                    native: p.z.string().nullable(),
                    universal: p.z.string().nullable()
                }),
                name: p.z.string(),
                rdns: p.z.string().nullable(),
                sdks: p.z.array(p.z.string()),
                slug: p.z.string(),
                supported_standards: p.z.array(p.z.object({
                    id: p.z.string(),
                    standard_id: p.z.number(),
                    standard_prefix: p.z.string(),
                    title: p.z.string(),
                    url: p.z.string()
                })).optional(),
                updatedAt: p.z.string(),
                versions: p.z.array(p.z.string())
            }).strict();
            p.z.record(p.z.string(), h);
            let f = p.z.preprocess(t => t || void 0, p.z.string().optional()),
                y = /^id[0-9]{1,36}$/,
                b = p.z.preprocess(t => Array.isArray(t) && t.length > 0 ? t : void 0, p.z.array(p.z.string()).optional()),
                filterEmptyObject = t => t && Object.values(t).some(t => !!t) ? t : void 0,
                C = p.z.object({
                    chain: p.z.string(),
                    extensionLocators: p.z.array(p.z.object({
                        flag: p.z.string(),
                        value: p.z.boolean().optional().default(!0)
                    })),
                    providerInterface: p.z.string().optional(),
                    walletStandard: p.z.object({
                        features: p.z.array(p.z.string()),
                        name: p.z.string()
                    }).optional(),
                    windowLocations: p.z.array(p.z.string()).optional().refine(t => !(t && t.some(t => ["ethereum", "ethereum.providers"].includes(t))), {
                        message: "windowLocations cannot include ethereum or ethereum.providers as they are included by default",
                        path: ["config"]
                    })
                }),
                E = p.z.object({
                    alt: f,
                    imageId: f,
                    primaryColor: f,
                    spriteId: f
                }).refine(t => !t || !(t.spriteId && t.imageId) && (!!t.spriteId || !!t.imageId), {
                    message: "Only one of spriteId or imageId can be defined",
                    path: ["brand"]
                }),
                j = p.z.preprocess(t => t, p.z.object({
                    brand: E.optional(),
                    chainGroup: p.z.string().optional(),
                    chains: p.z.array(p.z.string()).optional(),
                    desktop: p.z.object({
                        chromeId: f.transform(t => {
                            if (null == t ? void 0 : t.match(/^[a-z]{32}$/)) return t;
                            if (null == t ? void 0 : t.includes("chrome.google.com/webstore/detail/")) try {
                                let r = new URL(t);
                                return r.pathname.split("/").at(-1)
                            } catch (t) {}
                        }),
                        edgeId: f.transform(t => {
                            if (null == t ? void 0 : t.match(/^[a-z]{32}$/)) return t;
                            if (null == t ? void 0 : t.includes("microsoftedge.microsoft.com/addons/detail/")) try {
                                let r = new URL(t);
                                return r.pathname.split("/").at(-1)
                            } catch (t) {}
                        }),
                        firefoxId: f.transform(t => {
                            if (!(null == t ? void 0 : t.match(/^https?:\/\//))) return t;
                            if (null == t ? void 0 : t.includes("addons.mozilla.org")) try {
                                let r = new URL(t);
                                return r.pathname.replace(/\/$/, "").split("/").at(-1)
                            } catch (t) {}
                        }),
                        native: f,
                        operaId: f,
                        safariId: f,
                        universal: f
                    }).optional().transform(filterEmptyObject),
                    eip6963Config: p.z.object({
                        rdns: p.z.string()
                    }).optional(),
                    filterFromWalletConnect: p.z.boolean().optional(),
                    group: p.z.string().optional(),
                    hardwareWallets: p.z.array(p.z.string()).optional(),
                    injectedConfig: p.z.array(C).optional(),
                    mobile: p.z.object({
                        android: (0, p.Z_)().nullish(),
                        androidId: f.transform(t => {
                            if (!(null == t ? void 0 : t.match(/^https?:\/\//))) return t;
                            if (t) try {
                                let r = new URL(t),
                                    a = r.searchParams.get("id");
                                if (a) return a
                            } catch (t) {}
                        }),
                        ios: (0, p.Z_)().nullish(),
                        iosId: f.transform(t => {
                            if (null == t ? void 0 : t.match(y)) return t;
                            if (null == t ? void 0 : t.match(/^https:\/\/[a-zA-Z0-9-]+\.apple\.com/)) try {
                                let r = new URL(t),
                                    a = r.pathname.replace(/\/$/, "").split("/").at(-1);
                                if (null == a ? void 0 : a.match(y)) return a
                            } catch (t) {}
                        }),
                        native: f,
                        universal: f
                    }).optional().transform(filterEmptyObject),
                    name: p.z.string(),
                    shortName: f,
                    showOnlyIfInstalled: p.z.boolean().optional(),
                    switchNetworkOnlyFromWallet: p.z.boolean().optional(),
                    walletConnect: p.z.object({
                        sdks: b
                    }).optional().transform(filterEmptyObject),
                    walletGroup: p.z.string().optional()
                })).transform(t => {
                    var r, a, s, l, c, d;
                    return t.group && (t.chainGroup = t.group), ((null === (r = t.mobile) || void 0 === r ? void 0 : r.iosId) || (null === (a = t.mobile) || void 0 === a ? void 0 : a.ios) === null) && (null === (s = t.mobile) || void 0 === s || delete s.ios), ((null === (l = t.mobile) || void 0 === l ? void 0 : l.androidId) || (null === (c = t.mobile) || void 0 === c ? void 0 : c.android) === null) && (null === (d = t.mobile) || void 0 === d || delete d.android), t
                }),
                I = p.z.object({
                    brand: E.optional(),
                    name: f
                }),
                O = p.z.object({
                    brand: p.z.object({
                        alt: f,
                        imageId: f,
                        primaryColor: f,
                        spriteId: f
                    }).optional().refine(t => !t || !(t.spriteId && t.imageId) && (!!t.spriteId || !!t.imageId), {
                        message: "Only one of spriteId or imageId can be defined",
                        path: ["brand"]
                    }),
                    key: p.z.string(),
                    name: p.z.string(),
                    walletOverrides: p.z.record(I).optional()
                });
            p.z.record(p.z.string(), j);
            let P = p.z.preprocess(t => t, p.z.object({
                groups: p.z.record(p.z.string(), O),
                wallets: p.z.record(p.z.string(), j)
            }));
            p.z.record(p.z.string(), O);
            var R = {
                groups: {
                    argentx: {
                        brand: {
                            alt: "ArgentX",
                            imageId: "argentx",
                            primaryColor: "#FF875B"
                        },
                        key: "argentx",
                        name: "ArgentX"
                    },
                    blocto: {
                        brand: {
                            alt: "Blocto",
                            primaryColor: "#5E678A",
                            spriteId: "blocto"
                        },
                        key: "blocto",
                        name: "Blocto"
                    },
                    brave: {
                        brand: {
                            alt: "Brave Browser",
                            primaryColor: "#4B49C6",
                            spriteId: "brave"
                        },
                        key: "brave",
                        name: "Brave"
                    },
                    coinbase: {
                        brand: {
                            alt: "Coinbase Wallet",
                            primaryColor: "#1648F9",
                            spriteId: "coinbase"
                        },
                        key: "coinbase",
                        name: "Coinbase"
                    },
                    exodus: {
                        brand: {
                            alt: "Exodus Wallet",
                            spriteId: "exodus"
                        },
                        key: "exodus",
                        name: "Exodus"
                    },
                    magiceden: {
                        brand: {
                            alt: "Magic Eden",
                            spriteId: "magiceden"
                        },
                        key: "magiceden",
                        name: "Magic Eden"
                    },
                    okxwallet: {
                        brand: {
                            alt: "OKX Wallet",
                            spriteId: "okx"
                        },
                        key: "okxwallet",
                        name: "OKX Wallet"
                    },
                    phantom: {
                        brand: {
                            alt: "Phantom",
                            primaryColor: "#4B49C6",
                            spriteId: "phantom"
                        },
                        key: "phantom",
                        name: "Phantom"
                    }
                },
                wallets: {
                    metamask: {
                        brand: {
                            alt: "MetaMask Wallet",
                            primaryColor: "#E8831D",
                            spriteId: "metamask"
                        },
                        chains: ["eip155:1"],
                        desktop: {
                            chromeId: "nkbihfbeogaeaoehlefnkodbefgpgknn",
                            edgeId: "ejbalbakoplchlghecdalmeeeajnimhm",
                            firefoxId: "ether-metamask"
                        },
                        eip6963Config: {
                            rdns: "io.metamask"
                        },
                        filterFromWalletConnect: !0,
                        injectedConfig: [{
                            chain: "evm",
                            extensionLocators: [{
                                flag: "isMetaMask",
                                value: !0
                            }, {
                                flag: "isDawn",
                                value: !1
                            }, {
                                flag: "isBraveWallet",
                                value: !1
                            }, {
                                flag: "isTrustWallet",
                                value: !1
                            }, {
                                flag: "isExodus",
                                value: !1
                            }, {
                                flag: "isZerion",
                                value: !1
                            }, {
                                flag: "isSuperb",
                                value: !1
                            }, {
                                flag: "isRabby",
                                value: !1
                            }, {
                                flag: "isOKExWallet",
                                value: !1
                            }, {
                                flag: "isOkxWallet",
                                value: !1
                            }, {
                                flag: "isRainbow",
                                value: !1
                            }, {
                                flag: "isAvalanche",
                                value: !1
                            }, {
                                flag: "isMagicEden",
                                value: !1
                            }]
                        }],
                        mobile: {
                            androidId: "io.metamask",
                            iosId: "id1438144202",
                            native: "metamask://wc",
                            universal: "https://metamask.app.link/wc"
                        },
                        name: "MetaMask",
                        shortName: "MetaMask",
                        walletConnect: {
                            sdks: ["sign_v1", "sign_v2"]
                        }
                    },
                    coinbase: {
                        brand: {
                            alt: "Coinbase Wallet",
                            primaryColor: "#1648F9",
                            spriteId: "coinbase"
                        },
                        chainGroup: "coinbase",
                        desktop: {
                            chromeId: "hnfanknocfeofbddgcijnmhnfnkdnaad"
                        },
                        eip6963Config: {
                            rdns: "com.coinbase.wallet"
                        },
                        group: "coinbase",
                        injectedConfig: [{
                            chain: "evm",
                            extensionLocators: [{
                                flag: "isCoinbaseWallet",
                                value: !0
                            }],
                            windowLocations: ["coinbaseWalletExtension"]
                        }],
                        mobile: {
                            androidId: "org.toshi",
                            iosId: "id1278383455"
                        },
                        name: "Coinbase",
                        shortName: "Coinbase Wallet"
                    },
                    coinbasesolana: {
                        brand: {
                            alt: "Coinbase Wallet",
                            primaryColor: "#1648F9",
                            spriteId: "coinbase"
                        },
                        chainGroup: "coinbase",
                        desktop: {
                            chromeId: "hnfanknocfeofbddgcijnmhnfnkdnaad"
                        },
                        group: "coinbase",
                        injectedConfig: [{
                            chain: "sol",
                            extensionLocators: [],
                            windowLocations: ["coinbaseSolana"]
                        }],
                        name: "Coinbase",
                        shortName: "Coinbase Wallet (Solana)"
                    },
                    phantom: {
                        brand: {
                            alt: "Phantom Wallet",
                            primaryColor: "#4B49C6",
                            spriteId: "phantom"
                        },
                        chainGroup: "phantom",
                        desktop: {
                            chromeId: "bfnaelmomeimhlpmgjnjophhpkkoljpa",
                            firefoxId: "phantom-app"
                        },
                        group: "phantom",
                        hardwareWallets: ["ledger"],
                        injectedConfig: [{
                            chain: "sol",
                            extensionLocators: [{
                                flag: "isPhantom",
                                value: !0
                            }, {
                                flag: "isBraveWallet",
                                value: !1
                            }, {
                                flag: "isExodus",
                                value: !1
                            }, {
                                flag: "isMagicEden",
                                value: !1
                            }, {
                                flag: "isGlow",
                                value: !1
                            }],
                            windowLocations: ["phantom.solana"]
                        }],
                        mobile: {
                            androidId: "app.phantom",
                            iosId: "id1598432977"
                        },
                        name: "Phantom"
                    },
                    phantomevm: {
                        brand: {
                            alt: "Phantom Wallet",
                            primaryColor: "#4B49C6",
                            spriteId: "phantom"
                        },
                        chainGroup: "phantom",
                        desktop: {
                            chromeId: "bfnaelmomeimhlpmgjnjophhpkkoljpa",
                            firefoxId: "phantom-app"
                        },
                        group: "phantom",
                        injectedConfig: [{
                            chain: "evm",
                            extensionLocators: [{
                                flag: "isPhantom",
                                value: !0
                            }],
                            windowLocations: ["phantom.ethereum"]
                        }],
                        mobile: {
                            androidId: "app.phantom",
                            iosId: "id1598432977"
                        },
                        name: "Phantom",
                        shortName: "Phantom (EVM)"
                    },
                    phantomledger: {
                        brand: {
                            alt: "Phantom Wallet",
                            primaryColor: "#4B49C6",
                            spriteId: "phantom"
                        },
                        chainGroup: "phantom",
                        desktop: {
                            chromeId: "bfnaelmomeimhlpmgjnjophhpkkoljpa",
                            firefoxId: "phantom-app"
                        },
                        group: "phantom",
                        injectedConfig: [{
                            chain: "sol",
                            extensionLocators: [{
                                flag: "isPhantom",
                                value: !0
                            }, {
                                flag: "isBraveWallet",
                                value: !1
                            }, {
                                flag: "isExodus",
                                value: !1
                            }, {
                                flag: "isMagicEden",
                                value: !1
                            }, {
                                flag: "isGlow",
                                value: !1
                            }],
                            windowLocations: ["phantom.solana"]
                        }],
                        mobile: {
                            androidId: "app.phantom",
                            iosId: "id1598432977"
                        },
                        name: "Phantom",
                        shortName: "Phantom (Ledger)"
                    },
                    walletconnect: {
                        brand: {
                            alt: "WalletConnect",
                            primaryColor: "#3182CE",
                            spriteId: "walletconnect"
                        },
                        mobile: {
                            androidId: "enable-android",
                            iosId: "id1438144202"
                        },
                        name: "WalletConnect"
                    },
                    argentx: {
                        brand: {
                            alt: "Argent X Wallet",
                            primaryColor: "#FF875B",
                            spriteId: "argentx"
                        },
                        desktop: {
                            chromeId: "dlcobpjiigpikoobohmabehhmhfoodbb",
                            edgeId: "ajcicjlkibolbeaaagejfhnofogocgcj",
                            firefoxId: "argent-x"
                        },
                        mobile: {
                            androidId: "im.argent.contractwalletclient",
                            iosId: "id1358741926"
                        },
                        name: "Argent X"
                    },
                    myalgo: {
                        brand: {
                            alt: "MyAlgo Wallet",
                            spriteId: "myalgo"
                        },
                        name: "MyAlgo"
                    },
                    blocto: {
                        brand: {
                            alt: "Blocto Wallet",
                            primaryColor: "#5E678A",
                            spriteId: "blocto"
                        },
                        chainGroup: "blocto",
                        group: "blocto",
                        mobile: {
                            androidId: "com.portto.blocto",
                            iosId: "id1481181682"
                        },
                        name: "Blocto",
                        shortName: "Blocto (Flow)"
                    },
                    solflare: {
                        brand: {
                            alt: "Solflare Wallet",
                            primaryColor: "#FC7227",
                            spriteId: "solflare"
                        },
                        desktop: {
                            chromeId: "bhhhlbepdkbapadjdnnojkbgioiodbic"
                        },
                        hardwareWallets: ["ledger"],
                        injectedConfig: [{
                            chain: "sol",
                            extensionLocators: [{
                                flag: "isSolflare",
                                value: !0
                            }],
                            windowLocations: ["solflare"]
                        }],
                        mobile: {
                            androidId: "com.solflare.mobile",
                            iosId: "id1580902717"
                        },
                        name: "Solflare"
                    },
                    braavos: {
                        brand: {
                            alt: "Braavos Wallet",
                            primaryColor: "#FABB38",
                            spriteId: "braavos"
                        },
                        desktop: {
                            chromeId: "jnlgamecbpmbajjfhmmmlhejkemejdma",
                            edgeId: "hkkpjehhcnhgefhbdcgfkeegglpjchdc",
                            firefoxId: "braavos-wallet"
                        },
                        mobile: {
                            androidId: "app.braavos.wallet",
                            iosId: "id1636013523"
                        },
                        name: "Braavos"
                    },
                    trust: {
                        brand: {
                            alt: "Trust Wallet",
                            imageId: "7677b54f-3486-46e2-4e37-bf8747814f00",
                            primaryColor: "#0500FF"
                        },
                        chains: ["eip155:1"],
                        desktop: {
                            chromeId: "egjidjbpglichdcondbcbdnbeeppgdph"
                        },
                        eip6963Config: {
                            rdns: "com.trustwallet.app"
                        },
                        filterFromWalletConnect: !0,
                        injectedConfig: [{
                            chain: "evm",
                            extensionLocators: [{
                                flag: "isTrustWallet",
                                value: !0
                            }],
                            windowLocations: ["trustWallet"]
                        }],
                        mobile: {
                            androidId: "com.wallet.crypto.trustapp",
                            iosId: "id1288339409",
                            native: "trust://wc"
                        },
                        name: "Trust",
                        shortName: "Trust",
                        walletConnect: {
                            sdks: ["sign_v1", "sign_v2", "auth_v1"]
                        }
                    },
                    rainbow: {
                        brand: {
                            alt: "Rainbow Wallet",
                            primaryColor: "#001e59",
                            spriteId: "rainbow"
                        },
                        chains: ["eip155:1", "eip155:10", "eip155:137", "eip155:42161", "eip155:56", "eip155:7777777", "eip155:8453"],
                        desktop: {
                            chromeId: "opfgelmcmbiajamepnmloijbpoleiama",
                            edgeId: "cpojfbodiccabbabgimdeohkkpjfpbnf",
                            firefoxId: "rainbow-extension"
                        },
                        eip6963Config: {
                            rdns: "me.rainbow"
                        },
                        filterFromWalletConnect: !0,
                        injectedConfig: [{
                            chain: "evm",
                            extensionLocators: [{
                                flag: "isRainbow",
                                value: !0
                            }],
                            windowLocations: ["rainbow"]
                        }],
                        mobile: {
                            androidId: "me.rainbow",
                            iosId: "id1457119021",
                            native: "rainbow://wc",
                            universal: "https://rnbwapp.com/wc"
                        },
                        name: "Rainbow",
                        walletConnect: {
                            sdks: ["sign_v1", "sign_v2", "auth_v1"]
                        }
                    },
                    dapper: {
                        brand: {
                            alt: "Dapper Wallet",
                            primaryColor: "#762FBE",
                            spriteId: "dapper"
                        },
                        mobile: {
                            android: "fake-to-get-dapper-to-appear",
                            ios: "fake-to-get-dapper-to-appear"
                        },
                        name: "Dapper"
                    },
                    slope: {
                        brand: {
                            alt: "Slope Wallet",
                            primaryColor: "#6E66FA",
                            spriteId: "slope"
                        },
                        desktop: {
                            chromeId: "pocmplpaccanhmnllbbkpgfliimjljgo"
                        },
                        mobile: {
                            androidId: "com.wd.wallet",
                            iosId: "id1574624530"
                        },
                        name: "Slope"
                    },
                    glow: {
                        brand: {
                            alt: "Glow Wallet",
                            spriteId: "glow"
                        },
                        desktop: {
                            chromeId: "ojbcfhjmpigfobfclfflafhblgemeidi",
                            edgeId: "niihfokdlimbddhfmngnplgfcgpmlido",
                            firefoxId: "glow-solana-wallet"
                        },
                        hardwareWallets: ["ledger"],
                        injectedConfig: [{
                            chain: "sol",
                            extensionLocators: [{
                                flag: "isGlow",
                                value: !0
                            }],
                            windowLocations: ["glowSolana"]
                        }],
                        name: "Glow"
                    },
                    lilico: {
                        brand: {
                            alt: "Lilico Wallet",
                            spriteId: "lilico"
                        },
                        desktop: {
                            chromeId: "hpclkefagolihohboafpheddmmgdffjm"
                        },
                        filterFromWalletConnect: !0,
                        name: "Lilico"
                    },
                    magicemailotp: {
                        brand: {
                            alt: "Magic Email OTP",
                            spriteId: "magiclink"
                        },
                        name: "Magic Email OTP"
                    },
                    magiclink: {
                        brand: {
                            alt: "Magic Link",
                            spriteId: "magiclink"
                        },
                        name: "Magic Link"
                    },
                    magicsocial: {
                        brand: {
                            alt: "Magic Social",
                            spriteId: "magiclink"
                        },
                        name: "Magic Social"
                    },
                    magiceden: {
                        brand: {
                            alt: "Magic Eden",
                            spriteId: "magiceden"
                        },
                        chainGroup: "magiceden",
                        desktop: {
                            chromeId: "mkpegjkblkkefacfnmkajcjmabijhclg"
                        },
                        group: "magiceden",
                        injectedConfig: [{
                            chain: "evm",
                            extensionLocators: [{
                                flag: "isMagicEden",
                                value: !0
                            }],
                            windowLocations: ["magicEden.ethereum"]
                        }],
                        name: "Magic Eden"
                    },
                    magicedensol: {
                        brand: {
                            alt: "Magic Eden",
                            spriteId: "magiceden"
                        },
                        chainGroup: "magiceden",
                        desktop: {
                            chromeId: "mkpegjkblkkefacfnmkajcjmabijhclg"
                        },
                        group: "magiceden",
                        injectedConfig: [{
                            chain: "sol",
                            extensionLocators: [{
                                flag: "isMagicEden",
                                value: !0
                            }],
                            windowLocations: ["magicEden.solana"]
                        }],
                        name: "Magic Eden",
                        shortName: "Magic Eden (Solana)"
                    },
                    exodus: {
                        brand: {
                            alt: "Exodus Wallet",
                            imageId: "4c16cad4-cac9-4643-6726-c696efaf5200"
                        },
                        chainGroup: "exodus",
                        chains: ["eip155:1", "eip155:137", "eip155:43114", "eip155:56", "solana:4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZ"],
                        desktop: {
                            chromeId: "aholpfdialjgjfhomihkjbmgjidlcdno"
                        },
                        filterFromWalletConnect: !0,
                        group: "exodus",
                        mobile: {
                            androidId: "exodusmovement.exodus",
                            iosId: "id1414384820",
                            native: "exodus://wc"
                        },
                        name: "Exodus",
                        walletConnect: {
                            sdks: ["sign_v1", "sign_v2", "auth_v1"]
                        }
                    },
                    exodusevm: {
                        brand: {
                            alt: "Exodus Wallet",
                            spriteId: "exodus"
                        },
                        chainGroup: "exodus",
                        chains: ["eip155:1", "eip155:137", "eip155:43114", "eip155:56"],
                        desktop: {
                            chromeId: "aholpfdialjgjfhomihkjbmgjidlcdno"
                        },
                        filterFromWalletConnect: !0,
                        group: "exodus",
                        injectedConfig: [{
                            chain: "evm",
                            extensionLocators: [{
                                flag: "isExodus",
                                value: !0
                            }]
                        }],
                        mobile: {
                            androidId: "exodusmovement.exodus",
                            iosId: "id1414384820",
                            native: "exodus://wc"
                        },
                        name: "Exodus",
                        shortName: "Exodus Wallet (EVM)",
                        walletConnect: {
                            sdks: ["sign_v2", "auth_v1"]
                        }
                    },
                    exodussol: {
                        brand: {
                            alt: "Exodus Wallet",
                            spriteId: "exodus"
                        },
                        chainGroup: "exodus",
                        desktop: {
                            chromeId: "aholpfdialjgjfhomihkjbmgjidlcdno"
                        },
                        group: "exodus",
                        injectedConfig: [{
                            chain: "sol",
                            extensionLocators: [{
                                flag: "isPhantom",
                                value: !0
                            }, {
                                flag: "isExodus",
                                value: !0
                            }],
                            windowLocations: ["exodus.solana"]
                        }],
                        mobile: {
                            androidId: "exodusmovement.exodus",
                            iosId: "id1414384820"
                        },
                        name: "Exodus",
                        shortName: "Exodus Wallet (Solana)"
                    },
                    okxwallet: {
                        brand: {
                            alt: "OKX Wallet",
                            spriteId: "okx"
                        },
                        chainGroup: "okxwallet",
                        chains: ["eip155:1", "eip155:137", "eip155:43114", "eip155:56", "eip155:66"],
                        desktop: {
                            chromeId: "mcohilncbfahbmgdjkbpemcciiolgcge"
                        },
                        eip6963Config: {
                            rdns: "com.okex.wallet"
                        },
                        filterFromWalletConnect: !0,
                        group: "okxwallet",
                        injectedConfig: [{
                            chain: "evm",
                            extensionLocators: [{
                                flag: "isOKExWallet",
                                value: !0
                            }, {
                                flag: "isOkxWallet",
                                value: !0
                            }],
                            windowLocations: ["okxwallet"]
                        }],
                        mobile: {
                            androidId: "com.okinc.okex.gp",
                            iosId: "id1327268470",
                            native: "okex://main/wc"
                        },
                        name: "OKX",
                        shortName: "OKX Wallet",
                        walletConnect: {
                            sdks: ["sign_v2"]
                        }
                    },
                    backpack: {
                        brand: {
                            alt: "Backpack",
                            primaryColor: "#e43c3c",
                            spriteId: "backpack"
                        },
                        desktop: {
                            chromeId: "aflkmfhebedbjioipglgcbcmnbpgliof"
                        },
                        name: "Backpack (EVM)"
                    }
                }
            };
            let useWalletBookCdn = () => {
                    let [t, r] = (0, u.useState)({});
                    return (0, u.useEffect)(() => {
                        __awaiter(void 0, void 0, void 0, function*() {
                            let t = getWalletBookCdnUrl(),
                                a = yield(0, m.MB)(() => __awaiter(void 0, void 0, void 0, function*() {
                                    let r = yield fetch(t, {
                                        mode: "cors"
                                    });
                                    if (r.ok) {
                                        let t = yield r.json();
                                        try {
                                            let r = P.parse(t);
                                            return r
                                        } catch (r) {
                                            throw l.error("Error parsing wallet book data", r, t), r
                                        }
                                    }
                                    throw Error(`Failed to fetch wallet book data from ${t} with status code ${r.status}`)
                                }), {
                                    fallbackValue: P.parse(R),
                                    logger: l.createLogger("useWalletBookCdn"),
                                    maxRetries: 3,
                                    retryStrategy: "timeout-and-rejection",
                                    timeoutMs: 3e4
                                });
                            r(a)
                        })
                    }, []), t
                },
                F = (0, u.createContext)({}),
                WalletBookContextProvider = ({
                    walletBook: t,
                    children: r
                }) => (0, u.createElement)(F.Provider, {
                    value: {
                        walletBook: t
                    }
                }, r),
                useWalletBookContext = () => {
                    let t = (0, u.useContext)(F);
                    if (void 0 === t) throw Error("useWalletBookContext must be used within a WalletBookContextProvider");
                    return t
                },
                WalletIcon = t => {
                    var {
                        walletKey: r,
                        children: a
                    } = t, s = __rest(t, ["walletKey", "children"]);
                    let {
                        walletBook: l
                    } = useWalletBookContext(), c = findWalletBookWallet(l, r), [d, m] = (0, u.useState)(!1), p = getWalletIconUrl(l, r), h = getDefaultWalletIconUrl();
                    return c && c.brand && p ? (0, u.createElement)("img", Object.assign(Object.assign({
                        "data-testid": `wallet-icon-${r}`
                    }, s), {
                        alt: c.brand.alt,
                        onError: () => {
                            m(!0)
                        },
                        src: d ? h : p
                    }), a) : (0, u.createElement)(u.Fragment, {}, a)
                },
                BrandIcon = t => {
                    var {
                        brand: r,
                        walletKey: a
                    } = t, s = __rest(t, ["brand", "walletKey"]);
                    let [l, c] = (0, u.useState)(!1), d = getBrandIconUrl(r), m = getDefaultWalletIconUrl();
                    return d ? (0, u.createElement)("img", Object.assign(Object.assign({
                        "data-testid": `wallet-icon-${a}`
                    }, s), {
                        alt: r.alt,
                        onError: () => {
                            c(!0)
                        },
                        src: l ? m : d
                    })) : (0, u.createElement)(u.Fragment, {})
                }
        },
        47969: function(t, r, a) {
            "use strict";

            function __awaiter(t, r, a, s) {
                return new(a || (a = Promise))(function(l, c) {
                    function fulfilled(t) {
                        try {
                            step(s.next(t))
                        } catch (t) {
                            c(t)
                        }
                    }

                    function rejected(t) {
                        try {
                            step(s.throw(t))
                        } catch (t) {
                            c(t)
                        }
                    }

                    function step(t) {
                        var r;
                        t.done ? l(t.value) : ((r = t.value) instanceof a ? r : new a(function(t) {
                            t(r)
                        })).then(fulfilled, rejected)
                    }
                    step((s = s.apply(t, r || [])).next())
                })
            }

            function __classPrivateFieldGet(t, r, a, s) {
                if ("a" === a && !s) throw TypeError("Private accessor was defined without a getter");
                if ("function" == typeof r ? t !== r || !s : !r.has(t)) throw TypeError("Cannot read private member from an object whose class did not declare it");
                return "m" === a ? s : "a" === a ? s.call(t) : s ? s.value : r.get(t)
            }
            a.d(r, {
                VN: function() {
                    return ProviderLookup
                },
                VY: function() {
                    return WalletConnectorBase
                },
                nb: function() {
                    return eventListenerHandlers
                },
                bt: function() {
                    return getChainInfo
                },
                bW: function() {
                    return getDeepLink
                },
                GO: function() {
                    return getRpcUrlForChain
                },
                _s: function() {
                    return getWalletConnectorByKey
                },
                nM: function() {
                    return isAccountAbstractionConnector
                },
                nQ: function() {
                    return isBitcoinConnector
                },
                aw: function() {
                    return isBloctoConnector
                },
                EZ: function() {
                    return isEmailOTPWalletConnector
                },
                dE: function() {
                    return isEmailWalletConnector
                },
                MQ: function() {
                    return isEmbeddedConnector
                },
                UD: function() {
                    return isHardwareWalletConnector
                },
                EN: function() {
                    return isMagicConnector
                },
                q4: function() {
                    return isPasskeyWalletConnector
                },
                tI: function() {
                    return isPhantomRedirectConnector
                },
                Wr: function() {
                    return isSameAddress
                },
                R9: function() {
                    return isSmartWalletConnector
                },
                be: function() {
                    return isSocialWalletConnector
                },
                kg: function() {
                    return u
                },
                rB: function() {
                    return normalizeWalletName
                },
                ze: function() {
                    return performPlatformSpecificConnectionMethod
                }
            }), "function" == typeof SuppressedError && SuppressedError;
            var s, l = a(95569),
                c = a(84310);
            let WalletBookSingleton = class WalletBookSingleton {
                constructor(t) {
                    this.walletBook = t
                }
                static getOrCreate(t) {
                    var r;
                    return (null === (r = WalletBookSingleton.instance) || void 0 === r ? void 0 : r.walletBook) || (WalletBookSingleton.instance = new WalletBookSingleton(t)), WalletBookSingleton.instance
                }
            };
            let WalletConnectorBase = class WalletConnectorBase extends l.Z {
                constructor(t) {
                    if (super(), this.chainRpcProviders = void 0, s.set(this, []), this.didSetup = !1, this.canConnectViaEmail = !1, this.canConnectViaCustodialService = !1, this.canConnectViaQrCode = !1, this.canConnectViaSocial = !1, this.getWeb3Provider = this.getWalletClient, this.getRpcProvider = this.getPublicClient, this.isEmbeddedWallet = !1, this.isWalletConnect = !1, this.overrideKey = void 0, this.providerResources = void 0, this.switchNetworkOnlyFromWallet = void 0, this.isInitialized = !0, this.constructorProps = t, this._walletBookInstance = WalletBookSingleton.getOrCreate(t.walletBook), void 0 === this.walletBook) throw Error("WalletConnectorBase was not called with super(props) and is missing wallet-book")
                }
                extend(t) {
                    if (__classPrivateFieldGet(this, s, "f").includes(t.name)) throw Error(`You can only register a single extension of: ${t.name}`);
                    __classPrivateFieldGet(this, s, "f").push(t.name), t.extend(this)
                }
                initEventListener() {
                    this.didSetup || (this.didSetup = !0, this.setupEventListeners())
                }
                get walletBook() {
                    return this._walletBookInstance.walletBook
                }
                filter() {
                    try {
                        return (0, c.MO)(this.walletBook, this.key), !0
                    } catch (t) {
                        return !1
                    }
                }
                connect() {
                    return __awaiter(this, void 0, void 0, function*() {
                        yield this.fetchPublicAddress()
                    })
                }
                endSession() {
                    return Promise.resolve()
                }
                fetchPublicAddress(t) {
                    return Promise.resolve(void 0)
                }
                getAdditionalAddresses(t) {
                    return Promise.resolve([])
                }
                setAdditionalAddresses(t, r) {
                    return Promise.resolve()
                }
                getBalance() {
                    return Promise.resolve(void 0)
                }
                getConnectedAccounts() {
                    return Promise.resolve([])
                }
                getDeepLink() {}
                getNetwork() {
                    return Promise.resolve(void 0)
                }
                getNameService() {
                    return Promise.resolve(void 0)
                }
                getPublicClient() {
                    return Promise.resolve(void 0)
                }
                getSession() {
                    return __awaiter(this, void 0, void 0, function*() {
                        return Promise.resolve()
                    })
                }
                getSigner() {
                    return Promise.resolve(void 0)
                }
                getWalletClient() {}
                init() {
                    return Promise.resolve()
                }
                isInstalledOnBrowser() {
                    return !1
                }
                get key() {
                    return this.overrideKey || this.name.replace(/\W/g, "").toLowerCase()
                }
                getMobileOrInstalledWallet() {
                    return this
                }
                proveOwnership(t) {
                    return this.signMessage(t)
                }
                setupEventListeners() {}
                signMessage(t) {
                    return Promise.resolve(void 0)
                }
                supportsNetworkSwitching() {
                    return !1
                }
                switchNetwork({
                    networkName: t,
                    networkChainId: r
                }) {
                    return Promise.resolve(void 0)
                }
                teardownEventListeners() {}
                getSupportedNetworks() {
                    return Promise.resolve(void 0)
                }
                setVerifiedCredentials(t) {}
            };
            s = new WeakMap;
            var d = a(71311);
            let u = new d.Y("WalletConnector"),
                ProviderLookup = (t, r) => {
                    if (0 !== r.length) return t.find(t => {
                        let a = r.every(r => {
                            let a = (null == t ? void 0 : t[r.flag]) || !1;
                            return a === r.value
                        });
                        return !0 === a
                    })
                },
                m = [{
                    blockchainName: "Algorand",
                    displayName: "Algorand",
                    name: "algorand",
                    symbol: "ALGO"
                }, {
                    blockchainName: "Bitcoin",
                    displayName: "Bitcoin",
                    name: "bitcoin",
                    symbol: "BTC"
                }, {
                    blockchainName: "Ethereum",
                    displayName: "EVM",
                    name: "evm",
                    symbol: "ETH"
                }, {
                    blockchainName: "Flow",
                    displayName: "Flow",
                    name: "flow",
                    symbol: "FLOW"
                }, {
                    blockchainName: "Solana",
                    displayName: "Solana",
                    name: "solana",
                    symbol: "SOL"
                }, {
                    blockchainName: "Starknet",
                    displayName: "Starknet",
                    name: "starknet",
                    symbol: "ETH"
                }, {
                    blockchainName: "Cosmos",
                    displayName: "Cosmos",
                    name: "cosmos",
                    symbol: "COSMOS"
                }, {
                    blockchainName: "Bitcoin",
                    displayName: "Bitcoin",
                    name: "bitcoin",
                    symbol: "BTC"
                }],
                p = {
                    eip155: "evm",
                    eth: "evm",
                    stark: "starknet"
                },
                getChainInfo = t => {
                    var r;
                    let a = t.toLowerCase(),
                        s = null !== (r = p[a]) && void 0 !== r ? r : a,
                        l = m.find(t => t.name === s || t.symbol.toLocaleLowerCase() === s);
                    if (l) return l
                },
                isEmailOTPWalletConnector = t => !!t.verifyOneTimePassword,
                isEmailWalletConnector = t => !!t.clearEmail,
                shouldLowercaseAddress = t => ["eip155", "flow", "evm", "eth", "avax", "matic"].includes(t.toLowerCase()),
                normalizeAddress = (t, r) => {
                    t.startsWith("0x") && (t = t.slice(2));
                    let a = shouldLowercaseAddress(r) ? t.toLowerCase() : t;
                    return a
                },
                isSameAddress = (t, r, a) => normalizeAddress(t, a) === normalizeAddress(r, a),
                isSocialWalletConnector = t => !!t.canConnectViaSocial;
            a(97115).Buffer;
            let filterWalletsByKey = (t, r) => r.flatMap(r => t.find(t => walletHasKey(t, r))).filter(isWalletConnector),
                walletHasKey = (t, r) => t.key === r,
                isWalletConnector = t => !!t,
                getWalletConnectorByKey = (t, r) => filterWalletsByKey(t, [r]).length > 0 ? filterWalletsByKey(t, [r])[0] : null,
                normalizeWalletName = t => t.replace(/\W/g, "").toLowerCase();
            var h = a(32663);
            let getConnectionDeepLink = (t, r, a) => {
                    if ((0, h.Dt)()) return t;
                    let s = getRegularDeepLink(t, r, a);
                    return `${s}?uri=${encodeURIComponent(t)}`
                },
                getRegularDeepLink = (t, r, a) => {
                    var s, l, c, d;
                    if ((0, h.Dt)()) return t.split("?")[0];
                    let u = (0, h.tq)() ? "mobile" : "desktop";
                    return ("native" === a ? (null === (s = r[u]) || void 0 === s ? void 0 : s.native) || (null === (l = r[u]) || void 0 === l ? void 0 : l.universal) : (null === (c = r[u]) || void 0 === c ? void 0 : c.universal) || (null === (d = r[u]) || void 0 === d ? void 0 : d.native)) || ""
                },
                getDeepLink = ({
                    mode: t,
                    uri: r = "",
                    metadata: a,
                    preference: s
                }) => {
                    switch (t) {
                        case "connection":
                            return getConnectionDeepLink(r, a, s);
                        case "regular":
                            return getRegularDeepLink(r, a, s)
                    }
                },
                performPlatformSpecificConnectionMethod = (t, r, a, s) => {
                    var l, c, d;
                    let u = getDeepLink({
                        metadata: r,
                        mode: "connection",
                        preference: s,
                        uri: t
                    });
                    (0, h.tq)() ? window.location.href = u: ((null === (l = r.desktop) || void 0 === l ? void 0 : l.native) && (null === (c = a.onDesktopUri) || void 0 === c || c.call(a, u)), null === (d = a.onDisplayUri) || void 0 === d || d.call(a, t))
                },
                isEmbeddedConnector = t => !!t.isEmbeddedWallet,
                isMagicConnector = t => ["magicemailotp", "magicsocial"].includes(t.key),
                isBloctoConnector = t => ["bloctoemail", "bloctoevm", "Blocto"].includes(t.key),
                isPasskeyWalletConnector = t => !!t.getWebAuthnAttestation,
                isSmartWalletConnector = t => !!t.setEoaConnector,
                isAccountAbstractionConnector = t => null != t && "object" == typeof t && "canSponsorTransactionGas" in t,
                isBitcoinConnector = t => !!(null == t ? void 0 : t.sendBitcoin),
                isHardwareWalletConnector = t => "canConnectWithHardwareWallet" in t,
                isHex = t => !!t && "string" == typeof t && /^0x[0-9a-fA-F]*$/.test(t),
                eventListenerHandlers = t => ({
                    handleAccountChange: r => __awaiter(void 0, void 0, void 0, function*() {
                        if (0 === r.length) {
                            t.emit("disconnect");
                            return
                        }
                        t.emit("accountChange", {
                            accounts: r
                        })
                    }),
                    handleChainChange: r => __awaiter(void 0, void 0, void 0, function*() {
                        let a = isHex(r) ? parseInt(r, 16).toString() : r.toString();
                        t.emit("chainChange", {
                            chain: a
                        })
                    }),
                    handleDisconnect: r => __awaiter(void 0, void 0, void 0, function*() {
                        (null == r ? void 0 : r.code) !== 1013 && t.emit("disconnect")
                    })
                }),
                isPhantomRedirectConnector = t => "phantom" === t.key && void 0 !== t.extractSignature,
                getRpcUrlForChain = ({
                    networks: t,
                    chainId: r
                }) => {
                    var a;
                    let s = t.find(t => t.chainId === r);
                    if (s) return (null === (a = s.privateCustomerRpcUrls) || void 0 === a ? void 0 : a[0]) || s.rpcUrls[0]
                }
        },
        27122: function(t, r, a) {
            "use strict";
            async function wait(t) {
                return new Promise(r => setTimeout(r, t))
            }
            async function retryAsync(t, {
                attempts: r,
                interval: a,
                onError: s,
                operation: l,
                operationExtra: c,
                logger: d
            }) {
                let u, m = 0;
                for (; m < r;) try {
                    m += 1;
                    let a = await t({
                        attempt: m,
                        isFinalAttempt: m === r
                    });
                    return d.debug({
                        operation: l,
                        extra: c,
                        attempt: m,
                        maxAttempts: r
                    }, `RetryAsync: Completed ${l} using retryAsync`), a
                } catch (t) {
                    null == s || s({
                        error: t,
                        currentTry: m
                    }), u = t, m < r && (d.warn({
                        operation: l,
                        extra: c,
                        attempt: m,
                        maxAttempts: r,
                        err: t
                    }, `RetryAsync: One of the attempts of ${l} failed whilst using retryAsync`), await wait(a))
                }
                throw d.warn({
                    operation: l,
                    extra: c,
                    attempt: m,
                    maxAttempts: r,
                    err: u
                }, `RetryAsync: The ${l} failed all attempts whilst using retryAsync`), u || Error(`Invalid attempts: ${r}`)
            }
            a.d(r, {
                xK: function() {
                    return retryAsync
                }
            })
        },
        83789: function(t, r, a) {
            "use strict";
            a.d(r, {
                Z: function() {
                    return _createAggregator
                }
            });
            var _arrayAggregator = function(t, r, a, s) {
                    for (var l = -1, c = null == t ? 0 : t.length; ++l < c;) {
                        var d = t[l];
                        r(s, d, a(d), t)
                    }
                    return s
                },
                s = a(14354),
                _baseAggregator = function(t, r, a, l) {
                    return (0, s.Z)(t, function(t, s, c) {
                        r(l, t, a(t), c)
                    }), l
                },
                l = a(16651),
                c = a(49756),
                _createAggregator = function(t, r) {
                    return function(a, s) {
                        var d = (0, c.Z)(a) ? _arrayAggregator : _baseAggregator,
                            u = r ? r() : {};
                        return d(a, t, (0, l.Z)(s, 2), u)
                    }
                }
        },
        88924: function(t, r, a) {
            "use strict";
            var s = a(7812),
                l = a(94829),
                c = a(69502),
                d = a(49756),
                u = a(51086),
                m = a(30415),
                p = a(32925),
                h = a(97291),
                f = Object.prototype.hasOwnProperty;
            r.Z = function(t) {
                if (null == t) return !0;
                if ((0, u.Z)(t) && ((0, d.Z)(t) || "string" == typeof t || "function" == typeof t.splice || (0, m.Z)(t) || (0, h.Z)(t) || (0, c.Z)(t))) return !t.length;
                var r = (0, l.Z)(t);
                if ("[object Map]" == r || "[object Set]" == r) return !t.size;
                if ((0, p.Z)(t)) return !(0, s.Z)(t).length;
                for (var a in t)
                    if (f.call(t, a)) return !1;
                return !0
            }
        },
        62323: function(t, r, a) {
            "use strict";
            var s = a(58249),
                l = (0, a(83789).Z)(function(t, r, a) {
                    (0, s.Z)(t, a, r)
                });
            r.Z = l
        },
        79548: function(t, r, a) {
            "use strict";
            a.d(r, {
                ZP: function() {
                    return pMap
                }
            });
            var s = a(51662);
            let l = /\s+at.*[(\s](.*)\)?/,
                c = /^(?:(?:(?:node|node:[\w/]+|(?:(?:node:)?internal\/[\w/]*|.*node_modules\/(?:babel-polyfill|pirates)\/.*)?\w+)(?:\.js)?:\d+:\d+)|native)/,
                d = void 0 === s.homedir ? "" : s.homedir().replace(/\\/g, "/"),
                cleanInternalStack = t => t.replace(/\s+at .*aggregate-error\/index.js:\d+:\d+\)?/g, "");
            let AggregateError = class AggregateError extends Error {#
                e;
                name = "AggregateError";
                constructor(t) {
                    if (!Array.isArray(t)) throw TypeError(`Expected input to be an Array, got ${typeof t}`);
                    let r = (t = t.map(t => t instanceof Error ? t : null !== t && "object" == typeof t ? Object.assign(Error(t.message), t) : Error(t))).map(t => "string" == typeof t.stack && t.stack.length > 0 ? cleanInternalStack(function(t, {
                        pretty: r = !1,
                        basePath: a
                    } = {}) {
                        let s = a && RegExp(`(at | \\()${function(t){if("string"!=typeof t)throw TypeError("Expected a string");return t.replace(/[|\\{}()[\]^$+*?.]/g,"\\$&").replace(/-/g,"\\x2d")}(a.replace(/\\/g,"/"))}`, "g");
                        if ("string" == typeof t) return t.replace(/\\/g, "/").split("\n").filter(t => {
                            let r = t.match(l);
                            if (null === r || !r[1]) return !0;
                            let a = r[1];
                            return !(a.includes(".app/Contents/Resources/electron.asar") || a.includes(".app/Contents/Resources/default_app.asar") || a.includes("node_modules/electron/dist/resources/electron.asar") || a.includes("node_modules/electron/dist/resources/default_app.asar")) && !c.test(a)
                        }).filter(t => "" !== t.trim()).map(t => (s && (t = t.replace(s, "$1")), r && (t = t.replace(l, (t, r) => t.replace(r, r.replace(d, "~")))), t)).join("\n")
                    }(t.stack)) : String(t)).join("\n");
                    super(r = "\n" + function(t, r = 1, a = {}) {
                        let {
                            indent: s = " ",
                            includeEmptyLines: l = !1
                        } = a;
                        if ("string" != typeof t) throw TypeError(`Expected \`input\` to be a \`string\`, got \`${typeof t}\``);
                        if ("number" != typeof r) throw TypeError(`Expected \`count\` to be a \`number\`, got \`${typeof r}\``);
                        if (r < 0) throw RangeError(`Expected \`count\` to be at least 0, got \`${r}\``);
                        if ("string" != typeof s) throw TypeError(`Expected \`options.indent\` to be a \`string\`, got \`${typeof s}\``);
                        return 0 === r ? t : t.replace(l ? /^/gm : /^(?!\s*$)/gm, s.repeat(r))
                    }(r, 4)), this.#e = t
                }
                get errors() {
                    return this.#e.slice()
                }
            };
            let AbortError = class AbortError extends Error {
                constructor(t) {
                    super(), this.name = "AbortError", this.message = t
                }
            };
            let getDOMException = t => void 0 === globalThis.DOMException ? new AbortError(t) : new DOMException(t),
                getAbortedReason = t => {
                    let r = void 0 === t.reason ? getDOMException("This operation was aborted.") : t.reason;
                    return r instanceof Error ? r : getDOMException(r)
                };
            async function pMap(t, r, {
                concurrency: a = Number.POSITIVE_INFINITY,
                stopOnError: s = !0,
                signal: l
            } = {}) {
                return new Promise((c, d) => {
                    if (void 0 === t[Symbol.iterator] && void 0 === t[Symbol.asyncIterator]) throw TypeError(`Expected \`input\` to be either an \`Iterable\` or \`AsyncIterable\`, got (${typeof t})`);
                    if ("function" != typeof r) throw TypeError("Mapper function is required");
                    if (!((Number.isSafeInteger(a) || a === Number.POSITIVE_INFINITY) && a >= 1)) throw TypeError(`Expected \`concurrency\` to be an integer from 1 and up or \`Infinity\`, got \`${a}\` (${typeof a})`);
                    let m = [],
                        p = [],
                        h = new Map,
                        f = !1,
                        y = !1,
                        b = !1,
                        C = 0,
                        E = 0,
                        j = void 0 === t[Symbol.iterator] ? t[Symbol.asyncIterator]() : t[Symbol.iterator](),
                        reject = t => {
                            f = !0, y = !0, d(t)
                        };
                    l && (l.aborted && reject(getAbortedReason(l)), l.addEventListener("abort", () => {
                        reject(getAbortedReason(l))
                    }));
                    let next = async () => {
                        if (y) return;
                        let t = await j.next(),
                            a = E;
                        if (E++, t.done) {
                            if (b = !0, 0 === C && !y) {
                                if (!s && p.length > 0) {
                                    reject(new AggregateError(p));
                                    return
                                }
                                if (y = !0, 0 === h.size) {
                                    c(m);
                                    return
                                }
                                let t = [];
                                for (let [r, a] of m.entries()) h.get(r) !== u && t.push(a);
                                c(t)
                            }
                            return
                        }
                        C++, (async () => {
                            try {
                                let s = await t.value;
                                if (y) return;
                                let l = await r(s, a);
                                l === u && h.set(a, l), m[a] = l, C--, await next()
                            } catch (t) {
                                if (s) reject(t);
                                else {
                                    p.push(t), C--;
                                    try {
                                        await next()
                                    } catch (t) {
                                        reject(t)
                                    }
                                }
                            }
                        })()
                    };
                    (async () => {
                        for (let t = 0; t < a; t++) {
                            try {
                                await next()
                            } catch (t) {
                                reject(t);
                                break
                            }
                            if (b || f) break
                        }
                    })()
                })
            }
            let u = Symbol("skip")
        },
        52814: function(t, r, a) {
            "use strict";

            function _typeof(t) {
                return (_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                    return typeof t
                } : function(t) {
                    return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t
                })(t)
            }
            a.d(r, {
                Z: function() {
                    return tinycolor
                }
            });
            var s, l, c, d = /^\s+/,
                u = /\s+$/;

            function tinycolor(t, r) {
                if (r = r || {}, (t = t || "") instanceof tinycolor) return t;
                if (!(this instanceof tinycolor)) return new tinycolor(t, r);
                var a, s, l, c, p, f, y, b, C, E, j, I, O, P, R, F, W, M, D, L, U = (s = {
                    r: 0,
                    g: 0,
                    b: 0
                }, l = 1, c = null, p = null, f = null, y = !1, b = !1, "string" == typeof(a = t) && (a = function(t) {
                    t = t.replace(d, "").replace(u, "").toLowerCase();
                    var r, a = !1;
                    if (m[t]) t = m[t], a = !0;
                    else if ("transparent" == t) return {
                        r: 0,
                        g: 0,
                        b: 0,
                        a: 0,
                        format: "name"
                    };
                    return (r = h.rgb.exec(t)) ? {
                        r: r[1],
                        g: r[2],
                        b: r[3]
                    } : (r = h.rgba.exec(t)) ? {
                        r: r[1],
                        g: r[2],
                        b: r[3],
                        a: r[4]
                    } : (r = h.hsl.exec(t)) ? {
                        h: r[1],
                        s: r[2],
                        l: r[3]
                    } : (r = h.hsla.exec(t)) ? {
                        h: r[1],
                        s: r[2],
                        l: r[3],
                        a: r[4]
                    } : (r = h.hsv.exec(t)) ? {
                        h: r[1],
                        s: r[2],
                        v: r[3]
                    } : (r = h.hsva.exec(t)) ? {
                        h: r[1],
                        s: r[2],
                        v: r[3],
                        a: r[4]
                    } : (r = h.hex8.exec(t)) ? {
                        r: parseIntFromHex(r[1]),
                        g: parseIntFromHex(r[2]),
                        b: parseIntFromHex(r[3]),
                        a: parseIntFromHex(r[4]) / 255,
                        format: a ? "name" : "hex8"
                    } : (r = h.hex6.exec(t)) ? {
                        r: parseIntFromHex(r[1]),
                        g: parseIntFromHex(r[2]),
                        b: parseIntFromHex(r[3]),
                        format: a ? "name" : "hex"
                    } : (r = h.hex4.exec(t)) ? {
                        r: parseIntFromHex(r[1] + "" + r[1]),
                        g: parseIntFromHex(r[2] + "" + r[2]),
                        b: parseIntFromHex(r[3] + "" + r[3]),
                        a: parseIntFromHex(r[4] + "" + r[4]) / 255,
                        format: a ? "name" : "hex8"
                    } : !!(r = h.hex3.exec(t)) && {
                        r: parseIntFromHex(r[1] + "" + r[1]),
                        g: parseIntFromHex(r[2] + "" + r[2]),
                        b: parseIntFromHex(r[3] + "" + r[3]),
                        format: a ? "name" : "hex"
                    }
                }(a)), "object" == _typeof(a) && (isValidCSSUnit(a.r) && isValidCSSUnit(a.g) && isValidCSSUnit(a.b) ? (C = a.r, E = a.g, j = a.b, s = {
                    r: 255 * bound01(C, 255),
                    g: 255 * bound01(E, 255),
                    b: 255 * bound01(j, 255)
                }, y = !0, b = "%" === String(a.r).substr(-1) ? "prgb" : "rgb") : isValidCSSUnit(a.h) && isValidCSSUnit(a.s) && isValidCSSUnit(a.v) ? (c = convertToPercentage(a.s), p = convertToPercentage(a.v), I = a.h, O = c, P = p, I = 6 * bound01(I, 360), O = bound01(O, 100), P = bound01(P, 100), R = Math.floor(I), F = I - R, W = P * (1 - O), M = P * (1 - F * O), D = P * (1 - (1 - F) * O), s = {
                    r: 255 * [P, M, W, W, D, P][L = R % 6],
                    g: 255 * [D, P, P, M, W, W][L],
                    b: 255 * [W, W, D, P, P, M][L]
                }, y = !0, b = "hsv") : isValidCSSUnit(a.h) && isValidCSSUnit(a.s) && isValidCSSUnit(a.l) && (c = convertToPercentage(a.s), f = convertToPercentage(a.l), s = function(t, r, a) {
                    var s, l, c;

                    function hue2rgb(t, r, a) {
                        return (a < 0 && (a += 1), a > 1 && (a -= 1), a < 1 / 6) ? t + (r - t) * 6 * a : a < .5 ? r : a < 2 / 3 ? t + (r - t) * (2 / 3 - a) * 6 : t
                    }
                    if (t = bound01(t, 360), r = bound01(r, 100), a = bound01(a, 100), 0 === r) s = l = c = a;
                    else {
                        var d = a < .5 ? a * (1 + r) : a + r - a * r,
                            u = 2 * a - d;
                        s = hue2rgb(u, d, t + 1 / 3), l = hue2rgb(u, d, t), c = hue2rgb(u, d, t - 1 / 3)
                    }
                    return {
                        r: 255 * s,
                        g: 255 * l,
                        b: 255 * c
                    }
                }(a.h, c, f), y = !0, b = "hsl"), a.hasOwnProperty("a") && (l = a.a)), l = boundAlpha(l), {
                    ok: y,
                    format: a.format || b,
                    r: Math.min(255, Math.max(s.r, 0)),
                    g: Math.min(255, Math.max(s.g, 0)),
                    b: Math.min(255, Math.max(s.b, 0)),
                    a: l
                });
                this._originalInput = t, this._r = U.r, this._g = U.g, this._b = U.b, this._a = U.a, this._roundA = Math.round(100 * this._a) / 100, this._format = r.format || U.format, this._gradientType = r.gradientType, this._r < 1 && (this._r = Math.round(this._r)), this._g < 1 && (this._g = Math.round(this._g)), this._b < 1 && (this._b = Math.round(this._b)), this._ok = U.ok
            }

            function rgbToHsl(t, r, a) {
                var s, l, c = Math.max(t = bound01(t, 255), r = bound01(r, 255), a = bound01(a, 255)),
                    d = Math.min(t, r, a),
                    u = (c + d) / 2;
                if (c == d) s = l = 0;
                else {
                    var m = c - d;
                    switch (l = u > .5 ? m / (2 - c - d) : m / (c + d), c) {
                        case t:
                            s = (r - a) / m + (r < a ? 6 : 0);
                            break;
                        case r:
                            s = (a - t) / m + 2;
                            break;
                        case a:
                            s = (t - r) / m + 4
                    }
                    s /= 6
                }
                return {
                    h: s,
                    s: l,
                    l: u
                }
            }

            function rgbToHsv(t, r, a) {
                var s, l = Math.max(t = bound01(t, 255), r = bound01(r, 255), a = bound01(a, 255)),
                    c = Math.min(t, r, a),
                    d = l - c;
                if (l == c) s = 0;
                else {
                    switch (l) {
                        case t:
                            s = (r - a) / d + (r < a ? 6 : 0);
                            break;
                        case r:
                            s = (a - t) / d + 2;
                            break;
                        case a:
                            s = (t - r) / d + 4
                    }
                    s /= 6
                }
                return {
                    h: s,
                    s: 0 === l ? 0 : d / l,
                    v: l
                }
            }

            function rgbToHex(t, r, a, s) {
                var l = [pad2(Math.round(t).toString(16)), pad2(Math.round(r).toString(16)), pad2(Math.round(a).toString(16))];
                return s && l[0].charAt(0) == l[0].charAt(1) && l[1].charAt(0) == l[1].charAt(1) && l[2].charAt(0) == l[2].charAt(1) ? l[0].charAt(0) + l[1].charAt(0) + l[2].charAt(0) : l.join("")
            }

            function rgbaToArgbHex(t, r, a, s) {
                return [pad2(convertDecimalToHex(s)), pad2(Math.round(t).toString(16)), pad2(Math.round(r).toString(16)), pad2(Math.round(a).toString(16))].join("")
            }

            function _desaturate(t, r) {
                r = 0 === r ? 0 : r || 10;
                var a = tinycolor(t).toHsl();
                return a.s -= r / 100, a.s = clamp01(a.s), tinycolor(a)
            }

            function _saturate(t, r) {
                r = 0 === r ? 0 : r || 10;
                var a = tinycolor(t).toHsl();
                return a.s += r / 100, a.s = clamp01(a.s), tinycolor(a)
            }

            function _greyscale(t) {
                return tinycolor(t).desaturate(100)
            }

            function _lighten(t, r) {
                r = 0 === r ? 0 : r || 10;
                var a = tinycolor(t).toHsl();
                return a.l += r / 100, a.l = clamp01(a.l), tinycolor(a)
            }

            function _brighten(t, r) {
                r = 0 === r ? 0 : r || 10;
                var a = tinycolor(t).toRgb();
                return a.r = Math.max(0, Math.min(255, a.r - Math.round(-(255 * (r / 100))))), a.g = Math.max(0, Math.min(255, a.g - Math.round(-(255 * (r / 100))))), a.b = Math.max(0, Math.min(255, a.b - Math.round(-(255 * (r / 100))))), tinycolor(a)
            }

            function _darken(t, r) {
                r = 0 === r ? 0 : r || 10;
                var a = tinycolor(t).toHsl();
                return a.l -= r / 100, a.l = clamp01(a.l), tinycolor(a)
            }

            function _spin(t, r) {
                var a = tinycolor(t).toHsl(),
                    s = (a.h + r) % 360;
                return a.h = s < 0 ? 360 + s : s, tinycolor(a)
            }

            function _complement(t) {
                var r = tinycolor(t).toHsl();
                return r.h = (r.h + 180) % 360, tinycolor(r)
            }

            function polyad(t, r) {
                if (isNaN(r) || r <= 0) throw Error("Argument to polyad must be a positive number");
                for (var a = tinycolor(t).toHsl(), s = [tinycolor(t)], l = 360 / r, c = 1; c < r; c++) s.push(tinycolor({
                    h: (a.h + c * l) % 360,
                    s: a.s,
                    l: a.l
                }));
                return s
            }

            function _splitcomplement(t) {
                var r = tinycolor(t).toHsl(),
                    a = r.h;
                return [tinycolor(t), tinycolor({
                    h: (a + 72) % 360,
                    s: r.s,
                    l: r.l
                }), tinycolor({
                    h: (a + 216) % 360,
                    s: r.s,
                    l: r.l
                })]
            }

            function _analogous(t, r, a) {
                r = r || 6, a = a || 30;
                var s = tinycolor(t).toHsl(),
                    l = 360 / a,
                    c = [tinycolor(t)];
                for (s.h = (s.h - (l * r >> 1) + 720) % 360; --r;) s.h = (s.h + l) % 360, c.push(tinycolor(s));
                return c
            }

            function _monochromatic(t, r) {
                r = r || 6;
                for (var a = tinycolor(t).toHsv(), s = a.h, l = a.s, c = a.v, d = [], u = 1 / r; r--;) d.push(tinycolor({
                    h: s,
                    s: l,
                    v: c
                })), c = (c + u) % 1;
                return d
            }
            tinycolor.prototype = {
                isDark: function() {
                    return 128 > this.getBrightness()
                },
                isLight: function() {
                    return !this.isDark()
                },
                isValid: function() {
                    return this._ok
                },
                getOriginalInput: function() {
                    return this._originalInput
                },
                getFormat: function() {
                    return this._format
                },
                getAlpha: function() {
                    return this._a
                },
                getBrightness: function() {
                    var t = this.toRgb();
                    return (299 * t.r + 587 * t.g + 114 * t.b) / 1e3
                },
                getLuminance: function() {
                    var t, r, a, s = this.toRgb();
                    return t = s.r / 255, .2126 * (t <= .03928 ? t / 12.92 : Math.pow((t + .055) / 1.055, 2.4)) + .7152 * ((r = s.g / 255) <= .03928 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4)) + .0722 * ((a = s.b / 255) <= .03928 ? a / 12.92 : Math.pow((a + .055) / 1.055, 2.4))
                },
                setAlpha: function(t) {
                    return this._a = boundAlpha(t), this._roundA = Math.round(100 * this._a) / 100, this
                },
                toHsv: function() {
                    var t = rgbToHsv(this._r, this._g, this._b);
                    return {
                        h: 360 * t.h,
                        s: t.s,
                        v: t.v,
                        a: this._a
                    }
                },
                toHsvString: function() {
                    var t = rgbToHsv(this._r, this._g, this._b),
                        r = Math.round(360 * t.h),
                        a = Math.round(100 * t.s),
                        s = Math.round(100 * t.v);
                    return 1 == this._a ? "hsv(" + r + ", " + a + "%, " + s + "%)" : "hsva(" + r + ", " + a + "%, " + s + "%, " + this._roundA + ")"
                },
                toHsl: function() {
                    var t = rgbToHsl(this._r, this._g, this._b);
                    return {
                        h: 360 * t.h,
                        s: t.s,
                        l: t.l,
                        a: this._a
                    }
                },
                toHslString: function() {
                    var t = rgbToHsl(this._r, this._g, this._b),
                        r = Math.round(360 * t.h),
                        a = Math.round(100 * t.s),
                        s = Math.round(100 * t.l);
                    return 1 == this._a ? "hsl(" + r + ", " + a + "%, " + s + "%)" : "hsla(" + r + ", " + a + "%, " + s + "%, " + this._roundA + ")"
                },
                toHex: function(t) {
                    return rgbToHex(this._r, this._g, this._b, t)
                },
                toHexString: function(t) {
                    return "#" + this.toHex(t)
                },
                toHex8: function(t) {
                    var r, a, s, l, c;
                    return r = this._r, a = this._g, s = this._b, l = this._a, c = [pad2(Math.round(r).toString(16)), pad2(Math.round(a).toString(16)), pad2(Math.round(s).toString(16)), pad2(convertDecimalToHex(l))], t && c[0].charAt(0) == c[0].charAt(1) && c[1].charAt(0) == c[1].charAt(1) && c[2].charAt(0) == c[2].charAt(1) && c[3].charAt(0) == c[3].charAt(1) ? c[0].charAt(0) + c[1].charAt(0) + c[2].charAt(0) + c[3].charAt(0) : c.join("")
                },
                toHex8String: function(t) {
                    return "#" + this.toHex8(t)
                },
                toRgb: function() {
                    return {
                        r: Math.round(this._r),
                        g: Math.round(this._g),
                        b: Math.round(this._b),
                        a: this._a
                    }
                },
                toRgbString: function() {
                    return 1 == this._a ? "rgb(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ")" : "rgba(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ", " + this._roundA + ")"
                },
                toPercentageRgb: function() {
                    return {
                        r: Math.round(100 * bound01(this._r, 255)) + "%",
                        g: Math.round(100 * bound01(this._g, 255)) + "%",
                        b: Math.round(100 * bound01(this._b, 255)) + "%",
                        a: this._a
                    }
                },
                toPercentageRgbString: function() {
                    return 1 == this._a ? "rgb(" + Math.round(100 * bound01(this._r, 255)) + "%, " + Math.round(100 * bound01(this._g, 255)) + "%, " + Math.round(100 * bound01(this._b, 255)) + "%)" : "rgba(" + Math.round(100 * bound01(this._r, 255)) + "%, " + Math.round(100 * bound01(this._g, 255)) + "%, " + Math.round(100 * bound01(this._b, 255)) + "%, " + this._roundA + ")"
                },
                toName: function() {
                    return 0 === this._a ? "transparent" : !(this._a < 1) && (p[rgbToHex(this._r, this._g, this._b, !0)] || !1)
                },
                toFilter: function(t) {
                    var r = "#" + rgbaToArgbHex(this._r, this._g, this._b, this._a),
                        a = r,
                        s = this._gradientType ? "GradientType = 1, " : "";
                    if (t) {
                        var l = tinycolor(t);
                        a = "#" + rgbaToArgbHex(l._r, l._g, l._b, l._a)
                    }
                    return "progid:DXImageTransform.Microsoft.gradient(" + s + "startColorstr=" + r + ",endColorstr=" + a + ")"
                },
                toString: function(t) {
                    var r = !!t;
                    t = t || this._format;
                    var a = !1,
                        s = this._a < 1 && this._a >= 0;
                    return !r && s && ("hex" === t || "hex6" === t || "hex3" === t || "hex4" === t || "hex8" === t || "name" === t) ? "name" === t && 0 === this._a ? this.toName() : this.toRgbString() : ("rgb" === t && (a = this.toRgbString()), "prgb" === t && (a = this.toPercentageRgbString()), ("hex" === t || "hex6" === t) && (a = this.toHexString()), "hex3" === t && (a = this.toHexString(!0)), "hex4" === t && (a = this.toHex8String(!0)), "hex8" === t && (a = this.toHex8String()), "name" === t && (a = this.toName()), "hsl" === t && (a = this.toHslString()), "hsv" === t && (a = this.toHsvString()), a || this.toHexString())
                },
                clone: function() {
                    return tinycolor(this.toString())
                },
                _applyModification: function(t, r) {
                    var a = t.apply(null, [this].concat([].slice.call(r)));
                    return this._r = a._r, this._g = a._g, this._b = a._b, this.setAlpha(a._a), this
                },
                lighten: function() {
                    return this._applyModification(_lighten, arguments)
                },
                brighten: function() {
                    return this._applyModification(_brighten, arguments)
                },
                darken: function() {
                    return this._applyModification(_darken, arguments)
                },
                desaturate: function() {
                    return this._applyModification(_desaturate, arguments)
                },
                saturate: function() {
                    return this._applyModification(_saturate, arguments)
                },
                greyscale: function() {
                    return this._applyModification(_greyscale, arguments)
                },
                spin: function() {
                    return this._applyModification(_spin, arguments)
                },
                _applyCombination: function(t, r) {
                    return t.apply(null, [this].concat([].slice.call(r)))
                },
                analogous: function() {
                    return this._applyCombination(_analogous, arguments)
                },
                complement: function() {
                    return this._applyCombination(_complement, arguments)
                },
                monochromatic: function() {
                    return this._applyCombination(_monochromatic, arguments)
                },
                splitcomplement: function() {
                    return this._applyCombination(_splitcomplement, arguments)
                },
                triad: function() {
                    return this._applyCombination(polyad, [3])
                },
                tetrad: function() {
                    return this._applyCombination(polyad, [4])
                }
            }, tinycolor.fromRatio = function(t, r) {
                if ("object" == _typeof(t)) {
                    var a = {};
                    for (var s in t) t.hasOwnProperty(s) && ("a" === s ? a[s] = t[s] : a[s] = convertToPercentage(t[s]));
                    t = a
                }
                return tinycolor(t, r)
            }, tinycolor.equals = function(t, r) {
                return !!t && !!r && tinycolor(t).toRgbString() == tinycolor(r).toRgbString()
            }, tinycolor.random = function() {
                return tinycolor.fromRatio({
                    r: Math.random(),
                    g: Math.random(),
                    b: Math.random()
                })
            }, tinycolor.mix = function(t, r, a) {
                a = 0 === a ? 0 : a || 50;
                var s = tinycolor(t).toRgb(),
                    l = tinycolor(r).toRgb(),
                    c = a / 100;
                return tinycolor({
                    r: (l.r - s.r) * c + s.r,
                    g: (l.g - s.g) * c + s.g,
                    b: (l.b - s.b) * c + s.b,
                    a: (l.a - s.a) * c + s.a
                })
            }, tinycolor.readability = function(t, r) {
                var a = tinycolor(t),
                    s = tinycolor(r);
                return (Math.max(a.getLuminance(), s.getLuminance()) + .05) / (Math.min(a.getLuminance(), s.getLuminance()) + .05)
            }, tinycolor.isReadable = function(t, r, a) {
                var s, l, c, d, u, m = tinycolor.readability(t, r);
                switch (u = !1, (l = ((s = (s = a) || {
                    level: "AA",
                    size: "small"
                }).level || "AA").toUpperCase(), c = (s.size || "small").toLowerCase(), "AA" !== l && "AAA" !== l && (l = "AA"), "small" !== c && "large" !== c && (c = "small"), d = {
                    level: l,
                    size: c
                }).level + d.size) {
                    case "AAsmall":
                    case "AAAlarge":
                        u = m >= 4.5;
                        break;
                    case "AAlarge":
                        u = m >= 3;
                        break;
                    case "AAAsmall":
                        u = m >= 7
                }
                return u
            }, tinycolor.mostReadable = function(t, r, a) {
                var s, l, c, d, u = null,
                    m = 0;
                l = (a = a || {}).includeFallbackColors, c = a.level, d = a.size;
                for (var p = 0; p < r.length; p++)(s = tinycolor.readability(t, r[p])) > m && (m = s, u = tinycolor(r[p]));
                return tinycolor.isReadable(t, u, {
                    level: c,
                    size: d
                }) || !l ? u : (a.includeFallbackColors = !1, tinycolor.mostReadable(t, ["#fff", "#000"], a))
            };
            var m = tinycolor.names = {
                    aliceblue: "f0f8ff",
                    antiquewhite: "faebd7",
                    aqua: "0ff",
                    aquamarine: "7fffd4",
                    azure: "f0ffff",
                    beige: "f5f5dc",
                    bisque: "ffe4c4",
                    black: "000",
                    blanchedalmond: "ffebcd",
                    blue: "00f",
                    blueviolet: "8a2be2",
                    brown: "a52a2a",
                    burlywood: "deb887",
                    burntsienna: "ea7e5d",
                    cadetblue: "5f9ea0",
                    chartreuse: "7fff00",
                    chocolate: "d2691e",
                    coral: "ff7f50",
                    cornflowerblue: "6495ed",
                    cornsilk: "fff8dc",
                    crimson: "dc143c",
                    cyan: "0ff",
                    darkblue: "00008b",
                    darkcyan: "008b8b",
                    darkgoldenrod: "b8860b",
                    darkgray: "a9a9a9",
                    darkgreen: "006400",
                    darkgrey: "a9a9a9",
                    darkkhaki: "bdb76b",
                    darkmagenta: "8b008b",
                    darkolivegreen: "556b2f",
                    darkorange: "ff8c00",
                    darkorchid: "9932cc",
                    darkred: "8b0000",
                    darksalmon: "e9967a",
                    darkseagreen: "8fbc8f",
                    darkslateblue: "483d8b",
                    darkslategray: "2f4f4f",
                    darkslategrey: "2f4f4f",
                    darkturquoise: "00ced1",
                    darkviolet: "9400d3",
                    deeppink: "ff1493",
                    deepskyblue: "00bfff",
                    dimgray: "696969",
                    dimgrey: "696969",
                    dodgerblue: "1e90ff",
                    firebrick: "b22222",
                    floralwhite: "fffaf0",
                    forestgreen: "228b22",
                    fuchsia: "f0f",
                    gainsboro: "dcdcdc",
                    ghostwhite: "f8f8ff",
                    gold: "ffd700",
                    goldenrod: "daa520",
                    gray: "808080",
                    green: "008000",
                    greenyellow: "adff2f",
                    grey: "808080",
                    honeydew: "f0fff0",
                    hotpink: "ff69b4",
                    indianred: "cd5c5c",
                    indigo: "4b0082",
                    ivory: "fffff0",
                    khaki: "f0e68c",
                    lavender: "e6e6fa",
                    lavenderblush: "fff0f5",
                    lawngreen: "7cfc00",
                    lemonchiffon: "fffacd",
                    lightblue: "add8e6",
                    lightcoral: "f08080",
                    lightcyan: "e0ffff",
                    lightgoldenrodyellow: "fafad2",
                    lightgray: "d3d3d3",
                    lightgreen: "90ee90",
                    lightgrey: "d3d3d3",
                    lightpink: "ffb6c1",
                    lightsalmon: "ffa07a",
                    lightseagreen: "20b2aa",
                    lightskyblue: "87cefa",
                    lightslategray: "789",
                    lightslategrey: "789",
                    lightsteelblue: "b0c4de",
                    lightyellow: "ffffe0",
                    lime: "0f0",
                    limegreen: "32cd32",
                    linen: "faf0e6",
                    magenta: "f0f",
                    maroon: "800000",
                    mediumaquamarine: "66cdaa",
                    mediumblue: "0000cd",
                    mediumorchid: "ba55d3",
                    mediumpurple: "9370db",
                    mediumseagreen: "3cb371",
                    mediumslateblue: "7b68ee",
                    mediumspringgreen: "00fa9a",
                    mediumturquoise: "48d1cc",
                    mediumvioletred: "c71585",
                    midnightblue: "191970",
                    mintcream: "f5fffa",
                    mistyrose: "ffe4e1",
                    moccasin: "ffe4b5",
                    navajowhite: "ffdead",
                    navy: "000080",
                    oldlace: "fdf5e6",
                    olive: "808000",
                    olivedrab: "6b8e23",
                    orange: "ffa500",
                    orangered: "ff4500",
                    orchid: "da70d6",
                    palegoldenrod: "eee8aa",
                    palegreen: "98fb98",
                    paleturquoise: "afeeee",
                    palevioletred: "db7093",
                    papayawhip: "ffefd5",
                    peachpuff: "ffdab9",
                    peru: "cd853f",
                    pink: "ffc0cb",
                    plum: "dda0dd",
                    powderblue: "b0e0e6",
                    purple: "800080",
                    rebeccapurple: "663399",
                    red: "f00",
                    rosybrown: "bc8f8f",
                    royalblue: "4169e1",
                    saddlebrown: "8b4513",
                    salmon: "fa8072",
                    sandybrown: "f4a460",
                    seagreen: "2e8b57",
                    seashell: "fff5ee",
                    sienna: "a0522d",
                    silver: "c0c0c0",
                    skyblue: "87ceeb",
                    slateblue: "6a5acd",
                    slategray: "708090",
                    slategrey: "708090",
                    snow: "fffafa",
                    springgreen: "00ff7f",
                    steelblue: "4682b4",
                    tan: "d2b48c",
                    teal: "008080",
                    thistle: "d8bfd8",
                    tomato: "ff6347",
                    turquoise: "40e0d0",
                    violet: "ee82ee",
                    wheat: "f5deb3",
                    white: "fff",
                    whitesmoke: "f5f5f5",
                    yellow: "ff0",
                    yellowgreen: "9acd32"
                },
                p = tinycolor.hexNames = function(t) {
                    var r = {};
                    for (var a in t) t.hasOwnProperty(a) && (r[t[a]] = a);
                    return r
                }(m);

            function boundAlpha(t) {
                return (isNaN(t = parseFloat(t)) || t < 0 || t > 1) && (t = 1), t
            }

            function bound01(t, r) {
                "string" == typeof(a = t) && -1 != a.indexOf(".") && 1 === parseFloat(a) && (t = "100%");
                var a, s, l = "string" == typeof(s = t) && -1 != s.indexOf("%");
                return (t = Math.min(r, Math.max(0, parseFloat(t))), l && (t = parseInt(t * r, 10) / 100), 1e-6 > Math.abs(t - r)) ? 1 : t % r / parseFloat(r)
            }

            function clamp01(t) {
                return Math.min(1, Math.max(0, t))
            }

            function parseIntFromHex(t) {
                return parseInt(t, 16)
            }

            function pad2(t) {
                return 1 == t.length ? "0" + t : "" + t
            }

            function convertToPercentage(t) {
                return t <= 1 && (t = 100 * t + "%"), t
            }

            function convertDecimalToHex(t) {
                return Math.round(255 * parseFloat(t)).toString(16)
            }
            var h = (l = "[\\s|\\(]+(" + (s = "(?:[-\\+]?\\d*\\.\\d+%?)|(?:[-\\+]?\\d+%?)") + ")[,|\\s]+(" + s + ")[,|\\s]+(" + s + ")\\s*\\)?", c = "[\\s|\\(]+(" + s + ")[,|\\s]+(" + s + ")[,|\\s]+(" + s + ")[,|\\s]+(" + s + ")\\s*\\)?", {
                CSS_UNIT: new RegExp(s),
                rgb: RegExp("rgb" + l),
                rgba: RegExp("rgba" + c),
                hsl: RegExp("hsl" + l),
                hsla: RegExp("hsla" + c),
                hsv: RegExp("hsv" + l),
                hsva: RegExp("hsva" + c),
                hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
                hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
                hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
                hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
            });

            function isValidCSSUnit(t) {
                return !!h.CSS_UNIT.exec(t)
            }
        },
        67771: function(t, r, a) {
            "use strict";
            a.d(r, {
                A: function() {
                    return toAccount
                }
            });
            var s = a(82663),
                l = a(20886);

            function toAccount(t) {
                if ("string" == typeof t) {
                    if (!(0, l.U)(t)) throw new s.b({
                        address: t
                    });
                    return {
                        address: t,
                        type: "json-rpc"
                    }
                }
                if (!(0, l.U)(t.address)) throw new s.b({
                    address: t.address
                });
                return {
                    address: t.address,
                    signMessage: t.signMessage,
                    signTransaction: t.signTransaction,
                    signTypedData: t.signTypedData,
                    source: "custom",
                    type: "local"
                }
            }
        },
        9390: function(t, r, a) {
            "use strict";
            a.d(r, {
                J: function() {
                    return c
                }
            });
            var s = a(76415),
                l = a(53546);
            let c = (0, s.a)({
                id: 84531,
                network: "base-goerli",
                name: "Base Goerli",
                nativeCurrency: {
                    name: "Goerli Ether",
                    symbol: "ETH",
                    decimals: 18
                },
                rpcUrls: {
                    alchemy: {
                        http: ["https://base-goerli.g.alchemy.com/v2"],
                        webSocket: ["wss://base-goerli.g.alchemy.com/v2"]
                    },
                    default: {
                        http: ["https://goerli.base.org"]
                    },
                    public: {
                        http: ["https://goerli.base.org"]
                    }
                },
                blockExplorers: {
                    etherscan: {
                        name: "Basescan",
                        url: "https://goerli.basescan.org"
                    },
                    default: {
                        name: "Basescan",
                        url: "https://goerli.basescan.org"
                    }
                },
                contracts: {
                    multicall3: {
                        address: "0xca11bde05977b3631167028862be2a173976ca11",
                        blockCreated: 1376988
                    }
                },
                testnet: !0,
                sourceId: 5
            }, {
                formatters: l.V
            })
        },
        47201: function(t, r, a) {
            "use strict";
            a.d(r, {
                l: function() {
                    return c
                }
            });
            var s = a(76415),
                l = a(53546);
            let c = (0, s.a)({
                id: 420,
                name: "Optimism Goerli",
                network: "optimism-goerli",
                nativeCurrency: {
                    name: "Goerli Ether",
                    symbol: "ETH",
                    decimals: 18
                },
                rpcUrls: {
                    alchemy: {
                        http: ["https://opt-goerli.g.alchemy.com/v2"],
                        webSocket: ["wss://opt-goerli.g.alchemy.com/v2"]
                    },
                    infura: {
                        http: ["https://optimism-goerli.infura.io/v3"],
                        webSocket: ["wss://optimism-goerli.infura.io/ws/v3"]
                    },
                    default: {
                        http: ["https://goerli.optimism.io"]
                    },
                    public: {
                        http: ["https://goerli.optimism.io"]
                    }
                },
                blockExplorers: {
                    etherscan: {
                        name: "Etherscan",
                        url: "https://goerli-optimism.etherscan.io"
                    },
                    default: {
                        name: "Etherscan",
                        url: "https://goerli-optimism.etherscan.io"
                    }
                },
                contracts: {
                    multicall3: {
                        address: "0xca11bde05977b3631167028862be2a173976ca11",
                        blockCreated: 49461
                    }
                },
                testnet: !0
            }, {
                formatters: l.V
            })
        },
        52659: function(t, r, a) {
            "use strict";
            a.r(r), a.d(r, {
                acala: function() {
                    return l
                },
                arbitrum: function() {
                    return c
                },
                arbitrumGoerli: function() {
                    return d
                },
                arbitrumNova: function() {
                    return u
                },
                arbitrumSepolia: function() {
                    return p
                },
                astar: function() {
                    return m
                },
                astarZkatana: function() {
                    return h
                },
                aurora: function() {
                    return f
                },
                auroraTestnet: function() {
                    return y
                },
                avalanche: function() {
                    return b
                },
                avalancheFuji: function() {
                    return C
                },
                bahamut: function() {
                    return E
                },
                base: function() {
                    return j.u
                },
                baseGoerli: function() {
                    return I.J
                },
                baseSepolia: function() {
                    return O.L
                },
                bearNetworkChainMainnet: function() {
                    return P
                },
                bearNetworkChainTestnet: function() {
                    return R
                },
                bitTorrent: function() {
                    return F
                },
                bitTorrentTestnet: function() {
                    return W
                },
                boba: function() {
                    return M
                },
                bronos: function() {
                    return D
                },
                bronosTestnet: function() {
                    return L
                },
                bsc: function() {
                    return U
                },
                bscTestnet: function() {
                    return B
                },
                bxn: function() {
                    return $
                },
                bxnTestnet: function() {
                    return K
                },
                canto: function() {
                    return G
                },
                celo: function() {
                    return ef
                },
                celoAlfajores: function() {
                    return ey
                },
                celoCannoli: function() {
                    return ev
                },
                chiliz: function() {
                    return eg
                },
                classic: function() {
                    return eb
                },
                confluxESpace: function() {
                    return ew
                },
                confluxESpaceTestnet: function() {
                    return e_
                },
                coreDao: function() {
                    return ek
                },
                cronos: function() {
                    return ex
                },
                cronosTestnet: function() {
                    return eC
                },
                crossbell: function() {
                    return eS
                },
                dfk: function() {
                    return eE
                },
                dogechain: function() {
                    return ej
                },
                edgeware: function() {
                    return eI
                },
                edgewareTestnet: function() {
                    return eT
                },
                ekta: function() {
                    return eR
                },
                ektaTestnet: function() {
                    return eF
                },
                eos: function() {
                    return eO
                },
                eosTestnet: function() {
                    return eN
                },
                evmos: function() {
                    return eP
                },
                evmosTestnet: function() {
                    return eA
                },
                fantom: function() {
                    return eW
                },
                fantomSonicTestnet: function() {
                    return eM
                },
                fantomTestnet: function() {
                    return eD
                },
                fibo: function() {
                    return eL
                },
                filecoin: function() {
                    return ez
                },
                filecoinCalibration: function() {
                    return eU
                },
                filecoinHyperspace: function() {
                    return eq
                },
                flare: function() {
                    return eB
                },
                flareTestnet: function() {
                    return eV
                },
                foundry: function() {
                    return eH
                },
                fuse: function() {
                    return e$
                },
                fuseSparknet: function() {
                    return eK
                },
                gnosis: function() {
                    return e0
                },
                gnosisChiado: function() {
                    return e1
                },
                gobi: function() {
                    return eQ
                },
                goerli: function() {
                    return eX.w
                },
                haqqMainnet: function() {
                    return e5
                },
                haqqTestedge2: function() {
                    return e4
                },
                hardhat: function() {
                    return e2
                },
                harmonyOne: function() {
                    return e3
                },
                holesky: function() {
                    return e6
                },
                iotex: function() {
                    return eG
                },
                iotexTestnet: function() {
                    return eZ
                },
                jbc: function() {
                    return eJ
                },
                karura: function() {
                    return eY
                },
                kava: function() {
                    return e7
                },
                kavaTestnet: function() {
                    return e8
                },
                klaytn: function() {
                    return e9
                },
                klaytnBaobab: function() {
                    return te
                },
                kroma: function() {
                    return tt
                },
                kromaSepolia: function() {
                    return tn
                },
                linea: function() {
                    return tr
                },
                lineaTestnet: function() {
                    return ta
                },
                localhost: function() {
                    return ti
                },
                lukso: function() {
                    return to
                },
                mainnet: function() {
                    return ts.R
                },
                mandala: function() {
                    return tl
                },
                manta: function() {
                    return tc
                },
                mantaTestnet: function() {
                    return td
                },
                mantle: function() {
                    return tu
                },
                mantleTestnet: function() {
                    return tm
                },
                meter: function() {
                    return tp
                },
                meterTestnet: function() {
                    return th
                },
                metis: function() {
                    return tf
                },
                metisGoerli: function() {
                    return ty
                },
                mev: function() {
                    return tg
                },
                mevTestnet: function() {
                    return tv
                },
                modeTestnet: function() {
                    return tb
                },
                moonbaseAlpha: function() {
                    return tw
                },
                moonbeam: function() {
                    return t_
                },
                moonbeamDev: function() {
                    return tk
                },
                moonriver: function() {
                    return tx
                },
                neonDevnet: function() {
                    return tC
                },
                neonMainnet: function() {
                    return tS
                },
                nexi: function() {
                    return tE
                },
                nexilix: function() {
                    return tj
                },
                oasisTestnet: function() {
                    return tT
                },
                oasys: function() {
                    return tI
                },
                okc: function() {
                    return tO
                },
                opBNB: function() {
                    return tR
                },
                opBNBTestnet: function() {
                    return tF
                },
                optimism: function() {
                    return tN.v
                },
                optimismGoerli: function() {
                    return tP.l
                },
                optimismSepolia: function() {
                    return tA.O
                },
                pgn: function() {
                    return tM
                },
                pgnTestnet: function() {
                    return tD
                },
                plinga: function() {
                    return tL
                },
                polygon: function() {
                    return tz
                },
                polygonMumbai: function() {
                    return tU
                },
                polygonZkEvm: function() {
                    return tB
                },
                polygonZkEvmTestnet: function() {
                    return tq
                },
                pulsechain: function() {
                    return tV
                },
                pulsechainV4: function() {
                    return tH
                },
                qMainnet: function() {
                    return t$
                },
                qTestnet: function() {
                    return tK
                },
                rollux: function() {
                    return tG
                },
                rolluxTestnet: function() {
                    return tZ
                },
                ronin: function() {
                    return tJ
                },
                rootstock: function() {
                    return tY
                },
                saigon: function() {
                    return tQ
                },
                sapphire: function() {
                    return tX
                },
                sapphireTestnet: function() {
                    return t0
                },
                scroll: function() {
                    return t1
                },
                scrollSepolia: function() {
                    return t2
                },
                scrollTestnet: function() {
                    return t3
                },
                sepolia: function() {
                    return t5.F
                },
                shardeumSphinx: function() {
                    return nf
                },
                shibarium: function() {
                    return ny
                },
                shimmer: function() {
                    return t4
                },
                shimmerTestnet: function() {
                    return t6
                },
                skaleBlockBrawlers: function() {
                    return t7
                },
                skaleCalypso: function() {
                    return t8
                },
                skaleCalypsoTestnet: function() {
                    return t9
                },
                skaleChaosTestnet: function() {
                    return ne
                },
                skaleCryptoBlades: function() {
                    return nt
                },
                skaleCryptoColosseum: function() {
                    return nn
                },
                skaleEuropa: function() {
                    return nr
                },
                skaleEuropaTestnet: function() {
                    return na
                },
                skaleExorde: function() {
                    return ni
                },
                skaleHumanProtocol: function() {
                    return no
                },
                skaleNebula: function() {
                    return ns
                },
                skaleNebulaTestnet: function() {
                    return nl
                },
                skaleRazor: function() {
                    return nc
                },
                skaleTitan: function() {
                    return nd
                },
                skaleTitanTestnet: function() {
                    return nu
                },
                songbird: function() {
                    return nm
                },
                songbirdTestnet: function() {
                    return np
                },
                spicy: function() {
                    return nh
                },
                syscoin: function() {
                    return ng
                },
                syscoinTestnet: function() {
                    return nv
                },
                taikoJolnir: function() {
                    return nw
                },
                taikoTestnetSepolia: function() {
                    return n_
                },
                taraxa: function() {
                    return nb
                },
                taraxaTestnet: function() {
                    return nk
                },
                telos: function() {
                    return nx
                },
                telosTestnet: function() {
                    return nC
                },
                tenet: function() {
                    return nS
                },
                thunderTestnet: function() {
                    return nE
                },
                vechain: function() {
                    return nj
                },
                wanchain: function() {
                    return nI
                },
                wanchainTestnet: function() {
                    return nT
                },
                wemix: function() {
                    return nO
                },
                wemixTestnet: function() {
                    return nN
                },
                xdc: function() {
                    return nP
                },
                xdcTestnet: function() {
                    return nA
                },
                zetachainAthensTestnet: function() {
                    return nH
                },
                zhejiang: function() {
                    return nR
                },
                zilliqa: function() {
                    return n$
                },
                zilliqaTestnet: function() {
                    return nK
                },
                zkFair: function() {
                    return nF
                },
                zkFairTestnet: function() {
                    return nW
                },
                zkSync: function() {
                    return nq
                },
                zkSyncSepoliaTestnet: function() {
                    return nV
                },
                zkSyncTestnet: function() {
                    return nB
                },
                zora: function() {
                    return nG
                },
                zoraSepolia: function() {
                    return nZ
                },
                zoraTestnet: function() {
                    return nJ
                }
            });
            var s = a(76415);
            let l = (0, s.a)({
                    id: 787,
                    name: "Acala",
                    network: "acala",
                    nativeCurrency: {
                        name: "Acala",
                        symbol: "ACA",
                        decimals: 18
                    },
                    rpcUrls: {
                        public: {
                            http: ["https://eth-rpc-acala.aca-api.network"],
                            webSocket: ["wss://eth-rpc-acala.aca-api.network"]
                        },
                        default: {
                            http: ["https://eth-rpc-acala.aca-api.network"],
                            webSocket: ["wss://eth-rpc-acala.aca-api.network"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Acala Blockscout",
                            url: "https://blockscout.acala.network"
                        }
                    },
                    testnet: !1
                }),
                c = (0, s.a)({
                    id: 42161,
                    name: "Arbitrum One",
                    network: "arbitrum",
                    nativeCurrency: {
                        name: "Ether",
                        symbol: "ETH",
                        decimals: 18
                    },
                    rpcUrls: {
                        alchemy: {
                            http: ["https://arb-mainnet.g.alchemy.com/v2"],
                            webSocket: ["wss://arb-mainnet.g.alchemy.com/v2"]
                        },
                        infura: {
                            http: ["https://arbitrum-mainnet.infura.io/v3"],
                            webSocket: ["wss://arbitrum-mainnet.infura.io/ws/v3"]
                        },
                        default: {
                            http: ["https://arb1.arbitrum.io/rpc"]
                        },
                        public: {
                            http: ["https://arb1.arbitrum.io/rpc"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "Arbiscan",
                            url: "https://arbiscan.io"
                        },
                        default: {
                            name: "Arbiscan",
                            url: "https://arbiscan.io"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 7654707
                        }
                    }
                }),
                d = (0, s.a)({
                    id: 421613,
                    name: "Arbitrum Goerli",
                    network: "arbitrum-goerli",
                    nativeCurrency: {
                        name: "Arbitrum Goerli Ether",
                        symbol: "ETH",
                        decimals: 18
                    },
                    rpcUrls: {
                        alchemy: {
                            http: ["https://arb-goerli.g.alchemy.com/v2"],
                            webSocket: ["wss://arb-goerli.g.alchemy.com/v2"]
                        },
                        infura: {
                            http: ["https://arbitrum-goerli.infura.io/v3"],
                            webSocket: ["wss://arbitrum-goerli.infura.io/ws/v3"]
                        },
                        default: {
                            http: ["https://goerli-rollup.arbitrum.io/rpc"]
                        },
                        public: {
                            http: ["https://goerli-rollup.arbitrum.io/rpc"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "Arbiscan",
                            url: "https://goerli.arbiscan.io"
                        },
                        default: {
                            name: "Arbiscan",
                            url: "https://goerli.arbiscan.io"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 88114
                        }
                    },
                    testnet: !0
                }),
                u = (0, s.a)({
                    id: 42170,
                    name: "Arbitrum Nova",
                    network: "arbitrum-nova",
                    nativeCurrency: {
                        name: "Ether",
                        symbol: "ETH",
                        decimals: 18
                    },
                    rpcUrls: {
                        blast: {
                            http: ["https://arbitrum-nova.public.blastapi.io"],
                            webSocket: ["wss://arbitrum-nova.public.blastapi.io"]
                        },
                        default: {
                            http: ["https://nova.arbitrum.io/rpc"]
                        },
                        public: {
                            http: ["https://nova.arbitrum.io/rpc"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "Arbiscan",
                            url: "https://nova.arbiscan.io"
                        },
                        blockScout: {
                            name: "BlockScout",
                            url: "https://nova-explorer.arbitrum.io/"
                        },
                        default: {
                            name: "Arbiscan",
                            url: "https://nova.arbiscan.io"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 1746963
                        }
                    }
                }),
                m = (0, s.a)({
                    id: 592,
                    name: "Astar",
                    network: "astar-mainnet",
                    nativeCurrency: {
                        name: "Astar",
                        symbol: "ASTR",
                        decimals: 18
                    },
                    rpcUrls: {
                        public: {
                            http: ["https://astar.api.onfinality.io/public"]
                        },
                        default: {
                            http: ["https://astar.api.onfinality.io/public"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Astar Subscan",
                            url: "https://astar.subscan.io"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 761794
                        }
                    },
                    testnet: !1
                }),
                p = (0, s.a)({
                    id: 421614,
                    name: "Arbitrum Sepolia",
                    network: "arbitrum-sepolia",
                    nativeCurrency: {
                        name: "Arbitrum Sepolia Ether",
                        symbol: "ETH",
                        decimals: 18
                    },
                    rpcUrls: {
                        alchemy: {
                            http: ["https://arb-sepolia.g.alchemy.com/v2"],
                            webSocket: ["wss://arb-sepolia.g.alchemy.com/v2"]
                        },
                        default: {
                            http: ["https://sepolia-rollup.arbitrum.io/rpc"]
                        },
                        public: {
                            http: ["https://sepolia-rollup.arbitrum.io/rpc"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "Arbiscan",
                            url: "https://sepolia.arbiscan.io"
                        },
                        default: {
                            name: "Arbiscan",
                            url: "https://sepolia.arbiscan.io"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 81930
                        }
                    },
                    testnet: !0
                }),
                h = (0, s.a)({
                    id: 1261120,
                    name: "Astar zkEVM Testnet zKatana",
                    network: "zKatana",
                    nativeCurrency: {
                        name: "Ether",
                        symbol: "ETH",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.zkatana.gelato.digital", "https://rpc.startale.com/zkatana"]
                        },
                        public: {
                            http: ["https://rpc.zkatana.gelato.digital", "https://rpc.startale.com/zkatana"]
                        }
                    },
                    blockExplorers: {
                        blockscout: {
                            name: "Blockscout zKatana chain explorer",
                            url: "https://zkatana.blockscout.com"
                        },
                        default: {
                            name: "zKatana Explorer",
                            url: "https://zkatana.explorer.startale.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 31317
                        }
                    },
                    testnet: !0
                }),
                f = (0, s.a)({
                    id: 1313161554,
                    name: "Aurora",
                    network: "aurora",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Ether",
                        symbol: "ETH"
                    },
                    rpcUrls: {
                        infura: {
                            http: ["https://aurora-mainnet.infura.io/v3"]
                        },
                        default: {
                            http: ["https://mainnet.aurora.dev"]
                        },
                        public: {
                            http: ["https://mainnet.aurora.dev"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "Aurorascan",
                            url: "https://aurorascan.dev"
                        },
                        default: {
                            name: "Aurorascan",
                            url: "https://aurorascan.dev"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 62907816
                        }
                    }
                }),
                y = (0, s.a)({
                    id: 1313161555,
                    name: "Aurora Testnet",
                    network: "aurora-testnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Ether",
                        symbol: "ETH"
                    },
                    rpcUrls: {
                        infura: {
                            http: ["https://aurora-testnet.infura.io/v3"]
                        },
                        default: {
                            http: ["https://testnet.aurora.dev"]
                        },
                        public: {
                            http: ["https://testnet.aurora.dev"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "Aurorascan",
                            url: "https://testnet.aurorascan.dev"
                        },
                        default: {
                            name: "Aurorascan",
                            url: "https://testnet.aurorascan.dev"
                        }
                    },
                    testnet: !0
                }),
                b = (0, s.a)({
                    id: 43114,
                    name: "Avalanche",
                    network: "avalanche",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Avalanche",
                        symbol: "AVAX"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://api.avax.network/ext/bc/C/rpc"]
                        },
                        public: {
                            http: ["https://api.avax.network/ext/bc/C/rpc"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "SnowTrace",
                            url: "https://snowtrace.io"
                        },
                        default: {
                            name: "SnowTrace",
                            url: "https://snowtrace.io"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 11907934
                        }
                    }
                }),
                C = (0, s.a)({
                    id: 43113,
                    name: "Avalanche Fuji",
                    network: "avalanche-fuji",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Avalanche Fuji",
                        symbol: "AVAX"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://api.avax-test.network/ext/bc/C/rpc"]
                        },
                        public: {
                            http: ["https://api.avax-test.network/ext/bc/C/rpc"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "SnowTrace",
                            url: "https://testnet.snowtrace.io"
                        },
                        default: {
                            name: "SnowTrace",
                            url: "https://testnet.snowtrace.io"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 7096959
                        }
                    },
                    testnet: !0
                }),
                E = (0, s.a)({
                    id: 5165,
                    network: "bahamut",
                    name: "Bahamut",
                    nativeCurrency: {
                        name: "Fasttoken",
                        symbol: "FTN",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc1.bahamut.io", "https://bahamut.publicnode.com", "https://rpc2.bahamut.io"],
                            webSocket: ["wss://ws1.sahara.bahamutchain.com", "wss://bahamut.publicnode.com", "wss://ws2.sahara.bahamutchain.com"]
                        },
                        public: {
                            http: ["https://rpc1.bahamut.io", "https://bahamut.publicnode.com", "https://rpc2.bahamut.io"],
                            webSocket: ["wss://ws1.sahara.bahamutchain.com", "wss://bahamut.publicnode.com", "wss://ws2.sahara.bahamutchain.com"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Ftnscan",
                            url: "https://www.ftnscan.com"
                        }
                    }
                });
            var j = a(47983),
                I = a(9390),
                O = a(80854);
            let P = (0, s.a)({
                    id: 641230,
                    name: "Bear Network Chain Mainnet",
                    network: "BearNetworkChainMainnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "BearNetworkChain",
                        symbol: "BRNKC"
                    },
                    rpcUrls: {
                        public: {
                            http: ["https://brnkc-mainnet.bearnetwork.net"]
                        },
                        default: {
                            http: ["https://brnkc-mainnet.bearnetwork.net"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "BrnkScan",
                            url: "https://brnkscan.bearnetwork.net"
                        }
                    }
                }),
                R = (0, s.a)({
                    id: 751230,
                    name: "Bear Network Chain Testnet",
                    network: "BearNetworkChainTestnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "tBRNKC",
                        symbol: "tBRNKC"
                    },
                    rpcUrls: {
                        public: {
                            http: ["https://brnkc-test.bearnetwork.net"]
                        },
                        default: {
                            http: ["https://brnkc-test.bearnetwork.net"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "BrnkTestScan",
                            url: "https://brnktest-scan.bearnetwork.net"
                        }
                    },
                    testnet: !0
                }),
                F = (0, s.a)({
                    id: 199,
                    name: "BitTorrent",
                    network: "bittorrent-chain-mainnet",
                    nativeCurrency: {
                        name: "BitTorrent",
                        symbol: "BTT",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.bittorrentchain.io"]
                        },
                        public: {
                            http: ["https://rpc.bittorrentchain.io"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "Bttcscan",
                            url: "https://bttcscan.com"
                        },
                        default: {
                            name: "Bttcscan",
                            url: "https://bttcscan.com"
                        }
                    }
                }),
                W = (0, s.a)({
                    id: 1028,
                    name: "BitTorrent Chain Testnet",
                    network: "bittorrent-chain-testnet",
                    nativeCurrency: {
                        name: "BitTorrent",
                        symbol: "BTT",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://testrpc.bittorrentchain.io"]
                        },
                        public: {
                            http: ["https://testrpc.bittorrentchain.io"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "Bttcscan",
                            url: "https://testnet.bttcscan.com"
                        },
                        default: {
                            name: "Bttcscan",
                            url: "https://testnet.bttcscan.com"
                        }
                    },
                    testnet: !0
                }),
                M = (0, s.a)({
                    id: 288,
                    name: "Boba Network",
                    network: "boba",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Boba",
                        symbol: "BOBA"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://mainnet.boba.network"]
                        },
                        public: {
                            http: ["https://mainnet.boba.network"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "BOBAScan",
                            url: "https://bobascan.com"
                        },
                        default: {
                            name: "BOBAScan",
                            url: "https://bobascan.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 446859
                        }
                    }
                }),
                D = (0, s.a)({
                    id: 1039,
                    name: "Bronos",
                    network: "bronos",
                    nativeCurrency: {
                        decimals: 18,
                        name: "BRO",
                        symbol: "BRO"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://evm.bronos.org"]
                        },
                        public: {
                            http: ["https://evm.bronos.org"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "BronoScan",
                            url: "https://broscan.bronos.org"
                        }
                    }
                }),
                L = (0, s.a)({
                    id: 1038,
                    name: "Bronos Testnet",
                    network: "bronos-testnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Bronos Coin",
                        symbol: "tBRO"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://evm-testnet.bronos.org"]
                        },
                        public: {
                            http: ["https://evm-testnet.bronos.org"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "BronoScan",
                            url: "https://tbroscan.bronos.org"
                        }
                    },
                    testnet: !0
                }),
                U = (0, s.a)({
                    id: 56,
                    name: "BNB Smart Chain",
                    network: "bsc",
                    nativeCurrency: {
                        decimals: 18,
                        name: "BNB",
                        symbol: "BNB"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.ankr.com/bsc"]
                        },
                        public: {
                            http: ["https://rpc.ankr.com/bsc"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "BscScan",
                            url: "https://bscscan.com"
                        },
                        default: {
                            name: "BscScan",
                            url: "https://bscscan.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 15921452
                        }
                    }
                }),
                B = (0, s.a)({
                    id: 97,
                    name: "Binance Smart Chain Testnet",
                    network: "bsc-testnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "BNB",
                        symbol: "tBNB"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://data-seed-prebsc-1-s1.bnbchain.org:8545"]
                        },
                        public: {
                            http: ["https://data-seed-prebsc-1-s1.bnbchain.org:8545"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "BscScan",
                            url: "https://testnet.bscscan.com"
                        },
                        default: {
                            name: "BscScan",
                            url: "https://testnet.bscscan.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 17422483
                        }
                    },
                    testnet: !0
                }),
                $ = (0, s.a)({
                    id: 4999,
                    name: "BlackFort Exchange Network",
                    network: "bxn",
                    nativeCurrency: {
                        name: "BlackFort Token",
                        symbol: "BXN",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://mainnet.blackfort.network/rpc"]
                        },
                        public: {
                            http: ["https://mainnet.blackfort.network/rpc"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Blockscout",
                            url: "https://explorer.blackfort.network"
                        }
                    }
                }),
                K = (0, s.a)({
                    id: 4777,
                    name: "BlackFort Exchange Network Testnet",
                    network: "bxnTestnet",
                    nativeCurrency: {
                        name: "BlackFort Testnet Token",
                        symbol: "TBXN",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://testnet.blackfort.network/rpc"]
                        },
                        public: {
                            http: ["https://testnet.blackfort.network/rpc"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Blockscout",
                            url: "https://testnet-explorer.blackfort.network"
                        }
                    }
                }),
                G = (0, s.a)({
                    id: 7700,
                    name: "Canto",
                    network: "canto",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Canto",
                        symbol: "CANTO"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://canto.gravitychain.io"]
                        },
                        public: {
                            http: ["https://canto.gravitychain.io"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Tuber.Build (Blockscout)",
                            url: "https://tuber.build"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 2905789
                        }
                    }
                });
            var J = a(17114),
                Y = a(19473),
                Q = a(29764),
                ee = a(94605),
                et = a(33495),
                en = a(23281);

            function isEmpty(t) {
                return 0 === t || 0 n === t || null == t || "0" === t || "" === t || "string" == typeof t && ("0x" === (0, en.f)(t).toLowerCase() || "0x00" === (0, en.f)(t).toLowerCase())
            }

            function isPresent(t) {
                return !isEmpty(t)
            }

            function isEIP1559(t) {
                return isPresent(t.maxFeePerGas) && isPresent(t.maxPriorityFeePerGas)
            }

            function isCIP42(t) {
                return "cip42" === t.type || isEIP1559(t) && (isPresent(t.feeCurrency) || isPresent(t.gatewayFeeRecipient) || isPresent(t.gatewayFee))
            }

            function isCIP64(t) {
                return "cip64" === t.type || isEIP1559(t) && isPresent(t.feeCurrency) && isEmpty(t.gatewayFee) && isEmpty(t.gatewayFeeRecipient)
            }
            let er = {
                block: (0, Q.G)({
                    exclude: ["difficulty", "gasLimit", "mixHash", "nonce", "uncles"],
                    format(t) {
                        let r = t.transactions ? .map(t => "string" == typeof t ? t : { ...ee.Tr(t),
                            feeCurrency: t.feeCurrency,
                            ..."0x7b" !== t.type ? {
                                gatewayFee: t.gatewayFee ? J.y_(t.gatewayFee) : null,
                                gatewayFeeRecipient: t.gatewayFeeRecipient || null
                            } : {}
                        });
                        return {
                            randomness: t.randomness,
                            transactions: r
                        }
                    }
                }),
                transaction: (0, ee.y_)({
                    format(t) {
                        let r = {
                            feeCurrency: t.feeCurrency
                        };
                        return "0x7b" === t.type ? r.type = "cip64" : ("0x7c" === t.type && (r.type = "cip42"), r.gatewayFee = t.gatewayFee ? (0, J.y_)(t.gatewayFee) : null, r.gatewayFeeRecipient = t.gatewayFeeRecipient), r
                    }
                }),
                transactionRequest: (0, et.iy)({
                    format(t) {
                        let r = {
                            feeCurrency: t.feeCurrency
                        };
                        return isCIP64(t) ? r.type = "0x7b" : (isCIP42(t) && (r.type = "0x7c"), r.gatewayFee = void 0 !== t.gatewayFee ? (0, Y.eC)(t.gatewayFee) : void 0, r.gatewayFeeRecipient = t.gatewayFeeRecipient), r
                    }
                })
            };
            var ea = a(82663),
                ei = a(89534),
                eo = a(78734),
                es = a(3741),
                el = a(20886),
                ec = a(62832),
                ed = a(64054),
                eu = a(50211),
                em = a(99792);
            let ep = {
                    transaction: (t, r) => isCIP64(t) ? function(t, r) {
                        ! function(t) {
                            let {
                                chainId: r,
                                maxPriorityFeePerGas: a,
                                gasPrice: s,
                                maxFeePerGas: l,
                                to: c,
                                feeCurrency: d
                            } = t;
                            if (r <= 0) throw new eo.hJ({
                                chainId: r
                            });
                            if (c && !(0, el.U)(c)) throw new ea.b({
                                address: c
                            });
                            if (s) throw new ei.G("`gasPrice` is not a valid CIP-64 Transaction attribute.");
                            if (isPresent(l) && l > eh) throw new es.Hh({
                                maxFeePerGas: l
                            });
                            if (isPresent(a) && isPresent(l) && a > l) throw new es.cs({
                                maxFeePerGas: l,
                                maxPriorityFeePerGas: a
                            });
                            if (isPresent(d) && !(0, el.U)(d)) throw new ei.G("`feeCurrency` MUST be a token address for CIP-64 transactions.");
                            if (isEmpty(d)) throw new ei.G("`feeCurrency` must be provided for CIP-64 transactions.")
                        }(t);
                        let {
                            chainId: a,
                            gas: s,
                            nonce: l,
                            to: c,
                            value: d,
                            maxFeePerGas: u,
                            maxPriorityFeePerGas: m,
                            accessList: p,
                            feeCurrency: h,
                            data: f
                        } = t, y = [(0, Y.NC)(a), l ? (0, Y.NC)(l) : "0x", m ? (0, Y.NC)(m) : "0x", u ? (0, Y.NC)(u) : "0x", s ? (0, Y.NC)(s) : "0x", c ? ? "0x", d ? (0, Y.NC)(d) : "0x", f ? ? "0x", (0, eu.g)(p), h];
                        return r && y.push(27 n === r.v ? "0x" : (0, Y.NC)(1), (0, en.f)(r.r), (0, en.f)(r.s)), (0, ec.SM)(["0x7b", (0, ed.LV)(y)])
                    }(t, r) : isCIP42(t) ? function(t, r) {
                        ! function(t) {
                            let {
                                chainId: r,
                                maxPriorityFeePerGas: a,
                                gasPrice: s,
                                maxFeePerGas: l,
                                to: c,
                                feeCurrency: d,
                                gatewayFee: u,
                                gatewayFeeRecipient: m
                            } = t;
                            if (r <= 0) throw new eo.hJ({
                                chainId: r
                            });
                            if (c && !(0, el.U)(c)) throw new ea.b({
                                address: c
                            });
                            if (s) throw new ei.G("`gasPrice` is not a valid CIP-42 Transaction attribute.");
                            if (isPresent(l) && l > eh) throw new es.Hh({
                                maxFeePerGas: l
                            });
                            if (isPresent(a) && isPresent(l) && a > l) throw new es.cs({
                                maxFeePerGas: l,
                                maxPriorityFeePerGas: a
                            });
                            if (isPresent(u) && isEmpty(m) || isPresent(m) && isEmpty(u)) throw new ei.G("`gatewayFee` and `gatewayFeeRecipient` must be provided together.");
                            if (isPresent(d) && !(0, el.U)(d)) throw new ei.G("`feeCurrency` MUST be a token address for CIP-42 transactions.");
                            if (isPresent(m) && !(0, el.U)(m)) throw new ea.b(m);
                            if (isEmpty(d) && isEmpty(m)) throw new ei.G("Either `feeCurrency` or `gatewayFeeRecipient` must be provided for CIP-42 transactions.")
                        }(t);
                        let {
                            chainId: a,
                            gas: s,
                            nonce: l,
                            to: c,
                            value: d,
                            maxFeePerGas: u,
                            maxPriorityFeePerGas: m,
                            accessList: p,
                            feeCurrency: h,
                            gatewayFeeRecipient: f,
                            gatewayFee: y,
                            data: b
                        } = t, C = [(0, Y.NC)(a), l ? (0, Y.NC)(l) : "0x", m ? (0, Y.NC)(m) : "0x", u ? (0, Y.NC)(u) : "0x", s ? (0, Y.NC)(s) : "0x", h ? ? "0x", f ? ? "0x", y ? (0, Y.NC)(y) : "0x", c ? ? "0x", d ? (0, Y.NC)(d) : "0x", b ? ? "0x", (0, eu.g)(p)];
                        return r && C.push(27 n === r.v ? "0x" : (0, Y.NC)(1), (0, en.f)(r.r), (0, en.f)(r.s)), (0, ec.SM)(["0x7c", (0, ed.LV)(C)])
                    }(t, r) : (0, em.D)(t, r)
                },
                eh = 2 n ** 256 n - 1 n,
                ef = (0, s.a)({
                    id: 42220,
                    name: "Celo",
                    network: "celo",
                    nativeCurrency: {
                        decimals: 18,
                        name: "CELO",
                        symbol: "CELO"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://forno.celo.org"]
                        },
                        infura: {
                            http: ["https://celo-mainnet.infura.io/v3"]
                        },
                        public: {
                            http: ["https://forno.celo.org"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Celo Explorer",
                            url: "https://explorer.celo.org/mainnet"
                        },
                        etherscan: {
                            name: "CeloScan",
                            url: "https://celoscan.io"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 13112599
                        }
                    },
                    testnet: !1
                }, {
                    formatters: er,
                    serializers: ep
                }),
                ey = (0, s.a)({
                    id: 44787,
                    name: "Alfajores",
                    network: "celo-alfajores",
                    nativeCurrency: {
                        decimals: 18,
                        name: "CELO",
                        symbol: "A-CELO"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://alfajores-forno.celo-testnet.org"]
                        },
                        infura: {
                            http: ["https://celo-alfajores.infura.io/v3"]
                        },
                        public: {
                            http: ["https://alfajores-forno.celo-testnet.org"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Celo Explorer",
                            url: "https://explorer.celo.org/alfajores"
                        },
                        etherscan: {
                            name: "CeloScan",
                            url: "https://alfajores.celoscan.io/"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 14569001
                        }
                    },
                    testnet: !0
                }, {
                    formatters: er,
                    serializers: ep
                }),
                eg = (0, s.a)({
                    id: 88888,
                    name: "Chiliz Chain",
                    network: "chiliz-chain",
                    nativeCurrency: {
                        decimals: 18,
                        name: "CHZ",
                        symbol: "CHZ"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.ankr.com/chiliz", "https://chiliz.publicnode.com"]
                        },
                        public: {
                            http: ["https://rpc.ankr.com/chiliz", "https://chiliz.publicnode.com"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Chiliz Explorer",
                            url: "https://scan.chiliz.com"
                        }
                    }
                }),
                ev = (0, s.a)({
                    id: 17323,
                    name: "Cannoli",
                    network: "celo-cannoli",
                    nativeCurrency: {
                        decimals: 18,
                        name: "CELO",
                        symbol: "C-CELO"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://forno.cannoli.celo-testnet.org"]
                        },
                        public: {
                            http: ["https://forno.cannoli.celo-testnet.org"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Celo Explorer",
                            url: "https://explorer.celo.org/cannoli"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0x5Acb0aa8BF4E8Ff0d882Ee187140713C12BF9718",
                            blockCreated: 87429
                        }
                    },
                    testnet: !0
                }, {
                    formatters: er,
                    serializers: ep
                }),
                eb = (0, s.a)({
                    id: 61,
                    name: "Ethereum Classic",
                    network: "classic",
                    nativeCurrency: {
                        decimals: 18,
                        name: "ETC",
                        symbol: "ETC"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://etc.rivet.link"]
                        },
                        public: {
                            http: ["https://etc.rivet.link"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Blockscout",
                            url: "https://blockscout.com/etc/mainnet"
                        }
                    }
                }),
                ew = (0, s.a)({
                    id: 1030,
                    name: "Conflux eSpace",
                    network: "cfx-espace",
                    nativeCurrency: {
                        name: "Conflux",
                        symbol: "CFX",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://evm.confluxrpc.org"],
                            webSocket: ["wss://evm.confluxrpc.org/ws"]
                        },
                        public: {
                            http: ["https://evm.confluxrpc.org"],
                            webSocket: ["wss://evm.confluxrpc.org/ws"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "ConfluxScan",
                            url: "https://evm.confluxscan.io"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xEFf0078910f638cd81996cc117bccD3eDf2B072F",
                            blockCreated: 68602935
                        }
                    }
                }),
                e_ = (0, s.a)({
                    id: 71,
                    name: "Conflux eSpace Testnet",
                    network: "cfx-espace-testnet",
                    testnet: !0,
                    nativeCurrency: {
                        name: "Conflux",
                        symbol: "CFX",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://evmtestnet.confluxrpc.org"],
                            webSocket: ["wss://evmtestnet.confluxrpc.org/ws"]
                        },
                        public: {
                            http: ["https://evmtestnet.confluxrpc.org"],
                            webSocket: ["wss://evmtestnet.confluxrpc.org/ws"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "ConfluxScan",
                            url: "https://evmtestnet.confluxscan.io"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xEFf0078910f638cd81996cc117bccD3eDf2B072F",
                            blockCreated: 117499050
                        }
                    }
                }),
                ek = (0, s.a)({
                    id: 1116,
                    name: "Core Dao",
                    network: "coreDao",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Core",
                        symbol: "CORE"
                    },
                    rpcUrls: {
                        public: {
                            http: ["https://rpc.coredao.org"]
                        },
                        default: {
                            http: ["https://rpc.coredao.org"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "CoreDao",
                            url: "https://scan.coredao.org"
                        },
                        etherscan: {
                            name: "CoreDao",
                            url: "https://scan.coredao.org"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 11907934
                        }
                    },
                    testnet: !1
                }),
                ex = (0, s.a)({
                    id: 25,
                    name: "Cronos Mainnet",
                    network: "cronos",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Cronos",
                        symbol: "CRO"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://evm.cronos.org"]
                        },
                        public: {
                            http: ["https://evm.cronos.org"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Cronoscan",
                            url: "https://cronoscan.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 1963112
                        }
                    }
                }),
                eC = (0, s.a)({
                    id: 338,
                    name: "Cronos Testnet",
                    network: "cronos-testnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "CRO",
                        symbol: "tCRO"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://evm-t3.cronos.org"]
                        },
                        public: {
                            http: ["https://evm-t3.cronos.org"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Cronos Explorer",
                            url: "https://cronos.org/explorer/testnet3"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 10191251
                        }
                    },
                    testnet: !0
                }),
                eS = (0, s.a)({
                    id: 3737,
                    network: "crossbell",
                    name: "Crossbell",
                    nativeCurrency: {
                        decimals: 18,
                        name: "CSB",
                        symbol: "CSB"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.crossbell.io"]
                        },
                        public: {
                            http: ["https://rpc.crossbell.io"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "CrossScan",
                            url: "https://scan.crossbell.io"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 38246031
                        }
                    }
                }),
                eE = (0, s.a)({
                    id: 53935,
                    name: "DFK Chain",
                    network: "dfk",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Jewel",
                        symbol: "JEWEL"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://subnets.avax.network/defi-kingdoms/dfk-chain/rpc"]
                        },
                        public: {
                            http: ["https://subnets.avax.network/defi-kingdoms/dfk-chain/rpc"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "DFKSubnetScan",
                            url: "https://subnets.avax.network/defi-kingdoms"
                        },
                        default: {
                            name: "DFKSubnetScan",
                            url: "https://subnets.avax.network/defi-kingdoms"
                        }
                    }
                }),
                ej = (0, s.a)({
                    id: 2e3,
                    name: "Dogechain",
                    network: "dogechain",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Dogechain",
                        symbol: "DC"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.dogechain.dog"]
                        },
                        public: {
                            http: ["https://rpc.dogechain.dog"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "DogeChainExplorer",
                            url: "https://explorer.dogechain.dog"
                        },
                        default: {
                            name: "DogeChainExplorer",
                            url: "https://explorer.dogechain.dog"
                        }
                    }
                }),
                eI = (0, s.a)({
                    id: 2021,
                    name: "Edgeware EdgeEVM Mainnet",
                    network: "edgeware",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Edgeware",
                        symbol: "EDG"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://edgeware-evm.jelliedowl.net"]
                        },
                        public: {
                            http: ["https://edgeware-evm.jelliedowl.net"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "Edgscan by Bharathcoorg",
                            url: "https://edgscan.live"
                        },
                        default: {
                            name: "Edgscan by Bharathcoorg",
                            url: "https://edgscan.live"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 18117872
                        }
                    }
                }),
                eT = (0, s.a)({
                    id: 2022,
                    name: "Beresheet BereEVM Testnet",
                    network: "edgewareTestnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Testnet EDG",
                        symbol: "tEDG"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://beresheet-evm.jelliedowl.net"]
                        },
                        public: {
                            http: ["https://beresheet-evm.jelliedowl.net"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "Edgscan by Bharathcoorg",
                            url: "https://testnet.edgscan.live"
                        },
                        default: {
                            name: "Edgscan by Bharathcoorg",
                            url: "https://testnet.edgscan.live"
                        }
                    }
                }),
                eO = (0, s.a)({
                    id: 17777,
                    name: "EOS EVM",
                    network: "eos",
                    nativeCurrency: {
                        decimals: 18,
                        name: "EOS",
                        symbol: "EOS"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://api.evm.eosnetwork.com"]
                        },
                        public: {
                            http: ["https://api.evm.eosnetwork.com"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "EOS EVM Explorer",
                            url: "https://explorer.evm.eosnetwork.com"
                        },
                        default: {
                            name: "EOS EVM Explorer",
                            url: "https://explorer.evm.eosnetwork.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 7943933
                        }
                    }
                }),
                eN = (0, s.a)({
                    id: 15557,
                    name: "EOS EVM Testnet",
                    network: "eos",
                    nativeCurrency: {
                        decimals: 18,
                        name: "EOS",
                        symbol: "EOS"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://api.testnet.evm.eosnetwork.com"]
                        },
                        public: {
                            http: ["https://api.testnet.evm.eosnetwork.com"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "EOS EVM Testnet Explorer",
                            url: "https://explorer.testnet.evm.eosnetwork.com"
                        },
                        default: {
                            name: "EOS EVM Testnet Explorer",
                            url: "https://explorer.testnet.evm.eosnetwork.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 9067940
                        }
                    },
                    testnet: !0
                }),
                eP = (0, s.a)({
                    id: 9001,
                    name: "Evmos",
                    network: "evmos",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Evmos",
                        symbol: "EVMOS"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://eth.bd.evmos.org:8545"]
                        },
                        public: {
                            http: ["https://eth.bd.evmos.org:8545"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Evmos Block Explorer",
                            url: "https://escan.live"
                        }
                    }
                }),
                eA = (0, s.a)({
                    id: 9e3,
                    name: "Evmos Testnet",
                    network: "evmos-testnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Evmos",
                        symbol: "EVMOS"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://eth.bd.evmos.dev:8545"]
                        },
                        public: {
                            http: ["https://eth.bd.evmos.dev:8545"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Evmos Testnet Block Explorer",
                            url: "https://evm.evmos.dev/"
                        }
                    }
                }),
                eR = (0, s.a)({
                    id: 1994,
                    name: "Ekta",
                    network: "ekta",
                    nativeCurrency: {
                        decimals: 18,
                        name: "EKTA",
                        symbol: "EKTA"
                    },
                    rpcUrls: {
                        public: {
                            http: ["https://main.ekta.io"]
                        },
                        default: {
                            http: ["https://main.ekta.io"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Ektascan",
                            url: "https://ektascan.io"
                        }
                    }
                }),
                eF = (0, s.a)({
                    id: 1004,
                    name: "Ekta Testnet",
                    network: "ekta-testnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "EKTA",
                        symbol: "EKTA"
                    },
                    rpcUrls: {
                        public: {
                            http: ["https://test.ekta.io:8545"]
                        },
                        default: {
                            http: ["https://test.ekta.io:8545"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Test Ektascan",
                            url: "https://test.ektascan.io"
                        }
                    },
                    testnet: !0
                }),
                eW = (0, s.a)({
                    id: 250,
                    name: "Fantom",
                    network: "fantom",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Fantom",
                        symbol: "FTM"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.ankr.com/fantom"]
                        },
                        public: {
                            http: ["https://rpc.ankr.com/fantom"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "FTMScan",
                            url: "https://ftmscan.com"
                        },
                        default: {
                            name: "FTMScan",
                            url: "https://ftmscan.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 33001987
                        }
                    }
                }),
                eM = (0, s.a)({
                    id: 64240,
                    name: "Fantom Sonic Open Testnet",
                    network: "fantom-sonic-testnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Fantom",
                        symbol: "FTM"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpcapi.sonic.fantom.network"]
                        },
                        public: {
                            http: ["https://rpcapi.sonic.fantom.network"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Fantom Sonic Open Testnet Explorer",
                            url: "https://public-sonic.fantom.network"
                        }
                    },
                    testnet: !0
                }),
                eD = (0, s.a)({
                    id: 4002,
                    name: "Fantom Testnet",
                    network: "fantom-testnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Fantom",
                        symbol: "FTM"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.testnet.fantom.network"]
                        },
                        public: {
                            http: ["https://rpc.testnet.fantom.network"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "FTMScan",
                            url: "https://testnet.ftmscan.com"
                        },
                        default: {
                            name: "FTMScan",
                            url: "https://testnet.ftmscan.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 8328688
                        }
                    }
                }),
                eL = (0, s.a)({
                    id: 12306,
                    name: "Fibo Chain",
                    network: "fibochain",
                    nativeCurrency: {
                        decimals: 18,
                        name: "fibo",
                        symbol: "FIBO"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://network.hzroc.art"]
                        },
                        public: {
                            http: ["https://network.hzroc.art"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "FiboScan",
                            url: "https://scan.fibochain.org"
                        }
                    }
                }),
                ez = (0, s.a)({
                    id: 314,
                    name: "Filecoin Mainnet",
                    network: "filecoin-mainnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "filecoin",
                        symbol: "FIL"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://api.node.glif.io/rpc/v1"]
                        },
                        public: {
                            http: ["https://api.node.glif.io/rpc/v1"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Filfox",
                            url: "https://filfox.info/en"
                        },
                        filscan: {
                            name: "Filscan",
                            url: "https://filscan.io"
                        },
                        filscout: {
                            name: "Filscout",
                            url: "https://filscout.io/en"
                        },
                        glif: {
                            name: "Glif",
                            url: "https://explorer.glif.io"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 3328594
                        }
                    }
                }),
                eU = (0, s.a)({
                    id: 314159,
                    name: "Filecoin Calibration",
                    network: "filecoin-calibration",
                    nativeCurrency: {
                        decimals: 18,
                        name: "testnet filecoin",
                        symbol: "tFIL"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://api.calibration.node.glif.io/rpc/v1"]
                        },
                        public: {
                            http: ["https://api.calibration.node.glif.io/rpc/v1"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Filscan",
                            url: "https://calibration.filscan.io"
                        }
                    }
                }),
                eq = (0, s.a)({
                    id: 3141,
                    name: "Filecoin Hyperspace",
                    network: "filecoin-hyperspace",
                    nativeCurrency: {
                        decimals: 18,
                        name: "testnet filecoin",
                        symbol: "tFIL"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://api.hyperspace.node.glif.io/rpc/v1"]
                        },
                        public: {
                            http: ["https://api.hyperspace.node.glif.io/rpc/v1"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Filfox",
                            url: "https://hyperspace.filfox.info/en"
                        },
                        filscan: {
                            name: "Filscan",
                            url: "https://hyperspace.filscan.io"
                        }
                    }
                }),
                eB = (0, s.a)({
                    id: 14,
                    name: "Flare Mainnet",
                    network: "flare-mainnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "flare",
                        symbol: "FLR"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://flare-api.flare.network/ext/C/rpc"]
                        },
                        public: {
                            http: ["https://flare-api.flare.network/ext/C/rpc"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Flare Explorer",
                            url: "https://flare-explorer.flare.network"
                        }
                    }
                }),
                eV = (0, s.a)({
                    id: 114,
                    name: "Coston2",
                    network: "coston2",
                    nativeCurrency: {
                        decimals: 18,
                        name: "coston2flare",
                        symbol: "C2FLR"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://coston2-api.flare.network/ext/C/rpc"]
                        },
                        public: {
                            http: ["https://coston2-api.flare.network/ext/C/rpc"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Coston2 Explorer",
                            url: "https://coston2-explorer.flare.network"
                        }
                    },
                    testnet: !0
                }),
                eH = (0, s.a)({
                    id: 31337,
                    name: "Foundry",
                    network: "foundry",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Ether",
                        symbol: "ETH"
                    },
                    rpcUrls: {
                        default: {
                            http: ["http://127.0.0.1:8545"],
                            webSocket: ["ws://127.0.0.1:8545"]
                        },
                        public: {
                            http: ["http://127.0.0.1:8545"],
                            webSocket: ["ws://127.0.0.1:8545"]
                        }
                    }
                }),
                e$ = (0, s.a)({
                    id: 122,
                    name: "Fuse",
                    network: "fuse",
                    nativeCurrency: {
                        name: "Fuse",
                        symbol: "FUSE",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.fuse.io"]
                        },
                        public: {
                            http: ["https://rpc.fuse.io"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Fuse Explorer",
                            url: "https://explorer.fuse.io"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 16146628
                        }
                    }
                }),
                eK = (0, s.a)({
                    id: 123,
                    name: "Fuse Sparknet",
                    network: "fuse",
                    nativeCurrency: {
                        name: "Spark",
                        symbol: "SPARK",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.fusespark.io"]
                        },
                        public: {
                            http: ["https://rpc.fusespark.io"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Sparkent Explorer",
                            url: "https://explorer.fusespark.io"
                        }
                    }
                }),
                eG = (0, s.a)({
                    id: 4689,
                    name: "IoTeX",
                    network: "iotex",
                    nativeCurrency: {
                        decimals: 18,
                        name: "IoTeX",
                        symbol: "IOTX"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://babel-api.mainnet.iotex.io"],
                            webSocket: ["wss://babel-api.mainnet.iotex.io"]
                        },
                        public: {
                            http: ["https://babel-api.mainnet.iotex.io"],
                            webSocket: ["wss://babel-api.mainnet.iotex.io"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "IoTeXScan",
                            url: "https://iotexscan.io"
                        }
                    }
                }),
                eZ = (0, s.a)({
                    id: 4690,
                    name: "IoTeX Testnet",
                    network: "iotex-testnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "IoTeX",
                        symbol: "IOTX"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://babel-api.testnet.iotex.io"],
                            webSocket: ["wss://babel-api.testnet.iotex.io"]
                        },
                        public: {
                            http: ["https://babel-api.testnet.iotex.io"],
                            webSocket: ["wss://babel-api.testnet.iotex.io"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "IoTeXScan",
                            url: "https://testnet.iotexscan.io"
                        }
                    }
                }),
                eJ = (0, s.a)({
                    id: 8899,
                    name: "JIBCHAIN L1",
                    network: "jbc",
                    nativeCurrency: {
                        name: "JBC",
                        symbol: "JBC",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc-l1.jibchain.net"]
                        },
                        public: {
                            http: ["https://rpc-l1.jibchain.net"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Blockscout",
                            url: "https://exp-l1.jibchain.net"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xc0C8C486D1466C57Efe13C2bf000d4c56F47CBdC",
                            blockCreated: 2299048
                        }
                    },
                    testnet: !1
                }),
                eY = (0, s.a)({
                    id: 686,
                    name: "Karura",
                    network: "karura",
                    nativeCurrency: {
                        name: "Karura",
                        symbol: "KAR",
                        decimals: 18
                    },
                    rpcUrls: {
                        public: {
                            http: ["https://eth-rpc-karura.aca-api.network"],
                            webSocket: ["wss://eth-rpc-karura.aca-api.network"]
                        },
                        default: {
                            http: ["https://eth-rpc-karura.aca-api.network"],
                            webSocket: ["wss://eth-rpc-karura.aca-api.network"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Karura Blockscout",
                            url: "https://blockscout.karura.network"
                        }
                    },
                    testnet: !1
                }),
                eQ = (0, s.a)({
                    id: 1663,
                    name: "Horizen Gobi Testnet",
                    network: "gobi",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Test ZEN",
                        symbol: "tZEN"
                    },
                    rpcUrls: {
                        public: {
                            http: ["https://gobi-testnet.horizenlabs.io/ethv1"]
                        },
                        default: {
                            http: ["https://gobi-testnet.horizenlabs.io/ethv1"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Gobi Explorer",
                            url: "https://gobi-explorer.horizen.io"
                        }
                    },
                    contracts: {},
                    testnet: !0
                });
            var eX = a(65653);
            let e0 = (0, s.a)({
                    id: 100,
                    name: "Gnosis",
                    network: "gnosis",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Gnosis",
                        symbol: "xDAI"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.gnosischain.com"],
                            webSocket: ["wss://rpc.gnosischain.com/wss"]
                        },
                        public: {
                            http: ["https://rpc.gnosischain.com"],
                            webSocket: ["wss://rpc.gnosischain.com/wss"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "Gnosisscan",
                            url: "https://gnosisscan.io"
                        },
                        default: {
                            name: "Gnosis Chain Explorer",
                            url: "https://blockscout.com/xdai/mainnet"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 21022491
                        }
                    }
                }),
                e1 = (0, s.a)({
                    id: 10200,
                    name: "Gnosis Chiado",
                    network: "chiado",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Gnosis",
                        symbol: "xDAI"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.chiadochain.net"],
                            webSocket: ["wss://rpc.chiadochain.net/wss"]
                        },
                        public: {
                            http: ["https://rpc.chiadochain.net"],
                            webSocket: ["wss://rpc.chiadochain.net/wss"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Blockscout",
                            url: "https://blockscout.chiadochain.net"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 4967313
                        }
                    },
                    testnet: !0
                }),
                e2 = (0, s.a)({
                    id: 31337,
                    name: "Hardhat",
                    network: "hardhat",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Ether",
                        symbol: "ETH"
                    },
                    rpcUrls: {
                        default: {
                            http: ["http://127.0.0.1:8545"]
                        },
                        public: {
                            http: ["http://127.0.0.1:8545"]
                        }
                    }
                }),
                e3 = (0, s.a)({
                    id: 16666e5,
                    name: "Harmony One",
                    network: "harmony",
                    nativeCurrency: {
                        name: "Harmony",
                        symbol: "ONE",
                        decimals: 18
                    },
                    rpcUrls: {
                        public: {
                            http: ["https://rpc.ankr.com/harmony"]
                        },
                        default: {
                            http: ["https://rpc.ankr.com/harmony"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Harmony Explorer",
                            url: "https://explorer.harmony.one"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 24185753
                        }
                    }
                }),
                e5 = (0, s.a)({
                    id: 11235,
                    name: "HAQQ Mainnet",
                    network: "haqq-mainnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Islamic Coin",
                        symbol: "ISLM"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.eth.haqq.network"]
                        },
                        public: {
                            http: ["https://rpc.eth.haqq.network"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "HAQQ Explorer",
                            url: "https://explorer.haqq.network"
                        }
                    }
                }),
                e4 = (0, s.a)({
                    id: 54211,
                    name: "HAQQ Testedge 2",
                    network: "haqq-testedge-2",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Islamic Coin",
                        symbol: "ISLMT"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.eth.testedge2.haqq.network"]
                        },
                        public: {
                            http: ["https://rpc.eth.testedge2.haqq.network"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "HAQQ Explorer",
                            url: "https://explorer.testedge2.haqq.network"
                        }
                    }
                }),
                e6 = (0, s.a)({
                    id: 17e3,
                    network: "holesky",
                    name: "Holesky",
                    nativeCurrency: {
                        name: "Holesky Ether",
                        symbol: "ETH",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://ethereum-holesky.publicnode.com"]
                        },
                        public: {
                            http: ["https://ethereum-holesky.publicnode.com"]
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 77
                        }
                    },
                    testnet: !0
                }),
                e7 = (0, s.a)({
                    id: 2222,
                    name: "Kava EVM",
                    network: "kava-mainnet",
                    nativeCurrency: {
                        name: "Kava",
                        symbol: "KAVA",
                        decimals: 18
                    },
                    rpcUrls: {
                        public: {
                            http: ["https://evm.kava.io"]
                        },
                        default: {
                            http: ["https://evm.kava.io"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Kava EVM Explorer",
                            url: "https://kavascan.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 3661165
                        }
                    },
                    testnet: !1
                }),
                e8 = (0, s.a)({
                    id: 2221,
                    name: "Kava EVM Testnet",
                    network: "kava-testnet",
                    nativeCurrency: {
                        name: "Kava",
                        symbol: "KAVA",
                        decimals: 18
                    },
                    rpcUrls: {
                        public: {
                            http: ["https://evm.testnet.kava.io"]
                        },
                        default: {
                            http: ["https://evm.testnet.kava.io"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Kava EVM Testnet Explorer",
                            url: "https://testnet.kavascan.com/"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xDf1D724A7166261eEB015418fe8c7679BBEa7fd6",
                            blockCreated: 7242179
                        }
                    },
                    testnet: !0
                }),
                e9 = (0, s.a)({
                    id: 8217,
                    name: "Klaytn",
                    network: "klaytn",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Klaytn",
                        symbol: "KLAY"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://public-en-cypress.klaytn.net"]
                        },
                        public: {
                            http: ["https://public-en-cypress.klaytn.net"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "KlaytnScope",
                            url: "https://scope.klaytn.com"
                        },
                        default: {
                            name: "KlaytnScope",
                            url: "https://scope.klaytn.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 96002415
                        }
                    }
                }),
                te = (0, s.a)({
                    id: 1001,
                    name: "Klaytn Baobab Testnet",
                    network: "klaytn-baobab",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Baobab Klaytn",
                        symbol: "KLAY"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://public-en-baobab.klaytn.net"]
                        },
                        public: {
                            http: ["https://public-en-baobab.klaytn.net"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "KlaytnScope",
                            url: "https://baobab.klaytnscope.com"
                        },
                        default: {
                            name: "KlaytnScope",
                            url: "https://baobab.klaytnscope.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 123390593
                        }
                    },
                    testnet: !0
                }),
                tt = (0, s.a)({
                    id: 255,
                    network: "kroma",
                    name: "Kroma",
                    nativeCurrency: {
                        name: "ETH",
                        symbol: "ETH",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://api.kroma.network"]
                        },
                        public: {
                            http: ["https://api.kroma.network"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Kroma Explorer",
                            url: "https://blockscout.kroma.network"
                        }
                    },
                    testnet: !1
                }),
                tn = (0, s.a)({
                    id: 2358,
                    network: "kroma-sepolia",
                    name: "Kroma Sepolia",
                    nativeCurrency: {
                        name: "Sepolia Ether",
                        symbol: "ETH",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://api.sepolia.kroma.network"]
                        },
                        public: {
                            http: ["https://api.sepolia.kroma.network"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Kroma Sepolia Explorer",
                            url: "https://blockscout.sepolia.kroma.network"
                        }
                    },
                    testnet: !0
                }),
                tr = (0, s.a)({
                    id: 59144,
                    name: "Linea Mainnet",
                    network: "linea-mainnet",
                    nativeCurrency: {
                        name: "Linea Ether",
                        symbol: "ETH",
                        decimals: 18
                    },
                    rpcUrls: {
                        infura: {
                            http: ["https://linea-mainnet.infura.io/v3"],
                            webSocket: ["wss://linea-mainnet.infura.io/ws/v3"]
                        },
                        default: {
                            http: ["https://rpc.linea.build"],
                            webSocket: ["wss://rpc.linea.build"]
                        },
                        public: {
                            http: ["https://rpc.linea.build"],
                            webSocket: ["wss://rpc.linea.build"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Etherscan",
                            url: "https://lineascan.build"
                        },
                        etherscan: {
                            name: "Etherscan",
                            url: "https://lineascan.build"
                        },
                        blockscout: {
                            name: "Blockscout",
                            url: "https://explorer.linea.build"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 42
                        }
                    },
                    testnet: !1
                }),
                ta = (0, s.a)({
                    id: 59140,
                    name: "Linea Goerli Testnet",
                    network: "linea-testnet",
                    nativeCurrency: {
                        name: "Linea Ether",
                        symbol: "ETH",
                        decimals: 18
                    },
                    rpcUrls: {
                        infura: {
                            http: ["https://linea-goerli.infura.io/v3"],
                            webSocket: ["wss://linea-goerli.infura.io/ws/v3"]
                        },
                        default: {
                            http: ["https://rpc.goerli.linea.build"],
                            webSocket: ["wss://rpc.goerli.linea.build"]
                        },
                        public: {
                            http: ["https://rpc.goerli.linea.build"],
                            webSocket: ["wss://rpc.goerli.linea.build"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Etherscan",
                            url: "https://goerli.lineascan.build"
                        },
                        etherscan: {
                            name: "Etherscan",
                            url: "https://goerli.lineascan.build"
                        },
                        blockscout: {
                            name: "Blockscout",
                            url: "https://explorer.goerli.linea.build"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 498623
                        }
                    },
                    testnet: !0
                }),
                ti = (0, s.a)({
                    id: 1337,
                    name: "Localhost",
                    network: "localhost",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Ether",
                        symbol: "ETH"
                    },
                    rpcUrls: {
                        default: {
                            http: ["http://127.0.0.1:8545"]
                        },
                        public: {
                            http: ["http://127.0.0.1:8545"]
                        }
                    }
                }),
                to = (0, s.a)({
                    id: 42,
                    network: "lukso",
                    name: "LUKSO",
                    nativeCurrency: {
                        name: "LUKSO",
                        symbol: "LYX",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.mainnet.lukso.network"],
                            webSocket: ["wss://ws-rpc.mainnet.lukso.network"]
                        },
                        public: {
                            http: ["https://rpc.mainnet.lukso.network"],
                            webSocket: ["wss://ws-rpc.mainnet.lukso.network"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "LUKSO Mainnet Explorer",
                            url: "https://explorer.execution.mainnet.lukso.network"
                        }
                    }
                });
            var ts = a(44333);
            let tl = (0, s.a)({
                    id: 595,
                    name: "Mandala TC9",
                    network: "mandala",
                    nativeCurrency: {
                        name: "Mandala",
                        symbol: "mACA",
                        decimals: 18
                    },
                    rpcUrls: {
                        public: {
                            http: ["https://eth-rpc-tc9.aca-staging.network"],
                            webSocket: ["wss://eth-rpc-tc9.aca-staging.network"]
                        },
                        default: {
                            http: ["https://eth-rpc-tc9.aca-staging.network"],
                            webSocket: ["wss://eth-rpc-tc9.aca-staging.network"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Mandala Blockscout",
                            url: "https://blockscout.mandala.aca-staging.network"
                        }
                    },
                    testnet: !0
                }),
                tc = (0, s.a)({
                    id: 169,
                    name: "Manta Pacific Mainnet",
                    network: "manta",
                    nativeCurrency: {
                        decimals: 18,
                        name: "ETH",
                        symbol: "ETH"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://pacific-rpc.manta.network/http"]
                        },
                        public: {
                            http: ["https://pacific-rpc.manta.network/http"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "Manta Explorer",
                            url: "https://pacific-explorer.manta.network"
                        },
                        default: {
                            name: "Manta Explorer",
                            url: "https://pacific-explorer.manta.network"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 332890
                        }
                    }
                }),
                td = (0, s.a)({
                    id: 3441005,
                    name: "Manta Pacific Testnet",
                    network: "manta-testnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "ETH",
                        symbol: "ETH"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://manta-testnet.calderachain.xyz/http"]
                        },
                        public: {
                            http: ["https://manta-testnet.calderachain.xyz/http"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "Manta Testnet Explorer",
                            url: "https://pacific-explorer.testnet.manta.network"
                        },
                        default: {
                            name: "Manta Testnet Explorer",
                            url: "https://pacific-explorer.testnet.manta.network"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0x211B1643b95Fe76f11eD8880EE810ABD9A4cf56C",
                            blockCreated: 419915
                        }
                    },
                    testnet: !0
                }),
                tu = (0, s.a)({
                    id: 5e3,
                    name: "Mantle",
                    network: "mantle",
                    nativeCurrency: {
                        decimals: 18,
                        name: "MNT",
                        symbol: "MNT"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.mantle.xyz"]
                        },
                        public: {
                            http: ["https://rpc.mantle.xyz"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "Mantle Explorer",
                            url: "https://explorer.mantle.xyz"
                        },
                        default: {
                            name: "Mantle Explorer",
                            url: "https://explorer.mantle.xyz"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 304717
                        }
                    }
                }),
                tm = (0, s.a)({
                    id: 5001,
                    name: "Mantle Testnet",
                    network: "mantle",
                    nativeCurrency: {
                        decimals: 18,
                        name: "MNT",
                        symbol: "MNT"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.testnet.mantle.xyz"]
                        },
                        public: {
                            http: ["https://rpc.testnet.mantle.xyz"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "Mantle Testnet Explorer",
                            url: "https://explorer.testnet.mantle.xyz"
                        },
                        default: {
                            name: "Mantle Testnet Explorer",
                            url: "https://explorer.testnet.mantle.xyz"
                        }
                    },
                    testnet: !0
                }),
                tp = (0, s.a)({
                    id: 82,
                    name: "Meter",
                    network: "meter",
                    nativeCurrency: {
                        decimals: 18,
                        name: "MTR",
                        symbol: "MTR"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.meter.io"]
                        },
                        public: {
                            http: ["https://rpc.meter.io"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "MeterScan",
                            url: "https://scan.meter.io"
                        }
                    }
                }),
                th = (0, s.a)({
                    id: 83,
                    name: "Meter Testnet",
                    network: "meter-testnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "MTR",
                        symbol: "MTR"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpctest.meter.io"]
                        },
                        public: {
                            http: ["https://rpctest.meter.io"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "MeterTestnetScan",
                            url: "https://scan-warringstakes.meter.io"
                        }
                    }
                }),
                tf = (0, s.a)({
                    id: 1088,
                    name: "Metis",
                    network: "andromeda",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Metis",
                        symbol: "METIS"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://andromeda.metis.io/?owner=1088"]
                        },
                        public: {
                            http: ["https://andromeda.metis.io/?owner=1088"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Andromeda Explorer",
                            url: "https://andromeda-explorer.metis.io"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 2338552
                        }
                    }
                }),
                ty = (0, s.a)({
                    id: 599,
                    name: "Metis Goerli",
                    network: "metis-goerli",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Metis Goerli",
                        symbol: "METIS"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://goerli.gateway.metisdevops.link"]
                        },
                        public: {
                            http: ["https://goerli.gateway.metisdevops.link"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Metis Goerli Explorer",
                            url: "https://goerli.explorer.metisdevops.link"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 1006207
                        }
                    }
                }),
                tg = (0, s.a)({
                    id: 7518,
                    network: "MEVerse",
                    name: "MEVerse Chain Mainnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "MEVerse",
                        symbol: "MEV"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.meversemainnet.io"]
                        },
                        public: {
                            http: ["https://rpc.meversemainnet.io"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Explorer",
                            url: "https://www.meversescan.io"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 86881340
                        }
                    }
                }),
                tv = (0, s.a)({
                    id: 4759,
                    network: "MEVerse Testnet",
                    name: "MEVerse Chain Testnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "MEVerse",
                        symbol: "MEV"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.meversetestnet.io"]
                        },
                        public: {
                            http: ["https://rpc.meversetestnet.io"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Explorer",
                            url: "https://testnet.meversescan.io/"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 64371115
                        }
                    },
                    testnet: !0
                }),
                tb = (0, s.a)({
                    id: 919,
                    name: "Mode Testnet",
                    network: "mode-testnet",
                    nativeCurrency: {
                        name: "Ether",
                        symbol: "ETH",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://sepolia.mode.network"]
                        },
                        public: {
                            http: ["https://sepolia.mode.network"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Blockscout",
                            url: "https://sepolia.explorer.mode.network"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xBAba8373113Fb7a68f195deF18732e01aF8eDfCF",
                            blockCreated: 3019007
                        }
                    },
                    testnet: !0
                }),
                tw = (0, s.a)({
                    id: 1287,
                    name: "Moonbase Alpha",
                    network: "moonbase-alpha",
                    nativeCurrency: {
                        decimals: 18,
                        name: "DEV",
                        symbol: "DEV"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.api.moonbase.moonbeam.network"],
                            webSocket: ["wss://wss.api.moonbase.moonbeam.network"]
                        },
                        public: {
                            http: ["https://rpc.api.moonbase.moonbeam.network"],
                            webSocket: ["wss://wss.api.moonbase.moonbeam.network"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Moonscan",
                            url: "https://moonbase.moonscan.io"
                        },
                        etherscan: {
                            name: "Moonscan",
                            url: "https://moonbase.moonscan.io"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 1850686
                        }
                    },
                    testnet: !0
                }),
                t_ = (0, s.a)({
                    id: 1284,
                    name: "Moonbeam",
                    network: "moonbeam",
                    nativeCurrency: {
                        decimals: 18,
                        name: "GLMR",
                        symbol: "GLMR"
                    },
                    rpcUrls: {
                        public: {
                            http: ["https://moonbeam.public.blastapi.io"],
                            webSocket: ["wss://moonbeam.public.blastapi.io"]
                        },
                        default: {
                            http: ["https://moonbeam.public.blastapi.io"],
                            webSocket: ["wss://moonbeam.public.blastapi.io"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Moonscan",
                            url: "https://moonscan.io"
                        },
                        etherscan: {
                            name: "Moonscan",
                            url: "https://moonscan.io"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 609002
                        }
                    },
                    testnet: !1
                }),
                tk = (0, s.a)({
                    id: 1281,
                    name: "Moonbeam Development Node",
                    network: "development",
                    nativeCurrency: {
                        decimals: 18,
                        name: "DEV",
                        symbol: "DEV"
                    },
                    rpcUrls: {
                        default: {
                            http: ["http://127.0.0.1:9944"],
                            webSocket: ["wss://127.0.0.1:9944"]
                        },
                        public: {
                            http: ["http://127.0.0.1:9944"],
                            webSocket: ["wss://127.0.0.1:9944"]
                        }
                    }
                }),
                tx = (0, s.a)({
                    id: 1285,
                    name: "Moonriver",
                    network: "moonriver",
                    nativeCurrency: {
                        decimals: 18,
                        name: "MOVR",
                        symbol: "MOVR"
                    },
                    rpcUrls: {
                        public: {
                            http: ["https://moonriver.public.blastapi.io"],
                            webSocket: ["wss://moonriver.public.blastapi.io"]
                        },
                        default: {
                            http: ["https://moonriver.public.blastapi.io"],
                            webSocket: ["wss://moonriver.public.blastapi.io"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Moonscan",
                            url: "https://moonriver.moonscan.io"
                        },
                        etherscan: {
                            name: "Moonscan",
                            url: "https://moonriver.moonscan.io"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 1597904
                        }
                    },
                    testnet: !1
                }),
                tC = (0, s.a)({
                    id: 245022926,
                    network: "neonDevnet",
                    name: "Neon EVM DevNet",
                    nativeCurrency: {
                        name: "NEON",
                        symbol: "NEON",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://devnet.neonevm.org"]
                        },
                        public: {
                            http: ["https://devnet.neonevm.org"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Neonscan",
                            url: "https://devnet.neonscan.org"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 205206112
                        }
                    },
                    testnet: !0
                }),
                tS = (0, s.a)({
                    id: 245022934,
                    network: "neonMainnet",
                    name: "Neon EVM MainNet",
                    nativeCurrency: {
                        name: "NEON",
                        symbol: "NEON",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://neon-proxy-mainnet.solana.p2p.org"]
                        },
                        public: {
                            http: ["https://neon-proxy-mainnet.solana.p2p.org"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Neonscan",
                            url: "https://neonscan.org"
                        }
                    },
                    contracts: {},
                    testnet: !1
                }),
                tE = (0, s.a)({
                    id: 4242,
                    name: "Nexi",
                    network: "nexi",
                    nativeCurrency: {
                        name: "Nexi",
                        symbol: "NEXI",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.chain.nexi.technology"]
                        },
                        public: {
                            http: ["https://rpc.chain.nexi.technology"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "NexiScan",
                            url: "https://www.nexiscan.com"
                        },
                        default: {
                            name: "NexiScan",
                            url: "https://www.nexiscan.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0x0277A46Cc69A57eE3A6C8c158bA874832F718B8E",
                            blockCreated: 25770160
                        }
                    }
                }),
                tj = (0, s.a)({
                    id: 240,
                    name: "Nexilix Smart Chain",
                    network: "nexilix",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Nexilix",
                        symbol: "NEXILIX"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpcurl.pos.nexilix.com"]
                        },
                        public: {
                            http: ["https://rpcurl.pos.nexilix.com"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "NexilixScan",
                            url: "https://scan.nexilix.com"
                        },
                        default: {
                            name: "NexilixScan",
                            url: "https://scan.nexilix.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0x58381c8e2BF9d0C2C4259cA14BdA9Afe02831244",
                            blockCreated: 74448
                        }
                    }
                }),
                tI = (0, s.a)({
                    id: 248,
                    name: "Oasys",
                    network: "oasys",
                    nativeCurrency: {
                        name: "Oasys",
                        symbol: "OAS",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.mainnet.oasys.games"]
                        },
                        public: {
                            http: ["https://rpc.mainnet.oasys.games"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "OasysScan",
                            url: "https://scan.oasys.games"
                        }
                    }
                }),
                tT = (0, s.a)({
                    id: 4090,
                    network: "oasis-testnet",
                    name: "Oasis Testnet",
                    nativeCurrency: {
                        name: "Fasttoken",
                        symbol: "FTN",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc1.oasis.bahamutchain.com"]
                        },
                        public: {
                            http: ["https://rpc1.oasis.bahamutchain.com"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Ftnscan",
                            url: "https://oasis.ftnscan.com"
                        }
                    },
                    testnet: !0
                }),
                tO = (0, s.a)({
                    id: 66,
                    name: "OKC",
                    network: "okc",
                    nativeCurrency: {
                        decimals: 18,
                        name: "OKT",
                        symbol: "OKT"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://exchainrpc.okex.org"]
                        },
                        public: {
                            http: ["https://exchainrpc.okex.org"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "oklink",
                            url: "https://www.oklink.com/okc"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 10364792
                        }
                    }
                });
            var tN = a(96044),
                tP = a(47201),
                tA = a(33233);
            let tR = (0, s.a)({
                    id: 204,
                    name: "opBNB",
                    network: "opBNB Mainnet",
                    nativeCurrency: {
                        name: "BNB",
                        symbol: "BNB",
                        decimals: 18
                    },
                    rpcUrls: {
                        public: {
                            http: ["https://opbnb-mainnet-rpc.bnbchain.org"]
                        },
                        default: {
                            http: ["https://opbnb-mainnet-rpc.bnbchain.org"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "opbnbscan",
                            url: "https://mainnet.opbnbscan.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 512881
                        }
                    }
                }),
                tF = (0, s.a)({
                    id: 5611,
                    name: "opBNB Testnet",
                    network: "opBNB Testnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "tBNB",
                        symbol: "tBNB"
                    },
                    rpcUrls: {
                        public: {
                            http: ["https://opbnb-testnet-rpc.bnbchain.org"]
                        },
                        default: {
                            http: ["https://opbnb-testnet-rpc.bnbchain.org"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "opbnbscan",
                            url: "https://testnet.opbnbscan.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 3705108
                        }
                    },
                    testnet: !0
                });
            var tW = a(53546);
            let tM = (0, s.a)({
                    id: 424,
                    network: "pgn",
                    name: "PGN",
                    nativeCurrency: {
                        name: "Ether",
                        symbol: "ETH",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.publicgoods.network"]
                        },
                        public: {
                            http: ["https://rpc.publicgoods.network"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "PGN Explorer",
                            url: "https://explorer.publicgoods.network"
                        },
                        blocksout: {
                            name: "PGN Explorer",
                            url: "https://explorer.publicgoods.network"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 3380209
                        }
                    }
                }, {
                    formatters: tW.V
                }),
                tD = (0, s.a)({
                    id: 58008,
                    network: "pgn-testnet",
                    name: "PGN ",
                    nativeCurrency: {
                        name: "Ether",
                        symbol: "ETH",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://sepolia.publicgoods.network"]
                        },
                        public: {
                            http: ["https://sepolia.publicgoods.network"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "PGN Testnet Explorer",
                            url: "https://explorer.sepolia.publicgoods.network"
                        },
                        blocksout: {
                            name: "PGN Testnet Explorer",
                            url: "https://explorer.sepolia.publicgoods.network"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 3754925
                        }
                    },
                    testnet: !0
                }, {
                    formatters: tW.V
                }),
                tL = (0, s.a)({
                    id: 242,
                    name: "Plinga",
                    network: "plinga",
                    nativeCurrency: {
                        name: "Plinga",
                        symbol: "PLINGA",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpcurl.mainnet.plgchain.com"]
                        },
                        public: {
                            http: ["https://rpcurl.mainnet.plgchain.com"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Plgscan",
                            url: "https://www.plgscan.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0x0989576160f2e7092908BB9479631b901060b6e4",
                            blockCreated: 204489
                        }
                    }
                }),
                tz = (0, s.a)({
                    id: 137,
                    name: "Polygon",
                    network: "matic",
                    nativeCurrency: {
                        name: "MATIC",
                        symbol: "MATIC",
                        decimals: 18
                    },
                    rpcUrls: {
                        alchemy: {
                            http: ["https://polygon-mainnet.g.alchemy.com/v2"],
                            webSocket: ["wss://polygon-mainnet.g.alchemy.com/v2"]
                        },
                        infura: {
                            http: ["https://polygon-mainnet.infura.io/v3"],
                            webSocket: ["wss://polygon-mainnet.infura.io/ws/v3"]
                        },
                        default: {
                            http: ["https://polygon-rpc.com"]
                        },
                        public: {
                            http: ["https://polygon-rpc.com"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "PolygonScan",
                            url: "https://polygonscan.com"
                        },
                        default: {
                            name: "PolygonScan",
                            url: "https://polygonscan.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 25770160
                        }
                    }
                }),
                tU = (0, s.a)({
                    id: 80001,
                    name: "Polygon Mumbai",
                    network: "maticmum",
                    nativeCurrency: {
                        name: "MATIC",
                        symbol: "MATIC",
                        decimals: 18
                    },
                    rpcUrls: {
                        alchemy: {
                            http: ["https://polygon-mumbai.g.alchemy.com/v2"],
                            webSocket: ["wss://polygon-mumbai.g.alchemy.com/v2"]
                        },
                        infura: {
                            http: ["https://polygon-mumbai.infura.io/v3"],
                            webSocket: ["wss://polygon-mumbai.infura.io/ws/v3"]
                        },
                        default: {
                            http: ["https://rpc.ankr.com/polygon_mumbai"]
                        },
                        public: {
                            http: ["https://rpc.ankr.com/polygon_mumbai"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "PolygonScan",
                            url: "https://mumbai.polygonscan.com"
                        },
                        default: {
                            name: "PolygonScan",
                            url: "https://mumbai.polygonscan.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 25770160
                        }
                    },
                    testnet: !0
                }),
                tq = (0, s.a)({
                    id: 1442,
                    name: "Polygon zkEVM Testnet",
                    network: "polygon-zkevm-testnet",
                    nativeCurrency: {
                        name: "Ether",
                        symbol: "ETH",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.public.zkevm-test.net"]
                        },
                        public: {
                            http: ["https://rpc.public.zkevm-test.net"]
                        }
                    },
                    blockExplorers: {
                        blockscout: {
                            name: "Blockscout",
                            url: "https://explorer.public.zkevm-test.net"
                        },
                        default: {
                            name: "PolygonScan",
                            url: "https://testnet-zkevm.polygonscan.com"
                        }
                    },
                    testnet: !0,
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 525686
                        }
                    }
                }),
                tB = (0, s.a)({
                    id: 1101,
                    name: "Polygon zkEVM",
                    network: "polygon-zkevm",
                    nativeCurrency: {
                        name: "Ether",
                        symbol: "ETH",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://zkevm-rpc.com"]
                        },
                        public: {
                            http: ["https://zkevm-rpc.com"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "PolygonScan",
                            url: "https://zkevm.polygonscan.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 57746
                        }
                    }
                }),
                tV = (0, s.a)({
                    id: 369,
                    network: "pulsechain",
                    name: "PulseChain",
                    nativeCurrency: {
                        name: "Pulse",
                        symbol: "PLS",
                        decimals: 18
                    },
                    testnet: !1,
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.pulsechain.com"],
                            webSocket: ["wss://ws.pulsechain.com"]
                        },
                        public: {
                            http: ["https://rpc.pulsechain.com"],
                            webSocket: ["wss://ws.pulsechain.com"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "PulseScan",
                            url: "https://scan.pulsechain.com"
                        }
                    },
                    contracts: {
                        ensRegistry: {
                            address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
                        },
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 14353601
                        }
                    }
                }),
                tH = (0, s.a)({
                    id: 943,
                    network: "pulsechainV4",
                    name: "PulseChain V4",
                    testnet: !0,
                    nativeCurrency: {
                        name: "V4 Pulse",
                        symbol: "v4PLS",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.v4.testnet.pulsechain.com"],
                            webSocket: ["wss://ws.v4.testnet.pulsechain.com"]
                        },
                        public: {
                            http: ["https://rpc.v4.testnet.pulsechain.com"],
                            webSocket: ["wss://ws.v4.testnet.pulsechain.com"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "PulseScan",
                            url: "https://scan.v4.testnet.pulsechain.com"
                        }
                    },
                    contracts: {
                        ensRegistry: {
                            address: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
                        },
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 14353601
                        }
                    }
                }),
                t$ = (0, s.a)({
                    id: 35441,
                    name: "Q Mainnet",
                    network: "q-mainnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Q",
                        symbol: "Q"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.q.org"]
                        },
                        public: {
                            http: ["https://rpc.q.org"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Q Mainnet Explorer",
                            url: "https://explorer.q.org"
                        }
                    }
                }),
                tK = (0, s.a)({
                    id: 35443,
                    name: "Q Testnet",
                    network: "q-testnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Q",
                        symbol: "Q"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.qtestnet.org"]
                        },
                        public: {
                            http: ["https://rpc.qtestnet.org"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Q Testnet Explorer",
                            url: "https://explorer.qtestnet.org"
                        }
                    },
                    testnet: !0
                }),
                tG = (0, s.a)({
                    id: 570,
                    name: "Rollux Mainnet",
                    network: "rollux",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Syscoin",
                        symbol: "SYS"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.rollux.com"],
                            webSocket: ["wss://rpc.rollux.com/wss"]
                        },
                        public: {
                            http: ["https://rollux.public-rpc.com"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "RolluxExplorer",
                            url: "https://explorer.rollux.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 119222
                        }
                    }
                }),
                tZ = (0, s.a)({
                    id: 57e3,
                    name: "Rollux Testnet",
                    network: "rollux-testnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Syscoin",
                        symbol: "SYS"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc-tanenbaum.rollux.com/"],
                            webSocket: ["wss://rpc-tanenbaum.rollux.com/wss"]
                        },
                        public: {
                            http: ["https://rpc-tanenbaum.rollux.com/"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "RolluxTestnetExplorer",
                            url: "https://rollux.tanenbaum.io"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 1813675
                        }
                    }
                }),
                tJ = (0, s.a)({
                    id: 2020,
                    name: "Ronin",
                    network: "ronin",
                    nativeCurrency: {
                        name: "RON",
                        symbol: "RON",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://api.roninchain.com/rpc"]
                        },
                        public: {
                            http: ["https://api.roninchain.com/rpc"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Ronin Explorer",
                            url: "https://app.roninchain.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 26023535
                        }
                    }
                }),
                tY = (0, s.a)({
                    id: 30,
                    name: "Rootstock Mainnet",
                    network: "rootstock",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Rootstock Bitcoin",
                        symbol: "RBTC"
                    },
                    rpcUrls: {
                        public: {
                            http: ["https://public-node.rsk.co"]
                        },
                        default: {
                            http: ["https://public-node.rsk.co"]
                        }
                    },
                    blockExplorers: {
                        blockscout: {
                            name: "Blockscout",
                            url: "https://rootstock.blockscout.com"
                        },
                        default: {
                            name: "RSK Explorer",
                            url: "https://explorer.rsk.co"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 4249540
                        }
                    }
                }),
                tQ = (0, s.a)({
                    id: 2021,
                    name: "Saigon Testnet",
                    network: "saigon",
                    nativeCurrency: {
                        name: "RON",
                        symbol: "RON",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://saigon-testnet.roninchain.com/rpc"]
                        },
                        public: {
                            http: ["https://saigon-testnet.roninchain.com/rpc"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Saigon Explorer",
                            url: "https://saigon-explorer.roninchain.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 18736871
                        }
                    },
                    testnet: !0
                }),
                tX = (0, s.a)({
                    id: 23294,
                    name: "Oasis Sapphire",
                    network: "sapphire",
                    nativeCurrency: {
                        name: "Sapphire Rose",
                        symbol: "ROSE",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://sapphire.oasis.io"],
                            webSocket: ["wss://sapphire.oasis.io/ws"]
                        },
                        public: {
                            http: ["https://sapphire.oasis.io"],
                            webSocket: ["wss://sapphire.oasis.io/ws"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Oasis Sapphire Explorer",
                            url: "https://explorer.sapphire.oasis.io"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 734531
                        }
                    }
                }),
                t0 = (0, s.a)({
                    id: 23295,
                    name: "Oasis Sapphire Testnet",
                    network: "sapphire-testnet",
                    nativeCurrency: {
                        name: "Sapphire Test Rose",
                        symbol: "TEST",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://testnet.sapphire.oasis.dev"],
                            webSocket: ["wss://testnet.sapphire.oasis.dev/ws"]
                        },
                        public: {
                            http: ["https://testnet.sapphire.oasis.dev"],
                            webSocket: ["wss://testnet.sapphire.oasis.dev/ws"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Oasis Sapphire Testnet Explorer",
                            url: "https://testnet.explorer.sapphire.oasis.dev"
                        }
                    },
                    testnet: !0
                }),
                t1 = (0, s.a)({
                    id: 534352,
                    name: "Scroll",
                    network: "scroll",
                    nativeCurrency: {
                        name: "Ether",
                        symbol: "ETH",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.scroll.io"],
                            webSocket: ["wss://wss-rpc.scroll.io/ws"]
                        },
                        public: {
                            http: ["https://rpc.scroll.io"],
                            webSocket: ["wss://wss-rpc.scroll.io/ws"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Scrollscan",
                            url: "https://scrollscan.com"
                        },
                        blockscout: {
                            name: "Blockscout",
                            url: "https://blockscout.scroll.io"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 14
                        }
                    },
                    testnet: !1
                }),
                t2 = (0, s.a)({
                    id: 534351,
                    name: "Scroll Sepolia",
                    network: "scroll-sepolia",
                    nativeCurrency: {
                        name: "Ether",
                        symbol: "ETH",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://sepolia-rpc.scroll.io"]
                        },
                        public: {
                            http: ["https://sepolia-rpc.scroll.io"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Blockscout",
                            url: "https://sepolia-blockscout.scroll.io"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xca11bde05977b3631167028862be2a173976ca11",
                            blockCreated: 9473
                        }
                    },
                    testnet: !0
                }),
                t3 = (0, s.a)({
                    id: 534353,
                    name: "Scroll Testnet",
                    network: "scroll-testnet",
                    nativeCurrency: {
                        name: "Ether",
                        symbol: "ETH",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://alpha-rpc.scroll.io/l2"],
                            webSocket: ["wss://alpha-rpc.scroll.io/l2/ws"]
                        },
                        public: {
                            http: ["https://alpha-rpc.scroll.io/l2"],
                            webSocket: ["wss://alpha-rpc.scroll.io/l2/ws"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Blockscout",
                            url: "https://blockscout.scroll.io"
                        }
                    },
                    testnet: !0
                });
            var t5 = a(2807);
            let t4 = (0, s.a)({
                    id: 148,
                    name: "Shimmer",
                    network: "shimmer",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Shimmer",
                        symbol: "SMR"
                    },
                    rpcUrls: {
                        public: {
                            http: ["https://json-rpc.evm.shimmer.network"]
                        },
                        default: {
                            http: ["https://json-rpc.evm.shimmer.network"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Shimmer Network Explorer",
                            url: "https://explorer.evm.shimmer.network"
                        }
                    }
                }),
                t6 = (0, s.a)({
                    id: 1073,
                    name: "Shimmer Testnet",
                    network: "shimmer-testnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Shimmer",
                        symbol: "SMR"
                    },
                    rpcUrls: {
                        public: {
                            http: ["https://json-rpc.evm.testnet.shimmer.network"]
                        },
                        default: {
                            http: ["https://json-rpc.evm.testnet.shimmer.network"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Shimmer Network Explorer",
                            url: "https://explorer.evm.testnet.shimmer.network"
                        }
                    },
                    testnet: !0
                }),
                t7 = (0, s.a)({
                    id: 391845894,
                    name: "SKALE | Block Brawlers",
                    network: "skale-brawl",
                    nativeCurrency: {
                        name: "BRAWL",
                        symbol: "BRAWL",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://mainnet.skalenodes.com/v1/frayed-decent-antares"],
                            webSocket: ["wss://mainnet.skalenodes.com/v1/ws/frayed-decent-antares"]
                        },
                        public: {
                            http: ["https://mainnet.skalenodes.com/v1/frayed-decent-antares"],
                            webSocket: ["wss://mainnet.skalenodes.com/v1/ws/frayed-decent-antares"]
                        }
                    },
                    blockExplorers: {
                        blockscout: {
                            name: "SKALE Explorer",
                            url: "https://frayed-decent-antares.explorer.mainnet.skalenodes.com"
                        },
                        default: {
                            name: "SKALE Explorer",
                            url: "https://frayed-decent-antares.explorer.mainnet.skalenodes.com"
                        }
                    },
                    contracts: {}
                }),
                t8 = (0, s.a)({
                    id: 1564830818,
                    name: "SKALE | Calypso NFT Hub",
                    network: "skale-calypso",
                    nativeCurrency: {
                        name: "sFUEL",
                        symbol: "sFUEL",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://mainnet.skalenodes.com/v1/honorable-steel-rasalhague"],
                            webSocket: ["wss://mainnet.skalenodes.com/v1/ws/honorable-steel-rasalhague"]
                        },
                        public: {
                            http: ["https://mainnet.skalenodes.com/v1/honorable-steel-rasalhague"],
                            webSocket: ["wss://mainnet.skalenodes.com/v1/ws/honorable-steel-rasalhague"]
                        }
                    },
                    blockExplorers: {
                        blockscout: {
                            name: "SKALE Explorer",
                            url: "https://honorable-steel-rasalhague.explorer.mainnet.skalenodes.com"
                        },
                        default: {
                            name: "SKALE Explorer",
                            url: "https://honorable-steel-rasalhague.explorer.mainnet.skalenodes.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 3107626
                        }
                    }
                }),
                t9 = (0, s.a)({
                    id: 344106930,
                    name: "SKALE | Calypso NFT Hub Testnet",
                    network: "skale-calypso-testnet",
                    nativeCurrency: {
                        name: "sFUEL",
                        symbol: "sFUEL",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://staging-v3.skalenodes.com/v1/staging-utter-unripe-menkar"],
                            webSocket: ["wss://staging-v3.skalenodes.com/v1/ws/staging-utter-unripe-menkar"]
                        },
                        public: {
                            http: ["https://staging-v3.skalenodes.com/v1/staging-utter-unripe-menkar"],
                            webSocket: ["wss://staging-v3.skalenodes.com/v1/ws/staging-utter-unripe-menkar"]
                        }
                    },
                    blockExplorers: {
                        blockscout: {
                            name: "SKALE Explorer",
                            url: "https://staging-utter-unripe-menkar.explorer.staging-v3.skalenodes.com"
                        },
                        default: {
                            name: "SKALE Explorer",
                            url: "https://staging-utter-unripe-menkar.explorer.staging-v3.skalenodes.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 2131424
                        }
                    },
                    testnet: !0
                }),
                ne = (0, s.a)({
                    id: 1351057110,
                    name: "SKALE | Chaos Testnet",
                    network: "skale-chaos-testnet",
                    nativeCurrency: {
                        name: "sFUEL",
                        symbol: "sFUEL",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://staging-v3.skalenodes.com/v1/staging-fast-active-bellatrix"],
                            webSocket: ["wss://staging-v3.skalenodes.com/v1/ws/staging-fast-active-bellatrix"]
                        },
                        public: {
                            http: ["https://staging-v3.skalenodes.com/v1/staging-fast-active-bellatrix"],
                            webSocket: ["wss://staging-v3.skalenodes.com/v1/ws/staging-fast-active-bellatrix"]
                        }
                    },
                    blockExplorers: {
                        blockscout: {
                            name: "SKALE Explorer",
                            url: "https://staging-fast-active-bellatrix.explorer.staging-v3.skalenodes.com"
                        },
                        default: {
                            name: "SKALE Explorer",
                            url: "https://staging-fast-active-bellatrix.explorer.staging-v3.skalenodes.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 1192202
                        }
                    },
                    testnet: !0
                }),
                nt = (0, s.a)({
                    id: 1026062157,
                    name: "SKALE | CryptoBlades",
                    network: "skale-cryptoblades",
                    nativeCurrency: {
                        name: "sFUEL",
                        symbol: "sFUEL",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://mainnet.skalenodes.com/v1/affectionate-immediate-pollux"],
                            webSocket: ["wss://mainnet.skalenodes.com/v1/ws/affectionate-immediate-pollux"]
                        },
                        public: {
                            http: ["https://mainnet.skalenodes.com/v1/affectionate-immediate-pollux"],
                            webSocket: ["wss://mainnet.skalenodes.com/v1/ws/affectionate-immediate-pollux"]
                        }
                    },
                    blockExplorers: {
                        blockscout: {
                            name: "SKALE Explorer",
                            url: "https://affectionate-immediate-pollux.explorer.mainnet.skalenodes.com"
                        },
                        default: {
                            name: "SKALE Explorer",
                            url: "https://affectionate-immediate-pollux.explorer.mainnet.skalenodes.com"
                        }
                    },
                    contracts: {}
                }),
                nn = (0, s.a)({
                    id: 2046399126,
                    name: "SKALE | Crypto Colosseum",
                    network: "skale-crypto-coloseeum",
                    nativeCurrency: {
                        name: "sFUEL",
                        symbol: "sFUEL",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://mainnet.skalenodes.com/v1/haunting-devoted-deneb"],
                            webSocket: ["wss://mainnet.skalenodes.com/v1/ws/haunting-devoted-deneb"]
                        },
                        public: {
                            http: ["https://mainnet.skalenodes.com/v1/haunting-devoted-deneb"],
                            webSocket: ["wss://mainnet.skalenodes.com/v1/ws/haunting-devoted-deneb"]
                        }
                    },
                    blockExplorers: {
                        blockscout: {
                            name: "SKALE Explorer",
                            url: "https://haunting-devoted-deneb.explorer.mainnet.skalenodes.com"
                        },
                        default: {
                            name: "SKALE Explorer",
                            url: "https://haunting-devoted-deneb.explorer.mainnet.skalenodes.com"
                        }
                    },
                    contracts: {}
                }),
                nr = (0, s.a)({
                    id: 2046399126,
                    name: "SKALE | Europa Liquidity Hub",
                    network: "skale-europa",
                    nativeCurrency: {
                        name: "sFUEL",
                        symbol: "sFUEL",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://mainnet.skalenodes.com/v1/elated-tan-skat"],
                            webSocket: ["wss://mainnet.skalenodes.com/v1/ws/elated-tan-skat"]
                        },
                        public: {
                            http: ["https://mainnet.skalenodes.com/v1/elated-tan-skat"],
                            webSocket: ["wss://mainnet.skalenodes.com/v1/ws/elated-tan-skat"]
                        }
                    },
                    blockExplorers: {
                        blockscout: {
                            name: "SKALE Explorer",
                            url: "https://elated-tan-skat.explorer.mainnet.skalenodes.com"
                        },
                        default: {
                            name: "SKALE Explorer",
                            url: "https://elated-tan-skat.explorer.mainnet.skalenodes.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 3113495
                        }
                    }
                }),
                na = (0, s.a)({
                    id: 476158412,
                    name: "SKALE | Europa Liquidity Hub Testnet",
                    network: "skale-europa-testnet",
                    nativeCurrency: {
                        name: "sFUEL",
                        symbol: "sFUEL",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://staging-v3.skalenodes.com/v1/staging-legal-crazy-castor"],
                            webSocket: ["wss://staging-v3.skalenodes.com/v1/ws/staging-legal-crazy-castor"]
                        },
                        public: {
                            http: ["https://staging-v3.skalenodes.com/v1/staging-legal-crazy-castor"],
                            webSocket: ["wss://staging-v3.skalenodes.com/v1/ws/staging-legal-crazy-castor"]
                        }
                    },
                    blockExplorers: {
                        blockscout: {
                            name: "SKALE Explorer",
                            url: "https://staging-legal-crazy-castor.explorer.staging-v3.skalenodes.com"
                        },
                        default: {
                            name: "SKALE Explorer",
                            url: "https://staging-legal-crazy-castor.explorer.staging-v3.skalenodes.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 2071911
                        }
                    },
                    testnet: !0
                }),
                ni = (0, s.a)({
                    id: 2139927552,
                    name: "SKALE | Exorde",
                    network: "skale-exorde",
                    nativeCurrency: {
                        name: "sFUEL",
                        symbol: "sFUEL",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://mainnet.skalenodes.com/v1/light-vast-diphda"],
                            webSocket: ["wss://mainnet.skalenodes.com/v1/ws/light-vast-diphda"]
                        },
                        public: {
                            http: ["https://mainnet.skalenodes.com/v1/light-vast-diphda"],
                            webSocket: ["wss://mainnet.skalenodes.com/v1/ws/light-vast-diphda"]
                        }
                    },
                    blockExplorers: {
                        blockscout: {
                            name: "SKALE Explorer",
                            url: "https://light-vast-diphda.explorer.mainnet.skalenodes.com"
                        },
                        default: {
                            name: "SKALE Explorer",
                            url: "https://light-vast-diphda.explorer.mainnet.skalenodes.com"
                        }
                    },
                    contracts: {}
                }),
                no = (0, s.a)({
                    id: 1273227453,
                    name: "SKALE | Human Protocol",
                    network: "skale-human-protocol",
                    nativeCurrency: {
                        name: "sFUEL",
                        symbol: "sFUEL",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://mainnet.skalenodes.com/v1/wan-red-ain"],
                            webSocket: ["wss://mainnet.skalenodes.com/v1/ws/wan-red-ain"]
                        },
                        public: {
                            http: ["https://mainnet.skalenodes.com/v1/wan-red-ain"],
                            webSocket: ["wss://mainnet.skalenodes.com/v1/ws/wan-red-ain"]
                        }
                    },
                    blockExplorers: {
                        blockscout: {
                            name: "SKALE Explorer",
                            url: "https://wan-red-ain.explorer.mainnet.skalenodes.com"
                        },
                        default: {
                            name: "SKALE Explorer",
                            url: "https://wan-red-ain.explorer.mainnet.skalenodes.com"
                        }
                    },
                    contracts: {}
                }),
                ns = (0, s.a)({
                    id: 1482601649,
                    name: "SKALE | Nebula Gaming Hub",
                    network: "skale-nebula",
                    nativeCurrency: {
                        name: "sFUEL",
                        symbol: "sFUEL",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://mainnet.skalenodes.com/v1/green-giddy-denebola"],
                            webSocket: ["wss://mainnet.skalenodes.com/v1/ws/green-giddy-denebola"]
                        },
                        public: {
                            http: ["https://mainnet.skalenodes.com/v1/green-giddy-denebola"],
                            webSocket: ["wss://mainnet.skalenodes.com/v1/ws/green-giddy-denebola"]
                        }
                    },
                    blockExplorers: {
                        blockscout: {
                            name: "SKALE Explorer",
                            url: "https://green-giddy-denebola.explorer.mainnet.skalenodes.com"
                        },
                        default: {
                            name: "SKALE Explorer",
                            url: "https://green-giddy-denebola.explorer.mainnet.skalenodes.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 2372986
                        }
                    }
                }),
                nl = (0, s.a)({
                    id: 503129905,
                    name: "SKALE | Nebula Gaming Hub Testnet",
                    network: "skale-nebula-testnet",
                    nativeCurrency: {
                        name: "sFUEL",
                        symbol: "sFUEL",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://staging-v3.skalenodes.com/v1/staging-faint-slimy-achird"],
                            webSocket: ["wss://staging-v3.skalenodes.com/v1/ws/staging-faint-slimy-achird"]
                        },
                        public: {
                            http: ["https://staging-v3.skalenodes.com/v1/staging-faint-slimy-achird"],
                            webSocket: ["wss://staging-v3.skalenodes.com/v1/ws/staging-faint-slimy-achird"]
                        }
                    },
                    blockExplorers: {
                        blockscout: {
                            name: "SKALE Explorer",
                            url: "https://staging-faint-slimy-achird.explorer.staging-v3.skalenodes.com"
                        },
                        default: {
                            name: "SKALE Explorer",
                            url: "https://staging-faint-slimy-achird.explorer.staging-v3.skalenodes.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 2205882
                        }
                    },
                    testnet: !0
                }),
                nc = (0, s.a)({
                    id: 278611351,
                    name: "SKALE | Razor Network",
                    network: "skale-razor",
                    nativeCurrency: {
                        name: "sFUEL",
                        symbol: "sFUEL",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://mainnet.skalenodes.com/v1/turbulent-unique-scheat"],
                            webSocket: ["wss://mainnet.skalenodes.com/v1/ws/turbulent-unique-scheat"]
                        },
                        public: {
                            http: ["https://mainnet.skalenodes.com/v1/turbulent-unique-scheat"],
                            webSocket: ["wss://mainnet.skalenodes.com/v1/ws/turbulent-unique-scheat"]
                        }
                    },
                    blockExplorers: {
                        blockscout: {
                            name: "SKALE Explorer",
                            url: "https://turbulent-unique-scheat.explorer.mainnet.skalenodes.com"
                        },
                        default: {
                            name: "SKALE Explorer",
                            url: "https://turbulent-unique-scheat.explorer.mainnet.skalenodes.com"
                        }
                    },
                    contracts: {}
                }),
                nd = (0, s.a)({
                    id: 1350216234,
                    name: "SKALE | Titan Community Hub",
                    network: "skale-titan",
                    nativeCurrency: {
                        name: "sFUEL",
                        symbol: "sFUEL",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://mainnet.skalenodes.com/v1/parallel-stormy-spica"],
                            webSocket: ["wss://mainnet.skalenodes.com/v1/ws/parallel-stormy-spica"]
                        },
                        public: {
                            http: ["https://mainnet.skalenodes.com/v1/parallel-stormy-spica"],
                            webSocket: ["wss://mainnet.skalenodes.com/v1/ws/parallel-stormy-spica"]
                        }
                    },
                    blockExplorers: {
                        blockscout: {
                            name: "SKALE Explorer",
                            url: "https://parallel-stormy-spica.explorer.mainnet.skalenodes.com"
                        },
                        default: {
                            name: "SKALE Explorer",
                            url: "https://parallel-stormy-spica.explorer.mainnet.skalenodes.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 2076458
                        }
                    }
                }),
                nu = (0, s.a)({
                    id: 1517929550,
                    name: "SKALE | Titan Community Hub Testnet",
                    network: "skale-titan-testnet",
                    nativeCurrency: {
                        name: "sFUEL",
                        symbol: "sFUEL",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://staging-v3.skalenodes.com/v1/staging-aware-chief-gianfar"],
                            webSocket: ["wss://staging-v3.skalenodes.com/v1/ws/staging-aware-chief-gianfar"]
                        },
                        public: {
                            http: ["https://staging-v3.skalenodes.com/v1/staging-aware-chief-gianfar"],
                            webSocket: ["wss://staging-v3.skalenodes.com/v1/ws/staging-aware-chief-gianfar"]
                        }
                    },
                    blockExplorers: {
                        blockscout: {
                            name: "SKALE Explorer",
                            url: "https://staging-aware-chief-gianfar.explorer.staging-v3.skalenodes.com"
                        },
                        default: {
                            name: "SKALE Explorer",
                            url: "https://staging-aware-chief-gianfar.explorer.staging-v3.skalenodes.com"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 2085155
                        }
                    },
                    testnet: !0
                }),
                nm = (0, s.a)({
                    id: 19,
                    name: "Songbird Mainnet",
                    network: "songbird-mainnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "songbird",
                        symbol: "SGB"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://songbird-api.flare.network/ext/C/rpc"]
                        },
                        public: {
                            http: ["https://songbird-api.flare.network/ext/C/rpc"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Songbird Explorer",
                            url: "https://songbird-explorer.flare.network"
                        }
                    }
                }),
                np = (0, s.a)({
                    id: 16,
                    name: "Coston",
                    network: "coston",
                    nativeCurrency: {
                        decimals: 18,
                        name: "costonflare",
                        symbol: "CFLR"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://coston-api.flare.network/ext/C/rpc"]
                        },
                        public: {
                            http: ["https://coston-api.flare.network/ext/C/rpc"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Coston Explorer",
                            url: "https://coston-explorer.flare.network"
                        }
                    },
                    testnet: !0
                }),
                nh = (0, s.a)({
                    id: 88882,
                    name: "Chiliz Spicy Testnet",
                    network: "chiliz-spicy-Testnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "CHZ",
                        symbol: "CHZ"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://spicy-rpc.chiliz.com", "https://chiliz-spicy.publicnode.com"],
                            webSocket: ["wss://spicy-rpc-ws.chiliz.com", "wss://chiliz-spicy.publicnode.com"]
                        },
                        public: {
                            http: ["https://spicy-rpc.chiliz.com", "https://chiliz-spicy.publicnode.com"],
                            webSocket: ["wss://spicy-rpc-ws.chiliz.com", "wss://chiliz-spicy.publicnode.com"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Chiliz Explorer",
                            url: "http://spicy-explorer.chiliz.com"
                        }
                    },
                    testnet: !0
                }),
                nf = (0, s.a)({
                    id: 8082,
                    name: "Shardeum Sphinx",
                    network: "shmSphinx",
                    nativeCurrency: {
                        name: "SHARDEUM",
                        symbol: "SHM",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://sphinx.shardeum.org"]
                        },
                        public: {
                            http: ["https://sphinx.shardeum.org"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Shardeum Explorer",
                            url: "https://explorer-sphinx.shardeum.org"
                        }
                    },
                    testnet: !0
                }),
                ny = (0, s.a)({
                    id: 109,
                    name: "Shibarium",
                    network: "shibarium",
                    nativeCurrency: {
                        name: "Bone",
                        symbol: "BONE",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.shibrpc.com"]
                        },
                        public: {
                            http: ["https://rpc.shibrpc.com"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "Blockscout",
                            url: "https://shibariumscan.io"
                        },
                        default: {
                            name: "Blockscout",
                            url: "https://shibariumscan.io"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0x864Bf681ADD6052395188A89101A1B37d3B4C961",
                            blockCreated: 265900
                        }
                    }
                }),
                ng = (0, s.a)({
                    id: 57,
                    name: "Syscoin Mainnet",
                    network: "syscoin",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Syscoin",
                        symbol: "SYS"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.syscoin.org"],
                            webSocket: ["wss://rpc.syscoin.org/wss"]
                        },
                        public: {
                            http: ["https://rpc.syscoin.org"],
                            webSocket: ["wss://rpc.syscoin.org/wss"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "SyscoinExplorer",
                            url: "https://explorer.syscoin.org"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 287139
                        }
                    }
                }),
                nv = (0, s.a)({
                    id: 5700,
                    name: "Syscoin Tanenbaum Testnet",
                    network: "syscoin-testnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Syscoin",
                        symbol: "SYS"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.tanenbaum.io"],
                            webSocket: ["wss://rpc.tanenbaum.io/wss"]
                        },
                        public: {
                            http: ["https://rpc.tanenbaum.io"],
                            webSocket: ["wss://rpc.tanenbaum.io/wss"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "SyscoinTestnetExplorer",
                            url: "https://tanenbaum.io"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 271288
                        }
                    }
                }),
                nb = (0, s.a)({
                    id: 841,
                    name: "Taraxa Mainnet",
                    network: "taraxa",
                    nativeCurrency: {
                        name: "Tara",
                        symbol: "TARA",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.mainnet.taraxa.io"]
                        },
                        public: {
                            http: ["https://rpc.mainnet.taraxa.io"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Taraxa Explorer",
                            url: "https://explorer.mainnet.taraxa.io"
                        }
                    }
                }),
                nw = (0, s.a)({
                    id: 167007,
                    name: "Taiko Jolnir (Alpha-5 Testnet)",
                    network: "tko-jolnir",
                    nativeCurrency: {
                        name: "Ether",
                        symbol: "ETH",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.jolnir.taiko.xyz"]
                        },
                        public: {
                            http: ["https://rpc.jolnir.taiko.xyz"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "blockscout",
                            url: "https://explorer.jolnir.taiko.xyz"
                        }
                    }
                }),
                n_ = (0, s.a)({
                    id: 167005,
                    name: "Taiko (Alpha-3 Testnet)",
                    network: "taiko-sepolia",
                    nativeCurrency: {
                        name: "Ether",
                        symbol: "ETH",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.test.taiko.xyz"]
                        },
                        public: {
                            http: ["https://rpc.test.taiko.xyz"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "blockscout",
                            url: "https://explorer.test.taiko.xyz"
                        }
                    }
                }),
                nk = (0, s.a)({
                    id: 842,
                    name: "Taraxa Testnet",
                    network: "taraxa-testnet",
                    nativeCurrency: {
                        name: "Tara",
                        symbol: "TARA",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.testnet.taraxa.io"]
                        },
                        public: {
                            http: ["https://rpc.testnet.taraxa.io"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Taraxa Explorer",
                            url: "https://explorer.testnet.taraxa.io"
                        }
                    },
                    testnet: !0
                }),
                nx = (0, s.a)({
                    id: 40,
                    name: "Telos",
                    network: "telos",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Telos",
                        symbol: "TLOS"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://mainnet.telos.net/evm"]
                        },
                        public: {
                            http: ["https://mainnet.telos.net/evm"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Teloscan",
                            url: "https://www.teloscan.io/"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 246530709
                        }
                    }
                }),
                nC = (0, s.a)({
                    id: 41,
                    name: "Telos",
                    network: "telosTestnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Telos",
                        symbol: "TLOS"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://testnet.telos.net/evm"]
                        },
                        public: {
                            http: ["https://testnet.telos.net/evm"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Teloscan (testnet)",
                            url: "https://testnet.teloscan.io/"
                        }
                    },
                    testnet: !0
                }),
                nS = (0, s.a)({
                    id: 1559,
                    name: "Tenet",
                    network: "tenet-mainnet",
                    nativeCurrency: {
                        name: "TENET",
                        symbol: "TENET",
                        decimals: 18
                    },
                    rpcUrls: {
                        public: {
                            http: ["https://rpc.tenet.org"]
                        },
                        default: {
                            http: ["https://rpc.tenet.org"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "TenetScan Mainnet",
                            url: "https://tenetscan.io"
                        }
                    },
                    testnet: !1
                }),
                nE = (0, s.a)({
                    id: 997,
                    name: "5ireChain Thunder Testnet",
                    network: "5ireChain",
                    nativeCurrency: {
                        name: "5ire Token",
                        symbol: "5IRE",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc-testnet.5ire.network"]
                        },
                        public: {
                            http: ["https://rpc-testnet.5ire.network"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "5ireChain Explorer",
                            url: "https://explorer.5ire.network"
                        }
                    },
                    testnet: !0
                }),
                nj = (0, s.a)({
                    id: 100009,
                    name: "Vechain",
                    network: "vechain",
                    nativeCurrency: {
                        name: "VeChain",
                        symbol: "VET",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://mainnet.vechain.org"]
                        },
                        public: {
                            http: ["https://mainnet.vechain.org"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Vechain Explorer",
                            url: "https://explore.vechain.org"
                        },
                        vechainStats: {
                            name: "Vechain Stats",
                            url: "https://vechainstats.com"
                        }
                    }
                }),
                nI = (0, s.a)({
                    id: 888,
                    name: "Wanchain",
                    network: "wanchain",
                    nativeCurrency: {
                        name: "WANCHAIN",
                        symbol: "WAN",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://gwan-ssl.wandevs.org:56891", "https://gwan2-ssl.wandevs.org"]
                        },
                        public: {
                            http: ["https://gwan-ssl.wandevs.org:56891", "https://gwan2-ssl.wandevs.org"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "WanScan",
                            url: "https://wanscan.org"
                        },
                        default: {
                            name: "WanScan",
                            url: "https://wanscan.org"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcDF6A1566e78EB4594c86Fe73Fcdc82429e97fbB",
                            blockCreated: 25312390
                        }
                    }
                }),
                nT = (0, s.a)({
                    id: 999,
                    name: "Wanchain Testnet",
                    network: "wanchainTestnet",
                    nativeCurrency: {
                        name: "WANCHAIN",
                        symbol: "WANt",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://gwan-ssl.wandevs.org:46891"]
                        },
                        public: {
                            http: ["https://gwan-ssl.wandevs.org:46891"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "WanScanTest",
                            url: "https://wanscan.org"
                        },
                        default: {
                            name: "WanScanTest",
                            url: "https://wanscan.org"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0x11c89bF4496c39FB80535Ffb4c92715839CC5324",
                            blockCreated: 24743448
                        }
                    },
                    testnet: !0
                }),
                nO = (0, s.a)({
                    id: 1111,
                    name: "WEMIX",
                    network: "wemix-mainnet",
                    nativeCurrency: {
                        name: "WEMIX",
                        symbol: "WEMIX",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://api.wemix.com"]
                        },
                        public: {
                            http: ["https://api.wemix.com"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "wemixExplorer",
                            url: "https://explorer.wemix.com"
                        },
                        default: {
                            name: "wemixExplorer",
                            url: "https://explorer.wemix.com"
                        }
                    }
                }),
                nN = (0, s.a)({
                    id: 1112,
                    name: "WEMIX Testnet",
                    network: "wemix-testnet",
                    nativeCurrency: {
                        name: "WEMIX",
                        symbol: "tWEMIX",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://api.test.wemix.com"]
                        },
                        public: {
                            http: ["https://api.test.wemix.com"]
                        }
                    },
                    blockExplorers: {
                        etherscan: {
                            name: "wemixExplorer",
                            url: "https://testnet.wemixscan.com"
                        },
                        default: {
                            name: "wemixExplorer",
                            url: "https://testnet.wemixscan.com"
                        }
                    },
                    testnet: !0
                }),
                nP = (0, s.a)({
                    id: 50,
                    name: "XinFin Network",
                    network: "xdc",
                    nativeCurrency: {
                        decimals: 18,
                        name: "XDC",
                        symbol: "XDC"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.xinfin.network"]
                        },
                        public: {
                            http: ["https://rpc.xinfin.network"]
                        }
                    },
                    blockExplorers: {
                        xinfin: {
                            name: "XinFin",
                            url: "https://explorer.xinfin.network"
                        },
                        default: {
                            name: "Blocksscan",
                            url: "https://xdc.blocksscan.io"
                        }
                    }
                }),
                nA = (0, s.a)({
                    id: 51,
                    name: "Apothem Network",
                    network: "xdc-testnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "TXDC",
                        symbol: "TXDC"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://erpc.apothem.network"]
                        },
                        public: {
                            http: ["https://erpc.apothem.network"]
                        }
                    },
                    blockExplorers: {
                        xinfin: {
                            name: "XinFin",
                            url: "https://explorer.apothem.network"
                        },
                        default: {
                            name: "Blocksscan",
                            url: "https://apothem.blocksscan.io"
                        }
                    }
                }),
                nR = (0, s.a)({
                    id: 1337803,
                    network: "zhejiang",
                    name: "Zhejiang",
                    nativeCurrency: {
                        name: "Zhejiang Ether",
                        symbol: "ZhejETH",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.zhejiang.ethpandaops.io"]
                        },
                        public: {
                            http: ["https://rpc.zhejiang.ethpandaops.io"]
                        }
                    },
                    blockExplorers: {
                        beaconchain: {
                            name: "Etherscan",
                            url: "https://zhejiang.beaconcha.in"
                        },
                        blockscout: {
                            name: "Blockscout",
                            url: "https://blockscout.com/eth/zhejiang-testnet"
                        },
                        default: {
                            name: "Beaconchain",
                            url: "https://zhejiang.beaconcha.in"
                        }
                    },
                    testnet: !0
                }),
                nF = (0, s.a)({
                    id: 42766,
                    name: "ZKFair Mainnet",
                    network: "zkfair-mainnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "USD Coin",
                        symbol: "USDC"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.zkfair.io"]
                        },
                        public: {
                            http: ["https://rpc.zkfair.io"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "zkFair Explorer",
                            url: "https://scan.zkfair.io"
                        }
                    },
                    testnet: !1
                }),
                nW = (0, s.a)({
                    id: 43851,
                    name: "ZKFair Testnet",
                    network: "zkfair-testnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "USD Coin",
                        symbol: "USDC"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://testnet-rpc.zkfair.io"]
                        },
                        public: {
                            http: ["https://testnet-rpc.zkfair.io"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "zkFair Explorer",
                            url: "https://testnet-scan.zkfair.io"
                        }
                    },
                    testnet: !0
                });
            var nM = a(79958),
                nD = a(74785),
                nL = a(30304);
            let nz = {
                    block: (0, Q.G)({
                        format(t) {
                            let r = t.transactions ? .map(t => {
                                if ("string" == typeof t) return t;
                                let r = nz.transaction.format(t);
                                return "0x71" === r.typeHex ? r.type = "eip712" : "0xff" === r.typeHex && (r.type = "priority"), r
                            });
                            return {
                                l1BatchNumber: t.l1BatchNumber ? (0, J.y_)(t.l1BatchNumber) : null,
                                l1BatchTimestamp: t.l1BatchTimestamp ? (0, J.y_)(t.l1BatchTimestamp) : null,
                                transactions: r
                            }
                        }
                    }),
                    transaction: (0, ee.y_)({
                        format(t) {
                            let r = {};
                            return "0x71" === t.type ? r.type = "eip712" : "0xff" === t.type && (r.type = "priority"), { ...r,
                                l1BatchNumber: t.l1BatchNumber ? (0, J.y_)(t.l1BatchNumber) : null,
                                l1BatchTxIndex: t.l1BatchTxIndex ? (0, J.y_)(t.l1BatchTxIndex) : null
                            }
                        }
                    }),
                    transactionReceipt: (0, nL.d)({
                        format: t => ({
                            l1BatchNumber: t.l1BatchNumber ? (0, J.y_)(t.l1BatchNumber) : null,
                            l1BatchTxIndex: t.l1BatchTxIndex ? (0, J.y_)(t.l1BatchTxIndex) : null,
                            logs: t.logs.map(t => ({ ...(0, nD.U)(t),
                                l1BatchNumber: t.l1BatchNumber ? (0, J.y_)(t.l1BatchNumber) : null,
                                transactionLogIndex: (0, J.ly)(t.transactionLogIndex),
                                logType: t.logType
                            })),
                            l2ToL1Logs: t.l2ToL1Logs.map(t => ({
                                blockNumber: (0, J.y_)(t.blockHash),
                                blockHash: t.blockHash,
                                l1BatchNumber: (0, J.y_)(t.l1BatchNumber),
                                transactionIndex: (0, J.y_)(t.transactionIndex),
                                shardId: (0, J.y_)(t.shardId),
                                isService: t.isService,
                                sender: t.sender,
                                key: t.key,
                                value: t.value,
                                transactionHash: t.transactionHash,
                                logIndex: (0, J.y_)(t.logIndex)
                            }))
                        })
                    }),
                    transactionRequest: (0, et.iy)({
                        exclude: ["customSignature", "factoryDeps", "gasPerPubdata", "paymaster", "paymasterInput"],
                        format: t => t.gasPerPubdata || t.paymaster && t.paymasterInput || t.factoryDeps || t.customSignature ? {
                            eip712Meta: { ...t.gasPerPubdata ? {
                                    gasPerPubdata: (0, Y.NC)(t.gasPerPubdata)
                                } : {},
                                ...t.paymaster && t.paymasterInput ? {
                                    paymasterParams: {
                                        paymaster: t.paymaster,
                                        paymasterInput: Array.from((0, nM.nr)(t.paymasterInput))
                                    }
                                } : {},
                                ...t.factoryDeps ? {
                                    factoryDeps: t.factoryDeps
                                } : {},
                                ...t.customSignature ? {
                                    customSignature: t.customSignature
                                } : {}
                            },
                            type: "eip712" === t.type ? "0x71" : "0xff"
                        } : {}
                    })
                },
                nU = {
                    transaction: (t, r) => "customSignature" in t || "paymaster" in t || "paymasterInput" in t || "gasPerPubdata" in t || "factoryDeps" in t ? function(t) {
                        let {
                            chainId: r,
                            gas: a,
                            nonce: s,
                            to: l,
                            from: c,
                            value: d,
                            maxFeePerGas: u,
                            maxPriorityFeePerGas: m,
                            customSignature: p,
                            factoryDeps: h,
                            paymaster: f,
                            paymasterInput: y,
                            gasPerPubdata: b,
                            data: C
                        } = t;
                        ! function(t) {
                            let {
                                chainId: r,
                                to: a,
                                from: s,
                                paymaster: l,
                                paymasterInput: c
                            } = t;
                            if (r <= 0) throw new eo.hJ({
                                chainId: r
                            });
                            if (a && !(0, el.U)(a)) throw new ea.b({
                                address: a
                            });
                            if (s && !(0, el.U)(s)) throw new ea.b({
                                address: s
                            });
                            if (l && !(0, el.U)(l)) throw new ea.b({
                                address: l
                            });
                            if (l && !c) throw new ei.G("`paymasterInput` must be provided when `paymaster` is defined");
                            if (!l && c) throw new ei.G("`paymaster` must be provided when `paymasterInput` is defined")
                        }(t);
                        let E = [s ? (0, Y.NC)(s) : "0x", m ? (0, Y.NC)(m) : "0x", u ? (0, Y.NC)(u) : "0x", a ? (0, Y.NC)(a) : "0x", l ? ? "0x", d ? (0, Y.NC)(d) : "0x", C ? ? "0x", (0, Y.NC)(r), (0, Y.NC)(""), (0, Y.NC)(""), (0, Y.NC)(r), c ? ? "0x", b ? (0, Y.NC)(b) : "0x", h ? ? [], p ? ? "0x", f && y ? [f, y] : []];
                        return (0, ec.SM)(["0x71", (0, ed.LV)(E)])
                    }(t) : (0, em.D)(t, r)
                },
                nq = (0, s.a)({
                    id: 324,
                    name: "zkSync Era",
                    network: "zksync-era",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Ether",
                        symbol: "ETH"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://mainnet.era.zksync.io"],
                            webSocket: ["wss://mainnet.era.zksync.io/ws"]
                        },
                        public: {
                            http: ["https://mainnet.era.zksync.io"],
                            webSocket: ["wss://mainnet.era.zksync.io/ws"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "zkExplorer",
                            url: "https://explorer.zksync.io"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xF9cda624FBC7e059355ce98a31693d299FACd963"
                        }
                    }
                }, {
                    serializers: nU,
                    formatters: nz
                }),
                nB = (0, s.a)({
                    id: 280,
                    name: "zkSync Era Testnet",
                    network: "zksync-era-testnet",
                    nativeCurrency: {
                        name: "Ether",
                        symbol: "ETH",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://testnet.era.zksync.dev"],
                            webSocket: ["wss://testnet.era.zksync.dev/ws"]
                        },
                        public: {
                            http: ["https://testnet.era.zksync.dev"],
                            webSocket: ["wss://testnet.era.zksync.dev/ws"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "zkExplorer",
                            url: "https://goerli.explorer.zksync.io"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xF9cda624FBC7e059355ce98a31693d299FACd963"
                        }
                    },
                    testnet: !0
                }, {
                    serializers: nU,
                    formatters: nz
                }),
                nV = (0, s.a)({
                    id: 300,
                    name: "zkSync Sepolia Testnet",
                    network: "zksync-sepolia-testnet",
                    nativeCurrency: {
                        name: "Ether",
                        symbol: "ETH",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://sepolia.era.zksync.dev"],
                            webSocket: ["wss://sepolia.era.zksync.dev/ws"]
                        },
                        public: {
                            http: ["https://sepolia.era.zksync.dev"],
                            webSocket: ["wss://sepolia.era.zksync.dev/ws"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "zkExplorer",
                            url: "https://sepolia.explorer.zksync.io/"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xF9cda624FBC7e059355ce98a31693d299FACd963"
                        }
                    },
                    testnet: !0
                }, {
                    serializers: nU,
                    formatters: nz
                }),
                nH = (0, s.a)({
                    id: 7001,
                    name: "ZetaChain Athens Testnet",
                    network: "zetachain-athens-testnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Zeta",
                        symbol: "aZETA"
                    },
                    rpcUrls: {
                        public: {
                            http: ["https://zetachain-athens-evm.blockpi.network/v1/rpc/public"]
                        },
                        default: {
                            http: ["https://zetachain-athens-evm.blockpi.network/v1/rpc/public"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "ZetaScan",
                            url: "https://athens3.explorer.zetachain.com"
                        }
                    },
                    testnet: !0
                }),
                n$ = (0, s.a)({
                    id: 32769,
                    name: "Zilliqa",
                    network: "zilliqa",
                    nativeCurrency: {
                        name: "Zilliqa",
                        symbol: "ZIL",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://api.zilliqa.com"]
                        },
                        public: {
                            http: ["https://api.zilliqa.com"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Ethernal",
                            url: "https://evmx.zilliqa.com"
                        }
                    },
                    testnet: !1
                }),
                nK = (0, s.a)({
                    id: 33101,
                    name: "Zilliqa Testnet",
                    network: "zilliqa-testnet",
                    nativeCurrency: {
                        name: "Zilliqa",
                        symbol: "ZIL",
                        decimals: 18
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://dev-api.zilliqa.com"]
                        },
                        public: {
                            http: ["https://dev-api.zilliqa.com"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Ethernal",
                            url: "https://evmx.testnet.zilliqa.com"
                        }
                    },
                    testnet: !0
                }),
                nG = (0, s.a)({
                    id: 7777777,
                    name: "Zora",
                    network: "zora",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Ether",
                        symbol: "ETH"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://rpc.zora.energy"],
                            webSocket: ["wss://rpc.zora.energy"]
                        },
                        public: {
                            http: ["https://rpc.zora.energy"],
                            webSocket: ["wss://rpc.zora.energy"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Explorer",
                            url: "https://explorer.zora.energy"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 5882
                        }
                    }
                }, {
                    formatters: tW.V
                }),
                nZ = (0, s.a)({
                    id: 999999999,
                    name: "Zora Sepolia",
                    network: "zora-sepolia",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Zora Sepolia",
                        symbol: "ETH"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://sepolia.rpc.zora.energy"],
                            webSocket: ["wss://sepolia.rpc.zora.energy"]
                        },
                        public: {
                            http: ["https://sepolia.rpc.zora.energy"],
                            webSocket: ["wss://sepolia.rpc.zora.energy"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Zora Sepolia Explorer",
                            url: "https://sepolia.explorer.zora.energy/"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 83160
                        }
                    },
                    testnet: !0
                }, {
                    formatters: tW.V
                }),
                nJ = (0, s.a)({
                    id: 999,
                    name: "Zora Goerli Testnet",
                    network: "zora-testnet",
                    nativeCurrency: {
                        decimals: 18,
                        name: "Zora Goerli",
                        symbol: "ETH"
                    },
                    rpcUrls: {
                        default: {
                            http: ["https://testnet.rpc.zora.energy"],
                            webSocket: ["wss://testnet.rpc.zora.energy"]
                        },
                        public: {
                            http: ["https://testnet.rpc.zora.energy"],
                            webSocket: ["wss://testnet.rpc.zora.energy"]
                        }
                    },
                    blockExplorers: {
                        default: {
                            name: "Explorer",
                            url: "https://testnet.explorer.zora.energy"
                        }
                    },
                    contracts: {
                        multicall3: {
                            address: "0xcA11bde05977b3631167028862bE2a173976CA11",
                            blockCreated: 189123
                        }
                    },
                    testnet: !0
                }, {
                    formatters: tW.V
                })
        },
        64054: function(t, r, a) {
            "use strict";
            a.d(r, {
                LV: function() {
                    return toRlp
                }
            });
            var s = a(89534);
            let NegativeOffsetError = class NegativeOffsetError extends s.G {
                constructor({
                    offset: t
                }) {
                    super(`Offset \`${t}\` cannot be negative.`), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "NegativeOffsetError"
                    })
                }
            };
            let PositionOutOfBoundsError = class PositionOutOfBoundsError extends s.G {
                constructor({
                    length: t,
                    position: r
                }) {
                    super(`Position \`${r}\` is out of bounds (\`0 < position < ${t}\`).`), Object.defineProperty(this, "name", {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: "PositionOutOfBoundsError"
                    })
                }
            };
            let l = {
                bytes: new Uint8Array,
                dataView: new DataView(new ArrayBuffer(0)),
                position: 0,
                assertPosition(t) {
                    if (t < 0 || t > this.bytes.length - 1) throw new PositionOutOfBoundsError({
                        length: this.bytes.length,
                        position: t
                    })
                },
                decrementPosition(t) {
                    if (t < 0) throw new NegativeOffsetError({
                        offset: t
                    });
                    let r = this.position - t;
                    this.assertPosition(r), this.position = r
                },
                incrementPosition(t) {
                    if (t < 0) throw new NegativeOffsetError({
                        offset: t
                    });
                    let r = this.position + t;
                    this.assertPosition(r), this.position = r
                },
                inspectByte(t) {
                    let r = t ? ? this.position;
                    return this.assertPosition(r), this.bytes[r]
                },
                inspectBytes(t, r) {
                    let a = r ? ? this.position;
                    return this.assertPosition(a + t - 1), this.bytes.subarray(a, a + t)
                },
                inspectUint8(t) {
                    let r = t ? ? this.position;
                    return this.assertPosition(r), this.bytes[r]
                },
                inspectUint16(t) {
                    let r = t ? ? this.position;
                    return this.assertPosition(r + 1), this.dataView.getUint16(r)
                },
                inspectUint24(t) {
                    let r = t ? ? this.position;
                    return this.assertPosition(r + 2), (this.dataView.getUint16(r) << 8) + this.dataView.getUint8(r + 2)
                },
                inspectUint32(t) {
                    let r = t ? ? this.position;
                    return this.assertPosition(r + 3), this.dataView.getUint32(r)
                },
                pushByte(t) {
                    this.assertPosition(this.position), this.bytes[this.position] = t, this.position++
                },
                pushBytes(t) {
                    this.assertPosition(this.position + t.length - 1), this.bytes.set(t, this.position), this.position += t.length
                },
                pushUint8(t) {
                    this.assertPosition(this.position), this.bytes[this.position] = t, this.position++
                },
                pushUint16(t) {
                    this.assertPosition(this.position + 1), this.dataView.setUint16(this.position, t), this.position += 2
                },
                pushUint24(t) {
                    this.assertPosition(this.position + 2), this.dataView.setUint16(this.position, t >> 8), this.dataView.setUint8(this.position + 2, 255 & t), this.position += 3
                },
                pushUint32(t) {
                    this.assertPosition(this.position + 3), this.dataView.setUint32(this.position, t), this.position += 4
                },
                readByte() {
                    let t = this.inspectByte();
                    return this.position++, t
                },
                readBytes(t) {
                    let r = this.inspectBytes(t);
                    return this.position += t, r
                },
                readUint8() {
                    let t = this.inspectUint8();
                    return this.position += 1, t
                },
                readUint16() {
                    let t = this.inspectUint16();
                    return this.position += 2, t
                },
                readUint24() {
                    let t = this.inspectUint24();
                    return this.position += 3, t
                },
                readUint32() {
                    let t = this.inspectUint32();
                    return this.position += 4, t
                },
                setPosition(t) {
                    this.assertPosition(t), this.position = t
                }
            };
            var c = a(79958),
                d = a(19473);

            function toRlp(t, r = "hex") {
                let a = function getEncodable(t) {
                        return Array.isArray(t) ? function(t) {
                            let r = t.reduce((t, r) => t + r.length, 0),
                                a = getSizeOfLength(r),
                                s = r <= 55 ? 1 + r : 1 + a + r;
                            return {
                                length: s,
                                encode(s) {
                                    for (let {
                                            encode: l
                                        } of (r <= 55 ? s.pushByte(192 + r) : (s.pushByte(247 + a), 1 === a ? s.pushUint8(r) : 2 === a ? s.pushUint16(r) : 3 === a ? s.pushUint24(r) : s.pushUint32(r)), t)) l(s)
                                }
                            }
                        }(t.map(t => getEncodable(t))) : function(t) {
                            let r = "string" == typeof t ? (0, c.nr)(t) : t,
                                a = getSizeOfLength(r.length),
                                s = 1 === r.length && r[0] < 128 ? 1 : r.length <= 55 ? 1 + r.length : 1 + a + r.length;
                            return {
                                length: s,
                                encode(t) {
                                    1 === r.length && r[0] < 128 || (r.length <= 55 ? t.pushByte(128 + r.length) : (t.pushByte(183 + a), 1 === a ? t.pushUint8(r.length) : 2 === a ? t.pushUint16(r.length) : 3 === a ? t.pushUint24(r.length) : t.pushUint32(r.length))), t.pushBytes(r)
                                }
                            }
                        }(t)
                    }(t),
                    s = function(t) {
                        let r = Object.create(l);
                        return r.bytes = t, r.dataView = new DataView(t.buffer, t.byteOffset, t.byteLength), r
                    }(new Uint8Array(a.length));
                return (a.encode(s), "hex" === r) ? (0, d.ci)(s.bytes) : s.bytes
            }

            function getSizeOfLength(t) {
                if (t < 256) return 1;
                if (t < 65536) return 2;
                if (t < 16777216) return 3;
                if (t < 4294967296) return 4;
                throw new s.G("Length is too large.")
            }
        },
        50211: function(t, r, a) {
            "use strict";
            a.d(r, {
                g: function() {
                    return serializeAccessList
                }
            });
            var s = a(82663),
                l = a(94069),
                c = a(20886);

            function serializeAccessList(t) {
                if (!t || 0 === t.length) return [];
                let r = [];
                for (let a = 0; a < t.length; a++) {
                    let {
                        address: d,
                        storageKeys: u
                    } = t[a];
                    for (let t = 0; t < u.length; t++)
                        if (u[t].length - 2 != 64) throw new l.JC({
                            storageKey: u[t]
                        });
                    if (!(0, c.U)(d)) throw new s.b({
                        address: d
                    });
                    r.push([d, u])
                }
                return r
            }
        },
        99792: function(t, r, a) {
            "use strict";
            a.d(r, {
                D: function() {
                    return serializeTransaction
                }
            });
            var s = a(94069),
                l = a(62832),
                c = a(23281),
                d = a(19473),
                u = a(64054),
                m = a(82663),
                p = a(89534),
                h = a(78734),
                f = a(3741),
                y = a(20886),
                b = a(10711),
                C = a(50211);

            function serializeTransaction(t, r) {
                let a = (0, b.l)(t);
                return "eip1559" === a ? function(t, r) {
                    let {
                        chainId: a,
                        gas: s,
                        nonce: b,
                        to: E,
                        value: j,
                        maxFeePerGas: I,
                        maxPriorityFeePerGas: O,
                        accessList: P,
                        data: R
                    } = t;
                    ! function(t) {
                        let {
                            chainId: r,
                            maxPriorityFeePerGas: a,
                            gasPrice: s,
                            maxFeePerGas: l,
                            to: c
                        } = t;
                        if (r <= 0) throw new h.hJ({
                            chainId: r
                        });
                        if (c && !(0, y.U)(c)) throw new m.b({
                            address: c
                        });
                        if (s) throw new p.G("`gasPrice` is not a valid EIP-1559 Transaction attribute.");
                        if (l && l > 2 n ** 256 n - 1 n) throw new f.Hh({
                            maxFeePerGas: l
                        });
                        if (a && l && a > l) throw new f.cs({
                            maxFeePerGas: l,
                            maxPriorityFeePerGas: a
                        })
                    }(t);
                    let F = (0, C.g)(P),
                        W = [(0, d.NC)(a), b ? (0, d.NC)(b) : "0x", O ? (0, d.NC)(O) : "0x", I ? (0, d.NC)(I) : "0x", s ? (0, d.NC)(s) : "0x", E ? ? "0x", j ? (0, d.NC)(j) : "0x", R ? ? "0x", F];
                    if (r) {
                        let t = 0 n === r.v ? "0x" : 1 n === r.v ? (0, d.NC)(1) : 27 n === r.v ? "0x" : (0, d.NC)(1);
                        W.push(t, (0, c.f)(r.r), (0, c.f)(r.s))
                    }
                    return (0, l.SM)(["0x02", (0, u.LV)(W)])
                }(t, r) : "eip2930" === a ? function(t, r) {
                    let {
                        chainId: a,
                        gas: s,
                        data: b,
                        nonce: E,
                        to: j,
                        value: I,
                        accessList: O,
                        gasPrice: P
                    } = t;
                    ! function(t) {
                        let {
                            chainId: r,
                            maxPriorityFeePerGas: a,
                            gasPrice: s,
                            maxFeePerGas: l,
                            to: c
                        } = t;
                        if (r <= 0) throw new h.hJ({
                            chainId: r
                        });
                        if (c && !(0, y.U)(c)) throw new m.b({
                            address: c
                        });
                        if (a || l) throw new p.G("`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid EIP-2930 Transaction attribute.");
                        if (s && s > 2 n ** 256 n - 1 n) throw new f.Hh({
                            maxFeePerGas: s
                        })
                    }(t);
                    let R = (0, C.g)(O),
                        F = [(0, d.NC)(a), E ? (0, d.NC)(E) : "0x", P ? (0, d.NC)(P) : "0x", s ? (0, d.NC)(s) : "0x", j ? ? "0x", I ? (0, d.NC)(I) : "0x", b ? ? "0x", R];
                    if (r) {
                        let t = 0 n === r.v ? "0x" : 1 n === r.v ? (0, d.NC)(1) : 27 n === r.v ? "0x" : (0, d.NC)(1);
                        F.push(t, (0, c.f)(r.r), (0, c.f)(r.s))
                    }
                    return (0, l.SM)(["0x01", (0, u.LV)(F)])
                }(t, r) : function(t, r) {
                    let {
                        chainId: a = 0,
                        gas: l,
                        data: c,
                        nonce: b,
                        to: C,
                        value: E,
                        gasPrice: j
                    } = t;
                    ! function(t) {
                        let {
                            chainId: r,
                            maxPriorityFeePerGas: a,
                            gasPrice: s,
                            maxFeePerGas: l,
                            to: c,
                            accessList: d
                        } = t;
                        if (c && !(0, y.U)(c)) throw new m.b({
                            address: c
                        });
                        if (void 0 !== r && r <= 0) throw new h.hJ({
                            chainId: r
                        });
                        if (a || l) throw new p.G("`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid Legacy Transaction attribute.");
                        if (s && s > 2 n ** 256 n - 1 n) throw new f.Hh({
                            maxFeePerGas: s
                        });
                        if (d) throw new p.G("`accessList` is not a valid Legacy Transaction attribute.")
                    }(t);
                    let I = [b ? (0, d.NC)(b) : "0x", j ? (0, d.NC)(j) : "0x", l ? (0, d.NC)(l) : "0x", C ? ? "0x", E ? (0, d.NC)(E) : "0x", c ? ? "0x"];
                    if (r) {
                        let t = (() => {
                            if (a > 0) return BigInt(2 * a) + BigInt(35 n + r.v - 27 n);
                            if (r.v >= 35 n) {
                                let t = (r.v - 35 n) / 2 n;
                                return t > 0 ? r.v : 27 n + (35 n === r.v ? 0 n : 1 n)
                            }
                            let t = 27 n + (27 n === r.v ? 0 n : 1 n);
                            if (r.v !== t) throw new s.vl({
                                v: r.v
                            });
                            return t
                        })();
                        I = [...I, (0, d.NC)(t), r.r, r.s]
                    } else a > 0 && (I = [...I, (0, d.NC)(a), "0x", "0x"]);
                    return (0, u.LV)(I)
                }(t, r)
            }
        },
        18728: function(t) {
            "use strict";
            t.exports = JSON.parse('[{"code":"AD","name":"Andorra"},{"code":"AE","name":"United Arab Emirates"},{"code":"AF","name":"Afghanistan"},{"code":"AG","name":"Antigua and Barbuda"},{"code":"AI","name":"Anguilla"},{"code":"AL","name":"Albania"},{"code":"AM","name":"Armenia"},{"code":"AO","name":"Angola"},{"code":"AQ","name":"Antarctica"},{"code":"AR","name":"Argentina"},{"code":"AS","name":"American Samoa"},{"code":"AT","name":"Austria"},{"code":"AU","name":"Australia"},{"code":"AW","name":"Aruba"},{"code":"AX","name":"\xc5land Islands"},{"code":"AZ","name":"Azerbaijan"},{"code":"BA","name":"Bosnia and Herzegovina"},{"code":"BB","name":"Barbados"},{"code":"BD","name":"Bangladesh"},{"code":"BE","name":"Belgium"},{"code":"BF","name":"Burkina Faso"},{"code":"BG","name":"Bulgaria"},{"code":"BH","name":"Bahrain"},{"code":"BI","name":"Burundi"},{"code":"BJ","name":"Benin"},{"code":"BL","name":"Saint Barth\xe9lemy"},{"code":"BM","name":"Bermuda"},{"code":"BN","name":"Brunei Darussalam"},{"code":"BO","name":"Bolivia, Plurinational State of"},{"code":"BQ","name":"Bonaire, Sint Eustatius and Saba"},{"code":"BR","name":"Brazil"},{"code":"BS","name":"Bahamas"},{"code":"BT","name":"Bhutan"},{"code":"BV","name":"Bouvet Island"},{"code":"BW","name":"Botswana"},{"code":"BY","name":"Belarus"},{"code":"BZ","name":"Belize"},{"code":"CA","name":"Canada"},{"code":"CC","name":"Cocos (Keeling) Islands"},{"code":"CD","name":"Congo, Democratic Republic of the"},{"code":"CF","name":"Central African Republic"},{"code":"CG","name":"Congo"},{"code":"CH","name":"Switzerland"},{"code":"CI","name":"C\xf4te d\'Ivoire"},{"code":"CK","name":"Cook Islands"},{"code":"CL","name":"Chile"},{"code":"CM","name":"Cameroon"},{"code":"CN","name":"China"},{"code":"CO","name":"Colombia"},{"code":"CR","name":"Costa Rica"},{"code":"CU","name":"Cuba"},{"code":"CV","name":"Cabo Verde"},{"code":"CW","name":"Cura\xe7ao"},{"code":"CX","name":"Christmas Island"},{"code":"CY","name":"Cyprus"},{"code":"CZ","name":"Czechia"},{"code":"DE","name":"Germany"},{"code":"DJ","name":"Djibouti"},{"code":"DK","name":"Denmark"},{"code":"DM","name":"Dominica"},{"code":"DO","name":"Dominican Republic"},{"code":"DZ","name":"Algeria"},{"code":"EC","name":"Ecuador"},{"code":"EE","name":"Estonia"},{"code":"EG","name":"Egypt"},{"code":"EH","name":"Western Sahara"},{"code":"ER","name":"Eritrea"},{"code":"ES","name":"Spain"},{"code":"ET","name":"Ethiopia"},{"code":"FI","name":"Finland"},{"code":"FJ","name":"Fiji"},{"code":"FK","name":"Falkland Islands (Malvinas)"},{"code":"FM","name":"Micronesia, Federated States of"},{"code":"FO","name":"Faroe Islands"},{"code":"FR","name":"France"},{"code":"GA","name":"Gabon"},{"code":"GB","name":"United Kingdom of Great Britain and Northern Ireland"},{"code":"GD","name":"Grenada"},{"code":"GE","name":"Georgia"},{"code":"GF","name":"French Guiana"},{"code":"GG","name":"Guernsey"},{"code":"GH","name":"Ghana"},{"code":"GI","name":"Gibraltar"},{"code":"GL","name":"Greenland"},{"code":"GM","name":"Gambia"},{"code":"GN","name":"Guinea"},{"code":"GP","name":"Guadeloupe"},{"code":"GQ","name":"Equatorial Guinea"},{"code":"GR","name":"Greece"},{"code":"GS","name":"South Georgia and the South Sandwich Islands"},{"code":"GT","name":"Guatemala"},{"code":"GU","name":"Guam"},{"code":"GW","name":"Guinea-Bissau"},{"code":"GY","name":"Guyana"},{"code":"HK","name":"Hong Kong"},{"code":"HM","name":"Heard Island and McDonald Islands"},{"code":"HN","name":"Honduras"},{"code":"HR","name":"Croatia"},{"code":"HT","name":"Haiti"},{"code":"HU","name":"Hungary"},{"code":"ID","name":"Indonesia"},{"code":"IE","name":"Ireland"},{"code":"IL","name":"Israel"},{"code":"IM","name":"Isle of Man"},{"code":"IN","name":"India"},{"code":"IO","name":"British Indian Ocean Territory"},{"code":"IQ","name":"Iraq"},{"code":"IR","name":"Iran, Islamic Republic of"},{"code":"IS","name":"Iceland"},{"code":"IT","name":"Italy"},{"code":"JE","name":"Jersey"},{"code":"JM","name":"Jamaica"},{"code":"JO","name":"Jordan"},{"code":"JP","name":"Japan"},{"code":"KE","name":"Kenya"},{"code":"KG","name":"Kyrgyzstan"},{"code":"KH","name":"Cambodia"},{"code":"KI","name":"Kiribati"},{"code":"KM","name":"Comoros"},{"code":"KN","name":"Saint Kitts and Nevis"},{"code":"KP","name":"Korea, Democratic People\'s Republic of"},{"code":"KR","name":"Korea, Republic of"},{"code":"KW","name":"Kuwait"},{"code":"KY","name":"Cayman Islands"},{"code":"KZ","name":"Kazakhstan"},{"code":"LA","name":"Lao People\'s Democratic Republic"},{"code":"LB","name":"Lebanon"},{"code":"LC","name":"Saint Lucia"},{"code":"LI","name":"Liechtenstein"},{"code":"LK","name":"Sri Lanka"},{"code":"LR","name":"Liberia"},{"code":"LS","name":"Lesotho"},{"code":"LT","name":"Lithuania"},{"code":"LU","name":"Luxembourg"},{"code":"LV","name":"Latvia"},{"code":"LY","name":"Libya"},{"code":"MA","name":"Morocco"},{"code":"MC","name":"Monaco"},{"code":"MD","name":"Moldova, Republic of"},{"code":"ME","name":"Montenegro"},{"code":"MF","name":"Saint Martin, (French part)"},{"code":"MG","name":"Madagascar"},{"code":"MH","name":"Marshall Islands"},{"code":"MK","name":"North Macedonia"},{"code":"ML","name":"Mali"},{"code":"MM","name":"Myanmar"},{"code":"MN","name":"Mongolia"},{"code":"MO","name":"Macao"},{"code":"MP","name":"Northern Mariana Islands"},{"code":"MQ","name":"Martinique"},{"code":"MR","name":"Mauritania"},{"code":"MS","name":"Montserrat"},{"code":"MT","name":"Malta"},{"code":"MU","name":"Mauritius"},{"code":"MV","name":"Maldives"},{"code":"MW","name":"Malawi"},{"code":"MX","name":"Mexico"},{"code":"MY","name":"Malaysia"},{"code":"MZ","name":"Mozambique"},{"code":"NA","name":"Namibia"},{"code":"NC","name":"New Caledonia"},{"code":"NE","name":"Niger"},{"code":"NF","name":"Norfolk Island"},{"code":"NG","name":"Nigeria"},{"code":"NI","name":"Nicaragua"},{"code":"NL","name":"Netherlands"},{"code":"NO","name":"Norway"},{"code":"NP","name":"Nepal"},{"code":"NR","name":"Nauru"},{"code":"NU","name":"Niue"},{"code":"NZ","name":"New Zealand"},{"code":"OM","name":"Oman"},{"code":"PA","name":"Panama"},{"code":"PE","name":"Peru"},{"code":"PF","name":"French Polynesia"},{"code":"PG","name":"Papua New Guinea"},{"code":"PH","name":"Philippines"},{"code":"PK","name":"Pakistan"},{"code":"PL","name":"Poland"},{"code":"PM","name":"Saint Pierre and Miquelon"},{"code":"PN","name":"Pitcairn"},{"code":"PR","name":"Puerto Rico"},{"code":"PS","name":"Palestine, State of"},{"code":"PT","name":"Portugal"},{"code":"PW","name":"Palau"},{"code":"PY","name":"Paraguay"},{"code":"QA","name":"Qatar"},{"code":"RE","name":"R\xe9union"},{"code":"RO","name":"Romania"},{"code":"RS","name":"Serbia"},{"code":"RU","name":"Russian Federation"},{"code":"RW","name":"Rwanda"},{"code":"SA","name":"Saudi Arabia"},{"code":"SB","name":"Solomon Islands"},{"code":"SC","name":"Seychelles"},{"code":"SD","name":"Sudan"},{"code":"SE","name":"Sweden"},{"code":"SG","name":"Singapore"},{"code":"SH","name":"Saint Helena, Ascension and Tristan da Cunha"},{"code":"SI","name":"Slovenia"},{"code":"SJ","name":"Svalbard and Jan Mayen"},{"code":"SK","name":"Slovakia"},{"code":"SL","name":"Sierra Leone"},{"code":"SM","name":"San Marino"},{"code":"SN","name":"Senegal"},{"code":"SO","name":"Somalia"},{"code":"SR","name":"Suriname"},{"code":"SS","name":"South Sudan"},{"code":"ST","name":"Sao Tome and Principe"},{"code":"SV","name":"El Salvador"},{"code":"SX","name":"Sint Maarten, (Dutch part)"},{"code":"SY","name":"Syrian Arab Republic"},{"code":"SZ","name":"Eswatini"},{"code":"TC","name":"Turks and Caicos Islands"},{"code":"TD","name":"Chad"},{"code":"TF","name":"French Southern Territories"},{"code":"TG","name":"Togo"},{"code":"TH","name":"Thailand"},{"code":"TJ","name":"Tajikistan"},{"code":"TK","name":"Tokelau"},{"code":"TL","name":"Timor-Leste"},{"code":"TM","name":"Turkmenistan"},{"code":"TN","name":"Tunisia"},{"code":"TO","name":"Tonga"},{"code":"TR","name":"T\xfcrkiye"},{"code":"TT","name":"Trinidad and Tobago"},{"code":"TV","name":"Tuvalu"},{"code":"TW","name":"Taiwan, Province of China"},{"code":"TZ","name":"Tanzania, United Republic of"},{"code":"UA","name":"Ukraine"},{"code":"UG","name":"Uganda"},{"code":"UM","name":"United States Minor Outlying Islands"},{"code":"US","name":"United States of America"},{"code":"UY","name":"Uruguay"},{"code":"UZ","name":"Uzbekistan"},{"code":"VA","name":"Holy See"},{"code":"VC","name":"Saint Vincent and the Grenadines"},{"code":"VE","name":"Venezuela, Bolivarian Republic of"},{"code":"VG","name":"Virgin Islands, British"},{"code":"VI","name":"Virgin Islands, U.S."},{"code":"VN","name":"Viet Nam"},{"code":"VU","name":"Vanuatu"},{"code":"WF","name":"Wallis and Futuna"},{"code":"WS","name":"Samoa"},{"code":"YE","name":"Yemen"},{"code":"YT","name":"Mayotte"},{"code":"ZA","name":"South Africa"},{"code":"ZM","name":"Zambia"},{"code":"ZW","name":"Zimbabwe"}]')
        }
    }
]);